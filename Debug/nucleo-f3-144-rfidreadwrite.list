
nucleo-f3-144-rfidreadwrite.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f20  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080060b4  080060b4  000160b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060ec  080060ec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080060ec  080060ec  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080060ec  080060ec  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060ec  080060ec  000160ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060f0  080060f0  000160f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080060f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000003b4  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003c0  200003c0  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e5b4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cf0  00000000  00000000  0002e5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000970  00000000  00000000  000302e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008c8  00000000  00000000  00030c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020067  00000000  00000000  00031518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cae6  00000000  00000000  0005157f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5246  00000000  00000000  0005e065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001232ab  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000264c  00000000  00000000  001232fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800609c 	.word	0x0800609c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	0800609c 	.word	0x0800609c

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f000 fabc 	bl	8000754 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 f80a 	bl	80001f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e0:	f000 f8ec 	bl	80003bc <MX_GPIO_Init>
  MX_RTC_Init();
 80001e4:	f000 f86e 	bl	80002c4 <MX_RTC_Init>
  MX_USART3_UART_Init();
 80001e8:	f000 f892 	bl	8000310 <MX_USART3_UART_Init>
  MX_USB_PCD_Init();
 80001ec:	f000 f8c0 	bl	8000370 <MX_USB_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001f0:	e7fe      	b.n	80001f0 <main+0x1c>
	...

080001f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b0a6      	sub	sp, #152	; 0x98
 80001f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80001fe:	2228      	movs	r2, #40	; 0x28
 8000200:	2100      	movs	r1, #0
 8000202:	4618      	mov	r0, r3
 8000204:	f005 ff42 	bl	800608c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000208:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800020c:	2200      	movs	r2, #0
 800020e:	601a      	str	r2, [r3, #0]
 8000210:	605a      	str	r2, [r3, #4]
 8000212:	609a      	str	r2, [r3, #8]
 8000214:	60da      	str	r2, [r3, #12]
 8000216:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000218:	1d3b      	adds	r3, r7, #4
 800021a:	2258      	movs	r2, #88	; 0x58
 800021c:	2100      	movs	r1, #0
 800021e:	4618      	mov	r0, r3
 8000220:	f005 ff34 	bl	800608c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000224:	2309      	movs	r3, #9
 8000226:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000228:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800022c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800022e:	2301      	movs	r3, #1
 8000230:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000232:	2301      	movs	r3, #1
 8000234:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000238:	2302      	movs	r3, #2
 800023a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800023e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000242:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000246:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800024a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800024e:	2300      	movs	r3, #0
 8000250:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000254:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000258:	4618      	mov	r0, r3
 800025a:	f002 f86f 	bl	800233c <HAL_RCC_OscConfig>
 800025e:	4603      	mov	r3, r0
 8000260:	2b00      	cmp	r3, #0
 8000262:	d001      	beq.n	8000268 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000264:	f000 f94c 	bl	8000500 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000268:	230f      	movs	r3, #15
 800026a:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800026c:	2302      	movs	r3, #2
 800026e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000270:	2300      	movs	r3, #0
 8000272:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000274:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000278:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800027e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000282:	2102      	movs	r1, #2
 8000284:	4618      	mov	r0, r3
 8000286:	f003 f8ad 	bl	80033e4 <HAL_RCC_ClockConfig>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d001      	beq.n	8000294 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000290:	f000 f936 	bl	8000500 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART3
 8000294:	4b0a      	ldr	r3, [pc, #40]	; (80002c0 <SystemClock_Config+0xcc>)
 8000296:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000298:	2300      	movs	r3, #0
 800029a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800029c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80002a0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80002a2:	2300      	movs	r3, #0
 80002a4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	4618      	mov	r0, r3
 80002aa:	f003 fad1 	bl	8003850 <HAL_RCCEx_PeriphCLKConfig>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80002b4:	f000 f924 	bl	8000500 <Error_Handler>
  }
}
 80002b8:	bf00      	nop
 80002ba:	3798      	adds	r7, #152	; 0x98
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	00030004 	.word	0x00030004

080002c4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80002c8:	4b0f      	ldr	r3, [pc, #60]	; (8000308 <MX_RTC_Init+0x44>)
 80002ca:	4a10      	ldr	r2, [pc, #64]	; (800030c <MX_RTC_Init+0x48>)
 80002cc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80002ce:	4b0e      	ldr	r3, [pc, #56]	; (8000308 <MX_RTC_Init+0x44>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80002d4:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <MX_RTC_Init+0x44>)
 80002d6:	227f      	movs	r2, #127	; 0x7f
 80002d8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80002da:	4b0b      	ldr	r3, [pc, #44]	; (8000308 <MX_RTC_Init+0x44>)
 80002dc:	22ff      	movs	r2, #255	; 0xff
 80002de:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80002e0:	4b09      	ldr	r3, [pc, #36]	; (8000308 <MX_RTC_Init+0x44>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80002e6:	4b08      	ldr	r3, [pc, #32]	; (8000308 <MX_RTC_Init+0x44>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80002ec:	4b06      	ldr	r3, [pc, #24]	; (8000308 <MX_RTC_Init+0x44>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80002f2:	4805      	ldr	r0, [pc, #20]	; (8000308 <MX_RTC_Init+0x44>)
 80002f4:	f003 fcca 	bl	8003c8c <HAL_RTC_Init>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80002fe:	f000 f8ff 	bl	8000500 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000302:	bf00      	nop
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	20000028 	.word	0x20000028
 800030c:	40002800 	.word	0x40002800

08000310 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000314:	4b14      	ldr	r3, [pc, #80]	; (8000368 <MX_USART3_UART_Init+0x58>)
 8000316:	4a15      	ldr	r2, [pc, #84]	; (800036c <MX_USART3_UART_Init+0x5c>)
 8000318:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 800031a:	4b13      	ldr	r3, [pc, #76]	; (8000368 <MX_USART3_UART_Init+0x58>)
 800031c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000320:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000322:	4b11      	ldr	r3, [pc, #68]	; (8000368 <MX_USART3_UART_Init+0x58>)
 8000324:	2200      	movs	r2, #0
 8000326:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000328:	4b0f      	ldr	r3, [pc, #60]	; (8000368 <MX_USART3_UART_Init+0x58>)
 800032a:	2200      	movs	r2, #0
 800032c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800032e:	4b0e      	ldr	r3, [pc, #56]	; (8000368 <MX_USART3_UART_Init+0x58>)
 8000330:	2200      	movs	r2, #0
 8000332:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000334:	4b0c      	ldr	r3, [pc, #48]	; (8000368 <MX_USART3_UART_Init+0x58>)
 8000336:	220c      	movs	r2, #12
 8000338:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800033a:	4b0b      	ldr	r3, [pc, #44]	; (8000368 <MX_USART3_UART_Init+0x58>)
 800033c:	2200      	movs	r2, #0
 800033e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000340:	4b09      	ldr	r3, [pc, #36]	; (8000368 <MX_USART3_UART_Init+0x58>)
 8000342:	2200      	movs	r2, #0
 8000344:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000346:	4b08      	ldr	r3, [pc, #32]	; (8000368 <MX_USART3_UART_Init+0x58>)
 8000348:	2200      	movs	r2, #0
 800034a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800034c:	4b06      	ldr	r3, [pc, #24]	; (8000368 <MX_USART3_UART_Init+0x58>)
 800034e:	2200      	movs	r2, #0
 8000350:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000352:	4805      	ldr	r0, [pc, #20]	; (8000368 <MX_USART3_UART_Init+0x58>)
 8000354:	f003 fda0 	bl	8003e98 <HAL_UART_Init>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800035e:	f000 f8cf 	bl	8000500 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000362:	bf00      	nop
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	20000048 	.word	0x20000048
 800036c:	40004800 	.word	0x40004800

08000370 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000374:	4b0f      	ldr	r3, [pc, #60]	; (80003b4 <MX_USB_PCD_Init+0x44>)
 8000376:	4a10      	ldr	r2, [pc, #64]	; (80003b8 <MX_USB_PCD_Init+0x48>)
 8000378:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800037a:	4b0e      	ldr	r3, [pc, #56]	; (80003b4 <MX_USB_PCD_Init+0x44>)
 800037c:	2208      	movs	r2, #8
 800037e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000380:	4b0c      	ldr	r3, [pc, #48]	; (80003b4 <MX_USB_PCD_Init+0x44>)
 8000382:	2202      	movs	r2, #2
 8000384:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000386:	4b0b      	ldr	r3, [pc, #44]	; (80003b4 <MX_USB_PCD_Init+0x44>)
 8000388:	2202      	movs	r2, #2
 800038a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800038c:	4b09      	ldr	r3, [pc, #36]	; (80003b4 <MX_USB_PCD_Init+0x44>)
 800038e:	2200      	movs	r2, #0
 8000390:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000392:	4b08      	ldr	r3, [pc, #32]	; (80003b4 <MX_USB_PCD_Init+0x44>)
 8000394:	2200      	movs	r2, #0
 8000396:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000398:	4b06      	ldr	r3, [pc, #24]	; (80003b4 <MX_USB_PCD_Init+0x44>)
 800039a:	2200      	movs	r2, #0
 800039c:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800039e:	4805      	ldr	r0, [pc, #20]	; (80003b4 <MX_USB_PCD_Init+0x44>)
 80003a0:	f000 fcf2 	bl	8000d88 <HAL_PCD_Init>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 80003aa:	f000 f8a9 	bl	8000500 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80003ae:	bf00      	nop
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	200000d0 	.word	0x200000d0
 80003b8:	40005c00 	.word	0x40005c00

080003bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b08c      	sub	sp, #48	; 0x30
 80003c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c2:	f107 031c 	add.w	r3, r7, #28
 80003c6:	2200      	movs	r2, #0
 80003c8:	601a      	str	r2, [r3, #0]
 80003ca:	605a      	str	r2, [r3, #4]
 80003cc:	609a      	str	r2, [r3, #8]
 80003ce:	60da      	str	r2, [r3, #12]
 80003d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003d2:	4b47      	ldr	r3, [pc, #284]	; (80004f0 <MX_GPIO_Init+0x134>)
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	4a46      	ldr	r2, [pc, #280]	; (80004f0 <MX_GPIO_Init+0x134>)
 80003d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003dc:	6153      	str	r3, [r2, #20]
 80003de:	4b44      	ldr	r3, [pc, #272]	; (80004f0 <MX_GPIO_Init+0x134>)
 80003e0:	695b      	ldr	r3, [r3, #20]
 80003e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80003e6:	61bb      	str	r3, [r7, #24]
 80003e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003ea:	4b41      	ldr	r3, [pc, #260]	; (80004f0 <MX_GPIO_Init+0x134>)
 80003ec:	695b      	ldr	r3, [r3, #20]
 80003ee:	4a40      	ldr	r2, [pc, #256]	; (80004f0 <MX_GPIO_Init+0x134>)
 80003f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003f4:	6153      	str	r3, [r2, #20]
 80003f6:	4b3e      	ldr	r3, [pc, #248]	; (80004f0 <MX_GPIO_Init+0x134>)
 80003f8:	695b      	ldr	r3, [r3, #20]
 80003fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80003fe:	617b      	str	r3, [r7, #20]
 8000400:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000402:	4b3b      	ldr	r3, [pc, #236]	; (80004f0 <MX_GPIO_Init+0x134>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	4a3a      	ldr	r2, [pc, #232]	; (80004f0 <MX_GPIO_Init+0x134>)
 8000408:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800040c:	6153      	str	r3, [r2, #20]
 800040e:	4b38      	ldr	r3, [pc, #224]	; (80004f0 <MX_GPIO_Init+0x134>)
 8000410:	695b      	ldr	r3, [r3, #20]
 8000412:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000416:	613b      	str	r3, [r7, #16]
 8000418:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800041a:	4b35      	ldr	r3, [pc, #212]	; (80004f0 <MX_GPIO_Init+0x134>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	4a34      	ldr	r2, [pc, #208]	; (80004f0 <MX_GPIO_Init+0x134>)
 8000420:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000424:	6153      	str	r3, [r2, #20]
 8000426:	4b32      	ldr	r3, [pc, #200]	; (80004f0 <MX_GPIO_Init+0x134>)
 8000428:	695b      	ldr	r3, [r3, #20]
 800042a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800042e:	60fb      	str	r3, [r7, #12]
 8000430:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000432:	4b2f      	ldr	r3, [pc, #188]	; (80004f0 <MX_GPIO_Init+0x134>)
 8000434:	695b      	ldr	r3, [r3, #20]
 8000436:	4a2e      	ldr	r2, [pc, #184]	; (80004f0 <MX_GPIO_Init+0x134>)
 8000438:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800043c:	6153      	str	r3, [r2, #20]
 800043e:	4b2c      	ldr	r3, [pc, #176]	; (80004f0 <MX_GPIO_Init+0x134>)
 8000440:	695b      	ldr	r3, [r3, #20]
 8000442:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000446:	60bb      	str	r3, [r7, #8]
 8000448:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800044a:	4b29      	ldr	r3, [pc, #164]	; (80004f0 <MX_GPIO_Init+0x134>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	4a28      	ldr	r2, [pc, #160]	; (80004f0 <MX_GPIO_Init+0x134>)
 8000450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000454:	6153      	str	r3, [r2, #20]
 8000456:	4b26      	ldr	r3, [pc, #152]	; (80004f0 <MX_GPIO_Init+0x134>)
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800045e:	607b      	str	r3, [r7, #4]
 8000460:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000462:	2200      	movs	r2, #0
 8000464:	f244 0181 	movw	r1, #16513	; 0x4081
 8000468:	4822      	ldr	r0, [pc, #136]	; (80004f4 <MX_GPIO_Init+0x138>)
 800046a:	f000 fc75 	bl	8000d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800046e:	2200      	movs	r2, #0
 8000470:	2140      	movs	r1, #64	; 0x40
 8000472:	4821      	ldr	r0, [pc, #132]	; (80004f8 <MX_GPIO_Init+0x13c>)
 8000474:	f000 fc70 	bl	8000d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000478:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800047c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800047e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000482:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000484:	2300      	movs	r3, #0
 8000486:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000488:	f107 031c 	add.w	r3, r7, #28
 800048c:	4619      	mov	r1, r3
 800048e:	481b      	ldr	r0, [pc, #108]	; (80004fc <MX_GPIO_Init+0x140>)
 8000490:	f000 fad8 	bl	8000a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000494:	f244 0381 	movw	r3, #16513	; 0x4081
 8000498:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800049a:	2301      	movs	r3, #1
 800049c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049e:	2300      	movs	r3, #0
 80004a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a2:	2300      	movs	r3, #0
 80004a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004a6:	f107 031c 	add.w	r3, r7, #28
 80004aa:	4619      	mov	r1, r3
 80004ac:	4811      	ldr	r0, [pc, #68]	; (80004f4 <MX_GPIO_Init+0x138>)
 80004ae:	f000 fac9 	bl	8000a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80004b2:	2340      	movs	r3, #64	; 0x40
 80004b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b6:	2301      	movs	r3, #1
 80004b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ba:	2300      	movs	r3, #0
 80004bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004be:	2300      	movs	r3, #0
 80004c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80004c2:	f107 031c 	add.w	r3, r7, #28
 80004c6:	4619      	mov	r1, r3
 80004c8:	480b      	ldr	r0, [pc, #44]	; (80004f8 <MX_GPIO_Init+0x13c>)
 80004ca:	f000 fabb 	bl	8000a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80004ce:	2380      	movs	r3, #128	; 0x80
 80004d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004d2:	2300      	movs	r3, #0
 80004d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d6:	2300      	movs	r3, #0
 80004d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80004da:	f107 031c 	add.w	r3, r7, #28
 80004de:	4619      	mov	r1, r3
 80004e0:	4805      	ldr	r0, [pc, #20]	; (80004f8 <MX_GPIO_Init+0x13c>)
 80004e2:	f000 faaf 	bl	8000a44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004e6:	bf00      	nop
 80004e8:	3730      	adds	r7, #48	; 0x30
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	40021000 	.word	0x40021000
 80004f4:	48000400 	.word	0x48000400
 80004f8:	48001800 	.word	0x48001800
 80004fc:	48000800 	.word	0x48000800

08000500 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000504:	b672      	cpsid	i
}
 8000506:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000508:	e7fe      	b.n	8000508 <Error_Handler+0x8>
	...

0800050c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000512:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <HAL_MspInit+0x44>)
 8000514:	699b      	ldr	r3, [r3, #24]
 8000516:	4a0e      	ldr	r2, [pc, #56]	; (8000550 <HAL_MspInit+0x44>)
 8000518:	f043 0301 	orr.w	r3, r3, #1
 800051c:	6193      	str	r3, [r2, #24]
 800051e:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <HAL_MspInit+0x44>)
 8000520:	699b      	ldr	r3, [r3, #24]
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800052a:	4b09      	ldr	r3, [pc, #36]	; (8000550 <HAL_MspInit+0x44>)
 800052c:	69db      	ldr	r3, [r3, #28]
 800052e:	4a08      	ldr	r2, [pc, #32]	; (8000550 <HAL_MspInit+0x44>)
 8000530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000534:	61d3      	str	r3, [r2, #28]
 8000536:	4b06      	ldr	r3, [pc, #24]	; (8000550 <HAL_MspInit+0x44>)
 8000538:	69db      	ldr	r3, [r3, #28]
 800053a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800053e:	603b      	str	r3, [r7, #0]
 8000540:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000542:	bf00      	nop
 8000544:	370c      	adds	r7, #12
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	40021000 	.word	0x40021000

08000554 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000554:	b480      	push	{r7}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a0d      	ldr	r2, [pc, #52]	; (8000598 <HAL_RTC_MspInit+0x44>)
 8000562:	4293      	cmp	r3, r2
 8000564:	d111      	bne.n	800058a <HAL_RTC_MspInit+0x36>
 8000566:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800056a:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	fa93 f3a3 	rbit	r3, r3
 8000572:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000574:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000576:	fab3 f383 	clz	r3, r3
 800057a:	b2db      	uxtb	r3, r3
 800057c:	461a      	mov	r2, r3
 800057e:	4b07      	ldr	r3, [pc, #28]	; (800059c <HAL_RTC_MspInit+0x48>)
 8000580:	4413      	add	r3, r2
 8000582:	009b      	lsls	r3, r3, #2
 8000584:	461a      	mov	r2, r3
 8000586:	2301      	movs	r3, #1
 8000588:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800058a:	bf00      	nop
 800058c:	3714      	adds	r7, #20
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	40002800 	.word	0x40002800
 800059c:	10908100 	.word	0x10908100

080005a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08a      	sub	sp, #40	; 0x28
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a8:	f107 0314 	add.w	r3, r7, #20
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a17      	ldr	r2, [pc, #92]	; (800061c <HAL_UART_MspInit+0x7c>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d128      	bne.n	8000614 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80005c2:	4b17      	ldr	r3, [pc, #92]	; (8000620 <HAL_UART_MspInit+0x80>)
 80005c4:	69db      	ldr	r3, [r3, #28]
 80005c6:	4a16      	ldr	r2, [pc, #88]	; (8000620 <HAL_UART_MspInit+0x80>)
 80005c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005cc:	61d3      	str	r3, [r2, #28]
 80005ce:	4b14      	ldr	r3, [pc, #80]	; (8000620 <HAL_UART_MspInit+0x80>)
 80005d0:	69db      	ldr	r3, [r3, #28]
 80005d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005d6:	613b      	str	r3, [r7, #16]
 80005d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80005da:	4b11      	ldr	r3, [pc, #68]	; (8000620 <HAL_UART_MspInit+0x80>)
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	4a10      	ldr	r2, [pc, #64]	; (8000620 <HAL_UART_MspInit+0x80>)
 80005e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e4:	6153      	str	r3, [r2, #20]
 80005e6:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <HAL_UART_MspInit+0x80>)
 80005e8:	695b      	ldr	r3, [r3, #20]
 80005ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80005f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80005f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005f8:	2302      	movs	r3, #2
 80005fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fc:	2300      	movs	r3, #0
 80005fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000600:	2303      	movs	r3, #3
 8000602:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000604:	2307      	movs	r3, #7
 8000606:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000608:	f107 0314 	add.w	r3, r7, #20
 800060c:	4619      	mov	r1, r3
 800060e:	4805      	ldr	r0, [pc, #20]	; (8000624 <HAL_UART_MspInit+0x84>)
 8000610:	f000 fa18 	bl	8000a44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000614:	bf00      	nop
 8000616:	3728      	adds	r7, #40	; 0x28
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40004800 	.word	0x40004800
 8000620:	40021000 	.word	0x40021000
 8000624:	48000c00 	.word	0x48000c00

08000628 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a0d      	ldr	r2, [pc, #52]	; (800066c <HAL_PCD_MspInit+0x44>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d113      	bne.n	8000662 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800063a:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <HAL_PCD_MspInit+0x48>)
 800063c:	69db      	ldr	r3, [r3, #28]
 800063e:	4a0c      	ldr	r2, [pc, #48]	; (8000670 <HAL_PCD_MspInit+0x48>)
 8000640:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000644:	61d3      	str	r3, [r2, #28]
 8000646:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <HAL_PCD_MspInit+0x48>)
 8000648:	69db      	ldr	r3, [r3, #28]
 800064a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	68fb      	ldr	r3, [r7, #12]
    /* USB interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8000652:	2200      	movs	r2, #0
 8000654:	2100      	movs	r1, #0
 8000656:	2014      	movs	r0, #20
 8000658:	f000 f9bd 	bl	80009d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800065c:	2014      	movs	r0, #20
 800065e:	f000 f9d6 	bl	8000a0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000662:	bf00      	nop
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40005c00 	.word	0x40005c00
 8000670:	40021000 	.word	0x40021000

08000674 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000678:	e7fe      	b.n	8000678 <NMI_Handler+0x4>

0800067a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800067a:	b480      	push	{r7}
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800067e:	e7fe      	b.n	800067e <HardFault_Handler+0x4>

08000680 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000684:	e7fe      	b.n	8000684 <MemManage_Handler+0x4>

08000686 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000686:	b480      	push	{r7}
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800068a:	e7fe      	b.n	800068a <BusFault_Handler+0x4>

0800068c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000690:	e7fe      	b.n	8000690 <UsageFault_Handler+0x4>

08000692 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000692:	b480      	push	{r7}
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000696:	bf00      	nop
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr

080006a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006a4:	bf00      	nop
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr

080006ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ae:	b480      	push	{r7}
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006b2:	bf00      	nop
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006c0:	f000 f88e 	bl	80007e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80006cc:	4802      	ldr	r0, [pc, #8]	; (80006d8 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80006ce:	f000 fc2d 	bl	8000f2c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	200000d0 	.word	0x200000d0

080006dc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <SystemInit+0x20>)
 80006e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006e6:	4a05      	ldr	r2, [pc, #20]	; (80006fc <SystemInit+0x20>)
 80006e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	e000ed00 	.word	0xe000ed00

08000700 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000700:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000738 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000704:	f7ff ffea 	bl	80006dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000708:	480c      	ldr	r0, [pc, #48]	; (800073c <LoopForever+0x6>)
  ldr r1, =_edata
 800070a:	490d      	ldr	r1, [pc, #52]	; (8000740 <LoopForever+0xa>)
  ldr r2, =_sidata
 800070c:	4a0d      	ldr	r2, [pc, #52]	; (8000744 <LoopForever+0xe>)
  movs r3, #0
 800070e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000710:	e002      	b.n	8000718 <LoopCopyDataInit>

08000712 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000712:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000714:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000716:	3304      	adds	r3, #4

08000718 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000718:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800071a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800071c:	d3f9      	bcc.n	8000712 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800071e:	4a0a      	ldr	r2, [pc, #40]	; (8000748 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000720:	4c0a      	ldr	r4, [pc, #40]	; (800074c <LoopForever+0x16>)
  movs r3, #0
 8000722:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000724:	e001      	b.n	800072a <LoopFillZerobss>

08000726 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000726:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000728:	3204      	adds	r2, #4

0800072a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800072a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800072c:	d3fb      	bcc.n	8000726 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800072e:	f005 fc89 	bl	8006044 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000732:	f7ff fd4f 	bl	80001d4 <main>

08000736 <LoopForever>:

LoopForever:
    b LoopForever
 8000736:	e7fe      	b.n	8000736 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000738:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800073c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000740:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000744:	080060f4 	.word	0x080060f4
  ldr r2, =_sbss
 8000748:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800074c:	200003c0 	.word	0x200003c0

08000750 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000750:	e7fe      	b.n	8000750 <ADC1_2_IRQHandler>
	...

08000754 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000758:	4b08      	ldr	r3, [pc, #32]	; (800077c <HAL_Init+0x28>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a07      	ldr	r2, [pc, #28]	; (800077c <HAL_Init+0x28>)
 800075e:	f043 0310 	orr.w	r3, r3, #16
 8000762:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000764:	2003      	movs	r0, #3
 8000766:	f000 f92b 	bl	80009c0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800076a:	2000      	movs	r0, #0
 800076c:	f000 f808 	bl	8000780 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000770:	f7ff fecc 	bl	800050c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000774:	2300      	movs	r3, #0
}
 8000776:	4618      	mov	r0, r3
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40022000 	.word	0x40022000

08000780 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000788:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <HAL_InitTick+0x54>)
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <HAL_InitTick+0x58>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	4619      	mov	r1, r3
 8000792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000796:	fbb3 f3f1 	udiv	r3, r3, r1
 800079a:	fbb2 f3f3 	udiv	r3, r2, r3
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 f943 	bl	8000a2a <HAL_SYSTICK_Config>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007aa:	2301      	movs	r3, #1
 80007ac:	e00e      	b.n	80007cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2b0f      	cmp	r3, #15
 80007b2:	d80a      	bhi.n	80007ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007b4:	2200      	movs	r2, #0
 80007b6:	6879      	ldr	r1, [r7, #4]
 80007b8:	f04f 30ff 	mov.w	r0, #4294967295
 80007bc:	f000 f90b 	bl	80009d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007c0:	4a06      	ldr	r2, [pc, #24]	; (80007dc <HAL_InitTick+0x5c>)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80007c6:	2300      	movs	r3, #0
 80007c8:	e000      	b.n	80007cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007ca:	2301      	movs	r3, #1
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20000000 	.word	0x20000000
 80007d8:	20000008 	.word	0x20000008
 80007dc:	20000004 	.word	0x20000004

080007e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <HAL_IncTick+0x20>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	461a      	mov	r2, r3
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <HAL_IncTick+0x24>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4413      	add	r3, r2
 80007f0:	4a04      	ldr	r2, [pc, #16]	; (8000804 <HAL_IncTick+0x24>)
 80007f2:	6013      	str	r3, [r2, #0]
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	20000008 	.word	0x20000008
 8000804:	200003bc 	.word	0x200003bc

08000808 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  return uwTick;  
 800080c:	4b03      	ldr	r3, [pc, #12]	; (800081c <HAL_GetTick+0x14>)
 800080e:	681b      	ldr	r3, [r3, #0]
}
 8000810:	4618      	mov	r0, r3
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	200003bc 	.word	0x200003bc

08000820 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000820:	b480      	push	{r7}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	f003 0307 	and.w	r3, r3, #7
 800082e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <__NVIC_SetPriorityGrouping+0x44>)
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000836:	68ba      	ldr	r2, [r7, #8]
 8000838:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800083c:	4013      	ands	r3, r2
 800083e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000848:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800084c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000852:	4a04      	ldr	r2, [pc, #16]	; (8000864 <__NVIC_SetPriorityGrouping+0x44>)
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	60d3      	str	r3, [r2, #12]
}
 8000858:	bf00      	nop
 800085a:	3714      	adds	r7, #20
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr
 8000864:	e000ed00 	.word	0xe000ed00

08000868 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800086c:	4b04      	ldr	r3, [pc, #16]	; (8000880 <__NVIC_GetPriorityGrouping+0x18>)
 800086e:	68db      	ldr	r3, [r3, #12]
 8000870:	0a1b      	lsrs	r3, r3, #8
 8000872:	f003 0307 	and.w	r3, r3, #7
}
 8000876:	4618      	mov	r0, r3
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr
 8000880:	e000ed00 	.word	0xe000ed00

08000884 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800088e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000892:	2b00      	cmp	r3, #0
 8000894:	db0b      	blt.n	80008ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	f003 021f 	and.w	r2, r3, #31
 800089c:	4907      	ldr	r1, [pc, #28]	; (80008bc <__NVIC_EnableIRQ+0x38>)
 800089e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a2:	095b      	lsrs	r3, r3, #5
 80008a4:	2001      	movs	r0, #1
 80008a6:	fa00 f202 	lsl.w	r2, r0, r2
 80008aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008ae:	bf00      	nop
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	e000e100 	.word	0xe000e100

080008c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	6039      	str	r1, [r7, #0]
 80008ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	db0a      	blt.n	80008ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	b2da      	uxtb	r2, r3
 80008d8:	490c      	ldr	r1, [pc, #48]	; (800090c <__NVIC_SetPriority+0x4c>)
 80008da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008de:	0112      	lsls	r2, r2, #4
 80008e0:	b2d2      	uxtb	r2, r2
 80008e2:	440b      	add	r3, r1
 80008e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008e8:	e00a      	b.n	8000900 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	b2da      	uxtb	r2, r3
 80008ee:	4908      	ldr	r1, [pc, #32]	; (8000910 <__NVIC_SetPriority+0x50>)
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	f003 030f 	and.w	r3, r3, #15
 80008f6:	3b04      	subs	r3, #4
 80008f8:	0112      	lsls	r2, r2, #4
 80008fa:	b2d2      	uxtb	r2, r2
 80008fc:	440b      	add	r3, r1
 80008fe:	761a      	strb	r2, [r3, #24]
}
 8000900:	bf00      	nop
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr
 800090c:	e000e100 	.word	0xe000e100
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000914:	b480      	push	{r7}
 8000916:	b089      	sub	sp, #36	; 0x24
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	60b9      	str	r1, [r7, #8]
 800091e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	f003 0307 	and.w	r3, r3, #7
 8000926:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	f1c3 0307 	rsb	r3, r3, #7
 800092e:	2b04      	cmp	r3, #4
 8000930:	bf28      	it	cs
 8000932:	2304      	movcs	r3, #4
 8000934:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	3304      	adds	r3, #4
 800093a:	2b06      	cmp	r3, #6
 800093c:	d902      	bls.n	8000944 <NVIC_EncodePriority+0x30>
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	3b03      	subs	r3, #3
 8000942:	e000      	b.n	8000946 <NVIC_EncodePriority+0x32>
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000948:	f04f 32ff 	mov.w	r2, #4294967295
 800094c:	69bb      	ldr	r3, [r7, #24]
 800094e:	fa02 f303 	lsl.w	r3, r2, r3
 8000952:	43da      	mvns	r2, r3
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	401a      	ands	r2, r3
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800095c:	f04f 31ff 	mov.w	r1, #4294967295
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	fa01 f303 	lsl.w	r3, r1, r3
 8000966:	43d9      	mvns	r1, r3
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800096c:	4313      	orrs	r3, r2
         );
}
 800096e:	4618      	mov	r0, r3
 8000970:	3724      	adds	r7, #36	; 0x24
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
	...

0800097c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	3b01      	subs	r3, #1
 8000988:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800098c:	d301      	bcc.n	8000992 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800098e:	2301      	movs	r3, #1
 8000990:	e00f      	b.n	80009b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000992:	4a0a      	ldr	r2, [pc, #40]	; (80009bc <SysTick_Config+0x40>)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	3b01      	subs	r3, #1
 8000998:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800099a:	210f      	movs	r1, #15
 800099c:	f04f 30ff 	mov.w	r0, #4294967295
 80009a0:	f7ff ff8e 	bl	80008c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009a4:	4b05      	ldr	r3, [pc, #20]	; (80009bc <SysTick_Config+0x40>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009aa:	4b04      	ldr	r3, [pc, #16]	; (80009bc <SysTick_Config+0x40>)
 80009ac:	2207      	movs	r2, #7
 80009ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009b0:	2300      	movs	r3, #0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	e000e010 	.word	0xe000e010

080009c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f7ff ff29 	bl	8000820 <__NVIC_SetPriorityGrouping>
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b086      	sub	sp, #24
 80009da:	af00      	add	r7, sp, #0
 80009dc:	4603      	mov	r3, r0
 80009de:	60b9      	str	r1, [r7, #8]
 80009e0:	607a      	str	r2, [r7, #4]
 80009e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009e8:	f7ff ff3e 	bl	8000868 <__NVIC_GetPriorityGrouping>
 80009ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009ee:	687a      	ldr	r2, [r7, #4]
 80009f0:	68b9      	ldr	r1, [r7, #8]
 80009f2:	6978      	ldr	r0, [r7, #20]
 80009f4:	f7ff ff8e 	bl	8000914 <NVIC_EncodePriority>
 80009f8:	4602      	mov	r2, r0
 80009fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009fe:	4611      	mov	r1, r2
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff ff5d 	bl	80008c0 <__NVIC_SetPriority>
}
 8000a06:	bf00      	nop
 8000a08:	3718      	adds	r7, #24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b082      	sub	sp, #8
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	4603      	mov	r3, r0
 8000a16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff ff31 	bl	8000884 <__NVIC_EnableIRQ>
}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b082      	sub	sp, #8
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f7ff ffa2 	bl	800097c <SysTick_Config>
 8000a38:	4603      	mov	r3, r0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
	...

08000a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b087      	sub	sp, #28
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a52:	e160      	b.n	8000d16 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	2101      	movs	r1, #1
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a60:	4013      	ands	r3, r2
 8000a62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	f000 8152 	beq.w	8000d10 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	f003 0303 	and.w	r3, r3, #3
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d005      	beq.n	8000a84 <HAL_GPIO_Init+0x40>
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	f003 0303 	and.w	r3, r3, #3
 8000a80:	2b02      	cmp	r3, #2
 8000a82:	d130      	bne.n	8000ae6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	689b      	ldr	r3, [r3, #8]
 8000a88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	2203      	movs	r2, #3
 8000a90:	fa02 f303 	lsl.w	r3, r2, r3
 8000a94:	43db      	mvns	r3, r3
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	4013      	ands	r3, r2
 8000a9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	68da      	ldr	r2, [r3, #12]
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa8:	693a      	ldr	r2, [r7, #16]
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	693a      	ldr	r2, [r7, #16]
 8000ab2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000aba:	2201      	movs	r2, #1
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac2:	43db      	mvns	r3, r3
 8000ac4:	693a      	ldr	r2, [r7, #16]
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	091b      	lsrs	r3, r3, #4
 8000ad0:	f003 0201 	and.w	r2, r3, #1
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	f003 0303 	and.w	r3, r3, #3
 8000aee:	2b03      	cmp	r3, #3
 8000af0:	d017      	beq.n	8000b22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	68db      	ldr	r3, [r3, #12]
 8000af6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	2203      	movs	r2, #3
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	43db      	mvns	r3, r3
 8000b04:	693a      	ldr	r2, [r7, #16]
 8000b06:	4013      	ands	r3, r2
 8000b08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	689a      	ldr	r2, [r3, #8]
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	005b      	lsls	r3, r3, #1
 8000b12:	fa02 f303 	lsl.w	r3, r2, r3
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	f003 0303 	and.w	r3, r3, #3
 8000b2a:	2b02      	cmp	r3, #2
 8000b2c:	d123      	bne.n	8000b76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	08da      	lsrs	r2, r3, #3
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	3208      	adds	r2, #8
 8000b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	f003 0307 	and.w	r3, r3, #7
 8000b42:	009b      	lsls	r3, r3, #2
 8000b44:	220f      	movs	r2, #15
 8000b46:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4a:	43db      	mvns	r3, r3
 8000b4c:	693a      	ldr	r2, [r7, #16]
 8000b4e:	4013      	ands	r3, r2
 8000b50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	691a      	ldr	r2, [r3, #16]
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	f003 0307 	and.w	r3, r3, #7
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	08da      	lsrs	r2, r3, #3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	3208      	adds	r2, #8
 8000b70:	6939      	ldr	r1, [r7, #16]
 8000b72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	2203      	movs	r2, #3
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	43db      	mvns	r3, r3
 8000b88:	693a      	ldr	r2, [r7, #16]
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	f003 0203 	and.w	r2, r3, #3
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	f000 80ac 	beq.w	8000d10 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb8:	4b5e      	ldr	r3, [pc, #376]	; (8000d34 <HAL_GPIO_Init+0x2f0>)
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	4a5d      	ldr	r2, [pc, #372]	; (8000d34 <HAL_GPIO_Init+0x2f0>)
 8000bbe:	f043 0301 	orr.w	r3, r3, #1
 8000bc2:	6193      	str	r3, [r2, #24]
 8000bc4:	4b5b      	ldr	r3, [pc, #364]	; (8000d34 <HAL_GPIO_Init+0x2f0>)
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	f003 0301 	and.w	r3, r3, #1
 8000bcc:	60bb      	str	r3, [r7, #8]
 8000bce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bd0:	4a59      	ldr	r2, [pc, #356]	; (8000d38 <HAL_GPIO_Init+0x2f4>)
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	089b      	lsrs	r3, r3, #2
 8000bd6:	3302      	adds	r3, #2
 8000bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	f003 0303 	and.w	r3, r3, #3
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	220f      	movs	r2, #15
 8000be8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bec:	43db      	mvns	r3, r3
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000bfa:	d025      	beq.n	8000c48 <HAL_GPIO_Init+0x204>
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4a4f      	ldr	r2, [pc, #316]	; (8000d3c <HAL_GPIO_Init+0x2f8>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d01f      	beq.n	8000c44 <HAL_GPIO_Init+0x200>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4a4e      	ldr	r2, [pc, #312]	; (8000d40 <HAL_GPIO_Init+0x2fc>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d019      	beq.n	8000c40 <HAL_GPIO_Init+0x1fc>
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4a4d      	ldr	r2, [pc, #308]	; (8000d44 <HAL_GPIO_Init+0x300>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d013      	beq.n	8000c3c <HAL_GPIO_Init+0x1f8>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4a4c      	ldr	r2, [pc, #304]	; (8000d48 <HAL_GPIO_Init+0x304>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d00d      	beq.n	8000c38 <HAL_GPIO_Init+0x1f4>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4a4b      	ldr	r2, [pc, #300]	; (8000d4c <HAL_GPIO_Init+0x308>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d007      	beq.n	8000c34 <HAL_GPIO_Init+0x1f0>
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a4a      	ldr	r2, [pc, #296]	; (8000d50 <HAL_GPIO_Init+0x30c>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d101      	bne.n	8000c30 <HAL_GPIO_Init+0x1ec>
 8000c2c:	2306      	movs	r3, #6
 8000c2e:	e00c      	b.n	8000c4a <HAL_GPIO_Init+0x206>
 8000c30:	2307      	movs	r3, #7
 8000c32:	e00a      	b.n	8000c4a <HAL_GPIO_Init+0x206>
 8000c34:	2305      	movs	r3, #5
 8000c36:	e008      	b.n	8000c4a <HAL_GPIO_Init+0x206>
 8000c38:	2304      	movs	r3, #4
 8000c3a:	e006      	b.n	8000c4a <HAL_GPIO_Init+0x206>
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	e004      	b.n	8000c4a <HAL_GPIO_Init+0x206>
 8000c40:	2302      	movs	r3, #2
 8000c42:	e002      	b.n	8000c4a <HAL_GPIO_Init+0x206>
 8000c44:	2301      	movs	r3, #1
 8000c46:	e000      	b.n	8000c4a <HAL_GPIO_Init+0x206>
 8000c48:	2300      	movs	r3, #0
 8000c4a:	697a      	ldr	r2, [r7, #20]
 8000c4c:	f002 0203 	and.w	r2, r2, #3
 8000c50:	0092      	lsls	r2, r2, #2
 8000c52:	4093      	lsls	r3, r2
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c5a:	4937      	ldr	r1, [pc, #220]	; (8000d38 <HAL_GPIO_Init+0x2f4>)
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	089b      	lsrs	r3, r3, #2
 8000c60:	3302      	adds	r3, #2
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c68:	4b3a      	ldr	r3, [pc, #232]	; (8000d54 <HAL_GPIO_Init+0x310>)
 8000c6a:	689b      	ldr	r3, [r3, #8]
 8000c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	43db      	mvns	r3, r3
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	4013      	ands	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d003      	beq.n	8000c8c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c8c:	4a31      	ldr	r2, [pc, #196]	; (8000d54 <HAL_GPIO_Init+0x310>)
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c92:	4b30      	ldr	r3, [pc, #192]	; (8000d54 <HAL_GPIO_Init+0x310>)
 8000c94:	68db      	ldr	r3, [r3, #12]
 8000c96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	43db      	mvns	r3, r3
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d003      	beq.n	8000cb6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cb6:	4a27      	ldr	r2, [pc, #156]	; (8000d54 <HAL_GPIO_Init+0x310>)
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000cbc:	4b25      	ldr	r3, [pc, #148]	; (8000d54 <HAL_GPIO_Init+0x310>)
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d003      	beq.n	8000ce0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ce0:	4a1c      	ldr	r2, [pc, #112]	; (8000d54 <HAL_GPIO_Init+0x310>)
 8000ce2:	693b      	ldr	r3, [r7, #16]
 8000ce4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ce6:	4b1b      	ldr	r3, [pc, #108]	; (8000d54 <HAL_GPIO_Init+0x310>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	43db      	mvns	r3, r3
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d003      	beq.n	8000d0a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d0a:	4a12      	ldr	r2, [pc, #72]	; (8000d54 <HAL_GPIO_Init+0x310>)
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	3301      	adds	r3, #1
 8000d14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	f47f ae97 	bne.w	8000a54 <HAL_GPIO_Init+0x10>
  }
}
 8000d26:	bf00      	nop
 8000d28:	bf00      	nop
 8000d2a:	371c      	adds	r7, #28
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	40021000 	.word	0x40021000
 8000d38:	40010000 	.word	0x40010000
 8000d3c:	48000400 	.word	0x48000400
 8000d40:	48000800 	.word	0x48000800
 8000d44:	48000c00 	.word	0x48000c00
 8000d48:	48001000 	.word	0x48001000
 8000d4c:	48001400 	.word	0x48001400
 8000d50:	48001800 	.word	0x48001800
 8000d54:	40010400 	.word	0x40010400

08000d58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	460b      	mov	r3, r1
 8000d62:	807b      	strh	r3, [r7, #2]
 8000d64:	4613      	mov	r3, r2
 8000d66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d68:	787b      	ldrb	r3, [r7, #1]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d003      	beq.n	8000d76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d6e:	887a      	ldrh	r2, [r7, #2]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d74:	e002      	b.n	8000d7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d76:	887a      	ldrh	r2, [r7, #2]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d8a:	b08b      	sub	sp, #44	; 0x2c
 8000d8c:	af06      	add	r7, sp, #24
 8000d8e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d101      	bne.n	8000d9a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	e0c4      	b.n	8000f24 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d106      	bne.n	8000db4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2200      	movs	r2, #0
 8000daa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f7ff fc3a 	bl	8000628 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2203      	movs	r2, #3
 8000db8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f003 fca0 	bl	8004706 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	73fb      	strb	r3, [r7, #15]
 8000dca:	e040      	b.n	8000e4e <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000dcc:	7bfb      	ldrb	r3, [r7, #15]
 8000dce:	6879      	ldr	r1, [r7, #4]
 8000dd0:	1c5a      	adds	r2, r3, #1
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	4413      	add	r3, r2
 8000dd8:	00db      	lsls	r3, r3, #3
 8000dda:	440b      	add	r3, r1
 8000ddc:	3301      	adds	r3, #1
 8000dde:	2201      	movs	r2, #1
 8000de0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000de2:	7bfb      	ldrb	r3, [r7, #15]
 8000de4:	6879      	ldr	r1, [r7, #4]
 8000de6:	1c5a      	adds	r2, r3, #1
 8000de8:	4613      	mov	r3, r2
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	4413      	add	r3, r2
 8000dee:	00db      	lsls	r3, r3, #3
 8000df0:	440b      	add	r3, r1
 8000df2:	7bfa      	ldrb	r2, [r7, #15]
 8000df4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000df6:	7bfb      	ldrb	r3, [r7, #15]
 8000df8:	6879      	ldr	r1, [r7, #4]
 8000dfa:	1c5a      	adds	r2, r3, #1
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	4413      	add	r3, r2
 8000e02:	00db      	lsls	r3, r3, #3
 8000e04:	440b      	add	r3, r1
 8000e06:	3303      	adds	r3, #3
 8000e08:	2200      	movs	r2, #0
 8000e0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000e0c:	7bfa      	ldrb	r2, [r7, #15]
 8000e0e:	6879      	ldr	r1, [r7, #4]
 8000e10:	4613      	mov	r3, r2
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	4413      	add	r3, r2
 8000e16:	00db      	lsls	r3, r3, #3
 8000e18:	440b      	add	r3, r1
 8000e1a:	3338      	adds	r3, #56	; 0x38
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000e20:	7bfa      	ldrb	r2, [r7, #15]
 8000e22:	6879      	ldr	r1, [r7, #4]
 8000e24:	4613      	mov	r3, r2
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	4413      	add	r3, r2
 8000e2a:	00db      	lsls	r3, r3, #3
 8000e2c:	440b      	add	r3, r1
 8000e2e:	333c      	adds	r3, #60	; 0x3c
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000e34:	7bfa      	ldrb	r2, [r7, #15]
 8000e36:	6879      	ldr	r1, [r7, #4]
 8000e38:	4613      	mov	r3, r2
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	4413      	add	r3, r2
 8000e3e:	00db      	lsls	r3, r3, #3
 8000e40:	440b      	add	r3, r1
 8000e42:	3340      	adds	r3, #64	; 0x40
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e48:	7bfb      	ldrb	r3, [r7, #15]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	73fb      	strb	r3, [r7, #15]
 8000e4e:	7bfa      	ldrb	r2, [r7, #15]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d3b9      	bcc.n	8000dcc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e58:	2300      	movs	r3, #0
 8000e5a:	73fb      	strb	r3, [r7, #15]
 8000e5c:	e044      	b.n	8000ee8 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000e5e:	7bfa      	ldrb	r2, [r7, #15]
 8000e60:	6879      	ldr	r1, [r7, #4]
 8000e62:	4613      	mov	r3, r2
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	4413      	add	r3, r2
 8000e68:	00db      	lsls	r3, r3, #3
 8000e6a:	440b      	add	r3, r1
 8000e6c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000e70:	2200      	movs	r2, #0
 8000e72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000e74:	7bfa      	ldrb	r2, [r7, #15]
 8000e76:	6879      	ldr	r1, [r7, #4]
 8000e78:	4613      	mov	r3, r2
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	4413      	add	r3, r2
 8000e7e:	00db      	lsls	r3, r3, #3
 8000e80:	440b      	add	r3, r1
 8000e82:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000e86:	7bfa      	ldrb	r2, [r7, #15]
 8000e88:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000e8a:	7bfa      	ldrb	r2, [r7, #15]
 8000e8c:	6879      	ldr	r1, [r7, #4]
 8000e8e:	4613      	mov	r3, r2
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	4413      	add	r3, r2
 8000e94:	00db      	lsls	r3, r3, #3
 8000e96:	440b      	add	r3, r1
 8000e98:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000ea0:	7bfa      	ldrb	r2, [r7, #15]
 8000ea2:	6879      	ldr	r1, [r7, #4]
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	4413      	add	r3, r2
 8000eaa:	00db      	lsls	r3, r3, #3
 8000eac:	440b      	add	r3, r1
 8000eae:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000eb6:	7bfa      	ldrb	r2, [r7, #15]
 8000eb8:	6879      	ldr	r1, [r7, #4]
 8000eba:	4613      	mov	r3, r2
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	4413      	add	r3, r2
 8000ec0:	00db      	lsls	r3, r3, #3
 8000ec2:	440b      	add	r3, r1
 8000ec4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000ecc:	7bfa      	ldrb	r2, [r7, #15]
 8000ece:	6879      	ldr	r1, [r7, #4]
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	4413      	add	r3, r2
 8000ed6:	00db      	lsls	r3, r3, #3
 8000ed8:	440b      	add	r3, r1
 8000eda:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	73fb      	strb	r3, [r7, #15]
 8000ee8:	7bfa      	ldrb	r2, [r7, #15]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d3b5      	bcc.n	8000e5e <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	603b      	str	r3, [r7, #0]
 8000ef8:	687e      	ldr	r6, [r7, #4]
 8000efa:	466d      	mov	r5, sp
 8000efc:	f106 0410 	add.w	r4, r6, #16
 8000f00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f04:	6823      	ldr	r3, [r4, #0]
 8000f06:	602b      	str	r3, [r5, #0]
 8000f08:	1d33      	adds	r3, r6, #4
 8000f0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f0c:	6838      	ldr	r0, [r7, #0]
 8000f0e:	f003 fc15 	bl	800473c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2200      	movs	r2, #0
 8000f16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8000f22:	2300      	movs	r3, #0
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000f2c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f004 ffe5 	bl	8005f08 <USB_ReadInterrupts>
 8000f3e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d003      	beq.n	8000f52 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f000 f931 	bl	80011b2 <PCD_EP_ISR_Handler>

    return;
 8000f50:	e0bd      	b.n	80010ce <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d013      	beq.n	8000f84 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f64:	b29a      	uxth	r2, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f6e:	b292      	uxth	r2, r2
 8000f70:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f000 f8d9 	bl	800112c <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f000 f8f3 	bl	8001168 <HAL_PCD_SetAddress>

    return;
 8000f82:	e0a4      	b.n	80010ce <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d00c      	beq.n	8000fa8 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f96:	b29a      	uxth	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000fa0:	b292      	uxth	r2, r2
 8000fa2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000fa6:	e092      	b.n	80010ce <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d00c      	beq.n	8000fcc <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000fc4:	b292      	uxth	r2, r2
 8000fc6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000fca:	e080      	b.n	80010ce <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d027      	beq.n	8001026 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000fde:	b29a      	uxth	r2, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f022 0204 	bic.w	r2, r2, #4
 8000fe8:	b292      	uxth	r2, r2
 8000fea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f022 0208 	bic.w	r2, r2, #8
 8001000:	b292      	uxth	r2, r2
 8001002:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f000 f8a4 	bl	8001154 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001014:	b29a      	uxth	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800101e:	b292      	uxth	r2, r2
 8001020:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001024:	e053      	b.n	80010ce <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800102c:	2b00      	cmp	r3, #0
 800102e:	d027      	beq.n	8001080 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001038:	b29a      	uxth	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f042 0208 	orr.w	r2, r2, #8
 8001042:	b292      	uxth	r2, r2
 8001044:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001050:	b29a      	uxth	r2, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800105a:	b292      	uxth	r2, r2
 800105c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001068:	b29a      	uxth	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f042 0204 	orr.w	r2, r2, #4
 8001072:	b292      	uxth	r2, r2
 8001074:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f000 f861 	bl	8001140 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800107e:	e026      	b.n	80010ce <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001086:	2b00      	cmp	r3, #0
 8001088:	d00f      	beq.n	80010aa <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001092:	b29a      	uxth	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800109c:	b292      	uxth	r2, r2
 800109e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f000 f838 	bl	8001118 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80010a8:	e011      	b.n	80010ce <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d00c      	beq.n	80010ce <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010bc:	b29a      	uxth	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010c6:	b292      	uxth	r2, r2
 80010c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80010cc:	bf00      	nop
  }
}
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	460b      	mov	r3, r1
 80010de:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	460b      	mov	r3, r1
 80010f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	460b      	mov	r3, r1
 8001172:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800117a:	2b01      	cmp	r3, #1
 800117c:	d101      	bne.n	8001182 <HAL_PCD_SetAddress+0x1a>
 800117e:	2302      	movs	r3, #2
 8001180:	e013      	b.n	80011aa <HAL_PCD_SetAddress+0x42>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2201      	movs	r2, #1
 8001186:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	78fa      	ldrb	r2, [r7, #3]
 800118e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	78fa      	ldrb	r2, [r7, #3]
 8001198:	4611      	mov	r1, r2
 800119a:	4618      	mov	r0, r3
 800119c:	f004 fea0 	bl	8005ee0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b096      	sub	sp, #88	; 0x58
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80011ba:	e3b1      	b.n	8001920 <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011c4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80011c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	f003 030f 	and.w	r3, r3, #15
 80011d2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80011d6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80011da:	2b00      	cmp	r3, #0
 80011dc:	f040 8173 	bne.w	80014c6 <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80011e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80011e4:	f003 0310 	and.w	r3, r3, #16
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d150      	bne.n	800128e <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	881b      	ldrh	r3, [r3, #0]
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80011f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80011fc:	81fb      	strh	r3, [r7, #14]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	89fb      	ldrh	r3, [r7, #14]
 8001204:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001208:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800120c:	b29b      	uxth	r3, r3
 800120e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3328      	adds	r3, #40	; 0x28
 8001214:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800121e:	b29b      	uxth	r3, r3
 8001220:	461a      	mov	r2, r3
 8001222:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	00db      	lsls	r3, r3, #3
 8001228:	4413      	add	r3, r2
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	6812      	ldr	r2, [r2, #0]
 800122e:	4413      	add	r3, r2
 8001230:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001234:	881b      	ldrh	r3, [r3, #0]
 8001236:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800123a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800123c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800123e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001240:	695a      	ldr	r2, [r3, #20]
 8001242:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	441a      	add	r2, r3
 8001248:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800124a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800124c:	2100      	movs	r1, #0
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff ff4c 	bl	80010ec <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800125a:	b2db      	uxtb	r3, r3
 800125c:	2b00      	cmp	r3, #0
 800125e:	f000 835f 	beq.w	8001920 <PCD_EP_ISR_Handler+0x76e>
 8001262:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	2b00      	cmp	r3, #0
 8001268:	f040 835a 	bne.w	8001920 <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001272:	b2db      	uxtb	r3, r3
 8001274:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001278:	b2da      	uxtb	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	b292      	uxth	r2, r2
 8001280:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800128c:	e348      	b.n	8001920 <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001294:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	881b      	ldrh	r3, [r3, #0]
 800129c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80012a0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80012a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d032      	beq.n	8001312 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	461a      	mov	r2, r3
 80012b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	4413      	add	r3, r2
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	6812      	ldr	r2, [r2, #0]
 80012c4:	4413      	add	r3, r2
 80012c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80012ca:	881b      	ldrh	r3, [r3, #0]
 80012cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80012d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012d2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6818      	ldr	r0, [r3, #0]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80012de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012e0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80012e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012e4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	f004 fe60 	bl	8005fac <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	881b      	ldrh	r3, [r3, #0]
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80012f8:	4013      	ands	r3, r2
 80012fa:	823b      	strh	r3, [r7, #16]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	8a3a      	ldrh	r2, [r7, #16]
 8001302:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001306:	b292      	uxth	r2, r2
 8001308:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff fefa 	bl	8001104 <HAL_PCD_SetupStageCallback>
 8001310:	e306      	b.n	8001920 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001312:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001316:	2b00      	cmp	r3, #0
 8001318:	f280 8302 	bge.w	8001920 <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	881b      	ldrh	r3, [r3, #0]
 8001322:	b29a      	uxth	r2, r3
 8001324:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001328:	4013      	ands	r3, r2
 800132a:	83fb      	strh	r3, [r7, #30]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	8bfa      	ldrh	r2, [r7, #30]
 8001332:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001336:	b292      	uxth	r2, r2
 8001338:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001342:	b29b      	uxth	r3, r3
 8001344:	461a      	mov	r2, r3
 8001346:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	4413      	add	r3, r2
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	6812      	ldr	r2, [r2, #0]
 8001352:	4413      	add	r3, r2
 8001354:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001358:	881b      	ldrh	r3, [r3, #0]
 800135a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800135e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001360:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001362:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001364:	69db      	ldr	r3, [r3, #28]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d019      	beq.n	800139e <PCD_EP_ISR_Handler+0x1ec>
 800136a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d015      	beq.n	800139e <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6818      	ldr	r0, [r3, #0]
 8001376:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001378:	6959      	ldr	r1, [r3, #20]
 800137a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800137c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800137e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001380:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001382:	b29b      	uxth	r3, r3
 8001384:	f004 fe12 	bl	8005fac <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001388:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800138a:	695a      	ldr	r2, [r3, #20]
 800138c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800138e:	69db      	ldr	r3, [r3, #28]
 8001390:	441a      	add	r2, r3
 8001392:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001394:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001396:	2100      	movs	r1, #0
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff fe9b 	bl	80010d4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	881b      	ldrh	r3, [r3, #0]
 80013a4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80013a8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80013ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	f040 82b5 	bne.w	8001920 <PCD_EP_ISR_Handler+0x76e>
 80013b6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80013ba:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80013be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80013c2:	f000 82ad 	beq.w	8001920 <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	61bb      	str	r3, [r7, #24]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	461a      	mov	r2, r3
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	4413      	add	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80013e4:	617b      	str	r3, [r7, #20]
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	881b      	ldrh	r3, [r3, #0]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	801a      	strh	r2, [r3, #0]
 80013f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013f8:	691b      	ldr	r3, [r3, #16]
 80013fa:	2b3e      	cmp	r3, #62	; 0x3e
 80013fc:	d91d      	bls.n	800143a <PCD_EP_ISR_Handler+0x288>
 80013fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001400:	691b      	ldr	r3, [r3, #16]
 8001402:	095b      	lsrs	r3, r3, #5
 8001404:	647b      	str	r3, [r7, #68]	; 0x44
 8001406:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001408:	691b      	ldr	r3, [r3, #16]
 800140a:	f003 031f 	and.w	r3, r3, #31
 800140e:	2b00      	cmp	r3, #0
 8001410:	d102      	bne.n	8001418 <PCD_EP_ISR_Handler+0x266>
 8001412:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001414:	3b01      	subs	r3, #1
 8001416:	647b      	str	r3, [r7, #68]	; 0x44
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	b29a      	uxth	r2, r3
 800141e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001420:	b29b      	uxth	r3, r3
 8001422:	029b      	lsls	r3, r3, #10
 8001424:	b29b      	uxth	r3, r3
 8001426:	4313      	orrs	r3, r2
 8001428:	b29b      	uxth	r3, r3
 800142a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800142e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001432:	b29a      	uxth	r2, r3
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	801a      	strh	r2, [r3, #0]
 8001438:	e026      	b.n	8001488 <PCD_EP_ISR_Handler+0x2d6>
 800143a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800143c:	691b      	ldr	r3, [r3, #16]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d10a      	bne.n	8001458 <PCD_EP_ISR_Handler+0x2a6>
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	881b      	ldrh	r3, [r3, #0]
 8001446:	b29b      	uxth	r3, r3
 8001448:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800144c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001450:	b29a      	uxth	r2, r3
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	801a      	strh	r2, [r3, #0]
 8001456:	e017      	b.n	8001488 <PCD_EP_ISR_Handler+0x2d6>
 8001458:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800145a:	691b      	ldr	r3, [r3, #16]
 800145c:	085b      	lsrs	r3, r3, #1
 800145e:	647b      	str	r3, [r7, #68]	; 0x44
 8001460:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	2b00      	cmp	r3, #0
 800146a:	d002      	beq.n	8001472 <PCD_EP_ISR_Handler+0x2c0>
 800146c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800146e:	3301      	adds	r3, #1
 8001470:	647b      	str	r3, [r7, #68]	; 0x44
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	881b      	ldrh	r3, [r3, #0]
 8001476:	b29a      	uxth	r2, r3
 8001478:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800147a:	b29b      	uxth	r3, r3
 800147c:	029b      	lsls	r3, r3, #10
 800147e:	b29b      	uxth	r3, r3
 8001480:	4313      	orrs	r3, r2
 8001482:	b29a      	uxth	r2, r3
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	881b      	ldrh	r3, [r3, #0]
 800148e:	b29b      	uxth	r3, r3
 8001490:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001498:	827b      	strh	r3, [r7, #18]
 800149a:	8a7b      	ldrh	r3, [r7, #18]
 800149c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80014a0:	827b      	strh	r3, [r7, #18]
 80014a2:	8a7b      	ldrh	r3, [r7, #18]
 80014a4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80014a8:	827b      	strh	r3, [r7, #18]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	8a7b      	ldrh	r3, [r7, #18]
 80014b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80014b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80014b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	8013      	strh	r3, [r2, #0]
 80014c4:	e22c      	b.n	8001920 <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	461a      	mov	r2, r3
 80014cc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4413      	add	r3, r2
 80014d4:	881b      	ldrh	r3, [r3, #0]
 80014d6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80014da:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f280 80f6 	bge.w	80016d0 <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	461a      	mov	r2, r3
 80014ea:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	4413      	add	r3, r2
 80014f2:	881b      	ldrh	r3, [r3, #0]
 80014f4:	b29a      	uxth	r2, r3
 80014f6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80014fa:	4013      	ands	r3, r2
 80014fc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	461a      	mov	r2, r3
 8001506:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	4413      	add	r3, r2
 800150e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001512:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001516:	b292      	uxth	r2, r2
 8001518:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800151a:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800151e:	4613      	mov	r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	4413      	add	r3, r2
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	4413      	add	r3, r2
 800152e:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001530:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001532:	7b1b      	ldrb	r3, [r3, #12]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d123      	bne.n	8001580 <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001540:	b29b      	uxth	r3, r3
 8001542:	461a      	mov	r2, r3
 8001544:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	4413      	add	r3, r2
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	6812      	ldr	r2, [r2, #0]
 8001550:	4413      	add	r3, r2
 8001552:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001556:	881b      	ldrh	r3, [r3, #0]
 8001558:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800155c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001560:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001564:	2b00      	cmp	r3, #0
 8001566:	f000 808e 	beq.w	8001686 <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6818      	ldr	r0, [r3, #0]
 800156e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001570:	6959      	ldr	r1, [r3, #20]
 8001572:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001574:	88da      	ldrh	r2, [r3, #6]
 8001576:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800157a:	f004 fd17 	bl	8005fac <USB_ReadPMA>
 800157e:	e082      	b.n	8001686 <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001580:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001582:	78db      	ldrb	r3, [r3, #3]
 8001584:	2b02      	cmp	r3, #2
 8001586:	d10a      	bne.n	800159e <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001588:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800158c:	461a      	mov	r2, r3
 800158e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f000 f9d3 	bl	800193c <HAL_PCD_EP_DB_Receive>
 8001596:	4603      	mov	r3, r0
 8001598:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800159c:	e073      	b.n	8001686 <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	461a      	mov	r2, r3
 80015a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	4413      	add	r3, r2
 80015ac:	881b      	ldrh	r3, [r3, #0]
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80015b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015b8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	461a      	mov	r2, r3
 80015c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	441a      	add	r2, r3
 80015ca:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80015ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80015d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80015d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80015de:	b29b      	uxth	r3, r3
 80015e0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	461a      	mov	r2, r3
 80015e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4413      	add	r3, r2
 80015f0:	881b      	ldrh	r3, [r3, #0]
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d022      	beq.n	8001642 <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001604:	b29b      	uxth	r3, r3
 8001606:	461a      	mov	r2, r3
 8001608:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	4413      	add	r3, r2
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	6812      	ldr	r2, [r2, #0]
 8001614:	4413      	add	r3, r2
 8001616:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800161a:	881b      	ldrh	r3, [r3, #0]
 800161c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001620:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001624:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001628:	2b00      	cmp	r3, #0
 800162a:	d02c      	beq.n	8001686 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6818      	ldr	r0, [r3, #0]
 8001630:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001632:	6959      	ldr	r1, [r3, #20]
 8001634:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001636:	891a      	ldrh	r2, [r3, #8]
 8001638:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800163c:	f004 fcb6 	bl	8005fac <USB_ReadPMA>
 8001640:	e021      	b.n	8001686 <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800164a:	b29b      	uxth	r3, r3
 800164c:	461a      	mov	r2, r3
 800164e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	4413      	add	r3, r2
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	6812      	ldr	r2, [r2, #0]
 800165a:	4413      	add	r3, r2
 800165c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001660:	881b      	ldrh	r3, [r3, #0]
 8001662:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001666:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800166a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800166e:	2b00      	cmp	r3, #0
 8001670:	d009      	beq.n	8001686 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6818      	ldr	r0, [r3, #0]
 8001676:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001678:	6959      	ldr	r1, [r3, #20]
 800167a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800167c:	895a      	ldrh	r2, [r3, #10]
 800167e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001682:	f004 fc93 	bl	8005fac <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001686:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001688:	69da      	ldr	r2, [r3, #28]
 800168a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800168e:	441a      	add	r2, r3
 8001690:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001692:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001694:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001696:	695a      	ldr	r2, [r3, #20]
 8001698:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800169c:	441a      	add	r2, r3
 800169e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016a0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80016a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d005      	beq.n	80016b6 <PCD_EP_ISR_Handler+0x504>
 80016aa:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80016ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016b0:	691b      	ldr	r3, [r3, #16]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d206      	bcs.n	80016c4 <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80016b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	4619      	mov	r1, r3
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f7ff fd09 	bl	80010d4 <HAL_PCD_DataOutStageCallback>
 80016c2:	e005      	b.n	80016d0 <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80016ca:	4618      	mov	r0, r3
 80016cc:	f003 f857 	bl	800477e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80016d0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80016d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f000 8121 	beq.w	8001920 <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 80016de:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80016e2:	1c5a      	adds	r2, r3, #1
 80016e4:	4613      	mov	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4413      	add	r3, r2
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	4413      	add	r3, r2
 80016f0:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	461a      	mov	r2, r3
 80016f8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4413      	add	r3, r2
 8001700:	881b      	ldrh	r3, [r3, #0]
 8001702:	b29b      	uxth	r3, r3
 8001704:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001708:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800170c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	461a      	mov	r2, r3
 8001716:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	441a      	add	r2, r3
 800171e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001722:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001726:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800172a:	b29b      	uxth	r3, r3
 800172c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800172e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001730:	78db      	ldrb	r3, [r3, #3]
 8001732:	2b01      	cmp	r3, #1
 8001734:	f040 80a2 	bne.w	800187c <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 8001738:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800173a:	2200      	movs	r2, #0
 800173c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800173e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001740:	7b1b      	ldrb	r3, [r3, #12]
 8001742:	2b00      	cmp	r3, #0
 8001744:	f000 8093 	beq.w	800186e <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001748:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800174c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001750:	2b00      	cmp	r3, #0
 8001752:	d046      	beq.n	80017e2 <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001754:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001756:	785b      	ldrb	r3, [r3, #1]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d126      	bne.n	80017aa <PCD_EP_ISR_Handler+0x5f8>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800176a:	b29b      	uxth	r3, r3
 800176c:	461a      	mov	r2, r3
 800176e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001770:	4413      	add	r3, r2
 8001772:	627b      	str	r3, [r7, #36]	; 0x24
 8001774:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	00da      	lsls	r2, r3, #3
 800177a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177c:	4413      	add	r3, r2
 800177e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001782:	623b      	str	r3, [r7, #32]
 8001784:	6a3b      	ldr	r3, [r7, #32]
 8001786:	881b      	ldrh	r3, [r3, #0]
 8001788:	b29b      	uxth	r3, r3
 800178a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800178e:	b29a      	uxth	r2, r3
 8001790:	6a3b      	ldr	r3, [r7, #32]
 8001792:	801a      	strh	r2, [r3, #0]
 8001794:	6a3b      	ldr	r3, [r7, #32]
 8001796:	881b      	ldrh	r3, [r3, #0]
 8001798:	b29b      	uxth	r3, r3
 800179a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800179e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	6a3b      	ldr	r3, [r7, #32]
 80017a6:	801a      	strh	r2, [r3, #0]
 80017a8:	e061      	b.n	800186e <PCD_EP_ISR_Handler+0x6bc>
 80017aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ac:	785b      	ldrb	r3, [r3, #1]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d15d      	bne.n	800186e <PCD_EP_ISR_Handler+0x6bc>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	461a      	mov	r2, r3
 80017c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017c6:	4413      	add	r3, r2
 80017c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	00da      	lsls	r2, r3, #3
 80017d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d2:	4413      	add	r3, r2
 80017d4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80017d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80017da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017dc:	2200      	movs	r2, #0
 80017de:	801a      	strh	r2, [r3, #0]
 80017e0:	e045      	b.n	800186e <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ea:	785b      	ldrb	r3, [r3, #1]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d126      	bne.n	800183e <PCD_EP_ISR_Handler+0x68c>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	637b      	str	r3, [r7, #52]	; 0x34
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017fe:	b29b      	uxth	r3, r3
 8001800:	461a      	mov	r2, r3
 8001802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001804:	4413      	add	r3, r2
 8001806:	637b      	str	r3, [r7, #52]	; 0x34
 8001808:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	00da      	lsls	r2, r3, #3
 800180e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001810:	4413      	add	r3, r2
 8001812:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001816:	633b      	str	r3, [r7, #48]	; 0x30
 8001818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800181a:	881b      	ldrh	r3, [r3, #0]
 800181c:	b29b      	uxth	r3, r3
 800181e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001822:	b29a      	uxth	r2, r3
 8001824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001826:	801a      	strh	r2, [r3, #0]
 8001828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800182a:	881b      	ldrh	r3, [r3, #0]
 800182c:	b29b      	uxth	r3, r3
 800182e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001832:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001836:	b29a      	uxth	r2, r3
 8001838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800183a:	801a      	strh	r2, [r3, #0]
 800183c:	e017      	b.n	800186e <PCD_EP_ISR_Handler+0x6bc>
 800183e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001840:	785b      	ldrb	r3, [r3, #1]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d113      	bne.n	800186e <PCD_EP_ISR_Handler+0x6bc>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800184e:	b29b      	uxth	r3, r3
 8001850:	461a      	mov	r2, r3
 8001852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001854:	4413      	add	r3, r2
 8001856:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	00da      	lsls	r2, r3, #3
 800185e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001860:	4413      	add	r3, r2
 8001862:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001866:	63bb      	str	r3, [r7, #56]	; 0x38
 8001868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800186a:	2200      	movs	r2, #0
 800186c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800186e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	4619      	mov	r1, r3
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f7ff fc39 	bl	80010ec <HAL_PCD_DataInStageCallback>
 800187a:	e051      	b.n	8001920 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800187c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001884:	2b00      	cmp	r3, #0
 8001886:	d144      	bne.n	8001912 <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001890:	b29b      	uxth	r3, r3
 8001892:	461a      	mov	r2, r3
 8001894:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	4413      	add	r3, r2
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	6812      	ldr	r2, [r2, #0]
 80018a0:	4413      	add	r3, r2
 80018a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80018a6:	881b      	ldrh	r3, [r3, #0]
 80018a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018ac:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80018b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018b2:	699a      	ldr	r2, [r3, #24]
 80018b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d907      	bls.n	80018cc <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 80018bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018be:	699a      	ldr	r2, [r3, #24]
 80018c0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80018c4:	1ad2      	subs	r2, r2, r3
 80018c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018c8:	619a      	str	r2, [r3, #24]
 80018ca:	e002      	b.n	80018d2 <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 80018cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018ce:	2200      	movs	r2, #0
 80018d0:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80018d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d106      	bne.n	80018e8 <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80018da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	4619      	mov	r1, r3
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f7ff fc03 	bl	80010ec <HAL_PCD_DataInStageCallback>
 80018e6:	e01b      	b.n	8001920 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80018e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018ea:	695a      	ldr	r2, [r3, #20]
 80018ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80018f0:	441a      	add	r2, r3
 80018f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018f4:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80018f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018f8:	69da      	ldr	r2, [r3, #28]
 80018fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80018fe:	441a      	add	r2, r3
 8001900:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001902:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800190a:	4618      	mov	r0, r3
 800190c:	f002 ff37 	bl	800477e <USB_EPStartXfer>
 8001910:	e006      	b.n	8001920 <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001912:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001916:	461a      	mov	r2, r3
 8001918:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f000 f917 	bl	8001b4e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001928:	b29b      	uxth	r3, r3
 800192a:	b21b      	sxth	r3, r3
 800192c:	2b00      	cmp	r3, #0
 800192e:	f6ff ac45 	blt.w	80011bc <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001932:	2300      	movs	r3, #0
}
 8001934:	4618      	mov	r0, r3
 8001936:	3758      	adds	r7, #88	; 0x58
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b088      	sub	sp, #32
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	4613      	mov	r3, r2
 8001948:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800194a:	88fb      	ldrh	r3, [r7, #6]
 800194c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d07c      	beq.n	8001a4e <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800195c:	b29b      	uxth	r3, r3
 800195e:	461a      	mov	r2, r3
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	00db      	lsls	r3, r3, #3
 8001966:	4413      	add	r3, r2
 8001968:	68fa      	ldr	r2, [r7, #12]
 800196a:	6812      	ldr	r2, [r2, #0]
 800196c:	4413      	add	r3, r2
 800196e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001972:	881b      	ldrh	r3, [r3, #0]
 8001974:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001978:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	699a      	ldr	r2, [r3, #24]
 800197e:	8b7b      	ldrh	r3, [r7, #26]
 8001980:	429a      	cmp	r2, r3
 8001982:	d306      	bcc.n	8001992 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	699a      	ldr	r2, [r3, #24]
 8001988:	8b7b      	ldrh	r3, [r7, #26]
 800198a:	1ad2      	subs	r2, r2, r3
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	619a      	str	r2, [r3, #24]
 8001990:	e002      	b.n	8001998 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	2200      	movs	r2, #0
 8001996:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d123      	bne.n	80019e8 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	461a      	mov	r2, r3
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	881b      	ldrh	r3, [r3, #0]
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019ba:	833b      	strh	r3, [r7, #24]
 80019bc:	8b3b      	ldrh	r3, [r7, #24]
 80019be:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80019c2:	833b      	strh	r3, [r7, #24]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	461a      	mov	r2, r3
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	441a      	add	r2, r3
 80019d2:	8b3b      	ldrh	r3, [r7, #24]
 80019d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80019d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80019dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80019e8:	88fb      	ldrh	r3, [r7, #6]
 80019ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d01f      	beq.n	8001a32 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	461a      	mov	r2, r3
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	4413      	add	r3, r2
 8001a00:	881b      	ldrh	r3, [r3, #0]
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a0c:	82fb      	strh	r3, [r7, #22]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	461a      	mov	r2, r3
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	441a      	add	r2, r3
 8001a1c:	8afb      	ldrh	r3, [r7, #22]
 8001a1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001a22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001a26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a2a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001a32:	8b7b      	ldrh	r3, [r7, #26]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f000 8085 	beq.w	8001b44 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6818      	ldr	r0, [r3, #0]
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	6959      	ldr	r1, [r3, #20]
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	891a      	ldrh	r2, [r3, #8]
 8001a46:	8b7b      	ldrh	r3, [r7, #26]
 8001a48:	f004 fab0 	bl	8005fac <USB_ReadPMA>
 8001a4c:	e07a      	b.n	8001b44 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	461a      	mov	r2, r3
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	4413      	add	r3, r2
 8001a62:	68fa      	ldr	r2, [r7, #12]
 8001a64:	6812      	ldr	r2, [r2, #0]
 8001a66:	4413      	add	r3, r2
 8001a68:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001a6c:	881b      	ldrh	r3, [r3, #0]
 8001a6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a72:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	699a      	ldr	r2, [r3, #24]
 8001a78:	8b7b      	ldrh	r3, [r7, #26]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d306      	bcc.n	8001a8c <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	699a      	ldr	r2, [r3, #24]
 8001a82:	8b7b      	ldrh	r3, [r7, #26]
 8001a84:	1ad2      	subs	r2, r2, r3
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	619a      	str	r2, [r3, #24]
 8001a8a:	e002      	b.n	8001a92 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d123      	bne.n	8001ae2 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	4413      	add	r3, r2
 8001aa8:	881b      	ldrh	r3, [r3, #0]
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ab4:	83fb      	strh	r3, [r7, #30]
 8001ab6:	8bfb      	ldrh	r3, [r7, #30]
 8001ab8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001abc:	83fb      	strh	r3, [r7, #30]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	441a      	add	r2, r3
 8001acc:	8bfb      	ldrh	r3, [r7, #30]
 8001ace:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ad2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ad6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d11f      	bne.n	8001b2c <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	461a      	mov	r2, r3
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	4413      	add	r3, r2
 8001afa:	881b      	ldrh	r3, [r3, #0]
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b06:	83bb      	strh	r3, [r7, #28]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	441a      	add	r2, r3
 8001b16:	8bbb      	ldrh	r3, [r7, #28]
 8001b18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001b2c:	8b7b      	ldrh	r3, [r7, #26]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d008      	beq.n	8001b44 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	6818      	ldr	r0, [r3, #0]
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	6959      	ldr	r1, [r3, #20]
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	895a      	ldrh	r2, [r3, #10]
 8001b3e:	8b7b      	ldrh	r3, [r7, #26]
 8001b40:	f004 fa34 	bl	8005fac <USB_ReadPMA>
    }
  }

  return count;
 8001b44:	8b7b      	ldrh	r3, [r7, #26]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3720      	adds	r7, #32
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b0a4      	sub	sp, #144	; 0x90
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	60f8      	str	r0, [r7, #12]
 8001b56:	60b9      	str	r1, [r7, #8]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001b5c:	88fb      	ldrh	r3, [r7, #6]
 8001b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	f000 81db 	beq.w	8001f1e <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	461a      	mov	r2, r3
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	4413      	add	r3, r2
 8001b7c:	68fa      	ldr	r2, [r7, #12]
 8001b7e:	6812      	ldr	r2, [r2, #0]
 8001b80:	4413      	add	r3, r2
 8001b82:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001b86:	881b      	ldrh	r3, [r3, #0]
 8001b88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b8c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	699a      	ldr	r2, [r3, #24]
 8001b94:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d907      	bls.n	8001bac <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	699a      	ldr	r2, [r3, #24]
 8001ba0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001ba4:	1ad2      	subs	r2, r2, r3
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	619a      	str	r2, [r3, #24]
 8001baa:	e002      	b.n	8001bb2 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f040 80b9 	bne.w	8001d2e <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	785b      	ldrb	r3, [r3, #1]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d126      	bne.n	8001c12 <HAL_PCD_EP_DB_Transmit+0xc4>
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd8:	4413      	add	r3, r2
 8001bda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	00da      	lsls	r2, r3, #3
 8001be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001be4:	4413      	add	r3, r2
 8001be6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001bea:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bee:	881b      	ldrh	r3, [r3, #0]
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bfa:	801a      	strh	r2, [r3, #0]
 8001bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c0e:	801a      	strh	r2, [r3, #0]
 8001c10:	e01a      	b.n	8001c48 <HAL_PCD_EP_DB_Transmit+0xfa>
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	785b      	ldrb	r3, [r3, #1]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d116      	bne.n	8001c48 <HAL_PCD_EP_DB_Transmit+0xfa>
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	637b      	str	r3, [r7, #52]	; 0x34
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c2e:	4413      	add	r3, r2
 8001c30:	637b      	str	r3, [r7, #52]	; 0x34
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	00da      	lsls	r2, r3, #3
 8001c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c3a:	4413      	add	r3, r2
 8001c3c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001c40:	633b      	str	r3, [r7, #48]	; 0x30
 8001c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c44:	2200      	movs	r2, #0
 8001c46:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	785b      	ldrb	r3, [r3, #1]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d126      	bne.n	8001ca4 <HAL_PCD_EP_DB_Transmit+0x156>
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	61fb      	str	r3, [r7, #28]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	461a      	mov	r2, r3
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	61fb      	str	r3, [r7, #28]
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	00da      	lsls	r2, r3, #3
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	4413      	add	r3, r2
 8001c78:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001c7c:	61bb      	str	r3, [r7, #24]
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	881b      	ldrh	r3, [r3, #0]
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	801a      	strh	r2, [r3, #0]
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	881b      	ldrh	r3, [r3, #0]
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	801a      	strh	r2, [r3, #0]
 8001ca2:	e017      	b.n	8001cd4 <HAL_PCD_EP_DB_Transmit+0x186>
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	785b      	ldrb	r3, [r3, #1]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d113      	bne.n	8001cd4 <HAL_PCD_EP_DB_Transmit+0x186>
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cba:	4413      	add	r3, r2
 8001cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	00da      	lsls	r2, r3, #3
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc6:	4413      	add	r3, r2
 8001cc8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001ccc:	623b      	str	r3, [r7, #32]
 8001cce:	6a3b      	ldr	r3, [r7, #32]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	4619      	mov	r1, r3
 8001cda:	68f8      	ldr	r0, [r7, #12]
 8001cdc:	f7ff fa06 	bl	80010ec <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001ce0:	88fb      	ldrh	r3, [r7, #6]
 8001ce2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f000 82fa 	beq.w	80022e0 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	881b      	ldrh	r3, [r3, #0]
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d06:	82fb      	strh	r3, [r7, #22]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	441a      	add	r2, r3
 8001d16:	8afb      	ldrh	r3, [r7, #22]
 8001d18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	8013      	strh	r3, [r2, #0]
 8001d2c:	e2d8      	b.n	80022e0 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001d2e:	88fb      	ldrh	r3, [r7, #6]
 8001d30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d021      	beq.n	8001d7c <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	881b      	ldrh	r3, [r3, #0]
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d52:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	441a      	add	r2, r3
 8001d64:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8001d68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	f040 82ac 	bne.w	80022e0 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	695a      	ldr	r2, [r3, #20]
 8001d8c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001d90:	441a      	add	r2, r3
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	69da      	ldr	r2, [r3, #28]
 8001d9a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001d9e:	441a      	add	r2, r3
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	6a1a      	ldr	r2, [r3, #32]
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d30b      	bcc.n	8001dc8 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	691b      	ldr	r3, [r3, #16]
 8001db4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	6a1a      	ldr	r2, [r3, #32]
 8001dbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001dc0:	1ad2      	subs	r2, r2, r3
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	621a      	str	r2, [r3, #32]
 8001dc6:	e017      	b.n	8001df8 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	6a1b      	ldr	r3, [r3, #32]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d108      	bne.n	8001de2 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8001dd0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001dd4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001de0:	e00a      	b.n	8001df8 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	6a1b      	ldr	r3, [r3, #32]
 8001dee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	2200      	movs	r2, #0
 8001df6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	785b      	ldrb	r3, [r3, #1]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d165      	bne.n	8001ecc <HAL_PCD_EP_DB_Transmit+0x37e>
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	461a      	mov	r2, r3
 8001e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e14:	4413      	add	r3, r2
 8001e16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	00da      	lsls	r2, r3, #3
 8001e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e20:	4413      	add	r3, r2
 8001e22:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001e26:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e2a:	881b      	ldrh	r3, [r3, #0]
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e36:	801a      	strh	r2, [r3, #0]
 8001e38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e3c:	2b3e      	cmp	r3, #62	; 0x3e
 8001e3e:	d91d      	bls.n	8001e7c <HAL_PCD_EP_DB_Transmit+0x32e>
 8001e40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e44:	095b      	lsrs	r3, r3, #5
 8001e46:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e4c:	f003 031f 	and.w	r3, r3, #31
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d102      	bne.n	8001e5a <HAL_PCD_EP_DB_Transmit+0x30c>
 8001e54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e56:	3b01      	subs	r3, #1
 8001e58:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e5c:	881b      	ldrh	r3, [r3, #0]
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	029b      	lsls	r3, r3, #10
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e78:	801a      	strh	r2, [r3, #0]
 8001e7a:	e044      	b.n	8001f06 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8001e7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d10a      	bne.n	8001e9a <HAL_PCD_EP_DB_Transmit+0x34c>
 8001e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e86:	881b      	ldrh	r3, [r3, #0]
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e96:	801a      	strh	r2, [r3, #0]
 8001e98:	e035      	b.n	8001f06 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8001e9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e9e:	085b      	lsrs	r3, r3, #1
 8001ea0:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ea2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d002      	beq.n	8001eb4 <HAL_PCD_EP_DB_Transmit+0x366>
 8001eae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8001eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eb6:	881b      	ldrh	r3, [r3, #0]
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	029b      	lsls	r3, r3, #10
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ec8:	801a      	strh	r2, [r3, #0]
 8001eca:	e01c      	b.n	8001f06 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	785b      	ldrb	r3, [r3, #1]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d118      	bne.n	8001f06 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	647b      	str	r3, [r7, #68]	; 0x44
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ee8:	4413      	add	r3, r2
 8001eea:	647b      	str	r3, [r7, #68]	; 0x44
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	00da      	lsls	r2, r3, #3
 8001ef2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ef4:	4413      	add	r3, r2
 8001ef6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001efa:	643b      	str	r3, [r7, #64]	; 0x40
 8001efc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f00:	b29a      	uxth	r2, r3
 8001f02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f04:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6818      	ldr	r0, [r3, #0]
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	6959      	ldr	r1, [r3, #20]
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	891a      	ldrh	r2, [r3, #8]
 8001f12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	f004 f806 	bl	8005f28 <USB_WritePMA>
 8001f1c:	e1e0      	b.n	80022e0 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	461a      	mov	r2, r3
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	4413      	add	r3, r2
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	6812      	ldr	r2, [r2, #0]
 8001f36:	4413      	add	r3, r2
 8001f38:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001f3c:	881b      	ldrh	r3, [r3, #0]
 8001f3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f42:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	699a      	ldr	r2, [r3, #24]
 8001f4a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d307      	bcc.n	8001f62 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	699a      	ldr	r2, [r3, #24]
 8001f56:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001f5a:	1ad2      	subs	r2, r2, r3
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	619a      	str	r2, [r3, #24]
 8001f60:	e002      	b.n	8001f68 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	2200      	movs	r2, #0
 8001f66:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f040 80c0 	bne.w	80020f2 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	785b      	ldrb	r3, [r3, #1]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d126      	bne.n	8001fc8 <HAL_PCD_EP_DB_Transmit+0x47a>
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f8e:	4413      	add	r3, r2
 8001f90:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	00da      	lsls	r2, r3, #3
 8001f98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f9a:	4413      	add	r3, r2
 8001f9c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001fa0:	67bb      	str	r3, [r7, #120]	; 0x78
 8001fa2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fa4:	881b      	ldrh	r3, [r3, #0]
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fb0:	801a      	strh	r2, [r3, #0]
 8001fb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fc4:	801a      	strh	r2, [r3, #0]
 8001fc6:	e01a      	b.n	8001ffe <HAL_PCD_EP_DB_Transmit+0x4b0>
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	785b      	ldrb	r3, [r3, #1]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d116      	bne.n	8001ffe <HAL_PCD_EP_DB_Transmit+0x4b0>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	667b      	str	r3, [r7, #100]	; 0x64
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fe4:	4413      	add	r3, r2
 8001fe6:	667b      	str	r3, [r7, #100]	; 0x64
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	00da      	lsls	r2, r3, #3
 8001fee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ff0:	4413      	add	r3, r2
 8001ff2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001ff6:	663b      	str	r3, [r7, #96]	; 0x60
 8001ff8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	677b      	str	r3, [r7, #116]	; 0x74
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	785b      	ldrb	r3, [r3, #1]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d12b      	bne.n	8002064 <HAL_PCD_EP_DB_Transmit+0x516>
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800201a:	b29b      	uxth	r3, r3
 800201c:	461a      	mov	r2, r3
 800201e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002020:	4413      	add	r3, r2
 8002022:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	00da      	lsls	r2, r3, #3
 800202a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800202c:	4413      	add	r3, r2
 800202e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002032:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002036:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800203a:	881b      	ldrh	r3, [r3, #0]
 800203c:	b29b      	uxth	r3, r3
 800203e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002042:	b29a      	uxth	r2, r3
 8002044:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002048:	801a      	strh	r2, [r3, #0]
 800204a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800204e:	881b      	ldrh	r3, [r3, #0]
 8002050:	b29b      	uxth	r3, r3
 8002052:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002056:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800205a:	b29a      	uxth	r2, r3
 800205c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002060:	801a      	strh	r2, [r3, #0]
 8002062:	e017      	b.n	8002094 <HAL_PCD_EP_DB_Transmit+0x546>
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	785b      	ldrb	r3, [r3, #1]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d113      	bne.n	8002094 <HAL_PCD_EP_DB_Transmit+0x546>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002074:	b29b      	uxth	r3, r3
 8002076:	461a      	mov	r2, r3
 8002078:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800207a:	4413      	add	r3, r2
 800207c:	677b      	str	r3, [r7, #116]	; 0x74
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	00da      	lsls	r2, r3, #3
 8002084:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002086:	4413      	add	r3, r2
 8002088:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800208c:	673b      	str	r3, [r7, #112]	; 0x70
 800208e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002090:	2200      	movs	r2, #0
 8002092:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	4619      	mov	r1, r3
 800209a:	68f8      	ldr	r0, [r7, #12]
 800209c:	f7ff f826 	bl	80010ec <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80020a0:	88fb      	ldrh	r3, [r7, #6]
 80020a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f040 811a 	bne.w	80022e0 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	461a      	mov	r2, r3
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4413      	add	r3, r2
 80020ba:	881b      	ldrh	r3, [r3, #0]
 80020bc:	b29b      	uxth	r3, r3
 80020be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020c6:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	461a      	mov	r2, r3
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	441a      	add	r2, r3
 80020d8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80020dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	8013      	strh	r3, [r2, #0]
 80020f0:	e0f6      	b.n	80022e0 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80020f2:	88fb      	ldrh	r3, [r7, #6]
 80020f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d121      	bne.n	8002140 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	461a      	mov	r2, r3
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4413      	add	r3, r2
 800210a:	881b      	ldrh	r3, [r3, #0]
 800210c:	b29b      	uxth	r3, r3
 800210e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002116:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	461a      	mov	r2, r3
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	441a      	add	r2, r3
 8002128:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800212c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002130:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002134:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800213c:	b29b      	uxth	r3, r3
 800213e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002146:	2b01      	cmp	r3, #1
 8002148:	f040 80ca 	bne.w	80022e0 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	695a      	ldr	r2, [r3, #20]
 8002150:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002154:	441a      	add	r2, r3
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	69da      	ldr	r2, [r3, #28]
 800215e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002162:	441a      	add	r2, r3
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	6a1a      	ldr	r2, [r3, #32]
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	691b      	ldr	r3, [r3, #16]
 8002170:	429a      	cmp	r2, r3
 8002172:	d30b      	bcc.n	800218c <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	6a1a      	ldr	r2, [r3, #32]
 8002180:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002184:	1ad2      	subs	r2, r2, r3
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	621a      	str	r2, [r3, #32]
 800218a:	e017      	b.n	80021bc <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d108      	bne.n	80021a6 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8002194:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002198:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80021a4:	e00a      	b.n	80021bc <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	2200      	movs	r2, #0
 80021b2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	657b      	str	r3, [r7, #84]	; 0x54
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	785b      	ldrb	r3, [r3, #1]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d165      	bne.n	8002296 <HAL_PCD_EP_DB_Transmit+0x748>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021d8:	b29b      	uxth	r3, r3
 80021da:	461a      	mov	r2, r3
 80021dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021de:	4413      	add	r3, r2
 80021e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	00da      	lsls	r2, r3, #3
 80021e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021ea:	4413      	add	r3, r2
 80021ec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80021f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80021f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021f4:	881b      	ldrh	r3, [r3, #0]
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002200:	801a      	strh	r2, [r3, #0]
 8002202:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002206:	2b3e      	cmp	r3, #62	; 0x3e
 8002208:	d91d      	bls.n	8002246 <HAL_PCD_EP_DB_Transmit+0x6f8>
 800220a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800220e:	095b      	lsrs	r3, r3, #5
 8002210:	66bb      	str	r3, [r7, #104]	; 0x68
 8002212:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002216:	f003 031f 	and.w	r3, r3, #31
 800221a:	2b00      	cmp	r3, #0
 800221c:	d102      	bne.n	8002224 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800221e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002220:	3b01      	subs	r3, #1
 8002222:	66bb      	str	r3, [r7, #104]	; 0x68
 8002224:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002226:	881b      	ldrh	r3, [r3, #0]
 8002228:	b29a      	uxth	r2, r3
 800222a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800222c:	b29b      	uxth	r3, r3
 800222e:	029b      	lsls	r3, r3, #10
 8002230:	b29b      	uxth	r3, r3
 8002232:	4313      	orrs	r3, r2
 8002234:	b29b      	uxth	r3, r3
 8002236:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800223a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800223e:	b29a      	uxth	r2, r3
 8002240:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002242:	801a      	strh	r2, [r3, #0]
 8002244:	e041      	b.n	80022ca <HAL_PCD_EP_DB_Transmit+0x77c>
 8002246:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800224a:	2b00      	cmp	r3, #0
 800224c:	d10a      	bne.n	8002264 <HAL_PCD_EP_DB_Transmit+0x716>
 800224e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002250:	881b      	ldrh	r3, [r3, #0]
 8002252:	b29b      	uxth	r3, r3
 8002254:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002258:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800225c:	b29a      	uxth	r2, r3
 800225e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002260:	801a      	strh	r2, [r3, #0]
 8002262:	e032      	b.n	80022ca <HAL_PCD_EP_DB_Transmit+0x77c>
 8002264:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002268:	085b      	lsrs	r3, r3, #1
 800226a:	66bb      	str	r3, [r7, #104]	; 0x68
 800226c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	2b00      	cmp	r3, #0
 8002276:	d002      	beq.n	800227e <HAL_PCD_EP_DB_Transmit+0x730>
 8002278:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800227a:	3301      	adds	r3, #1
 800227c:	66bb      	str	r3, [r7, #104]	; 0x68
 800227e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002280:	881b      	ldrh	r3, [r3, #0]
 8002282:	b29a      	uxth	r2, r3
 8002284:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002286:	b29b      	uxth	r3, r3
 8002288:	029b      	lsls	r3, r3, #10
 800228a:	b29b      	uxth	r3, r3
 800228c:	4313      	orrs	r3, r2
 800228e:	b29a      	uxth	r2, r3
 8002290:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002292:	801a      	strh	r2, [r3, #0]
 8002294:	e019      	b.n	80022ca <HAL_PCD_EP_DB_Transmit+0x77c>
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	785b      	ldrb	r3, [r3, #1]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d115      	bne.n	80022ca <HAL_PCD_EP_DB_Transmit+0x77c>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	461a      	mov	r2, r3
 80022aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022ac:	4413      	add	r3, r2
 80022ae:	657b      	str	r3, [r7, #84]	; 0x54
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	00da      	lsls	r2, r3, #3
 80022b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022b8:	4413      	add	r3, r2
 80022ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80022be:	653b      	str	r3, [r7, #80]	; 0x50
 80022c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022c8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6818      	ldr	r0, [r3, #0]
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	6959      	ldr	r1, [r3, #20]
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	895a      	ldrh	r2, [r3, #10]
 80022d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022da:	b29b      	uxth	r3, r3
 80022dc:	f003 fe24 	bl	8005f28 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	461a      	mov	r2, r3
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	881b      	ldrh	r3, [r3, #0]
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022fa:	82bb      	strh	r3, [r7, #20]
 80022fc:	8abb      	ldrh	r3, [r7, #20]
 80022fe:	f083 0310 	eor.w	r3, r3, #16
 8002302:	82bb      	strh	r3, [r7, #20]
 8002304:	8abb      	ldrh	r3, [r7, #20]
 8002306:	f083 0320 	eor.w	r3, r3, #32
 800230a:	82bb      	strh	r3, [r7, #20]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	461a      	mov	r2, r3
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	441a      	add	r2, r3
 800231a:	8abb      	ldrh	r3, [r7, #20]
 800231c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002320:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002324:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800232c:	b29b      	uxth	r3, r3
 800232e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3790      	adds	r7, #144	; 0x90
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
	...

0800233c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002342:	af00      	add	r7, sp, #0
 8002344:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002348:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800234c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800234e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002352:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d102      	bne.n	8002362 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	f001 b83a 	b.w	80033d6 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002362:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002366:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	2b00      	cmp	r3, #0
 8002374:	f000 816f 	beq.w	8002656 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002378:	4bb5      	ldr	r3, [pc, #724]	; (8002650 <HAL_RCC_OscConfig+0x314>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f003 030c 	and.w	r3, r3, #12
 8002380:	2b04      	cmp	r3, #4
 8002382:	d00c      	beq.n	800239e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002384:	4bb2      	ldr	r3, [pc, #712]	; (8002650 <HAL_RCC_OscConfig+0x314>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f003 030c 	and.w	r3, r3, #12
 800238c:	2b08      	cmp	r3, #8
 800238e:	d15c      	bne.n	800244a <HAL_RCC_OscConfig+0x10e>
 8002390:	4baf      	ldr	r3, [pc, #700]	; (8002650 <HAL_RCC_OscConfig+0x314>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800239c:	d155      	bne.n	800244a <HAL_RCC_OscConfig+0x10e>
 800239e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023a2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80023aa:	fa93 f3a3 	rbit	r3, r3
 80023ae:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  return result;
 80023b2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b6:	fab3 f383 	clz	r3, r3
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	095b      	lsrs	r3, r3, #5
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	f043 0301 	orr.w	r3, r3, #1
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d102      	bne.n	80023d0 <HAL_RCC_OscConfig+0x94>
 80023ca:	4ba1      	ldr	r3, [pc, #644]	; (8002650 <HAL_RCC_OscConfig+0x314>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	e015      	b.n	80023fc <HAL_RCC_OscConfig+0xc0>
 80023d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023d4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80023dc:	fa93 f3a3 	rbit	r3, r3
 80023e0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80023e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023e8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80023ec:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80023f0:	fa93 f3a3 	rbit	r3, r3
 80023f4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80023f8:	4b95      	ldr	r3, [pc, #596]	; (8002650 <HAL_RCC_OscConfig+0x314>)
 80023fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002400:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002404:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002408:	fa92 f2a2 	rbit	r2, r2
 800240c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002410:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002414:	fab2 f282 	clz	r2, r2
 8002418:	b2d2      	uxtb	r2, r2
 800241a:	f042 0220 	orr.w	r2, r2, #32
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	f002 021f 	and.w	r2, r2, #31
 8002424:	2101      	movs	r1, #1
 8002426:	fa01 f202 	lsl.w	r2, r1, r2
 800242a:	4013      	ands	r3, r2
 800242c:	2b00      	cmp	r3, #0
 800242e:	f000 8111 	beq.w	8002654 <HAL_RCC_OscConfig+0x318>
 8002432:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002436:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	f040 8108 	bne.w	8002654 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	f000 bfc6 	b.w	80033d6 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800244a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800244e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800245a:	d106      	bne.n	800246a <HAL_RCC_OscConfig+0x12e>
 800245c:	4b7c      	ldr	r3, [pc, #496]	; (8002650 <HAL_RCC_OscConfig+0x314>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a7b      	ldr	r2, [pc, #492]	; (8002650 <HAL_RCC_OscConfig+0x314>)
 8002462:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002466:	6013      	str	r3, [r2, #0]
 8002468:	e036      	b.n	80024d8 <HAL_RCC_OscConfig+0x19c>
 800246a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800246e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d10c      	bne.n	8002494 <HAL_RCC_OscConfig+0x158>
 800247a:	4b75      	ldr	r3, [pc, #468]	; (8002650 <HAL_RCC_OscConfig+0x314>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a74      	ldr	r2, [pc, #464]	; (8002650 <HAL_RCC_OscConfig+0x314>)
 8002480:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002484:	6013      	str	r3, [r2, #0]
 8002486:	4b72      	ldr	r3, [pc, #456]	; (8002650 <HAL_RCC_OscConfig+0x314>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a71      	ldr	r2, [pc, #452]	; (8002650 <HAL_RCC_OscConfig+0x314>)
 800248c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002490:	6013      	str	r3, [r2, #0]
 8002492:	e021      	b.n	80024d8 <HAL_RCC_OscConfig+0x19c>
 8002494:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002498:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024a4:	d10c      	bne.n	80024c0 <HAL_RCC_OscConfig+0x184>
 80024a6:	4b6a      	ldr	r3, [pc, #424]	; (8002650 <HAL_RCC_OscConfig+0x314>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a69      	ldr	r2, [pc, #420]	; (8002650 <HAL_RCC_OscConfig+0x314>)
 80024ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024b0:	6013      	str	r3, [r2, #0]
 80024b2:	4b67      	ldr	r3, [pc, #412]	; (8002650 <HAL_RCC_OscConfig+0x314>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a66      	ldr	r2, [pc, #408]	; (8002650 <HAL_RCC_OscConfig+0x314>)
 80024b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024bc:	6013      	str	r3, [r2, #0]
 80024be:	e00b      	b.n	80024d8 <HAL_RCC_OscConfig+0x19c>
 80024c0:	4b63      	ldr	r3, [pc, #396]	; (8002650 <HAL_RCC_OscConfig+0x314>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a62      	ldr	r2, [pc, #392]	; (8002650 <HAL_RCC_OscConfig+0x314>)
 80024c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ca:	6013      	str	r3, [r2, #0]
 80024cc:	4b60      	ldr	r3, [pc, #384]	; (8002650 <HAL_RCC_OscConfig+0x314>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a5f      	ldr	r2, [pc, #380]	; (8002650 <HAL_RCC_OscConfig+0x314>)
 80024d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024d6:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024dc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d059      	beq.n	800259c <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e8:	f7fe f98e 	bl	8000808 <HAL_GetTick>
 80024ec:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f0:	e00a      	b.n	8002508 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024f2:	f7fe f989 	bl	8000808 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b64      	cmp	r3, #100	; 0x64
 8002500:	d902      	bls.n	8002508 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	f000 bf67 	b.w	80033d6 <HAL_RCC_OscConfig+0x109a>
 8002508:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800250c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002510:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002514:	fa93 f3a3 	rbit	r3, r3
 8002518:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 800251c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002520:	fab3 f383 	clz	r3, r3
 8002524:	b2db      	uxtb	r3, r3
 8002526:	095b      	lsrs	r3, r3, #5
 8002528:	b2db      	uxtb	r3, r3
 800252a:	f043 0301 	orr.w	r3, r3, #1
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b01      	cmp	r3, #1
 8002532:	d102      	bne.n	800253a <HAL_RCC_OscConfig+0x1fe>
 8002534:	4b46      	ldr	r3, [pc, #280]	; (8002650 <HAL_RCC_OscConfig+0x314>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	e015      	b.n	8002566 <HAL_RCC_OscConfig+0x22a>
 800253a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800253e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002542:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002546:	fa93 f3a3 	rbit	r3, r3
 800254a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800254e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002552:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002556:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800255a:	fa93 f3a3 	rbit	r3, r3
 800255e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002562:	4b3b      	ldr	r3, [pc, #236]	; (8002650 <HAL_RCC_OscConfig+0x314>)
 8002564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002566:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800256a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800256e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002572:	fa92 f2a2 	rbit	r2, r2
 8002576:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800257a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800257e:	fab2 f282 	clz	r2, r2
 8002582:	b2d2      	uxtb	r2, r2
 8002584:	f042 0220 	orr.w	r2, r2, #32
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	f002 021f 	and.w	r2, r2, #31
 800258e:	2101      	movs	r1, #1
 8002590:	fa01 f202 	lsl.w	r2, r1, r2
 8002594:	4013      	ands	r3, r2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d0ab      	beq.n	80024f2 <HAL_RCC_OscConfig+0x1b6>
 800259a:	e05c      	b.n	8002656 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259c:	f7fe f934 	bl	8000808 <HAL_GetTick>
 80025a0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025a4:	e00a      	b.n	80025bc <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025a6:	f7fe f92f 	bl	8000808 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b64      	cmp	r3, #100	; 0x64
 80025b4:	d902      	bls.n	80025bc <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	f000 bf0d 	b.w	80033d6 <HAL_RCC_OscConfig+0x109a>
 80025bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025c0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80025c8:	fa93 f3a3 	rbit	r3, r3
 80025cc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80025d0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025d4:	fab3 f383 	clz	r3, r3
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	095b      	lsrs	r3, r3, #5
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	f043 0301 	orr.w	r3, r3, #1
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d102      	bne.n	80025ee <HAL_RCC_OscConfig+0x2b2>
 80025e8:	4b19      	ldr	r3, [pc, #100]	; (8002650 <HAL_RCC_OscConfig+0x314>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	e015      	b.n	800261a <HAL_RCC_OscConfig+0x2de>
 80025ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025f2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80025fa:	fa93 f3a3 	rbit	r3, r3
 80025fe:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002602:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002606:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800260a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800260e:	fa93 f3a3 	rbit	r3, r3
 8002612:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002616:	4b0e      	ldr	r3, [pc, #56]	; (8002650 <HAL_RCC_OscConfig+0x314>)
 8002618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800261e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002622:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002626:	fa92 f2a2 	rbit	r2, r2
 800262a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800262e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002632:	fab2 f282 	clz	r2, r2
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	f042 0220 	orr.w	r2, r2, #32
 800263c:	b2d2      	uxtb	r2, r2
 800263e:	f002 021f 	and.w	r2, r2, #31
 8002642:	2101      	movs	r1, #1
 8002644:	fa01 f202 	lsl.w	r2, r1, r2
 8002648:	4013      	ands	r3, r2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1ab      	bne.n	80025a6 <HAL_RCC_OscConfig+0x26a>
 800264e:	e002      	b.n	8002656 <HAL_RCC_OscConfig+0x31a>
 8002650:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002654:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002656:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800265a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b00      	cmp	r3, #0
 8002668:	f000 817f 	beq.w	800296a <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800266c:	4ba7      	ldr	r3, [pc, #668]	; (800290c <HAL_RCC_OscConfig+0x5d0>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f003 030c 	and.w	r3, r3, #12
 8002674:	2b00      	cmp	r3, #0
 8002676:	d00c      	beq.n	8002692 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002678:	4ba4      	ldr	r3, [pc, #656]	; (800290c <HAL_RCC_OscConfig+0x5d0>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f003 030c 	and.w	r3, r3, #12
 8002680:	2b08      	cmp	r3, #8
 8002682:	d173      	bne.n	800276c <HAL_RCC_OscConfig+0x430>
 8002684:	4ba1      	ldr	r3, [pc, #644]	; (800290c <HAL_RCC_OscConfig+0x5d0>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800268c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002690:	d16c      	bne.n	800276c <HAL_RCC_OscConfig+0x430>
 8002692:	2302      	movs	r3, #2
 8002694:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002698:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800269c:	fa93 f3a3 	rbit	r3, r3
 80026a0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80026a4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026a8:	fab3 f383 	clz	r3, r3
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	095b      	lsrs	r3, r3, #5
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	f043 0301 	orr.w	r3, r3, #1
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d102      	bne.n	80026c2 <HAL_RCC_OscConfig+0x386>
 80026bc:	4b93      	ldr	r3, [pc, #588]	; (800290c <HAL_RCC_OscConfig+0x5d0>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	e013      	b.n	80026ea <HAL_RCC_OscConfig+0x3ae>
 80026c2:	2302      	movs	r3, #2
 80026c4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80026cc:	fa93 f3a3 	rbit	r3, r3
 80026d0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80026d4:	2302      	movs	r3, #2
 80026d6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80026da:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80026de:	fa93 f3a3 	rbit	r3, r3
 80026e2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80026e6:	4b89      	ldr	r3, [pc, #548]	; (800290c <HAL_RCC_OscConfig+0x5d0>)
 80026e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ea:	2202      	movs	r2, #2
 80026ec:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80026f0:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80026f4:	fa92 f2a2 	rbit	r2, r2
 80026f8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80026fc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002700:	fab2 f282 	clz	r2, r2
 8002704:	b2d2      	uxtb	r2, r2
 8002706:	f042 0220 	orr.w	r2, r2, #32
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	f002 021f 	and.w	r2, r2, #31
 8002710:	2101      	movs	r1, #1
 8002712:	fa01 f202 	lsl.w	r2, r1, r2
 8002716:	4013      	ands	r3, r2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d00a      	beq.n	8002732 <HAL_RCC_OscConfig+0x3f6>
 800271c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002720:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d002      	beq.n	8002732 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	f000 be52 	b.w	80033d6 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002732:	4b76      	ldr	r3, [pc, #472]	; (800290c <HAL_RCC_OscConfig+0x5d0>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800273a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800273e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	21f8      	movs	r1, #248	; 0xf8
 8002748:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274c:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002750:	fa91 f1a1 	rbit	r1, r1
 8002754:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002758:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800275c:	fab1 f181 	clz	r1, r1
 8002760:	b2c9      	uxtb	r1, r1
 8002762:	408b      	lsls	r3, r1
 8002764:	4969      	ldr	r1, [pc, #420]	; (800290c <HAL_RCC_OscConfig+0x5d0>)
 8002766:	4313      	orrs	r3, r2
 8002768:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800276a:	e0fe      	b.n	800296a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800276c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002770:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	2b00      	cmp	r3, #0
 800277a:	f000 8088 	beq.w	800288e <HAL_RCC_OscConfig+0x552>
 800277e:	2301      	movs	r3, #1
 8002780:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002784:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002788:	fa93 f3a3 	rbit	r3, r3
 800278c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002790:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002794:	fab3 f383 	clz	r3, r3
 8002798:	b2db      	uxtb	r3, r3
 800279a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800279e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	461a      	mov	r2, r3
 80027a6:	2301      	movs	r3, #1
 80027a8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027aa:	f7fe f82d 	bl	8000808 <HAL_GetTick>
 80027ae:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b2:	e00a      	b.n	80027ca <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027b4:	f7fe f828 	bl	8000808 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d902      	bls.n	80027ca <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	f000 be06 	b.w	80033d6 <HAL_RCC_OscConfig+0x109a>
 80027ca:	2302      	movs	r3, #2
 80027cc:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80027d4:	fa93 f3a3 	rbit	r3, r3
 80027d8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80027dc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e0:	fab3 f383 	clz	r3, r3
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	095b      	lsrs	r3, r3, #5
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	f043 0301 	orr.w	r3, r3, #1
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d102      	bne.n	80027fa <HAL_RCC_OscConfig+0x4be>
 80027f4:	4b45      	ldr	r3, [pc, #276]	; (800290c <HAL_RCC_OscConfig+0x5d0>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	e013      	b.n	8002822 <HAL_RCC_OscConfig+0x4e6>
 80027fa:	2302      	movs	r3, #2
 80027fc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002800:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002804:	fa93 f3a3 	rbit	r3, r3
 8002808:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800280c:	2302      	movs	r3, #2
 800280e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002812:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002816:	fa93 f3a3 	rbit	r3, r3
 800281a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800281e:	4b3b      	ldr	r3, [pc, #236]	; (800290c <HAL_RCC_OscConfig+0x5d0>)
 8002820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002822:	2202      	movs	r2, #2
 8002824:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002828:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800282c:	fa92 f2a2 	rbit	r2, r2
 8002830:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002834:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002838:	fab2 f282 	clz	r2, r2
 800283c:	b2d2      	uxtb	r2, r2
 800283e:	f042 0220 	orr.w	r2, r2, #32
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	f002 021f 	and.w	r2, r2, #31
 8002848:	2101      	movs	r1, #1
 800284a:	fa01 f202 	lsl.w	r2, r1, r2
 800284e:	4013      	ands	r3, r2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d0af      	beq.n	80027b4 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002854:	4b2d      	ldr	r3, [pc, #180]	; (800290c <HAL_RCC_OscConfig+0x5d0>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800285c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002860:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	21f8      	movs	r1, #248	; 0xf8
 800286a:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286e:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002872:	fa91 f1a1 	rbit	r1, r1
 8002876:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800287a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800287e:	fab1 f181 	clz	r1, r1
 8002882:	b2c9      	uxtb	r1, r1
 8002884:	408b      	lsls	r3, r1
 8002886:	4921      	ldr	r1, [pc, #132]	; (800290c <HAL_RCC_OscConfig+0x5d0>)
 8002888:	4313      	orrs	r3, r2
 800288a:	600b      	str	r3, [r1, #0]
 800288c:	e06d      	b.n	800296a <HAL_RCC_OscConfig+0x62e>
 800288e:	2301      	movs	r3, #1
 8002890:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002894:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002898:	fa93 f3a3 	rbit	r3, r3
 800289c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80028a0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028a4:	fab3 f383 	clz	r3, r3
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80028ae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	461a      	mov	r2, r3
 80028b6:	2300      	movs	r3, #0
 80028b8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ba:	f7fd ffa5 	bl	8000808 <HAL_GetTick>
 80028be:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028c2:	e00a      	b.n	80028da <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028c4:	f7fd ffa0 	bl	8000808 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d902      	bls.n	80028da <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	f000 bd7e 	b.w	80033d6 <HAL_RCC_OscConfig+0x109a>
 80028da:	2302      	movs	r3, #2
 80028dc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80028e4:	fa93 f3a3 	rbit	r3, r3
 80028e8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80028ec:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028f0:	fab3 f383 	clz	r3, r3
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	095b      	lsrs	r3, r3, #5
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	f043 0301 	orr.w	r3, r3, #1
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b01      	cmp	r3, #1
 8002902:	d105      	bne.n	8002910 <HAL_RCC_OscConfig+0x5d4>
 8002904:	4b01      	ldr	r3, [pc, #4]	; (800290c <HAL_RCC_OscConfig+0x5d0>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	e016      	b.n	8002938 <HAL_RCC_OscConfig+0x5fc>
 800290a:	bf00      	nop
 800290c:	40021000 	.word	0x40021000
 8002910:	2302      	movs	r3, #2
 8002912:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002916:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800291a:	fa93 f3a3 	rbit	r3, r3
 800291e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002922:	2302      	movs	r3, #2
 8002924:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002928:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800292c:	fa93 f3a3 	rbit	r3, r3
 8002930:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002934:	4bbf      	ldr	r3, [pc, #764]	; (8002c34 <HAL_RCC_OscConfig+0x8f8>)
 8002936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002938:	2202      	movs	r2, #2
 800293a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800293e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002942:	fa92 f2a2 	rbit	r2, r2
 8002946:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800294a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800294e:	fab2 f282 	clz	r2, r2
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	f042 0220 	orr.w	r2, r2, #32
 8002958:	b2d2      	uxtb	r2, r2
 800295a:	f002 021f 	and.w	r2, r2, #31
 800295e:	2101      	movs	r1, #1
 8002960:	fa01 f202 	lsl.w	r2, r1, r2
 8002964:	4013      	ands	r3, r2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1ac      	bne.n	80028c4 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800296a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800296e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0308 	and.w	r3, r3, #8
 800297a:	2b00      	cmp	r3, #0
 800297c:	f000 8113 	beq.w	8002ba6 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002980:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002984:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d07c      	beq.n	8002a8a <HAL_RCC_OscConfig+0x74e>
 8002990:	2301      	movs	r3, #1
 8002992:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002996:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800299a:	fa93 f3a3 	rbit	r3, r3
 800299e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80029a2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029a6:	fab3 f383 	clz	r3, r3
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	461a      	mov	r2, r3
 80029ae:	4ba2      	ldr	r3, [pc, #648]	; (8002c38 <HAL_RCC_OscConfig+0x8fc>)
 80029b0:	4413      	add	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	461a      	mov	r2, r3
 80029b6:	2301      	movs	r3, #1
 80029b8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ba:	f7fd ff25 	bl	8000808 <HAL_GetTick>
 80029be:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029c2:	e00a      	b.n	80029da <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029c4:	f7fd ff20 	bl	8000808 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d902      	bls.n	80029da <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	f000 bcfe 	b.w	80033d6 <HAL_RCC_OscConfig+0x109a>
 80029da:	2302      	movs	r3, #2
 80029dc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029e4:	fa93 f2a3 	rbit	r2, r3
 80029e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029ec:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80029fa:	2202      	movs	r2, #2
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	fa93 f2a3 	rbit	r2, r3
 8002a0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a1a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002a1e:	2202      	movs	r2, #2
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a26:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	fa93 f2a3 	rbit	r2, r3
 8002a30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a34:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002a38:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a3a:	4b7e      	ldr	r3, [pc, #504]	; (8002c34 <HAL_RCC_OscConfig+0x8f8>)
 8002a3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a42:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002a46:	2102      	movs	r1, #2
 8002a48:	6019      	str	r1, [r3, #0]
 8002a4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a4e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	fa93 f1a3 	rbit	r1, r3
 8002a58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a5c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002a60:	6019      	str	r1, [r3, #0]
  return result;
 8002a62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a66:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	fab3 f383 	clz	r3, r3
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	f003 031f 	and.w	r3, r3, #31
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a82:	4013      	ands	r3, r2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d09d      	beq.n	80029c4 <HAL_RCC_OscConfig+0x688>
 8002a88:	e08d      	b.n	8002ba6 <HAL_RCC_OscConfig+0x86a>
 8002a8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a8e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002a92:	2201      	movs	r2, #1
 8002a94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a9a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	fa93 f2a3 	rbit	r2, r3
 8002aa4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002aa8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002aac:	601a      	str	r2, [r3, #0]
  return result;
 8002aae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ab2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002ab6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ab8:	fab3 f383 	clz	r3, r3
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	461a      	mov	r2, r3
 8002ac0:	4b5d      	ldr	r3, [pc, #372]	; (8002c38 <HAL_RCC_OscConfig+0x8fc>)
 8002ac2:	4413      	add	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	2300      	movs	r3, #0
 8002aca:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002acc:	f7fd fe9c 	bl	8000808 <HAL_GetTick>
 8002ad0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ad4:	e00a      	b.n	8002aec <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ad6:	f7fd fe97 	bl	8000808 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d902      	bls.n	8002aec <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	f000 bc75 	b.w	80033d6 <HAL_RCC_OscConfig+0x109a>
 8002aec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002af0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002af4:	2202      	movs	r2, #2
 8002af6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002afc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	fa93 f2a3 	rbit	r2, r3
 8002b06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b0a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002b18:	2202      	movs	r2, #2
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	fa93 f2a3 	rbit	r2, r3
 8002b2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b38:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002b3c:	2202      	movs	r2, #2
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b44:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	fa93 f2a3 	rbit	r2, r3
 8002b4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b52:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002b56:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b58:	4b36      	ldr	r3, [pc, #216]	; (8002c34 <HAL_RCC_OscConfig+0x8f8>)
 8002b5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b60:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002b64:	2102      	movs	r1, #2
 8002b66:	6019      	str	r1, [r3, #0]
 8002b68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b6c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	fa93 f1a3 	rbit	r1, r3
 8002b76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b7a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002b7e:	6019      	str	r1, [r3, #0]
  return result;
 8002b80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b84:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	fab3 f383 	clz	r3, r3
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	f003 031f 	and.w	r3, r3, #31
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d197      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ba6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002baa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0304 	and.w	r3, r3, #4
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f000 81a5 	beq.w	8002f06 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bc2:	4b1c      	ldr	r3, [pc, #112]	; (8002c34 <HAL_RCC_OscConfig+0x8f8>)
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d116      	bne.n	8002bfc <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bce:	4b19      	ldr	r3, [pc, #100]	; (8002c34 <HAL_RCC_OscConfig+0x8f8>)
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	4a18      	ldr	r2, [pc, #96]	; (8002c34 <HAL_RCC_OscConfig+0x8f8>)
 8002bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bd8:	61d3      	str	r3, [r2, #28]
 8002bda:	4b16      	ldr	r3, [pc, #88]	; (8002c34 <HAL_RCC_OscConfig+0x8f8>)
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002be2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002be6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bf0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bf4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bfc:	4b0f      	ldr	r3, [pc, #60]	; (8002c3c <HAL_RCC_OscConfig+0x900>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d121      	bne.n	8002c4c <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c08:	4b0c      	ldr	r3, [pc, #48]	; (8002c3c <HAL_RCC_OscConfig+0x900>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a0b      	ldr	r2, [pc, #44]	; (8002c3c <HAL_RCC_OscConfig+0x900>)
 8002c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c12:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c14:	f7fd fdf8 	bl	8000808 <HAL_GetTick>
 8002c18:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c1c:	e010      	b.n	8002c40 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c1e:	f7fd fdf3 	bl	8000808 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b64      	cmp	r3, #100	; 0x64
 8002c2c:	d908      	bls.n	8002c40 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e3d1      	b.n	80033d6 <HAL_RCC_OscConfig+0x109a>
 8002c32:	bf00      	nop
 8002c34:	40021000 	.word	0x40021000
 8002c38:	10908120 	.word	0x10908120
 8002c3c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c40:	4b8d      	ldr	r3, [pc, #564]	; (8002e78 <HAL_RCC_OscConfig+0xb3c>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d0e8      	beq.n	8002c1e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c50:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d106      	bne.n	8002c6a <HAL_RCC_OscConfig+0x92e>
 8002c5c:	4b87      	ldr	r3, [pc, #540]	; (8002e7c <HAL_RCC_OscConfig+0xb40>)
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	4a86      	ldr	r2, [pc, #536]	; (8002e7c <HAL_RCC_OscConfig+0xb40>)
 8002c62:	f043 0301 	orr.w	r3, r3, #1
 8002c66:	6213      	str	r3, [r2, #32]
 8002c68:	e035      	b.n	8002cd6 <HAL_RCC_OscConfig+0x99a>
 8002c6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c6e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10c      	bne.n	8002c94 <HAL_RCC_OscConfig+0x958>
 8002c7a:	4b80      	ldr	r3, [pc, #512]	; (8002e7c <HAL_RCC_OscConfig+0xb40>)
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	4a7f      	ldr	r2, [pc, #508]	; (8002e7c <HAL_RCC_OscConfig+0xb40>)
 8002c80:	f023 0301 	bic.w	r3, r3, #1
 8002c84:	6213      	str	r3, [r2, #32]
 8002c86:	4b7d      	ldr	r3, [pc, #500]	; (8002e7c <HAL_RCC_OscConfig+0xb40>)
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	4a7c      	ldr	r2, [pc, #496]	; (8002e7c <HAL_RCC_OscConfig+0xb40>)
 8002c8c:	f023 0304 	bic.w	r3, r3, #4
 8002c90:	6213      	str	r3, [r2, #32]
 8002c92:	e020      	b.n	8002cd6 <HAL_RCC_OscConfig+0x99a>
 8002c94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c98:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	2b05      	cmp	r3, #5
 8002ca2:	d10c      	bne.n	8002cbe <HAL_RCC_OscConfig+0x982>
 8002ca4:	4b75      	ldr	r3, [pc, #468]	; (8002e7c <HAL_RCC_OscConfig+0xb40>)
 8002ca6:	6a1b      	ldr	r3, [r3, #32]
 8002ca8:	4a74      	ldr	r2, [pc, #464]	; (8002e7c <HAL_RCC_OscConfig+0xb40>)
 8002caa:	f043 0304 	orr.w	r3, r3, #4
 8002cae:	6213      	str	r3, [r2, #32]
 8002cb0:	4b72      	ldr	r3, [pc, #456]	; (8002e7c <HAL_RCC_OscConfig+0xb40>)
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	4a71      	ldr	r2, [pc, #452]	; (8002e7c <HAL_RCC_OscConfig+0xb40>)
 8002cb6:	f043 0301 	orr.w	r3, r3, #1
 8002cba:	6213      	str	r3, [r2, #32]
 8002cbc:	e00b      	b.n	8002cd6 <HAL_RCC_OscConfig+0x99a>
 8002cbe:	4b6f      	ldr	r3, [pc, #444]	; (8002e7c <HAL_RCC_OscConfig+0xb40>)
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	4a6e      	ldr	r2, [pc, #440]	; (8002e7c <HAL_RCC_OscConfig+0xb40>)
 8002cc4:	f023 0301 	bic.w	r3, r3, #1
 8002cc8:	6213      	str	r3, [r2, #32]
 8002cca:	4b6c      	ldr	r3, [pc, #432]	; (8002e7c <HAL_RCC_OscConfig+0xb40>)
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	4a6b      	ldr	r2, [pc, #428]	; (8002e7c <HAL_RCC_OscConfig+0xb40>)
 8002cd0:	f023 0304 	bic.w	r3, r3, #4
 8002cd4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cda:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f000 8081 	beq.w	8002dea <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ce8:	f7fd fd8e 	bl	8000808 <HAL_GetTick>
 8002cec:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf0:	e00b      	b.n	8002d0a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cf2:	f7fd fd89 	bl	8000808 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e365      	b.n	80033d6 <HAL_RCC_OscConfig+0x109a>
 8002d0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d0e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002d12:	2202      	movs	r2, #2
 8002d14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d1a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	fa93 f2a3 	rbit	r2, r3
 8002d24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d28:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d32:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002d36:	2202      	movs	r2, #2
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d3e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	fa93 f2a3 	rbit	r2, r3
 8002d48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d4c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002d50:	601a      	str	r2, [r3, #0]
  return result;
 8002d52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d56:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002d5a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d5c:	fab3 f383 	clz	r3, r3
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	095b      	lsrs	r3, r3, #5
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	f043 0302 	orr.w	r3, r3, #2
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d102      	bne.n	8002d76 <HAL_RCC_OscConfig+0xa3a>
 8002d70:	4b42      	ldr	r3, [pc, #264]	; (8002e7c <HAL_RCC_OscConfig+0xb40>)
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	e013      	b.n	8002d9e <HAL_RCC_OscConfig+0xa62>
 8002d76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d7a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002d7e:	2202      	movs	r2, #2
 8002d80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d86:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	fa93 f2a3 	rbit	r2, r3
 8002d90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d94:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002d98:	601a      	str	r2, [r3, #0]
 8002d9a:	4b38      	ldr	r3, [pc, #224]	; (8002e7c <HAL_RCC_OscConfig+0xb40>)
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002da2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002da6:	2102      	movs	r1, #2
 8002da8:	6011      	str	r1, [r2, #0]
 8002daa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002dae:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002db2:	6812      	ldr	r2, [r2, #0]
 8002db4:	fa92 f1a2 	rbit	r1, r2
 8002db8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002dbc:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002dc0:	6011      	str	r1, [r2, #0]
  return result;
 8002dc2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002dc6:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002dca:	6812      	ldr	r2, [r2, #0]
 8002dcc:	fab2 f282 	clz	r2, r2
 8002dd0:	b2d2      	uxtb	r2, r2
 8002dd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dd6:	b2d2      	uxtb	r2, r2
 8002dd8:	f002 021f 	and.w	r2, r2, #31
 8002ddc:	2101      	movs	r1, #1
 8002dde:	fa01 f202 	lsl.w	r2, r1, r2
 8002de2:	4013      	ands	r3, r2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d084      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x9b6>
 8002de8:	e083      	b.n	8002ef2 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dea:	f7fd fd0d 	bl	8000808 <HAL_GetTick>
 8002dee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002df2:	e00b      	b.n	8002e0c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002df4:	f7fd fd08 	bl	8000808 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e2e4      	b.n	80033d6 <HAL_RCC_OscConfig+0x109a>
 8002e0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e10:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002e14:	2202      	movs	r2, #2
 8002e16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e1c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	fa93 f2a3 	rbit	r2, r3
 8002e26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e2a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e34:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002e38:	2202      	movs	r2, #2
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e40:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	fa93 f2a3 	rbit	r2, r3
 8002e4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e4e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002e52:	601a      	str	r2, [r3, #0]
  return result;
 8002e54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e58:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002e5c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e5e:	fab3 f383 	clz	r3, r3
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	095b      	lsrs	r3, r3, #5
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	f043 0302 	orr.w	r3, r3, #2
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d106      	bne.n	8002e80 <HAL_RCC_OscConfig+0xb44>
 8002e72:	4b02      	ldr	r3, [pc, #8]	; (8002e7c <HAL_RCC_OscConfig+0xb40>)
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	e017      	b.n	8002ea8 <HAL_RCC_OscConfig+0xb6c>
 8002e78:	40007000 	.word	0x40007000
 8002e7c:	40021000 	.word	0x40021000
 8002e80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e84:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002e88:	2202      	movs	r2, #2
 8002e8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e90:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	fa93 f2a3 	rbit	r2, r3
 8002e9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e9e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	4bb3      	ldr	r3, [pc, #716]	; (8003174 <HAL_RCC_OscConfig+0xe38>)
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002eac:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002eb0:	2102      	movs	r1, #2
 8002eb2:	6011      	str	r1, [r2, #0]
 8002eb4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002eb8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002ebc:	6812      	ldr	r2, [r2, #0]
 8002ebe:	fa92 f1a2 	rbit	r1, r2
 8002ec2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002ec6:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002eca:	6011      	str	r1, [r2, #0]
  return result;
 8002ecc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002ed0:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002ed4:	6812      	ldr	r2, [r2, #0]
 8002ed6:	fab2 f282 	clz	r2, r2
 8002eda:	b2d2      	uxtb	r2, r2
 8002edc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ee0:	b2d2      	uxtb	r2, r2
 8002ee2:	f002 021f 	and.w	r2, r2, #31
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	fa01 f202 	lsl.w	r2, r1, r2
 8002eec:	4013      	ands	r3, r2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d180      	bne.n	8002df4 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ef2:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d105      	bne.n	8002f06 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002efa:	4b9e      	ldr	r3, [pc, #632]	; (8003174 <HAL_RCC_OscConfig+0xe38>)
 8002efc:	69db      	ldr	r3, [r3, #28]
 8002efe:	4a9d      	ldr	r2, [pc, #628]	; (8003174 <HAL_RCC_OscConfig+0xe38>)
 8002f00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f04:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f0a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 825e 	beq.w	80033d4 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f18:	4b96      	ldr	r3, [pc, #600]	; (8003174 <HAL_RCC_OscConfig+0xe38>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f003 030c 	and.w	r3, r3, #12
 8002f20:	2b08      	cmp	r3, #8
 8002f22:	f000 821f 	beq.w	8003364 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f2a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	f040 8170 	bne.w	8003218 <HAL_RCC_OscConfig+0xedc>
 8002f38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f3c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002f40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f4a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	fa93 f2a3 	rbit	r2, r3
 8002f54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f58:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002f5c:	601a      	str	r2, [r3, #0]
  return result;
 8002f5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f62:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002f66:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f68:	fab3 f383 	clz	r3, r3
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f72:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	461a      	mov	r2, r3
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7e:	f7fd fc43 	bl	8000808 <HAL_GetTick>
 8002f82:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f86:	e009      	b.n	8002f9c <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f88:	f7fd fc3e 	bl	8000808 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e21c      	b.n	80033d6 <HAL_RCC_OscConfig+0x109a>
 8002f9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fa0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002fa4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fa8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002faa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fae:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	fa93 f2a3 	rbit	r2, r3
 8002fb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fbc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002fc0:	601a      	str	r2, [r3, #0]
  return result;
 8002fc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fc6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002fca:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fcc:	fab3 f383 	clz	r3, r3
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	095b      	lsrs	r3, r3, #5
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	f043 0301 	orr.w	r3, r3, #1
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d102      	bne.n	8002fe6 <HAL_RCC_OscConfig+0xcaa>
 8002fe0:	4b64      	ldr	r3, [pc, #400]	; (8003174 <HAL_RCC_OscConfig+0xe38>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	e027      	b.n	8003036 <HAL_RCC_OscConfig+0xcfa>
 8002fe6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fea:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002fee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ff2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ff8:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	fa93 f2a3 	rbit	r2, r3
 8003002:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003006:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003010:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003014:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003018:	601a      	str	r2, [r3, #0]
 800301a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800301e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	fa93 f2a3 	rbit	r2, r3
 8003028:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800302c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	4b50      	ldr	r3, [pc, #320]	; (8003174 <HAL_RCC_OscConfig+0xe38>)
 8003034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003036:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800303a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800303e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003042:	6011      	str	r1, [r2, #0]
 8003044:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003048:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800304c:	6812      	ldr	r2, [r2, #0]
 800304e:	fa92 f1a2 	rbit	r1, r2
 8003052:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003056:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800305a:	6011      	str	r1, [r2, #0]
  return result;
 800305c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003060:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003064:	6812      	ldr	r2, [r2, #0]
 8003066:	fab2 f282 	clz	r2, r2
 800306a:	b2d2      	uxtb	r2, r2
 800306c:	f042 0220 	orr.w	r2, r2, #32
 8003070:	b2d2      	uxtb	r2, r2
 8003072:	f002 021f 	and.w	r2, r2, #31
 8003076:	2101      	movs	r1, #1
 8003078:	fa01 f202 	lsl.w	r2, r1, r2
 800307c:	4013      	ands	r3, r2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d182      	bne.n	8002f88 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003082:	4b3c      	ldr	r3, [pc, #240]	; (8003174 <HAL_RCC_OscConfig+0xe38>)
 8003084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003086:	f023 020f 	bic.w	r2, r3, #15
 800308a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800308e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003096:	4937      	ldr	r1, [pc, #220]	; (8003174 <HAL_RCC_OscConfig+0xe38>)
 8003098:	4313      	orrs	r3, r2
 800309a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800309c:	4b35      	ldr	r3, [pc, #212]	; (8003174 <HAL_RCC_OscConfig+0xe38>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80030a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030a8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6a19      	ldr	r1, [r3, #32]
 80030b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030b4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	69db      	ldr	r3, [r3, #28]
 80030bc:	430b      	orrs	r3, r1
 80030be:	492d      	ldr	r1, [pc, #180]	; (8003174 <HAL_RCC_OscConfig+0xe38>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	604b      	str	r3, [r1, #4]
 80030c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030c8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80030cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030d6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	fa93 f2a3 	rbit	r2, r3
 80030e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030e4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80030e8:	601a      	str	r2, [r3, #0]
  return result;
 80030ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030ee:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80030f2:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030f4:	fab3 f383 	clz	r3, r3
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030fe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	461a      	mov	r2, r3
 8003106:	2301      	movs	r3, #1
 8003108:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310a:	f7fd fb7d 	bl	8000808 <HAL_GetTick>
 800310e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003112:	e009      	b.n	8003128 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003114:	f7fd fb78 	bl	8000808 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d901      	bls.n	8003128 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e156      	b.n	80033d6 <HAL_RCC_OscConfig+0x109a>
 8003128:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800312c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003130:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003134:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003136:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800313a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	fa93 f2a3 	rbit	r2, r3
 8003144:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003148:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800314c:	601a      	str	r2, [r3, #0]
  return result;
 800314e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003152:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003156:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003158:	fab3 f383 	clz	r3, r3
 800315c:	b2db      	uxtb	r3, r3
 800315e:	095b      	lsrs	r3, r3, #5
 8003160:	b2db      	uxtb	r3, r3
 8003162:	f043 0301 	orr.w	r3, r3, #1
 8003166:	b2db      	uxtb	r3, r3
 8003168:	2b01      	cmp	r3, #1
 800316a:	d105      	bne.n	8003178 <HAL_RCC_OscConfig+0xe3c>
 800316c:	4b01      	ldr	r3, [pc, #4]	; (8003174 <HAL_RCC_OscConfig+0xe38>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	e02a      	b.n	80031c8 <HAL_RCC_OscConfig+0xe8c>
 8003172:	bf00      	nop
 8003174:	40021000 	.word	0x40021000
 8003178:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800317c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003180:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003184:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003186:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800318a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	fa93 f2a3 	rbit	r2, r3
 8003194:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003198:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800319c:	601a      	str	r2, [r3, #0]
 800319e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031a2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80031a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031aa:	601a      	str	r2, [r3, #0]
 80031ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031b0:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	fa93 f2a3 	rbit	r2, r3
 80031ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031be:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	4b86      	ldr	r3, [pc, #536]	; (80033e0 <HAL_RCC_OscConfig+0x10a4>)
 80031c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80031cc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80031d0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80031d4:	6011      	str	r1, [r2, #0]
 80031d6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80031da:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80031de:	6812      	ldr	r2, [r2, #0]
 80031e0:	fa92 f1a2 	rbit	r1, r2
 80031e4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80031e8:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80031ec:	6011      	str	r1, [r2, #0]
  return result;
 80031ee:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80031f2:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80031f6:	6812      	ldr	r2, [r2, #0]
 80031f8:	fab2 f282 	clz	r2, r2
 80031fc:	b2d2      	uxtb	r2, r2
 80031fe:	f042 0220 	orr.w	r2, r2, #32
 8003202:	b2d2      	uxtb	r2, r2
 8003204:	f002 021f 	and.w	r2, r2, #31
 8003208:	2101      	movs	r1, #1
 800320a:	fa01 f202 	lsl.w	r2, r1, r2
 800320e:	4013      	ands	r3, r2
 8003210:	2b00      	cmp	r3, #0
 8003212:	f43f af7f 	beq.w	8003114 <HAL_RCC_OscConfig+0xdd8>
 8003216:	e0dd      	b.n	80033d4 <HAL_RCC_OscConfig+0x1098>
 8003218:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800321c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003220:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003224:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003226:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800322a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	fa93 f2a3 	rbit	r2, r3
 8003234:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003238:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800323c:	601a      	str	r2, [r3, #0]
  return result;
 800323e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003242:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003246:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003248:	fab3 f383 	clz	r3, r3
 800324c:	b2db      	uxtb	r3, r3
 800324e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003252:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	461a      	mov	r2, r3
 800325a:	2300      	movs	r3, #0
 800325c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800325e:	f7fd fad3 	bl	8000808 <HAL_GetTick>
 8003262:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003266:	e009      	b.n	800327c <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003268:	f7fd face 	bl	8000808 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e0ac      	b.n	80033d6 <HAL_RCC_OscConfig+0x109a>
 800327c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003280:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003284:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003288:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800328e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	fa93 f2a3 	rbit	r2, r3
 8003298:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800329c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80032a0:	601a      	str	r2, [r3, #0]
  return result;
 80032a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032a6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80032aa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032ac:	fab3 f383 	clz	r3, r3
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	095b      	lsrs	r3, r3, #5
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	f043 0301 	orr.w	r3, r3, #1
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d102      	bne.n	80032c6 <HAL_RCC_OscConfig+0xf8a>
 80032c0:	4b47      	ldr	r3, [pc, #284]	; (80033e0 <HAL_RCC_OscConfig+0x10a4>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	e027      	b.n	8003316 <HAL_RCC_OscConfig+0xfda>
 80032c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032ca:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80032ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032d8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	fa93 f2a3 	rbit	r2, r3
 80032e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032e6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032f0:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80032f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032fe:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	fa93 f2a3 	rbit	r2, r3
 8003308:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800330c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	4b33      	ldr	r3, [pc, #204]	; (80033e0 <HAL_RCC_OscConfig+0x10a4>)
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003316:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800331a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800331e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003322:	6011      	str	r1, [r2, #0]
 8003324:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003328:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800332c:	6812      	ldr	r2, [r2, #0]
 800332e:	fa92 f1a2 	rbit	r1, r2
 8003332:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003336:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800333a:	6011      	str	r1, [r2, #0]
  return result;
 800333c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003340:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8003344:	6812      	ldr	r2, [r2, #0]
 8003346:	fab2 f282 	clz	r2, r2
 800334a:	b2d2      	uxtb	r2, r2
 800334c:	f042 0220 	orr.w	r2, r2, #32
 8003350:	b2d2      	uxtb	r2, r2
 8003352:	f002 021f 	and.w	r2, r2, #31
 8003356:	2101      	movs	r1, #1
 8003358:	fa01 f202 	lsl.w	r2, r1, r2
 800335c:	4013      	ands	r3, r2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d182      	bne.n	8003268 <HAL_RCC_OscConfig+0xf2c>
 8003362:	e037      	b.n	80033d4 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003364:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003368:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d101      	bne.n	8003378 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e02e      	b.n	80033d6 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003378:	4b19      	ldr	r3, [pc, #100]	; (80033e0 <HAL_RCC_OscConfig+0x10a4>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003380:	4b17      	ldr	r3, [pc, #92]	; (80033e0 <HAL_RCC_OscConfig+0x10a4>)
 8003382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003384:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003388:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800338c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003390:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003394:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	69db      	ldr	r3, [r3, #28]
 800339c:	429a      	cmp	r2, r3
 800339e:	d117      	bne.n	80033d0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80033a0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80033a4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033ac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d10b      	bne.n	80033d0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80033b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033bc:	f003 020f 	and.w	r2, r3, #15
 80033c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d001      	beq.n	80033d4 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e000      	b.n	80033d6 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40021000 	.word	0x40021000

080033e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b09e      	sub	sp, #120	; 0x78
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80033ee:	2300      	movs	r3, #0
 80033f0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d101      	bne.n	80033fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e162      	b.n	80036c2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033fc:	4b90      	ldr	r3, [pc, #576]	; (8003640 <HAL_RCC_ClockConfig+0x25c>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0307 	and.w	r3, r3, #7
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	429a      	cmp	r2, r3
 8003408:	d910      	bls.n	800342c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800340a:	4b8d      	ldr	r3, [pc, #564]	; (8003640 <HAL_RCC_ClockConfig+0x25c>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f023 0207 	bic.w	r2, r3, #7
 8003412:	498b      	ldr	r1, [pc, #556]	; (8003640 <HAL_RCC_ClockConfig+0x25c>)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	4313      	orrs	r3, r2
 8003418:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800341a:	4b89      	ldr	r3, [pc, #548]	; (8003640 <HAL_RCC_ClockConfig+0x25c>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0307 	and.w	r3, r3, #7
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	429a      	cmp	r2, r3
 8003426:	d001      	beq.n	800342c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e14a      	b.n	80036c2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d008      	beq.n	800344a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003438:	4b82      	ldr	r3, [pc, #520]	; (8003644 <HAL_RCC_ClockConfig+0x260>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	497f      	ldr	r1, [pc, #508]	; (8003644 <HAL_RCC_ClockConfig+0x260>)
 8003446:	4313      	orrs	r3, r2
 8003448:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	f000 80dc 	beq.w	8003610 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d13c      	bne.n	80034da <HAL_RCC_ClockConfig+0xf6>
 8003460:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003464:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003466:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003468:	fa93 f3a3 	rbit	r3, r3
 800346c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800346e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003470:	fab3 f383 	clz	r3, r3
 8003474:	b2db      	uxtb	r3, r3
 8003476:	095b      	lsrs	r3, r3, #5
 8003478:	b2db      	uxtb	r3, r3
 800347a:	f043 0301 	orr.w	r3, r3, #1
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b01      	cmp	r3, #1
 8003482:	d102      	bne.n	800348a <HAL_RCC_ClockConfig+0xa6>
 8003484:	4b6f      	ldr	r3, [pc, #444]	; (8003644 <HAL_RCC_ClockConfig+0x260>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	e00f      	b.n	80034aa <HAL_RCC_ClockConfig+0xc6>
 800348a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800348e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003490:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003492:	fa93 f3a3 	rbit	r3, r3
 8003496:	667b      	str	r3, [r7, #100]	; 0x64
 8003498:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800349c:	663b      	str	r3, [r7, #96]	; 0x60
 800349e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034a0:	fa93 f3a3 	rbit	r3, r3
 80034a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034a6:	4b67      	ldr	r3, [pc, #412]	; (8003644 <HAL_RCC_ClockConfig+0x260>)
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034ae:	65ba      	str	r2, [r7, #88]	; 0x58
 80034b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80034b2:	fa92 f2a2 	rbit	r2, r2
 80034b6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80034b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80034ba:	fab2 f282 	clz	r2, r2
 80034be:	b2d2      	uxtb	r2, r2
 80034c0:	f042 0220 	orr.w	r2, r2, #32
 80034c4:	b2d2      	uxtb	r2, r2
 80034c6:	f002 021f 	and.w	r2, r2, #31
 80034ca:	2101      	movs	r1, #1
 80034cc:	fa01 f202 	lsl.w	r2, r1, r2
 80034d0:	4013      	ands	r3, r2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d17b      	bne.n	80035ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e0f3      	b.n	80036c2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d13c      	bne.n	800355c <HAL_RCC_ClockConfig+0x178>
 80034e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034e6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034ea:	fa93 f3a3 	rbit	r3, r3
 80034ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80034f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034f2:	fab3 f383 	clz	r3, r3
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	095b      	lsrs	r3, r3, #5
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	f043 0301 	orr.w	r3, r3, #1
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b01      	cmp	r3, #1
 8003504:	d102      	bne.n	800350c <HAL_RCC_ClockConfig+0x128>
 8003506:	4b4f      	ldr	r3, [pc, #316]	; (8003644 <HAL_RCC_ClockConfig+0x260>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	e00f      	b.n	800352c <HAL_RCC_ClockConfig+0x148>
 800350c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003510:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003512:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003514:	fa93 f3a3 	rbit	r3, r3
 8003518:	647b      	str	r3, [r7, #68]	; 0x44
 800351a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800351e:	643b      	str	r3, [r7, #64]	; 0x40
 8003520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003522:	fa93 f3a3 	rbit	r3, r3
 8003526:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003528:	4b46      	ldr	r3, [pc, #280]	; (8003644 <HAL_RCC_ClockConfig+0x260>)
 800352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003530:	63ba      	str	r2, [r7, #56]	; 0x38
 8003532:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003534:	fa92 f2a2 	rbit	r2, r2
 8003538:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800353a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800353c:	fab2 f282 	clz	r2, r2
 8003540:	b2d2      	uxtb	r2, r2
 8003542:	f042 0220 	orr.w	r2, r2, #32
 8003546:	b2d2      	uxtb	r2, r2
 8003548:	f002 021f 	and.w	r2, r2, #31
 800354c:	2101      	movs	r1, #1
 800354e:	fa01 f202 	lsl.w	r2, r1, r2
 8003552:	4013      	ands	r3, r2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d13a      	bne.n	80035ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e0b2      	b.n	80036c2 <HAL_RCC_ClockConfig+0x2de>
 800355c:	2302      	movs	r3, #2
 800355e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003562:	fa93 f3a3 	rbit	r3, r3
 8003566:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800356a:	fab3 f383 	clz	r3, r3
 800356e:	b2db      	uxtb	r3, r3
 8003570:	095b      	lsrs	r3, r3, #5
 8003572:	b2db      	uxtb	r3, r3
 8003574:	f043 0301 	orr.w	r3, r3, #1
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b01      	cmp	r3, #1
 800357c:	d102      	bne.n	8003584 <HAL_RCC_ClockConfig+0x1a0>
 800357e:	4b31      	ldr	r3, [pc, #196]	; (8003644 <HAL_RCC_ClockConfig+0x260>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	e00d      	b.n	80035a0 <HAL_RCC_ClockConfig+0x1bc>
 8003584:	2302      	movs	r3, #2
 8003586:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800358a:	fa93 f3a3 	rbit	r3, r3
 800358e:	627b      	str	r3, [r7, #36]	; 0x24
 8003590:	2302      	movs	r3, #2
 8003592:	623b      	str	r3, [r7, #32]
 8003594:	6a3b      	ldr	r3, [r7, #32]
 8003596:	fa93 f3a3 	rbit	r3, r3
 800359a:	61fb      	str	r3, [r7, #28]
 800359c:	4b29      	ldr	r3, [pc, #164]	; (8003644 <HAL_RCC_ClockConfig+0x260>)
 800359e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a0:	2202      	movs	r2, #2
 80035a2:	61ba      	str	r2, [r7, #24]
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	fa92 f2a2 	rbit	r2, r2
 80035aa:	617a      	str	r2, [r7, #20]
  return result;
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	fab2 f282 	clz	r2, r2
 80035b2:	b2d2      	uxtb	r2, r2
 80035b4:	f042 0220 	orr.w	r2, r2, #32
 80035b8:	b2d2      	uxtb	r2, r2
 80035ba:	f002 021f 	and.w	r2, r2, #31
 80035be:	2101      	movs	r1, #1
 80035c0:	fa01 f202 	lsl.w	r2, r1, r2
 80035c4:	4013      	ands	r3, r2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e079      	b.n	80036c2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035ce:	4b1d      	ldr	r3, [pc, #116]	; (8003644 <HAL_RCC_ClockConfig+0x260>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f023 0203 	bic.w	r2, r3, #3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	491a      	ldr	r1, [pc, #104]	; (8003644 <HAL_RCC_ClockConfig+0x260>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035e0:	f7fd f912 	bl	8000808 <HAL_GetTick>
 80035e4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035e6:	e00a      	b.n	80035fe <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035e8:	f7fd f90e 	bl	8000808 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e061      	b.n	80036c2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035fe:	4b11      	ldr	r3, [pc, #68]	; (8003644 <HAL_RCC_ClockConfig+0x260>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f003 020c 	and.w	r2, r3, #12
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	429a      	cmp	r2, r3
 800360e:	d1eb      	bne.n	80035e8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003610:	4b0b      	ldr	r3, [pc, #44]	; (8003640 <HAL_RCC_ClockConfig+0x25c>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	429a      	cmp	r2, r3
 800361c:	d214      	bcs.n	8003648 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800361e:	4b08      	ldr	r3, [pc, #32]	; (8003640 <HAL_RCC_ClockConfig+0x25c>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f023 0207 	bic.w	r2, r3, #7
 8003626:	4906      	ldr	r1, [pc, #24]	; (8003640 <HAL_RCC_ClockConfig+0x25c>)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	4313      	orrs	r3, r2
 800362c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800362e:	4b04      	ldr	r3, [pc, #16]	; (8003640 <HAL_RCC_ClockConfig+0x25c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0307 	and.w	r3, r3, #7
 8003636:	683a      	ldr	r2, [r7, #0]
 8003638:	429a      	cmp	r2, r3
 800363a:	d005      	beq.n	8003648 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e040      	b.n	80036c2 <HAL_RCC_ClockConfig+0x2de>
 8003640:	40022000 	.word	0x40022000
 8003644:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	2b00      	cmp	r3, #0
 8003652:	d008      	beq.n	8003666 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003654:	4b1d      	ldr	r3, [pc, #116]	; (80036cc <HAL_RCC_ClockConfig+0x2e8>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	491a      	ldr	r1, [pc, #104]	; (80036cc <HAL_RCC_ClockConfig+0x2e8>)
 8003662:	4313      	orrs	r3, r2
 8003664:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0308 	and.w	r3, r3, #8
 800366e:	2b00      	cmp	r3, #0
 8003670:	d009      	beq.n	8003686 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003672:	4b16      	ldr	r3, [pc, #88]	; (80036cc <HAL_RCC_ClockConfig+0x2e8>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	00db      	lsls	r3, r3, #3
 8003680:	4912      	ldr	r1, [pc, #72]	; (80036cc <HAL_RCC_ClockConfig+0x2e8>)
 8003682:	4313      	orrs	r3, r2
 8003684:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003686:	f000 f829 	bl	80036dc <HAL_RCC_GetSysClockFreq>
 800368a:	4601      	mov	r1, r0
 800368c:	4b0f      	ldr	r3, [pc, #60]	; (80036cc <HAL_RCC_ClockConfig+0x2e8>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003694:	22f0      	movs	r2, #240	; 0xf0
 8003696:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003698:	693a      	ldr	r2, [r7, #16]
 800369a:	fa92 f2a2 	rbit	r2, r2
 800369e:	60fa      	str	r2, [r7, #12]
  return result;
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	fab2 f282 	clz	r2, r2
 80036a6:	b2d2      	uxtb	r2, r2
 80036a8:	40d3      	lsrs	r3, r2
 80036aa:	4a09      	ldr	r2, [pc, #36]	; (80036d0 <HAL_RCC_ClockConfig+0x2ec>)
 80036ac:	5cd3      	ldrb	r3, [r2, r3]
 80036ae:	fa21 f303 	lsr.w	r3, r1, r3
 80036b2:	4a08      	ldr	r2, [pc, #32]	; (80036d4 <HAL_RCC_ClockConfig+0x2f0>)
 80036b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80036b6:	4b08      	ldr	r3, [pc, #32]	; (80036d8 <HAL_RCC_ClockConfig+0x2f4>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7fd f860 	bl	8000780 <HAL_InitTick>
  
  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3778      	adds	r7, #120	; 0x78
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	40021000 	.word	0x40021000
 80036d0:	080060b4 	.word	0x080060b4
 80036d4:	20000000 	.word	0x20000000
 80036d8:	20000004 	.word	0x20000004

080036dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036dc:	b480      	push	{r7}
 80036de:	b08b      	sub	sp, #44	; 0x2c
 80036e0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036e2:	2300      	movs	r3, #0
 80036e4:	61fb      	str	r3, [r7, #28]
 80036e6:	2300      	movs	r3, #0
 80036e8:	61bb      	str	r3, [r7, #24]
 80036ea:	2300      	movs	r3, #0
 80036ec:	627b      	str	r3, [r7, #36]	; 0x24
 80036ee:	2300      	movs	r3, #0
 80036f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80036f2:	2300      	movs	r3, #0
 80036f4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80036f6:	4b2a      	ldr	r3, [pc, #168]	; (80037a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	f003 030c 	and.w	r3, r3, #12
 8003702:	2b04      	cmp	r3, #4
 8003704:	d002      	beq.n	800370c <HAL_RCC_GetSysClockFreq+0x30>
 8003706:	2b08      	cmp	r3, #8
 8003708:	d003      	beq.n	8003712 <HAL_RCC_GetSysClockFreq+0x36>
 800370a:	e03f      	b.n	800378c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800370c:	4b25      	ldr	r3, [pc, #148]	; (80037a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800370e:	623b      	str	r3, [r7, #32]
      break;
 8003710:	e03f      	b.n	8003792 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003718:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800371c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	fa92 f2a2 	rbit	r2, r2
 8003724:	607a      	str	r2, [r7, #4]
  return result;
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	fab2 f282 	clz	r2, r2
 800372c:	b2d2      	uxtb	r2, r2
 800372e:	40d3      	lsrs	r3, r2
 8003730:	4a1d      	ldr	r2, [pc, #116]	; (80037a8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003732:	5cd3      	ldrb	r3, [r2, r3]
 8003734:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003736:	4b1a      	ldr	r3, [pc, #104]	; (80037a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373a:	f003 030f 	and.w	r3, r3, #15
 800373e:	220f      	movs	r2, #15
 8003740:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	fa92 f2a2 	rbit	r2, r2
 8003748:	60fa      	str	r2, [r7, #12]
  return result;
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	fab2 f282 	clz	r2, r2
 8003750:	b2d2      	uxtb	r2, r2
 8003752:	40d3      	lsrs	r3, r2
 8003754:	4a15      	ldr	r2, [pc, #84]	; (80037ac <HAL_RCC_GetSysClockFreq+0xd0>)
 8003756:	5cd3      	ldrb	r3, [r2, r3]
 8003758:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d008      	beq.n	8003776 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003764:	4a0f      	ldr	r2, [pc, #60]	; (80037a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	fbb2 f2f3 	udiv	r2, r2, r3
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	fb02 f303 	mul.w	r3, r2, r3
 8003772:	627b      	str	r3, [r7, #36]	; 0x24
 8003774:	e007      	b.n	8003786 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003776:	4a0b      	ldr	r2, [pc, #44]	; (80037a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	fbb2 f2f3 	udiv	r2, r2, r3
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	fb02 f303 	mul.w	r3, r2, r3
 8003784:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003788:	623b      	str	r3, [r7, #32]
      break;
 800378a:	e002      	b.n	8003792 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800378c:	4b05      	ldr	r3, [pc, #20]	; (80037a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800378e:	623b      	str	r3, [r7, #32]
      break;
 8003790:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003792:	6a3b      	ldr	r3, [r7, #32]
}
 8003794:	4618      	mov	r0, r3
 8003796:	372c      	adds	r7, #44	; 0x2c
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr
 80037a0:	40021000 	.word	0x40021000
 80037a4:	007a1200 	.word	0x007a1200
 80037a8:	080060cc 	.word	0x080060cc
 80037ac:	080060dc 	.word	0x080060dc

080037b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037b0:	b480      	push	{r7}
 80037b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037b4:	4b03      	ldr	r3, [pc, #12]	; (80037c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80037b6:	681b      	ldr	r3, [r3, #0]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	20000000 	.word	0x20000000

080037c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80037ce:	f7ff ffef 	bl	80037b0 <HAL_RCC_GetHCLKFreq>
 80037d2:	4601      	mov	r1, r0
 80037d4:	4b0b      	ldr	r3, [pc, #44]	; (8003804 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80037dc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80037e0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	fa92 f2a2 	rbit	r2, r2
 80037e8:	603a      	str	r2, [r7, #0]
  return result;
 80037ea:	683a      	ldr	r2, [r7, #0]
 80037ec:	fab2 f282 	clz	r2, r2
 80037f0:	b2d2      	uxtb	r2, r2
 80037f2:	40d3      	lsrs	r3, r2
 80037f4:	4a04      	ldr	r2, [pc, #16]	; (8003808 <HAL_RCC_GetPCLK1Freq+0x40>)
 80037f6:	5cd3      	ldrb	r3, [r2, r3]
 80037f8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80037fc:	4618      	mov	r0, r3
 80037fe:	3708      	adds	r7, #8
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	40021000 	.word	0x40021000
 8003808:	080060c4 	.word	0x080060c4

0800380c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003812:	f7ff ffcd 	bl	80037b0 <HAL_RCC_GetHCLKFreq>
 8003816:	4601      	mov	r1, r0
 8003818:	4b0b      	ldr	r3, [pc, #44]	; (8003848 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003820:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003824:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	fa92 f2a2 	rbit	r2, r2
 800382c:	603a      	str	r2, [r7, #0]
  return result;
 800382e:	683a      	ldr	r2, [r7, #0]
 8003830:	fab2 f282 	clz	r2, r2
 8003834:	b2d2      	uxtb	r2, r2
 8003836:	40d3      	lsrs	r3, r2
 8003838:	4a04      	ldr	r2, [pc, #16]	; (800384c <HAL_RCC_GetPCLK2Freq+0x40>)
 800383a:	5cd3      	ldrb	r3, [r2, r3]
 800383c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003840:	4618      	mov	r0, r3
 8003842:	3708      	adds	r7, #8
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	40021000 	.word	0x40021000
 800384c:	080060c4 	.word	0x080060c4

08003850 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b092      	sub	sp, #72	; 0x48
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003858:	2300      	movs	r3, #0
 800385a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800385c:	2300      	movs	r3, #0
 800385e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003860:	2300      	movs	r3, #0
 8003862:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800386e:	2b00      	cmp	r3, #0
 8003870:	f000 80d4 	beq.w	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003874:	4b4e      	ldr	r3, [pc, #312]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003876:	69db      	ldr	r3, [r3, #28]
 8003878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10e      	bne.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003880:	4b4b      	ldr	r3, [pc, #300]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003882:	69db      	ldr	r3, [r3, #28]
 8003884:	4a4a      	ldr	r2, [pc, #296]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800388a:	61d3      	str	r3, [r2, #28]
 800388c:	4b48      	ldr	r3, [pc, #288]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800388e:	69db      	ldr	r3, [r3, #28]
 8003890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003894:	60bb      	str	r3, [r7, #8]
 8003896:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003898:	2301      	movs	r3, #1
 800389a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800389e:	4b45      	ldr	r3, [pc, #276]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d118      	bne.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038aa:	4b42      	ldr	r3, [pc, #264]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a41      	ldr	r2, [pc, #260]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038b4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038b6:	f7fc ffa7 	bl	8000808 <HAL_GetTick>
 80038ba:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038bc:	e008      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038be:	f7fc ffa3 	bl	8000808 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	2b64      	cmp	r3, #100	; 0x64
 80038ca:	d901      	bls.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e1d6      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038d0:	4b38      	ldr	r3, [pc, #224]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d0f0      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038dc:	4b34      	ldr	r3, [pc, #208]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 8084 	beq.w	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d07c      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038fc:	4b2c      	ldr	r3, [pc, #176]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038fe:	6a1b      	ldr	r3, [r3, #32]
 8003900:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003904:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003906:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800390a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800390c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390e:	fa93 f3a3 	rbit	r3, r3
 8003912:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003916:	fab3 f383 	clz	r3, r3
 800391a:	b2db      	uxtb	r3, r3
 800391c:	461a      	mov	r2, r3
 800391e:	4b26      	ldr	r3, [pc, #152]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003920:	4413      	add	r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	461a      	mov	r2, r3
 8003926:	2301      	movs	r3, #1
 8003928:	6013      	str	r3, [r2, #0]
 800392a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800392e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003932:	fa93 f3a3 	rbit	r3, r3
 8003936:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800393a:	fab3 f383 	clz	r3, r3
 800393e:	b2db      	uxtb	r3, r3
 8003940:	461a      	mov	r2, r3
 8003942:	4b1d      	ldr	r3, [pc, #116]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003944:	4413      	add	r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	461a      	mov	r2, r3
 800394a:	2300      	movs	r3, #0
 800394c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800394e:	4a18      	ldr	r2, [pc, #96]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003952:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b00      	cmp	r3, #0
 800395c:	d04b      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800395e:	f7fc ff53 	bl	8000808 <HAL_GetTick>
 8003962:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003964:	e00a      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003966:	f7fc ff4f 	bl	8000808 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	f241 3288 	movw	r2, #5000	; 0x1388
 8003974:	4293      	cmp	r3, r2
 8003976:	d901      	bls.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e180      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800397c:	2302      	movs	r3, #2
 800397e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003982:	fa93 f3a3 	rbit	r3, r3
 8003986:	627b      	str	r3, [r7, #36]	; 0x24
 8003988:	2302      	movs	r3, #2
 800398a:	623b      	str	r3, [r7, #32]
 800398c:	6a3b      	ldr	r3, [r7, #32]
 800398e:	fa93 f3a3 	rbit	r3, r3
 8003992:	61fb      	str	r3, [r7, #28]
  return result;
 8003994:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003996:	fab3 f383 	clz	r3, r3
 800399a:	b2db      	uxtb	r3, r3
 800399c:	095b      	lsrs	r3, r3, #5
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	f043 0302 	orr.w	r3, r3, #2
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d108      	bne.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80039aa:	4b01      	ldr	r3, [pc, #4]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	e00d      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80039b0:	40021000 	.word	0x40021000
 80039b4:	40007000 	.word	0x40007000
 80039b8:	10908100 	.word	0x10908100
 80039bc:	2302      	movs	r3, #2
 80039be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	fa93 f3a3 	rbit	r3, r3
 80039c6:	617b      	str	r3, [r7, #20]
 80039c8:	4b9a      	ldr	r3, [pc, #616]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039cc:	2202      	movs	r2, #2
 80039ce:	613a      	str	r2, [r7, #16]
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	fa92 f2a2 	rbit	r2, r2
 80039d6:	60fa      	str	r2, [r7, #12]
  return result;
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	fab2 f282 	clz	r2, r2
 80039de:	b2d2      	uxtb	r2, r2
 80039e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039e4:	b2d2      	uxtb	r2, r2
 80039e6:	f002 021f 	and.w	r2, r2, #31
 80039ea:	2101      	movs	r1, #1
 80039ec:	fa01 f202 	lsl.w	r2, r1, r2
 80039f0:	4013      	ands	r3, r2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d0b7      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80039f6:	4b8f      	ldr	r3, [pc, #572]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	498c      	ldr	r1, [pc, #560]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a08:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d105      	bne.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a10:	4b88      	ldr	r3, [pc, #544]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a12:	69db      	ldr	r3, [r3, #28]
 8003a14:	4a87      	ldr	r2, [pc, #540]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a1a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d008      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a28:	4b82      	ldr	r3, [pc, #520]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2c:	f023 0203 	bic.w	r2, r3, #3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	497f      	ldr	r1, [pc, #508]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d008      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a46:	4b7b      	ldr	r3, [pc, #492]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	4978      	ldr	r1, [pc, #480]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0304 	and.w	r3, r3, #4
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d008      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a64:	4b73      	ldr	r3, [pc, #460]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a68:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	4970      	ldr	r1, [pc, #448]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0320 	and.w	r3, r3, #32
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d008      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a82:	4b6c      	ldr	r3, [pc, #432]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a86:	f023 0210 	bic.w	r2, r3, #16
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	4969      	ldr	r1, [pc, #420]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d008      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003aa0:	4b64      	ldr	r3, [pc, #400]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aac:	4961      	ldr	r1, [pc, #388]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d008      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003abe:	4b5d      	ldr	r3, [pc, #372]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac2:	f023 0220 	bic.w	r2, r3, #32
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	495a      	ldr	r1, [pc, #360]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d008      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003adc:	4b55      	ldr	r3, [pc, #340]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae8:	4952      	ldr	r1, [pc, #328]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0308 	and.w	r3, r3, #8
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d008      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003afa:	4b4e      	ldr	r3, [pc, #312]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	494b      	ldr	r1, [pc, #300]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0310 	and.w	r3, r3, #16
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d008      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b18:	4b46      	ldr	r3, [pc, #280]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	4943      	ldr	r1, [pc, #268]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d008      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b36:	4b3f      	ldr	r3, [pc, #252]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b42:	493c      	ldr	r1, [pc, #240]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d008      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003b54:	4b37      	ldr	r3, [pc, #220]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b58:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b60:	4934      	ldr	r1, [pc, #208]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d008      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003b72:	4b30      	ldr	r3, [pc, #192]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b76:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7e:	492d      	ldr	r1, [pc, #180]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d008      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003b90:	4b28      	ldr	r3, [pc, #160]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b9c:	4925      	ldr	r1, [pc, #148]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d008      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003bae:	4b21      	ldr	r3, [pc, #132]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bba:	491e      	ldr	r1, [pc, #120]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d008      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003bcc:	4b19      	ldr	r3, [pc, #100]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd8:	4916      	ldr	r1, [pc, #88]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d008      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003bea:	4b12      	ldr	r3, [pc, #72]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf6:	490f      	ldr	r1, [pc, #60]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d008      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003c08:	4b0a      	ldr	r3, [pc, #40]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c14:	4907      	ldr	r1, [pc, #28]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00c      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003c26:	4b03      	ldr	r3, [pc, #12]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	e002      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003c32:	bf00      	nop
 8003c34:	40021000 	.word	0x40021000
 8003c38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c3a:	4913      	ldr	r1, [pc, #76]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d008      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003c4c:	4b0e      	ldr	r3, [pc, #56]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c50:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c58:	490b      	ldr	r1, [pc, #44]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d008      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003c6a:	4b07      	ldr	r3, [pc, #28]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c76:	4904      	ldr	r1, [pc, #16]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3748      	adds	r7, #72	; 0x48
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	40021000 	.word	0x40021000

08003c8c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e073      	b.n	8003d8a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	7f5b      	ldrb	r3, [r3, #29]
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d105      	bne.n	8003cb8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f7fc fc4e 	bl	8000554 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2202      	movs	r2, #2
 8003cbc:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	f003 0310 	and.w	r3, r3, #16
 8003cc8:	2b10      	cmp	r3, #16
 8003cca:	d055      	beq.n	8003d78 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	22ca      	movs	r2, #202	; 0xca
 8003cd2:	625a      	str	r2, [r3, #36]	; 0x24
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2253      	movs	r2, #83	; 0x53
 8003cda:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 f87f 	bl	8003de0 <RTC_EnterInitMode>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003ce6:	7bfb      	ldrb	r3, [r7, #15]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d12c      	bne.n	8003d46 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	6812      	ldr	r2, [r2, #0]
 8003cf6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003cfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cfe:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6899      	ldr	r1, [r3, #8]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	431a      	orrs	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	695b      	ldr	r3, [r3, #20]
 8003d14:	431a      	orrs	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	68d2      	ldr	r2, [r2, #12]
 8003d26:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	6919      	ldr	r1, [r3, #16]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	041a      	lsls	r2, r3, #16
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 f886 	bl	8003e4e <RTC_ExitInitMode>
 8003d42:	4603      	mov	r3, r0
 8003d44:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003d46:	7bfb      	ldrb	r3, [r7, #15]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d110      	bne.n	8003d6e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d5a:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	699a      	ldr	r2, [r3, #24]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	22ff      	movs	r2, #255	; 0xff
 8003d74:	625a      	str	r2, [r3, #36]	; 0x24
 8003d76:	e001      	b.n	8003d7c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003d7c:	7bfb      	ldrb	r3, [r7, #15]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d102      	bne.n	8003d88 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8003d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
	...

08003d94 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a0d      	ldr	r2, [pc, #52]	; (8003ddc <HAL_RTC_WaitForSynchro+0x48>)
 8003da6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003da8:	f7fc fd2e 	bl	8000808 <HAL_GetTick>
 8003dac:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003dae:	e009      	b.n	8003dc4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003db0:	f7fc fd2a 	bl	8000808 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003dbe:	d901      	bls.n	8003dc4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e007      	b.n	8003dd4 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	f003 0320 	and.w	r3, r3, #32
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d0ee      	beq.n	8003db0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3710      	adds	r7, #16
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	0001ff5f 	.word	0x0001ff5f

08003de0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003de8:	2300      	movs	r3, #0
 8003dea:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003dec:	2300      	movs	r3, #0
 8003dee:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d122      	bne.n	8003e44 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68da      	ldr	r2, [r3, #12]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e0c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003e0e:	f7fc fcfb 	bl	8000808 <HAL_GetTick>
 8003e12:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003e14:	e00c      	b.n	8003e30 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003e16:	f7fc fcf7 	bl	8000808 <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e24:	d904      	bls.n	8003e30 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2204      	movs	r2, #4
 8003e2a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d102      	bne.n	8003e44 <RTC_EnterInitMode+0x64>
 8003e3e:	7bfb      	ldrb	r3, [r7, #15]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d1e8      	bne.n	8003e16 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b084      	sub	sp, #16
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e56:	2300      	movs	r3, #0
 8003e58:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68da      	ldr	r2, [r3, #12]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e68:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f003 0320 	and.w	r3, r3, #32
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d10a      	bne.n	8003e8e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f7ff ff8b 	bl	8003d94 <HAL_RTC_WaitForSynchro>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d004      	beq.n	8003e8e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2204      	movs	r2, #4
 8003e88:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3710      	adds	r7, #16
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e040      	b.n	8003f2c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d106      	bne.n	8003ec0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f7fc fb70 	bl	80005a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2224      	movs	r2, #36	; 0x24
 8003ec4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 0201 	bic.w	r2, r2, #1
 8003ed4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f82c 	bl	8003f34 <UART_SetConfig>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d101      	bne.n	8003ee6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e022      	b.n	8003f2c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d002      	beq.n	8003ef4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 f9f4 	bl	80042dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689a      	ldr	r2, [r3, #8]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f042 0201 	orr.w	r2, r2, #1
 8003f22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 fa7b 	bl	8004420 <UART_CheckIdleState>
 8003f2a:	4603      	mov	r3, r0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3708      	adds	r7, #8
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b088      	sub	sp, #32
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689a      	ldr	r2, [r3, #8]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	431a      	orrs	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	69db      	ldr	r3, [r3, #28]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	4b92      	ldr	r3, [pc, #584]	; (80041a8 <UART_SetConfig+0x274>)
 8003f60:	4013      	ands	r3, r2
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	6812      	ldr	r2, [r2, #0]
 8003f66:	6979      	ldr	r1, [r7, #20]
 8003f68:	430b      	orrs	r3, r1
 8003f6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68da      	ldr	r2, [r3, #12]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a1b      	ldr	r3, [r3, #32]
 8003f8c:	697a      	ldr	r2, [r7, #20]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a80      	ldr	r2, [pc, #512]	; (80041ac <UART_SetConfig+0x278>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d120      	bne.n	8003ff2 <UART_SetConfig+0xbe>
 8003fb0:	4b7f      	ldr	r3, [pc, #508]	; (80041b0 <UART_SetConfig+0x27c>)
 8003fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb4:	f003 0303 	and.w	r3, r3, #3
 8003fb8:	2b03      	cmp	r3, #3
 8003fba:	d817      	bhi.n	8003fec <UART_SetConfig+0xb8>
 8003fbc:	a201      	add	r2, pc, #4	; (adr r2, 8003fc4 <UART_SetConfig+0x90>)
 8003fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc2:	bf00      	nop
 8003fc4:	08003fd5 	.word	0x08003fd5
 8003fc8:	08003fe1 	.word	0x08003fe1
 8003fcc:	08003fe7 	.word	0x08003fe7
 8003fd0:	08003fdb 	.word	0x08003fdb
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	77fb      	strb	r3, [r7, #31]
 8003fd8:	e0b5      	b.n	8004146 <UART_SetConfig+0x212>
 8003fda:	2302      	movs	r3, #2
 8003fdc:	77fb      	strb	r3, [r7, #31]
 8003fde:	e0b2      	b.n	8004146 <UART_SetConfig+0x212>
 8003fe0:	2304      	movs	r3, #4
 8003fe2:	77fb      	strb	r3, [r7, #31]
 8003fe4:	e0af      	b.n	8004146 <UART_SetConfig+0x212>
 8003fe6:	2308      	movs	r3, #8
 8003fe8:	77fb      	strb	r3, [r7, #31]
 8003fea:	e0ac      	b.n	8004146 <UART_SetConfig+0x212>
 8003fec:	2310      	movs	r3, #16
 8003fee:	77fb      	strb	r3, [r7, #31]
 8003ff0:	e0a9      	b.n	8004146 <UART_SetConfig+0x212>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a6f      	ldr	r2, [pc, #444]	; (80041b4 <UART_SetConfig+0x280>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d124      	bne.n	8004046 <UART_SetConfig+0x112>
 8003ffc:	4b6c      	ldr	r3, [pc, #432]	; (80041b0 <UART_SetConfig+0x27c>)
 8003ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004000:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004004:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004008:	d011      	beq.n	800402e <UART_SetConfig+0xfa>
 800400a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800400e:	d817      	bhi.n	8004040 <UART_SetConfig+0x10c>
 8004010:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004014:	d011      	beq.n	800403a <UART_SetConfig+0x106>
 8004016:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800401a:	d811      	bhi.n	8004040 <UART_SetConfig+0x10c>
 800401c:	2b00      	cmp	r3, #0
 800401e:	d003      	beq.n	8004028 <UART_SetConfig+0xf4>
 8004020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004024:	d006      	beq.n	8004034 <UART_SetConfig+0x100>
 8004026:	e00b      	b.n	8004040 <UART_SetConfig+0x10c>
 8004028:	2300      	movs	r3, #0
 800402a:	77fb      	strb	r3, [r7, #31]
 800402c:	e08b      	b.n	8004146 <UART_SetConfig+0x212>
 800402e:	2302      	movs	r3, #2
 8004030:	77fb      	strb	r3, [r7, #31]
 8004032:	e088      	b.n	8004146 <UART_SetConfig+0x212>
 8004034:	2304      	movs	r3, #4
 8004036:	77fb      	strb	r3, [r7, #31]
 8004038:	e085      	b.n	8004146 <UART_SetConfig+0x212>
 800403a:	2308      	movs	r3, #8
 800403c:	77fb      	strb	r3, [r7, #31]
 800403e:	e082      	b.n	8004146 <UART_SetConfig+0x212>
 8004040:	2310      	movs	r3, #16
 8004042:	77fb      	strb	r3, [r7, #31]
 8004044:	e07f      	b.n	8004146 <UART_SetConfig+0x212>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a5b      	ldr	r2, [pc, #364]	; (80041b8 <UART_SetConfig+0x284>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d124      	bne.n	800409a <UART_SetConfig+0x166>
 8004050:	4b57      	ldr	r3, [pc, #348]	; (80041b0 <UART_SetConfig+0x27c>)
 8004052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004054:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004058:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800405c:	d011      	beq.n	8004082 <UART_SetConfig+0x14e>
 800405e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004062:	d817      	bhi.n	8004094 <UART_SetConfig+0x160>
 8004064:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004068:	d011      	beq.n	800408e <UART_SetConfig+0x15a>
 800406a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800406e:	d811      	bhi.n	8004094 <UART_SetConfig+0x160>
 8004070:	2b00      	cmp	r3, #0
 8004072:	d003      	beq.n	800407c <UART_SetConfig+0x148>
 8004074:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004078:	d006      	beq.n	8004088 <UART_SetConfig+0x154>
 800407a:	e00b      	b.n	8004094 <UART_SetConfig+0x160>
 800407c:	2300      	movs	r3, #0
 800407e:	77fb      	strb	r3, [r7, #31]
 8004080:	e061      	b.n	8004146 <UART_SetConfig+0x212>
 8004082:	2302      	movs	r3, #2
 8004084:	77fb      	strb	r3, [r7, #31]
 8004086:	e05e      	b.n	8004146 <UART_SetConfig+0x212>
 8004088:	2304      	movs	r3, #4
 800408a:	77fb      	strb	r3, [r7, #31]
 800408c:	e05b      	b.n	8004146 <UART_SetConfig+0x212>
 800408e:	2308      	movs	r3, #8
 8004090:	77fb      	strb	r3, [r7, #31]
 8004092:	e058      	b.n	8004146 <UART_SetConfig+0x212>
 8004094:	2310      	movs	r3, #16
 8004096:	77fb      	strb	r3, [r7, #31]
 8004098:	e055      	b.n	8004146 <UART_SetConfig+0x212>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a47      	ldr	r2, [pc, #284]	; (80041bc <UART_SetConfig+0x288>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d124      	bne.n	80040ee <UART_SetConfig+0x1ba>
 80040a4:	4b42      	ldr	r3, [pc, #264]	; (80041b0 <UART_SetConfig+0x27c>)
 80040a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80040ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80040b0:	d011      	beq.n	80040d6 <UART_SetConfig+0x1a2>
 80040b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80040b6:	d817      	bhi.n	80040e8 <UART_SetConfig+0x1b4>
 80040b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040bc:	d011      	beq.n	80040e2 <UART_SetConfig+0x1ae>
 80040be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040c2:	d811      	bhi.n	80040e8 <UART_SetConfig+0x1b4>
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d003      	beq.n	80040d0 <UART_SetConfig+0x19c>
 80040c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040cc:	d006      	beq.n	80040dc <UART_SetConfig+0x1a8>
 80040ce:	e00b      	b.n	80040e8 <UART_SetConfig+0x1b4>
 80040d0:	2300      	movs	r3, #0
 80040d2:	77fb      	strb	r3, [r7, #31]
 80040d4:	e037      	b.n	8004146 <UART_SetConfig+0x212>
 80040d6:	2302      	movs	r3, #2
 80040d8:	77fb      	strb	r3, [r7, #31]
 80040da:	e034      	b.n	8004146 <UART_SetConfig+0x212>
 80040dc:	2304      	movs	r3, #4
 80040de:	77fb      	strb	r3, [r7, #31]
 80040e0:	e031      	b.n	8004146 <UART_SetConfig+0x212>
 80040e2:	2308      	movs	r3, #8
 80040e4:	77fb      	strb	r3, [r7, #31]
 80040e6:	e02e      	b.n	8004146 <UART_SetConfig+0x212>
 80040e8:	2310      	movs	r3, #16
 80040ea:	77fb      	strb	r3, [r7, #31]
 80040ec:	e02b      	b.n	8004146 <UART_SetConfig+0x212>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a33      	ldr	r2, [pc, #204]	; (80041c0 <UART_SetConfig+0x28c>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d124      	bne.n	8004142 <UART_SetConfig+0x20e>
 80040f8:	4b2d      	ldr	r3, [pc, #180]	; (80041b0 <UART_SetConfig+0x27c>)
 80040fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004100:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004104:	d011      	beq.n	800412a <UART_SetConfig+0x1f6>
 8004106:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800410a:	d817      	bhi.n	800413c <UART_SetConfig+0x208>
 800410c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004110:	d011      	beq.n	8004136 <UART_SetConfig+0x202>
 8004112:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004116:	d811      	bhi.n	800413c <UART_SetConfig+0x208>
 8004118:	2b00      	cmp	r3, #0
 800411a:	d003      	beq.n	8004124 <UART_SetConfig+0x1f0>
 800411c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004120:	d006      	beq.n	8004130 <UART_SetConfig+0x1fc>
 8004122:	e00b      	b.n	800413c <UART_SetConfig+0x208>
 8004124:	2300      	movs	r3, #0
 8004126:	77fb      	strb	r3, [r7, #31]
 8004128:	e00d      	b.n	8004146 <UART_SetConfig+0x212>
 800412a:	2302      	movs	r3, #2
 800412c:	77fb      	strb	r3, [r7, #31]
 800412e:	e00a      	b.n	8004146 <UART_SetConfig+0x212>
 8004130:	2304      	movs	r3, #4
 8004132:	77fb      	strb	r3, [r7, #31]
 8004134:	e007      	b.n	8004146 <UART_SetConfig+0x212>
 8004136:	2308      	movs	r3, #8
 8004138:	77fb      	strb	r3, [r7, #31]
 800413a:	e004      	b.n	8004146 <UART_SetConfig+0x212>
 800413c:	2310      	movs	r3, #16
 800413e:	77fb      	strb	r3, [r7, #31]
 8004140:	e001      	b.n	8004146 <UART_SetConfig+0x212>
 8004142:	2310      	movs	r3, #16
 8004144:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	69db      	ldr	r3, [r3, #28]
 800414a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800414e:	d16b      	bne.n	8004228 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8004150:	7ffb      	ldrb	r3, [r7, #31]
 8004152:	2b08      	cmp	r3, #8
 8004154:	d838      	bhi.n	80041c8 <UART_SetConfig+0x294>
 8004156:	a201      	add	r2, pc, #4	; (adr r2, 800415c <UART_SetConfig+0x228>)
 8004158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800415c:	08004181 	.word	0x08004181
 8004160:	08004189 	.word	0x08004189
 8004164:	08004191 	.word	0x08004191
 8004168:	080041c9 	.word	0x080041c9
 800416c:	08004197 	.word	0x08004197
 8004170:	080041c9 	.word	0x080041c9
 8004174:	080041c9 	.word	0x080041c9
 8004178:	080041c9 	.word	0x080041c9
 800417c:	0800419f 	.word	0x0800419f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004180:	f7ff fb22 	bl	80037c8 <HAL_RCC_GetPCLK1Freq>
 8004184:	61b8      	str	r0, [r7, #24]
        break;
 8004186:	e024      	b.n	80041d2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004188:	f7ff fb40 	bl	800380c <HAL_RCC_GetPCLK2Freq>
 800418c:	61b8      	str	r0, [r7, #24]
        break;
 800418e:	e020      	b.n	80041d2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004190:	4b0c      	ldr	r3, [pc, #48]	; (80041c4 <UART_SetConfig+0x290>)
 8004192:	61bb      	str	r3, [r7, #24]
        break;
 8004194:	e01d      	b.n	80041d2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004196:	f7ff faa1 	bl	80036dc <HAL_RCC_GetSysClockFreq>
 800419a:	61b8      	str	r0, [r7, #24]
        break;
 800419c:	e019      	b.n	80041d2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800419e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041a2:	61bb      	str	r3, [r7, #24]
        break;
 80041a4:	e015      	b.n	80041d2 <UART_SetConfig+0x29e>
 80041a6:	bf00      	nop
 80041a8:	efff69f3 	.word	0xefff69f3
 80041ac:	40013800 	.word	0x40013800
 80041b0:	40021000 	.word	0x40021000
 80041b4:	40004400 	.word	0x40004400
 80041b8:	40004800 	.word	0x40004800
 80041bc:	40004c00 	.word	0x40004c00
 80041c0:	40005000 	.word	0x40005000
 80041c4:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80041c8:	2300      	movs	r3, #0
 80041ca:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	77bb      	strb	r3, [r7, #30]
        break;
 80041d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d073      	beq.n	80042c0 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	005a      	lsls	r2, r3, #1
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	085b      	lsrs	r3, r3, #1
 80041e2:	441a      	add	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	2b0f      	cmp	r3, #15
 80041f2:	d916      	bls.n	8004222 <UART_SetConfig+0x2ee>
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041fa:	d212      	bcs.n	8004222 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	b29b      	uxth	r3, r3
 8004200:	f023 030f 	bic.w	r3, r3, #15
 8004204:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	085b      	lsrs	r3, r3, #1
 800420a:	b29b      	uxth	r3, r3
 800420c:	f003 0307 	and.w	r3, r3, #7
 8004210:	b29a      	uxth	r2, r3
 8004212:	89fb      	ldrh	r3, [r7, #14]
 8004214:	4313      	orrs	r3, r2
 8004216:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	89fa      	ldrh	r2, [r7, #14]
 800421e:	60da      	str	r2, [r3, #12]
 8004220:	e04e      	b.n	80042c0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	77bb      	strb	r3, [r7, #30]
 8004226:	e04b      	b.n	80042c0 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004228:	7ffb      	ldrb	r3, [r7, #31]
 800422a:	2b08      	cmp	r3, #8
 800422c:	d827      	bhi.n	800427e <UART_SetConfig+0x34a>
 800422e:	a201      	add	r2, pc, #4	; (adr r2, 8004234 <UART_SetConfig+0x300>)
 8004230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004234:	08004259 	.word	0x08004259
 8004238:	08004261 	.word	0x08004261
 800423c:	08004269 	.word	0x08004269
 8004240:	0800427f 	.word	0x0800427f
 8004244:	0800426f 	.word	0x0800426f
 8004248:	0800427f 	.word	0x0800427f
 800424c:	0800427f 	.word	0x0800427f
 8004250:	0800427f 	.word	0x0800427f
 8004254:	08004277 	.word	0x08004277
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004258:	f7ff fab6 	bl	80037c8 <HAL_RCC_GetPCLK1Freq>
 800425c:	61b8      	str	r0, [r7, #24]
        break;
 800425e:	e013      	b.n	8004288 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004260:	f7ff fad4 	bl	800380c <HAL_RCC_GetPCLK2Freq>
 8004264:	61b8      	str	r0, [r7, #24]
        break;
 8004266:	e00f      	b.n	8004288 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004268:	4b1b      	ldr	r3, [pc, #108]	; (80042d8 <UART_SetConfig+0x3a4>)
 800426a:	61bb      	str	r3, [r7, #24]
        break;
 800426c:	e00c      	b.n	8004288 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800426e:	f7ff fa35 	bl	80036dc <HAL_RCC_GetSysClockFreq>
 8004272:	61b8      	str	r0, [r7, #24]
        break;
 8004274:	e008      	b.n	8004288 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004276:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800427a:	61bb      	str	r3, [r7, #24]
        break;
 800427c:	e004      	b.n	8004288 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800427e:	2300      	movs	r3, #0
 8004280:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	77bb      	strb	r3, [r7, #30]
        break;
 8004286:	bf00      	nop
    }

    if (pclk != 0U)
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d018      	beq.n	80042c0 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	085a      	lsrs	r2, r3, #1
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	441a      	add	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	2b0f      	cmp	r3, #15
 80042a6:	d909      	bls.n	80042bc <UART_SetConfig+0x388>
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ae:	d205      	bcs.n	80042bc <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	60da      	str	r2, [r3, #12]
 80042ba:	e001      	b.n	80042c0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80042cc:	7fbb      	ldrb	r3, [r7, #30]
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3720      	adds	r7, #32
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	007a1200 	.word	0x007a1200

080042dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e8:	f003 0301 	and.w	r3, r3, #1
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00a      	beq.n	8004306 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	430a      	orrs	r2, r1
 8004304:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00a      	beq.n	8004328 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	430a      	orrs	r2, r1
 8004326:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432c:	f003 0304 	and.w	r3, r3, #4
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00a      	beq.n	800434a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	430a      	orrs	r2, r1
 8004348:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434e:	f003 0308 	and.w	r3, r3, #8
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00a      	beq.n	800436c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	430a      	orrs	r2, r1
 800436a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004370:	f003 0310 	and.w	r3, r3, #16
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00a      	beq.n	800438e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	430a      	orrs	r2, r1
 800438c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004392:	f003 0320 	and.w	r3, r3, #32
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00a      	beq.n	80043b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	430a      	orrs	r2, r1
 80043ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d01a      	beq.n	80043f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	430a      	orrs	r2, r1
 80043d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043da:	d10a      	bne.n	80043f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	430a      	orrs	r2, r1
 80043f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00a      	beq.n	8004414 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	430a      	orrs	r2, r1
 8004412:	605a      	str	r2, [r3, #4]
  }
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b098      	sub	sp, #96	; 0x60
 8004424:	af02      	add	r7, sp, #8
 8004426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004430:	f7fc f9ea 	bl	8000808 <HAL_GetTick>
 8004434:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0308 	and.w	r3, r3, #8
 8004440:	2b08      	cmp	r3, #8
 8004442:	d12e      	bne.n	80044a2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004444:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004448:	9300      	str	r3, [sp, #0]
 800444a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800444c:	2200      	movs	r2, #0
 800444e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 f88c 	bl	8004570 <UART_WaitOnFlagUntilTimeout>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d021      	beq.n	80044a2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004466:	e853 3f00 	ldrex	r3, [r3]
 800446a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800446c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800446e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004472:	653b      	str	r3, [r7, #80]	; 0x50
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	461a      	mov	r2, r3
 800447a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800447c:	647b      	str	r3, [r7, #68]	; 0x44
 800447e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004480:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004482:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004484:	e841 2300 	strex	r3, r2, [r1]
 8004488:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800448a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1e6      	bne.n	800445e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2220      	movs	r2, #32
 8004494:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e062      	b.n	8004568 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0304 	and.w	r3, r3, #4
 80044ac:	2b04      	cmp	r3, #4
 80044ae:	d149      	bne.n	8004544 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044b4:	9300      	str	r3, [sp, #0]
 80044b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044b8:	2200      	movs	r2, #0
 80044ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 f856 	bl	8004570 <UART_WaitOnFlagUntilTimeout>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d03c      	beq.n	8004544 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d2:	e853 3f00 	ldrex	r3, [r3]
 80044d6:	623b      	str	r3, [r7, #32]
   return(result);
 80044d8:	6a3b      	ldr	r3, [r7, #32]
 80044da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	461a      	mov	r2, r3
 80044e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044e8:	633b      	str	r3, [r7, #48]	; 0x30
 80044ea:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044f0:	e841 2300 	strex	r3, r2, [r1]
 80044f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80044f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1e6      	bne.n	80044ca <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	3308      	adds	r3, #8
 8004502:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	e853 3f00 	ldrex	r3, [r3]
 800450a:	60fb      	str	r3, [r7, #12]
   return(result);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f023 0301 	bic.w	r3, r3, #1
 8004512:	64bb      	str	r3, [r7, #72]	; 0x48
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	3308      	adds	r3, #8
 800451a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800451c:	61fa      	str	r2, [r7, #28]
 800451e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004520:	69b9      	ldr	r1, [r7, #24]
 8004522:	69fa      	ldr	r2, [r7, #28]
 8004524:	e841 2300 	strex	r3, r2, [r1]
 8004528:	617b      	str	r3, [r7, #20]
   return(result);
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1e5      	bne.n	80044fc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2220      	movs	r2, #32
 8004534:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e011      	b.n	8004568 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2220      	movs	r2, #32
 8004548:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2220      	movs	r2, #32
 800454e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	3758      	adds	r7, #88	; 0x58
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	603b      	str	r3, [r7, #0]
 800457c:	4613      	mov	r3, r2
 800457e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004580:	e049      	b.n	8004616 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004588:	d045      	beq.n	8004616 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800458a:	f7fc f93d 	bl	8000808 <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	69ba      	ldr	r2, [r7, #24]
 8004596:	429a      	cmp	r2, r3
 8004598:	d302      	bcc.n	80045a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d101      	bne.n	80045a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e048      	b.n	8004636 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0304 	and.w	r3, r3, #4
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d031      	beq.n	8004616 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	69db      	ldr	r3, [r3, #28]
 80045b8:	f003 0308 	and.w	r3, r3, #8
 80045bc:	2b08      	cmp	r3, #8
 80045be:	d110      	bne.n	80045e2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2208      	movs	r2, #8
 80045c6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80045c8:	68f8      	ldr	r0, [r7, #12]
 80045ca:	f000 f838 	bl	800463e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2208      	movs	r2, #8
 80045d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e029      	b.n	8004636 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	69db      	ldr	r3, [r3, #28]
 80045e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045f0:	d111      	bne.n	8004616 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f000 f81e 	bl	800463e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2220      	movs	r2, #32
 8004606:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e00f      	b.n	8004636 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	69da      	ldr	r2, [r3, #28]
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	4013      	ands	r3, r2
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	429a      	cmp	r2, r3
 8004624:	bf0c      	ite	eq
 8004626:	2301      	moveq	r3, #1
 8004628:	2300      	movne	r3, #0
 800462a:	b2db      	uxtb	r3, r3
 800462c:	461a      	mov	r2, r3
 800462e:	79fb      	ldrb	r3, [r7, #7]
 8004630:	429a      	cmp	r2, r3
 8004632:	d0a6      	beq.n	8004582 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3710      	adds	r7, #16
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800463e:	b480      	push	{r7}
 8004640:	b095      	sub	sp, #84	; 0x54
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800464e:	e853 3f00 	ldrex	r3, [r3]
 8004652:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004656:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800465a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	461a      	mov	r2, r3
 8004662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004664:	643b      	str	r3, [r7, #64]	; 0x40
 8004666:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004668:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800466a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800466c:	e841 2300 	strex	r3, r2, [r1]
 8004670:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004674:	2b00      	cmp	r3, #0
 8004676:	d1e6      	bne.n	8004646 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	3308      	adds	r3, #8
 800467e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004680:	6a3b      	ldr	r3, [r7, #32]
 8004682:	e853 3f00 	ldrex	r3, [r3]
 8004686:	61fb      	str	r3, [r7, #28]
   return(result);
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	f023 0301 	bic.w	r3, r3, #1
 800468e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	3308      	adds	r3, #8
 8004696:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004698:	62fa      	str	r2, [r7, #44]	; 0x2c
 800469a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800469e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046a0:	e841 2300 	strex	r3, r2, [r1]
 80046a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1e5      	bne.n	8004678 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d118      	bne.n	80046e6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	e853 3f00 	ldrex	r3, [r3]
 80046c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	f023 0310 	bic.w	r3, r3, #16
 80046c8:	647b      	str	r3, [r7, #68]	; 0x44
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	461a      	mov	r2, r3
 80046d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046d2:	61bb      	str	r3, [r7, #24]
 80046d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d6:	6979      	ldr	r1, [r7, #20]
 80046d8:	69ba      	ldr	r2, [r7, #24]
 80046da:	e841 2300 	strex	r3, r2, [r1]
 80046de:	613b      	str	r3, [r7, #16]
   return(result);
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1e6      	bne.n	80046b4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2220      	movs	r2, #32
 80046ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80046fa:	bf00      	nop
 80046fc:	3754      	adds	r7, #84	; 0x54
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr

08004706 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004706:	b480      	push	{r7}
 8004708:	b085      	sub	sp, #20
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800470e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004712:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800471a:	b29a      	uxth	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	b29b      	uxth	r3, r3
 8004720:	43db      	mvns	r3, r3
 8004722:	b29b      	uxth	r3, r3
 8004724:	4013      	ands	r3, r2
 8004726:	b29a      	uxth	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3714      	adds	r7, #20
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800473c:	b084      	sub	sp, #16
 800473e:	b480      	push	{r7}
 8004740:	b083      	sub	sp, #12
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
 8004746:	f107 0014 	add.w	r0, r7, #20
 800474a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2201      	movs	r2, #1
 8004752:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	b004      	add	sp, #16
 800477c:	4770      	bx	lr

0800477e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b0c2      	sub	sp, #264	; 0x108
 8004782:	af00      	add	r7, sp, #0
 8004784:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004788:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800478c:	6018      	str	r0, [r3, #0]
 800478e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004792:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004796:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004798:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800479c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	785b      	ldrb	r3, [r3, #1]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	f040 86b7 	bne.w	8005518 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80047aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	699a      	ldr	r2, [r3, #24]
 80047b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d908      	bls.n	80047d8 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80047c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80047d6:	e007      	b.n	80047e8 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80047d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80047e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	7b1b      	ldrb	r3, [r3, #12]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d13a      	bne.n	800486e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80047f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	6959      	ldr	r1, [r3, #20]
 8004804:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004808:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	88da      	ldrh	r2, [r3, #6]
 8004810:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004814:	b29b      	uxth	r3, r3
 8004816:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800481a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800481e:	6800      	ldr	r0, [r0, #0]
 8004820:	f001 fb82 	bl	8005f28 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004824:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004828:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	613b      	str	r3, [r7, #16]
 8004830:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004834:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800483e:	b29b      	uxth	r3, r3
 8004840:	461a      	mov	r2, r3
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	4413      	add	r3, r2
 8004846:	613b      	str	r3, [r7, #16]
 8004848:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800484c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	00da      	lsls	r2, r3, #3
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	4413      	add	r3, r2
 800485a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800485e:	60fb      	str	r3, [r7, #12]
 8004860:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004864:	b29a      	uxth	r2, r3
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	801a      	strh	r2, [r3, #0]
 800486a:	f000 be1f 	b.w	80054ac <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800486e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004872:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	78db      	ldrb	r3, [r3, #3]
 800487a:	2b02      	cmp	r3, #2
 800487c:	f040 8462 	bne.w	8005144 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004880:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004884:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	6a1a      	ldr	r2, [r3, #32]
 800488c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004890:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	429a      	cmp	r2, r3
 800489a:	f240 83df 	bls.w	800505c <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800489e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4413      	add	r3, r2
 80048b8:	881b      	ldrh	r3, [r3, #0]
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048c4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80048c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	441a      	add	r2, r3
 80048e2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80048e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048ee:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80048f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80048fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6a1a      	ldr	r2, [r3, #32]
 8004906:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800490a:	1ad2      	subs	r2, r2, r3
 800490c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004910:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004918:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800491c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004926:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	4413      	add	r3, r2
 8004932:	881b      	ldrh	r3, [r3, #0]
 8004934:	b29b      	uxth	r3, r3
 8004936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800493a:	2b00      	cmp	r3, #0
 800493c:	f000 81c7 	beq.w	8004cce <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004940:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004944:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	633b      	str	r3, [r7, #48]	; 0x30
 800494c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004950:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	785b      	ldrb	r3, [r3, #1]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d177      	bne.n	8004a4c <USB_EPStartXfer+0x2ce>
 800495c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004960:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	62bb      	str	r3, [r7, #40]	; 0x28
 8004968:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800496c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004976:	b29b      	uxth	r3, r3
 8004978:	461a      	mov	r2, r3
 800497a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800497c:	4413      	add	r3, r2
 800497e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004980:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004984:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	00da      	lsls	r2, r3, #3
 800498e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004990:	4413      	add	r3, r2
 8004992:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004996:	627b      	str	r3, [r7, #36]	; 0x24
 8004998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499a:	881b      	ldrh	r3, [r3, #0]
 800499c:	b29b      	uxth	r3, r3
 800499e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a6:	801a      	strh	r2, [r3, #0]
 80049a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049ac:	2b3e      	cmp	r3, #62	; 0x3e
 80049ae:	d921      	bls.n	80049f4 <USB_EPStartXfer+0x276>
 80049b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049b4:	095b      	lsrs	r3, r3, #5
 80049b6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80049ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049be:	f003 031f 	and.w	r3, r3, #31
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d104      	bne.n	80049d0 <USB_EPStartXfer+0x252>
 80049c6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80049ca:	3b01      	subs	r3, #1
 80049cc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80049d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d2:	881b      	ldrh	r3, [r3, #0]
 80049d4:	b29a      	uxth	r2, r3
 80049d6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80049da:	b29b      	uxth	r3, r3
 80049dc:	029b      	lsls	r3, r3, #10
 80049de:	b29b      	uxth	r3, r3
 80049e0:	4313      	orrs	r3, r2
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f0:	801a      	strh	r2, [r3, #0]
 80049f2:	e050      	b.n	8004a96 <USB_EPStartXfer+0x318>
 80049f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d10a      	bne.n	8004a12 <USB_EPStartXfer+0x294>
 80049fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fe:	881b      	ldrh	r3, [r3, #0]
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a0a:	b29a      	uxth	r2, r3
 8004a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0e:	801a      	strh	r2, [r3, #0]
 8004a10:	e041      	b.n	8004a96 <USB_EPStartXfer+0x318>
 8004a12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a16:	085b      	lsrs	r3, r3, #1
 8004a18:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a20:	f003 0301 	and.w	r3, r3, #1
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d004      	beq.n	8004a32 <USB_EPStartXfer+0x2b4>
 8004a28:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a34:	881b      	ldrh	r3, [r3, #0]
 8004a36:	b29a      	uxth	r2, r3
 8004a38:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	029b      	lsls	r3, r3, #10
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	4313      	orrs	r3, r2
 8004a44:	b29a      	uxth	r2, r3
 8004a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a48:	801a      	strh	r2, [r3, #0]
 8004a4a:	e024      	b.n	8004a96 <USB_EPStartXfer+0x318>
 8004a4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	785b      	ldrb	r3, [r3, #1]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d11c      	bne.n	8004a96 <USB_EPStartXfer+0x318>
 8004a5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a70:	4413      	add	r3, r2
 8004a72:	633b      	str	r3, [r7, #48]	; 0x30
 8004a74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	00da      	lsls	r2, r3, #3
 8004a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a84:	4413      	add	r3, r2
 8004a86:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a90:	b29a      	uxth	r2, r3
 8004a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a94:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004a96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	895b      	ldrh	r3, [r3, #10]
 8004aa2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004aa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004aaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	6959      	ldr	r1, [r3, #20]
 8004ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004abc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004ac0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004ac4:	6800      	ldr	r0, [r0, #0]
 8004ac6:	f001 fa2f 	bl	8005f28 <USB_WritePMA>
            ep->xfer_buff += len;
 8004aca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ace:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	695a      	ldr	r2, [r3, #20]
 8004ad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ada:	441a      	add	r2, r3
 8004adc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ae0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004ae8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004aec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	6a1a      	ldr	r2, [r3, #32]
 8004af4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004af8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d90f      	bls.n	8004b24 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8004b04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	6a1a      	ldr	r2, [r3, #32]
 8004b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b14:	1ad2      	subs	r2, r2, r3
 8004b16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	621a      	str	r2, [r3, #32]
 8004b22:	e00e      	b.n	8004b42 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8004b24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	6a1b      	ldr	r3, [r3, #32]
 8004b30:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8004b34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004b42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	785b      	ldrb	r3, [r3, #1]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d177      	bne.n	8004c42 <USB_EPStartXfer+0x4c4>
 8004b52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	61bb      	str	r3, [r7, #24]
 8004b5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	461a      	mov	r2, r3
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	4413      	add	r3, r2
 8004b74:	61bb      	str	r3, [r7, #24]
 8004b76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	00da      	lsls	r2, r3, #3
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	4413      	add	r3, r2
 8004b88:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004b8c:	617b      	str	r3, [r7, #20]
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	881b      	ldrh	r3, [r3, #0]
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	801a      	strh	r2, [r3, #0]
 8004b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ba2:	2b3e      	cmp	r3, #62	; 0x3e
 8004ba4:	d921      	bls.n	8004bea <USB_EPStartXfer+0x46c>
 8004ba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004baa:	095b      	lsrs	r3, r3, #5
 8004bac:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bb4:	f003 031f 	and.w	r3, r3, #31
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d104      	bne.n	8004bc6 <USB_EPStartXfer+0x448>
 8004bbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	881b      	ldrh	r3, [r3, #0]
 8004bca:	b29a      	uxth	r2, r3
 8004bcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	029b      	lsls	r3, r3, #10
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	801a      	strh	r2, [r3, #0]
 8004be8:	e056      	b.n	8004c98 <USB_EPStartXfer+0x51a>
 8004bea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10a      	bne.n	8004c08 <USB_EPStartXfer+0x48a>
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	881b      	ldrh	r3, [r3, #0]
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	801a      	strh	r2, [r3, #0]
 8004c06:	e047      	b.n	8004c98 <USB_EPStartXfer+0x51a>
 8004c08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c0c:	085b      	lsrs	r3, r3, #1
 8004c0e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c16:	f003 0301 	and.w	r3, r3, #1
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d004      	beq.n	8004c28 <USB_EPStartXfer+0x4aa>
 8004c1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c22:	3301      	adds	r3, #1
 8004c24:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	881b      	ldrh	r3, [r3, #0]
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	029b      	lsls	r3, r3, #10
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	b29a      	uxth	r2, r3
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	801a      	strh	r2, [r3, #0]
 8004c40:	e02a      	b.n	8004c98 <USB_EPStartXfer+0x51a>
 8004c42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	785b      	ldrb	r3, [r3, #1]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d122      	bne.n	8004c98 <USB_EPStartXfer+0x51a>
 8004c52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	623b      	str	r3, [r7, #32]
 8004c5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	461a      	mov	r2, r3
 8004c70:	6a3b      	ldr	r3, [r7, #32]
 8004c72:	4413      	add	r3, r2
 8004c74:	623b      	str	r3, [r7, #32]
 8004c76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	00da      	lsls	r2, r3, #3
 8004c84:	6a3b      	ldr	r3, [r7, #32]
 8004c86:	4413      	add	r3, r2
 8004c88:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004c8c:	61fb      	str	r3, [r7, #28]
 8004c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c92:	b29a      	uxth	r2, r3
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004c98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	891b      	ldrh	r3, [r3, #8]
 8004ca4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004ca8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	6959      	ldr	r1, [r3, #20]
 8004cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004cbe:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004cc2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004cc6:	6800      	ldr	r0, [r0, #0]
 8004cc8:	f001 f92e 	bl	8005f28 <USB_WritePMA>
 8004ccc:	e3ee      	b.n	80054ac <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004cce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	785b      	ldrb	r3, [r3, #1]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d177      	bne.n	8004dce <USB_EPStartXfer+0x650>
 8004cde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ce2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cfe:	4413      	add	r3, r2
 8004d00:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	00da      	lsls	r2, r3, #3
 8004d10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d12:	4413      	add	r3, r2
 8004d14:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004d18:	647b      	str	r3, [r7, #68]	; 0x44
 8004d1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d1c:	881b      	ldrh	r3, [r3, #0]
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d28:	801a      	strh	r2, [r3, #0]
 8004d2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d2e:	2b3e      	cmp	r3, #62	; 0x3e
 8004d30:	d921      	bls.n	8004d76 <USB_EPStartXfer+0x5f8>
 8004d32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d36:	095b      	lsrs	r3, r3, #5
 8004d38:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d40:	f003 031f 	and.w	r3, r3, #31
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d104      	bne.n	8004d52 <USB_EPStartXfer+0x5d4>
 8004d48:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004d52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d54:	881b      	ldrh	r3, [r3, #0]
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	029b      	lsls	r3, r3, #10
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	4313      	orrs	r3, r2
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d72:	801a      	strh	r2, [r3, #0]
 8004d74:	e056      	b.n	8004e24 <USB_EPStartXfer+0x6a6>
 8004d76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d10a      	bne.n	8004d94 <USB_EPStartXfer+0x616>
 8004d7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d80:	881b      	ldrh	r3, [r3, #0]
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d90:	801a      	strh	r2, [r3, #0]
 8004d92:	e047      	b.n	8004e24 <USB_EPStartXfer+0x6a6>
 8004d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d98:	085b      	lsrs	r3, r3, #1
 8004d9a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004d9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d004      	beq.n	8004db4 <USB_EPStartXfer+0x636>
 8004daa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004dae:	3301      	adds	r3, #1
 8004db0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004db4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004db6:	881b      	ldrh	r3, [r3, #0]
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	029b      	lsls	r3, r3, #10
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	b29a      	uxth	r2, r3
 8004dc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dca:	801a      	strh	r2, [r3, #0]
 8004dcc:	e02a      	b.n	8004e24 <USB_EPStartXfer+0x6a6>
 8004dce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	785b      	ldrb	r3, [r3, #1]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d122      	bne.n	8004e24 <USB_EPStartXfer+0x6a6>
 8004dde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004de2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	653b      	str	r3, [r7, #80]	; 0x50
 8004dea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dfe:	4413      	add	r3, r2
 8004e00:	653b      	str	r3, [r7, #80]	; 0x50
 8004e02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	00da      	lsls	r2, r3, #3
 8004e10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e12:	4413      	add	r3, r2
 8004e14:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004e18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e22:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004e24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	891b      	ldrh	r3, [r3, #8]
 8004e30:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	6959      	ldr	r1, [r3, #20]
 8004e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004e4a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004e4e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004e52:	6800      	ldr	r0, [r0, #0]
 8004e54:	f001 f868 	bl	8005f28 <USB_WritePMA>
            ep->xfer_buff += len;
 8004e58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	695a      	ldr	r2, [r3, #20]
 8004e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e68:	441a      	add	r2, r3
 8004e6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004e76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	6a1a      	ldr	r2, [r3, #32]
 8004e82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d90f      	bls.n	8004eb2 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8004e92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	6a1a      	ldr	r2, [r3, #32]
 8004e9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ea2:	1ad2      	subs	r2, r2, r3
 8004ea4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ea8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	621a      	str	r2, [r3, #32]
 8004eb0:	e00e      	b.n	8004ed0 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8004eb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004eb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	6a1b      	ldr	r3, [r3, #32]
 8004ebe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8004ec2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ec6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004ed0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ed4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	643b      	str	r3, [r7, #64]	; 0x40
 8004edc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ee0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	785b      	ldrb	r3, [r3, #1]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d177      	bne.n	8004fdc <USB_EPStartXfer+0x85e>
 8004eec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ef0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ef8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004efc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	461a      	mov	r2, r3
 8004f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f0c:	4413      	add	r3, r2
 8004f0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	00da      	lsls	r2, r3, #3
 8004f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f20:	4413      	add	r3, r2
 8004f22:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004f26:	637b      	str	r3, [r7, #52]	; 0x34
 8004f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f2a:	881b      	ldrh	r3, [r3, #0]
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f36:	801a      	strh	r2, [r3, #0]
 8004f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f3c:	2b3e      	cmp	r3, #62	; 0x3e
 8004f3e:	d921      	bls.n	8004f84 <USB_EPStartXfer+0x806>
 8004f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f44:	095b      	lsrs	r3, r3, #5
 8004f46:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004f4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f4e:	f003 031f 	and.w	r3, r3, #31
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d104      	bne.n	8004f60 <USB_EPStartXfer+0x7e2>
 8004f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f62:	881b      	ldrh	r3, [r3, #0]
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	029b      	lsls	r3, r3, #10
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	4313      	orrs	r3, r2
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f7c:	b29a      	uxth	r2, r3
 8004f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f80:	801a      	strh	r2, [r3, #0]
 8004f82:	e050      	b.n	8005026 <USB_EPStartXfer+0x8a8>
 8004f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d10a      	bne.n	8004fa2 <USB_EPStartXfer+0x824>
 8004f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f8e:	881b      	ldrh	r3, [r3, #0]
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f9a:	b29a      	uxth	r2, r3
 8004f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f9e:	801a      	strh	r2, [r3, #0]
 8004fa0:	e041      	b.n	8005026 <USB_EPStartXfer+0x8a8>
 8004fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fa6:	085b      	lsrs	r3, r3, #1
 8004fa8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fb0:	f003 0301 	and.w	r3, r3, #1
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d004      	beq.n	8004fc2 <USB_EPStartXfer+0x844>
 8004fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fc4:	881b      	ldrh	r3, [r3, #0]
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	029b      	lsls	r3, r3, #10
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fd8:	801a      	strh	r2, [r3, #0]
 8004fda:	e024      	b.n	8005026 <USB_EPStartXfer+0x8a8>
 8004fdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fe0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	785b      	ldrb	r3, [r3, #1]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d11c      	bne.n	8005026 <USB_EPStartXfer+0x8a8>
 8004fec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ff0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005000:	4413      	add	r3, r2
 8005002:	643b      	str	r3, [r7, #64]	; 0x40
 8005004:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005008:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	00da      	lsls	r2, r3, #3
 8005012:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005014:	4413      	add	r3, r2
 8005016:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800501a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800501c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005020:	b29a      	uxth	r2, r3
 8005022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005024:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005026:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800502a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	895b      	ldrh	r3, [r3, #10]
 8005032:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005036:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800503a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	6959      	ldr	r1, [r3, #20]
 8005042:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005046:	b29b      	uxth	r3, r3
 8005048:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800504c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005050:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005054:	6800      	ldr	r0, [r0, #0]
 8005056:	f000 ff67 	bl	8005f28 <USB_WritePMA>
 800505a:	e227      	b.n	80054ac <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800505c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005060:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	6a1b      	ldr	r3, [r3, #32]
 8005068:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800506c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005070:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800507a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	4413      	add	r3, r2
 8005086:	881b      	ldrh	r3, [r3, #0]
 8005088:	b29b      	uxth	r3, r3
 800508a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800508e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005092:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005096:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800509a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	441a      	add	r2, r3
 80050b0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80050b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80050c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	461a      	mov	r2, r3
 80050e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050e8:	4413      	add	r3, r2
 80050ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	00da      	lsls	r2, r3, #3
 80050fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050fc:	4413      	add	r3, r2
 80050fe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005102:	65bb      	str	r3, [r7, #88]	; 0x58
 8005104:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005108:	b29a      	uxth	r2, r3
 800510a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800510c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800510e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005112:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	891b      	ldrh	r3, [r3, #8]
 800511a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800511e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005122:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	6959      	ldr	r1, [r3, #20]
 800512a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800512e:	b29b      	uxth	r3, r3
 8005130:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005134:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005138:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800513c:	6800      	ldr	r0, [r0, #0]
 800513e:	f000 fef3 	bl	8005f28 <USB_WritePMA>
 8005142:	e1b3      	b.n	80054ac <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005144:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005148:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	6a1a      	ldr	r2, [r3, #32]
 8005150:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005154:	1ad2      	subs	r2, r2, r3
 8005156:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800515a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005162:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005166:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005170:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	4413      	add	r3, r2
 800517c:	881b      	ldrh	r3, [r3, #0]
 800517e:	b29b      	uxth	r3, r3
 8005180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005184:	2b00      	cmp	r3, #0
 8005186:	f000 80c6 	beq.w	8005316 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800518a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800518e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	673b      	str	r3, [r7, #112]	; 0x70
 8005196:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800519a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	785b      	ldrb	r3, [r3, #1]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d177      	bne.n	8005296 <USB_EPStartXfer+0xb18>
 80051a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80051b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	461a      	mov	r2, r3
 80051c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051c6:	4413      	add	r3, r2
 80051c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80051ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	00da      	lsls	r2, r3, #3
 80051d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051da:	4413      	add	r3, r2
 80051dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80051e0:	667b      	str	r3, [r7, #100]	; 0x64
 80051e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051e4:	881b      	ldrh	r3, [r3, #0]
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051f0:	801a      	strh	r2, [r3, #0]
 80051f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051f6:	2b3e      	cmp	r3, #62	; 0x3e
 80051f8:	d921      	bls.n	800523e <USB_EPStartXfer+0xac0>
 80051fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051fe:	095b      	lsrs	r3, r3, #5
 8005200:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005204:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005208:	f003 031f 	and.w	r3, r3, #31
 800520c:	2b00      	cmp	r3, #0
 800520e:	d104      	bne.n	800521a <USB_EPStartXfer+0xa9c>
 8005210:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005214:	3b01      	subs	r3, #1
 8005216:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800521a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800521c:	881b      	ldrh	r3, [r3, #0]
 800521e:	b29a      	uxth	r2, r3
 8005220:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005224:	b29b      	uxth	r3, r3
 8005226:	029b      	lsls	r3, r3, #10
 8005228:	b29b      	uxth	r3, r3
 800522a:	4313      	orrs	r3, r2
 800522c:	b29b      	uxth	r3, r3
 800522e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005232:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005236:	b29a      	uxth	r2, r3
 8005238:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800523a:	801a      	strh	r2, [r3, #0]
 800523c:	e050      	b.n	80052e0 <USB_EPStartXfer+0xb62>
 800523e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005242:	2b00      	cmp	r3, #0
 8005244:	d10a      	bne.n	800525c <USB_EPStartXfer+0xade>
 8005246:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005248:	881b      	ldrh	r3, [r3, #0]
 800524a:	b29b      	uxth	r3, r3
 800524c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005250:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005254:	b29a      	uxth	r2, r3
 8005256:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005258:	801a      	strh	r2, [r3, #0]
 800525a:	e041      	b.n	80052e0 <USB_EPStartXfer+0xb62>
 800525c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005260:	085b      	lsrs	r3, r3, #1
 8005262:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005266:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800526a:	f003 0301 	and.w	r3, r3, #1
 800526e:	2b00      	cmp	r3, #0
 8005270:	d004      	beq.n	800527c <USB_EPStartXfer+0xafe>
 8005272:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005276:	3301      	adds	r3, #1
 8005278:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800527c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800527e:	881b      	ldrh	r3, [r3, #0]
 8005280:	b29a      	uxth	r2, r3
 8005282:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005286:	b29b      	uxth	r3, r3
 8005288:	029b      	lsls	r3, r3, #10
 800528a:	b29b      	uxth	r3, r3
 800528c:	4313      	orrs	r3, r2
 800528e:	b29a      	uxth	r2, r3
 8005290:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005292:	801a      	strh	r2, [r3, #0]
 8005294:	e024      	b.n	80052e0 <USB_EPStartXfer+0xb62>
 8005296:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800529a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	785b      	ldrb	r3, [r3, #1]
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d11c      	bne.n	80052e0 <USB_EPStartXfer+0xb62>
 80052a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	461a      	mov	r2, r3
 80052b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052ba:	4413      	add	r3, r2
 80052bc:	673b      	str	r3, [r7, #112]	; 0x70
 80052be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	00da      	lsls	r2, r3, #3
 80052cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052ce:	4413      	add	r3, r2
 80052d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80052d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80052d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052da:	b29a      	uxth	r2, r3
 80052dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052de:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80052e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	895b      	ldrh	r3, [r3, #10]
 80052ec:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	6959      	ldr	r1, [r3, #20]
 80052fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005300:	b29b      	uxth	r3, r3
 8005302:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005306:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800530a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800530e:	6800      	ldr	r0, [r0, #0]
 8005310:	f000 fe0a 	bl	8005f28 <USB_WritePMA>
 8005314:	e0ca      	b.n	80054ac <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005316:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800531a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	785b      	ldrb	r3, [r3, #1]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d177      	bne.n	8005416 <USB_EPStartXfer+0xc98>
 8005326:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800532a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005332:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005336:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005340:	b29b      	uxth	r3, r3
 8005342:	461a      	mov	r2, r3
 8005344:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005346:	4413      	add	r3, r2
 8005348:	67fb      	str	r3, [r7, #124]	; 0x7c
 800534a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800534e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	00da      	lsls	r2, r3, #3
 8005358:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800535a:	4413      	add	r3, r2
 800535c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005360:	67bb      	str	r3, [r7, #120]	; 0x78
 8005362:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005364:	881b      	ldrh	r3, [r3, #0]
 8005366:	b29b      	uxth	r3, r3
 8005368:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800536c:	b29a      	uxth	r2, r3
 800536e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005370:	801a      	strh	r2, [r3, #0]
 8005372:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005376:	2b3e      	cmp	r3, #62	; 0x3e
 8005378:	d921      	bls.n	80053be <USB_EPStartXfer+0xc40>
 800537a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800537e:	095b      	lsrs	r3, r3, #5
 8005380:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005384:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005388:	f003 031f 	and.w	r3, r3, #31
 800538c:	2b00      	cmp	r3, #0
 800538e:	d104      	bne.n	800539a <USB_EPStartXfer+0xc1c>
 8005390:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005394:	3b01      	subs	r3, #1
 8005396:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800539a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800539c:	881b      	ldrh	r3, [r3, #0]
 800539e:	b29a      	uxth	r2, r3
 80053a0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	029b      	lsls	r3, r3, #10
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	4313      	orrs	r3, r2
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053ba:	801a      	strh	r2, [r3, #0]
 80053bc:	e05c      	b.n	8005478 <USB_EPStartXfer+0xcfa>
 80053be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d10a      	bne.n	80053dc <USB_EPStartXfer+0xc5e>
 80053c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053c8:	881b      	ldrh	r3, [r3, #0]
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053d4:	b29a      	uxth	r2, r3
 80053d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053d8:	801a      	strh	r2, [r3, #0]
 80053da:	e04d      	b.n	8005478 <USB_EPStartXfer+0xcfa>
 80053dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053e0:	085b      	lsrs	r3, r3, #1
 80053e2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80053e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053ea:	f003 0301 	and.w	r3, r3, #1
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d004      	beq.n	80053fc <USB_EPStartXfer+0xc7e>
 80053f2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80053f6:	3301      	adds	r3, #1
 80053f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80053fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053fe:	881b      	ldrh	r3, [r3, #0]
 8005400:	b29a      	uxth	r2, r3
 8005402:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005406:	b29b      	uxth	r3, r3
 8005408:	029b      	lsls	r3, r3, #10
 800540a:	b29b      	uxth	r3, r3
 800540c:	4313      	orrs	r3, r2
 800540e:	b29a      	uxth	r2, r3
 8005410:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005412:	801a      	strh	r2, [r3, #0]
 8005414:	e030      	b.n	8005478 <USB_EPStartXfer+0xcfa>
 8005416:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800541a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	785b      	ldrb	r3, [r3, #1]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d128      	bne.n	8005478 <USB_EPStartXfer+0xcfa>
 8005426:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800542a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005434:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005438:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005442:	b29b      	uxth	r3, r3
 8005444:	461a      	mov	r2, r3
 8005446:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800544a:	4413      	add	r3, r2
 800544c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005450:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005454:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	00da      	lsls	r2, r3, #3
 800545e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005462:	4413      	add	r3, r2
 8005464:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005468:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800546c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005470:	b29a      	uxth	r2, r3
 8005472:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005476:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005478:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800547c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	891b      	ldrh	r3, [r3, #8]
 8005484:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005488:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800548c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	6959      	ldr	r1, [r3, #20]
 8005494:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005498:	b29b      	uxth	r3, r3
 800549a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800549e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80054a2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80054a6:	6800      	ldr	r0, [r0, #0]
 80054a8:	f000 fd3e 	bl	8005f28 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80054ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	4413      	add	r3, r2
 80054c6:	881b      	ldrh	r3, [r3, #0]
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054d2:	817b      	strh	r3, [r7, #10]
 80054d4:	897b      	ldrh	r3, [r7, #10]
 80054d6:	f083 0310 	eor.w	r3, r3, #16
 80054da:	817b      	strh	r3, [r7, #10]
 80054dc:	897b      	ldrh	r3, [r7, #10]
 80054de:	f083 0320 	eor.w	r3, r3, #32
 80054e2:	817b      	strh	r3, [r7, #10]
 80054e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	441a      	add	r2, r3
 80054fe:	897b      	ldrh	r3, [r7, #10]
 8005500:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005504:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005508:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800550c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005510:	b29b      	uxth	r3, r3
 8005512:	8013      	strh	r3, [r2, #0]
 8005514:	f000 bcde 	b.w	8005ed4 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005518:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800551c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	7b1b      	ldrb	r3, [r3, #12]
 8005524:	2b00      	cmp	r3, #0
 8005526:	f040 80bb 	bne.w	80056a0 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800552a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800552e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	699a      	ldr	r2, [r3, #24]
 8005536:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800553a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	429a      	cmp	r2, r3
 8005544:	d917      	bls.n	8005576 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005546:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800554a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8005556:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800555a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	699a      	ldr	r2, [r3, #24]
 8005562:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005566:	1ad2      	subs	r2, r2, r3
 8005568:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800556c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	619a      	str	r2, [r3, #24]
 8005574:	e00e      	b.n	8005594 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005576:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800557a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8005586:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800558a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2200      	movs	r2, #0
 8005592:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005594:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005598:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80055a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	461a      	mov	r2, r3
 80055b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80055b8:	4413      	add	r3, r2
 80055ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80055be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	00da      	lsls	r2, r3, #3
 80055cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80055d0:	4413      	add	r3, r2
 80055d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80055d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80055da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055de:	881b      	ldrh	r3, [r3, #0]
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055e6:	b29a      	uxth	r2, r3
 80055e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055ec:	801a      	strh	r2, [r3, #0]
 80055ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055f2:	2b3e      	cmp	r3, #62	; 0x3e
 80055f4:	d924      	bls.n	8005640 <USB_EPStartXfer+0xec2>
 80055f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055fa:	095b      	lsrs	r3, r3, #5
 80055fc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005600:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005604:	f003 031f 	and.w	r3, r3, #31
 8005608:	2b00      	cmp	r3, #0
 800560a:	d104      	bne.n	8005616 <USB_EPStartXfer+0xe98>
 800560c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005610:	3b01      	subs	r3, #1
 8005612:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005616:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800561a:	881b      	ldrh	r3, [r3, #0]
 800561c:	b29a      	uxth	r2, r3
 800561e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005622:	b29b      	uxth	r3, r3
 8005624:	029b      	lsls	r3, r3, #10
 8005626:	b29b      	uxth	r3, r3
 8005628:	4313      	orrs	r3, r2
 800562a:	b29b      	uxth	r3, r3
 800562c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005630:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005634:	b29a      	uxth	r2, r3
 8005636:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800563a:	801a      	strh	r2, [r3, #0]
 800563c:	f000 bc10 	b.w	8005e60 <USB_EPStartXfer+0x16e2>
 8005640:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005644:	2b00      	cmp	r3, #0
 8005646:	d10c      	bne.n	8005662 <USB_EPStartXfer+0xee4>
 8005648:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800564c:	881b      	ldrh	r3, [r3, #0]
 800564e:	b29b      	uxth	r3, r3
 8005650:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005654:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005658:	b29a      	uxth	r2, r3
 800565a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800565e:	801a      	strh	r2, [r3, #0]
 8005660:	e3fe      	b.n	8005e60 <USB_EPStartXfer+0x16e2>
 8005662:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005666:	085b      	lsrs	r3, r3, #1
 8005668:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800566c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005670:	f003 0301 	and.w	r3, r3, #1
 8005674:	2b00      	cmp	r3, #0
 8005676:	d004      	beq.n	8005682 <USB_EPStartXfer+0xf04>
 8005678:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800567c:	3301      	adds	r3, #1
 800567e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005682:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005686:	881b      	ldrh	r3, [r3, #0]
 8005688:	b29a      	uxth	r2, r3
 800568a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800568e:	b29b      	uxth	r3, r3
 8005690:	029b      	lsls	r3, r3, #10
 8005692:	b29b      	uxth	r3, r3
 8005694:	4313      	orrs	r3, r2
 8005696:	b29a      	uxth	r2, r3
 8005698:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800569c:	801a      	strh	r2, [r3, #0]
 800569e:	e3df      	b.n	8005e60 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80056a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	78db      	ldrb	r3, [r3, #3]
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	f040 8218 	bne.w	8005ae2 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80056b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	785b      	ldrb	r3, [r3, #1]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	f040 809d 	bne.w	80057fe <USB_EPStartXfer+0x1080>
 80056c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80056d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	461a      	mov	r2, r3
 80056e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80056e8:	4413      	add	r3, r2
 80056ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80056ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	00da      	lsls	r2, r3, #3
 80056fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005700:	4413      	add	r3, r2
 8005702:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005706:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800570a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800570e:	881b      	ldrh	r3, [r3, #0]
 8005710:	b29b      	uxth	r3, r3
 8005712:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005716:	b29a      	uxth	r2, r3
 8005718:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800571c:	801a      	strh	r2, [r3, #0]
 800571e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005722:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	2b3e      	cmp	r3, #62	; 0x3e
 800572c:	d92b      	bls.n	8005786 <USB_EPStartXfer+0x1008>
 800572e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005732:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	095b      	lsrs	r3, r3, #5
 800573c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005740:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005744:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	f003 031f 	and.w	r3, r3, #31
 8005750:	2b00      	cmp	r3, #0
 8005752:	d104      	bne.n	800575e <USB_EPStartXfer+0xfe0>
 8005754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005758:	3b01      	subs	r3, #1
 800575a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800575e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005762:	881b      	ldrh	r3, [r3, #0]
 8005764:	b29a      	uxth	r2, r3
 8005766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800576a:	b29b      	uxth	r3, r3
 800576c:	029b      	lsls	r3, r3, #10
 800576e:	b29b      	uxth	r3, r3
 8005770:	4313      	orrs	r3, r2
 8005772:	b29b      	uxth	r3, r3
 8005774:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005778:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800577c:	b29a      	uxth	r2, r3
 800577e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005782:	801a      	strh	r2, [r3, #0]
 8005784:	e070      	b.n	8005868 <USB_EPStartXfer+0x10ea>
 8005786:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800578a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d10c      	bne.n	80057b0 <USB_EPStartXfer+0x1032>
 8005796:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800579a:	881b      	ldrh	r3, [r3, #0]
 800579c:	b29b      	uxth	r3, r3
 800579e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80057ac:	801a      	strh	r2, [r3, #0]
 80057ae:	e05b      	b.n	8005868 <USB_EPStartXfer+0x10ea>
 80057b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	085b      	lsrs	r3, r3, #1
 80057be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80057c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	f003 0301 	and.w	r3, r3, #1
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d004      	beq.n	80057e0 <USB_EPStartXfer+0x1062>
 80057d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057da:	3301      	adds	r3, #1
 80057dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80057e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80057e4:	881b      	ldrh	r3, [r3, #0]
 80057e6:	b29a      	uxth	r2, r3
 80057e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	029b      	lsls	r3, r3, #10
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	4313      	orrs	r3, r2
 80057f4:	b29a      	uxth	r2, r3
 80057f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80057fa:	801a      	strh	r2, [r3, #0]
 80057fc:	e034      	b.n	8005868 <USB_EPStartXfer+0x10ea>
 80057fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005802:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	785b      	ldrb	r3, [r3, #1]
 800580a:	2b01      	cmp	r3, #1
 800580c:	d12c      	bne.n	8005868 <USB_EPStartXfer+0x10ea>
 800580e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005812:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800581c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005820:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800582a:	b29b      	uxth	r3, r3
 800582c:	461a      	mov	r2, r3
 800582e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005832:	4413      	add	r3, r2
 8005834:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005838:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800583c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	00da      	lsls	r2, r3, #3
 8005846:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800584a:	4413      	add	r3, r2
 800584c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005850:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005854:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005858:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	b29a      	uxth	r2, r3
 8005862:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005866:	801a      	strh	r2, [r3, #0]
 8005868:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800586c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005876:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800587a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	785b      	ldrb	r3, [r3, #1]
 8005882:	2b00      	cmp	r3, #0
 8005884:	f040 809d 	bne.w	80059c2 <USB_EPStartXfer+0x1244>
 8005888:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800588c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005896:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800589a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	461a      	mov	r2, r3
 80058a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80058ac:	4413      	add	r3, r2
 80058ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80058b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	00da      	lsls	r2, r3, #3
 80058c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80058c4:	4413      	add	r3, r2
 80058c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80058ca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80058ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058d2:	881b      	ldrh	r3, [r3, #0]
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058da:	b29a      	uxth	r2, r3
 80058dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058e0:	801a      	strh	r2, [r3, #0]
 80058e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	2b3e      	cmp	r3, #62	; 0x3e
 80058f0:	d92b      	bls.n	800594a <USB_EPStartXfer+0x11cc>
 80058f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	095b      	lsrs	r3, r3, #5
 8005900:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005904:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005908:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	f003 031f 	and.w	r3, r3, #31
 8005914:	2b00      	cmp	r3, #0
 8005916:	d104      	bne.n	8005922 <USB_EPStartXfer+0x11a4>
 8005918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800591c:	3b01      	subs	r3, #1
 800591e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005922:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005926:	881b      	ldrh	r3, [r3, #0]
 8005928:	b29a      	uxth	r2, r3
 800592a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800592e:	b29b      	uxth	r3, r3
 8005930:	029b      	lsls	r3, r3, #10
 8005932:	b29b      	uxth	r3, r3
 8005934:	4313      	orrs	r3, r2
 8005936:	b29b      	uxth	r3, r3
 8005938:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800593c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005940:	b29a      	uxth	r2, r3
 8005942:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005946:	801a      	strh	r2, [r3, #0]
 8005948:	e069      	b.n	8005a1e <USB_EPStartXfer+0x12a0>
 800594a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800594e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d10c      	bne.n	8005974 <USB_EPStartXfer+0x11f6>
 800595a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800595e:	881b      	ldrh	r3, [r3, #0]
 8005960:	b29b      	uxth	r3, r3
 8005962:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005966:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800596a:	b29a      	uxth	r2, r3
 800596c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005970:	801a      	strh	r2, [r3, #0]
 8005972:	e054      	b.n	8005a1e <USB_EPStartXfer+0x12a0>
 8005974:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005978:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	085b      	lsrs	r3, r3, #1
 8005982:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005986:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800598a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	f003 0301 	and.w	r3, r3, #1
 8005996:	2b00      	cmp	r3, #0
 8005998:	d004      	beq.n	80059a4 <USB_EPStartXfer+0x1226>
 800599a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800599e:	3301      	adds	r3, #1
 80059a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80059a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80059a8:	881b      	ldrh	r3, [r3, #0]
 80059aa:	b29a      	uxth	r2, r3
 80059ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	029b      	lsls	r3, r3, #10
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	4313      	orrs	r3, r2
 80059b8:	b29a      	uxth	r2, r3
 80059ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80059be:	801a      	strh	r2, [r3, #0]
 80059c0:	e02d      	b.n	8005a1e <USB_EPStartXfer+0x12a0>
 80059c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	785b      	ldrb	r3, [r3, #1]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d125      	bne.n	8005a1e <USB_EPStartXfer+0x12a0>
 80059d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	461a      	mov	r2, r3
 80059e4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80059e8:	4413      	add	r3, r2
 80059ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80059ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	00da      	lsls	r2, r3, #3
 80059fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005a00:	4413      	add	r3, r2
 8005a02:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005a06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005a0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a1c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005a1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	69db      	ldr	r3, [r3, #28]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	f000 8218 	beq.w	8005e60 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005a30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	4413      	add	r3, r2
 8005a4a:	881b      	ldrh	r3, [r3, #0]
 8005a4c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005a50:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005a54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d005      	beq.n	8005a68 <USB_EPStartXfer+0x12ea>
 8005a5c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d10d      	bne.n	8005a84 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005a68:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005a6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	f040 81f5 	bne.w	8005e60 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005a76:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	f040 81ee 	bne.w	8005e60 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005a84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	4413      	add	r3, r2
 8005a9e:	881b      	ldrh	r3, [r3, #0]
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aaa:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8005aae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ab2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005abc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	441a      	add	r2, r3
 8005ac8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8005acc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ad0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ad4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ad8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	8013      	strh	r3, [r2, #0]
 8005ae0:	e1be      	b.n	8005e60 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005ae2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ae6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	78db      	ldrb	r3, [r3, #3]
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	f040 81b4 	bne.w	8005e5c <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005af4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005af8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	699a      	ldr	r2, [r3, #24]
 8005b00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d917      	bls.n	8005b40 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8005b10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8005b20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	699a      	ldr	r2, [r3, #24]
 8005b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b30:	1ad2      	subs	r2, r2, r3
 8005b32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	619a      	str	r2, [r3, #24]
 8005b3e:	e00e      	b.n	8005b5e <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8005b40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	699b      	ldr	r3, [r3, #24]
 8005b4c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8005b50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005b5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	785b      	ldrb	r3, [r3, #1]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	f040 8085 	bne.w	8005c7a <USB_EPStartXfer+0x14fc>
 8005b70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005b7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	461a      	mov	r2, r3
 8005b90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005b94:	4413      	add	r3, r2
 8005b96:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005b9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	00da      	lsls	r2, r3, #3
 8005ba8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005bac:	4413      	add	r3, r2
 8005bae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005bb2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005bb6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005bba:	881b      	ldrh	r3, [r3, #0]
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005bc8:	801a      	strh	r2, [r3, #0]
 8005bca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bce:	2b3e      	cmp	r3, #62	; 0x3e
 8005bd0:	d923      	bls.n	8005c1a <USB_EPStartXfer+0x149c>
 8005bd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bd6:	095b      	lsrs	r3, r3, #5
 8005bd8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005bdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005be0:	f003 031f 	and.w	r3, r3, #31
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d104      	bne.n	8005bf2 <USB_EPStartXfer+0x1474>
 8005be8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bec:	3b01      	subs	r3, #1
 8005bee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005bf2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005bf6:	881b      	ldrh	r3, [r3, #0]
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	029b      	lsls	r3, r3, #10
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	4313      	orrs	r3, r2
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c10:	b29a      	uxth	r2, r3
 8005c12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c16:	801a      	strh	r2, [r3, #0]
 8005c18:	e060      	b.n	8005cdc <USB_EPStartXfer+0x155e>
 8005c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d10c      	bne.n	8005c3c <USB_EPStartXfer+0x14be>
 8005c22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c26:	881b      	ldrh	r3, [r3, #0]
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c32:	b29a      	uxth	r2, r3
 8005c34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c38:	801a      	strh	r2, [r3, #0]
 8005c3a:	e04f      	b.n	8005cdc <USB_EPStartXfer+0x155e>
 8005c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c40:	085b      	lsrs	r3, r3, #1
 8005c42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005c46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c4a:	f003 0301 	and.w	r3, r3, #1
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d004      	beq.n	8005c5c <USB_EPStartXfer+0x14de>
 8005c52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c56:	3301      	adds	r3, #1
 8005c58:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005c5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c60:	881b      	ldrh	r3, [r3, #0]
 8005c62:	b29a      	uxth	r2, r3
 8005c64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	029b      	lsls	r3, r3, #10
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	b29a      	uxth	r2, r3
 8005c72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c76:	801a      	strh	r2, [r3, #0]
 8005c78:	e030      	b.n	8005cdc <USB_EPStartXfer+0x155e>
 8005c7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	785b      	ldrb	r3, [r3, #1]
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d128      	bne.n	8005cdc <USB_EPStartXfer+0x155e>
 8005c8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005c98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	461a      	mov	r2, r3
 8005caa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005cae:	4413      	add	r3, r2
 8005cb0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005cb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	00da      	lsls	r2, r3, #3
 8005cc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005cc6:	4413      	add	r3, r2
 8005cc8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005ccc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005cd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cd4:	b29a      	uxth	r2, r3
 8005cd6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005cda:	801a      	strh	r2, [r3, #0]
 8005cdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ce0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005cea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	785b      	ldrb	r3, [r3, #1]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	f040 8085 	bne.w	8005e06 <USB_EPStartXfer+0x1688>
 8005cfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005d0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005d20:	4413      	add	r3, r2
 8005d22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005d26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	00da      	lsls	r2, r3, #3
 8005d34:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005d38:	4413      	add	r3, r2
 8005d3a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005d3e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d46:	881b      	ldrh	r3, [r3, #0]
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d54:	801a      	strh	r2, [r3, #0]
 8005d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d5a:	2b3e      	cmp	r3, #62	; 0x3e
 8005d5c:	d923      	bls.n	8005da6 <USB_EPStartXfer+0x1628>
 8005d5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d62:	095b      	lsrs	r3, r3, #5
 8005d64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d6c:	f003 031f 	and.w	r3, r3, #31
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d104      	bne.n	8005d7e <USB_EPStartXfer+0x1600>
 8005d74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005d7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d82:	881b      	ldrh	r3, [r3, #0]
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	029b      	lsls	r3, r3, #10
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	4313      	orrs	r3, r2
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d9c:	b29a      	uxth	r2, r3
 8005d9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005da2:	801a      	strh	r2, [r3, #0]
 8005da4:	e05c      	b.n	8005e60 <USB_EPStartXfer+0x16e2>
 8005da6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d10c      	bne.n	8005dc8 <USB_EPStartXfer+0x164a>
 8005dae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005db2:	881b      	ldrh	r3, [r3, #0]
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dbe:	b29a      	uxth	r2, r3
 8005dc0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005dc4:	801a      	strh	r2, [r3, #0]
 8005dc6:	e04b      	b.n	8005e60 <USB_EPStartXfer+0x16e2>
 8005dc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dcc:	085b      	lsrs	r3, r3, #1
 8005dce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dd6:	f003 0301 	and.w	r3, r3, #1
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d004      	beq.n	8005de8 <USB_EPStartXfer+0x166a>
 8005dde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005de2:	3301      	adds	r3, #1
 8005de4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005de8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005dec:	881b      	ldrh	r3, [r3, #0]
 8005dee:	b29a      	uxth	r2, r3
 8005df0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	029b      	lsls	r3, r3, #10
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	b29a      	uxth	r2, r3
 8005dfe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e02:	801a      	strh	r2, [r3, #0]
 8005e04:	e02c      	b.n	8005e60 <USB_EPStartXfer+0x16e2>
 8005e06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	785b      	ldrb	r3, [r3, #1]
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d124      	bne.n	8005e60 <USB_EPStartXfer+0x16e2>
 8005e16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	461a      	mov	r2, r3
 8005e28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005e2c:	4413      	add	r3, r2
 8005e2e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	00da      	lsls	r2, r3, #3
 8005e40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005e44:	4413      	add	r3, r2
 8005e46:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005e4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e52:	b29a      	uxth	r2, r3
 8005e54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005e58:	801a      	strh	r2, [r3, #0]
 8005e5a:	e001      	b.n	8005e60 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e03a      	b.n	8005ed6 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	4413      	add	r3, r2
 8005e7a:	881b      	ldrh	r3, [r3, #0]
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e86:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005e8a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005e8e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005e92:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005e96:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005e9a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005e9e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005ea2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ea6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	441a      	add	r2, r3
 8005ebc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005ec0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ec4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ec8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	460b      	mov	r3, r1
 8005eea:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005eec:	78fb      	ldrb	r3, [r7, #3]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d103      	bne.n	8005efa <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2280      	movs	r2, #128	; 0x80
 8005ef6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3714      	adds	r7, #20
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b08b      	sub	sp, #44	; 0x2c
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	4611      	mov	r1, r2
 8005f34:	461a      	mov	r2, r3
 8005f36:	460b      	mov	r3, r1
 8005f38:	80fb      	strh	r3, [r7, #6]
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005f3e:	88bb      	ldrh	r3, [r7, #4]
 8005f40:	3301      	adds	r3, #1
 8005f42:	085b      	lsrs	r3, r3, #1
 8005f44:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005f4e:	88fa      	ldrh	r2, [r7, #6]
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	4413      	add	r3, r2
 8005f54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f58:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	627b      	str	r3, [r7, #36]	; 0x24
 8005f5e:	e01b      	b.n	8005f98 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	3301      	adds	r3, #1
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	021b      	lsls	r3, r3, #8
 8005f6e:	b21a      	sxth	r2, r3
 8005f70:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	b21b      	sxth	r3, r3
 8005f78:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8005f7a:	6a3b      	ldr	r3, [r7, #32]
 8005f7c:	8a7a      	ldrh	r2, [r7, #18]
 8005f7e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005f80:	6a3b      	ldr	r3, [r7, #32]
 8005f82:	3302      	adds	r3, #2
 8005f84:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	3301      	adds	r3, #1
 8005f8a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	3301      	adds	r3, #1
 8005f90:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f94:	3b01      	subs	r3, #1
 8005f96:	627b      	str	r3, [r7, #36]	; 0x24
 8005f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d1e0      	bne.n	8005f60 <USB_WritePMA+0x38>
  }
}
 8005f9e:	bf00      	nop
 8005fa0:	bf00      	nop
 8005fa2:	372c      	adds	r7, #44	; 0x2c
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b08b      	sub	sp, #44	; 0x2c
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	4611      	mov	r1, r2
 8005fb8:	461a      	mov	r2, r3
 8005fba:	460b      	mov	r3, r1
 8005fbc:	80fb      	strh	r3, [r7, #6]
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005fc2:	88bb      	ldrh	r3, [r7, #4]
 8005fc4:	085b      	lsrs	r3, r3, #1
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005fd2:	88fa      	ldrh	r2, [r7, #6]
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fdc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	627b      	str	r3, [r7, #36]	; 0x24
 8005fe2:	e018      	b.n	8006016 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8005fe4:	6a3b      	ldr	r3, [r7, #32]
 8005fe6:	881b      	ldrh	r3, [r3, #0]
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005fec:	6a3b      	ldr	r3, [r7, #32]
 8005fee:	3302      	adds	r3, #2
 8005ff0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	b2da      	uxtb	r2, r3
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	0a1b      	lsrs	r3, r3, #8
 8006004:	b2da      	uxtb	r2, r3
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	3301      	adds	r3, #1
 800600e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006012:	3b01      	subs	r3, #1
 8006014:	627b      	str	r3, [r7, #36]	; 0x24
 8006016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1e3      	bne.n	8005fe4 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800601c:	88bb      	ldrh	r3, [r7, #4]
 800601e:	f003 0301 	and.w	r3, r3, #1
 8006022:	b29b      	uxth	r3, r3
 8006024:	2b00      	cmp	r3, #0
 8006026:	d007      	beq.n	8006038 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8006028:	6a3b      	ldr	r3, [r7, #32]
 800602a:	881b      	ldrh	r3, [r3, #0]
 800602c:	b29b      	uxth	r3, r3
 800602e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	b2da      	uxtb	r2, r3
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	701a      	strb	r2, [r3, #0]
  }
}
 8006038:	bf00      	nop
 800603a:	372c      	adds	r7, #44	; 0x2c
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <__libc_init_array>:
 8006044:	b570      	push	{r4, r5, r6, lr}
 8006046:	4d0d      	ldr	r5, [pc, #52]	; (800607c <__libc_init_array+0x38>)
 8006048:	4c0d      	ldr	r4, [pc, #52]	; (8006080 <__libc_init_array+0x3c>)
 800604a:	1b64      	subs	r4, r4, r5
 800604c:	10a4      	asrs	r4, r4, #2
 800604e:	2600      	movs	r6, #0
 8006050:	42a6      	cmp	r6, r4
 8006052:	d109      	bne.n	8006068 <__libc_init_array+0x24>
 8006054:	4d0b      	ldr	r5, [pc, #44]	; (8006084 <__libc_init_array+0x40>)
 8006056:	4c0c      	ldr	r4, [pc, #48]	; (8006088 <__libc_init_array+0x44>)
 8006058:	f000 f820 	bl	800609c <_init>
 800605c:	1b64      	subs	r4, r4, r5
 800605e:	10a4      	asrs	r4, r4, #2
 8006060:	2600      	movs	r6, #0
 8006062:	42a6      	cmp	r6, r4
 8006064:	d105      	bne.n	8006072 <__libc_init_array+0x2e>
 8006066:	bd70      	pop	{r4, r5, r6, pc}
 8006068:	f855 3b04 	ldr.w	r3, [r5], #4
 800606c:	4798      	blx	r3
 800606e:	3601      	adds	r6, #1
 8006070:	e7ee      	b.n	8006050 <__libc_init_array+0xc>
 8006072:	f855 3b04 	ldr.w	r3, [r5], #4
 8006076:	4798      	blx	r3
 8006078:	3601      	adds	r6, #1
 800607a:	e7f2      	b.n	8006062 <__libc_init_array+0x1e>
 800607c:	080060ec 	.word	0x080060ec
 8006080:	080060ec 	.word	0x080060ec
 8006084:	080060ec 	.word	0x080060ec
 8006088:	080060f0 	.word	0x080060f0

0800608c <memset>:
 800608c:	4402      	add	r2, r0
 800608e:	4603      	mov	r3, r0
 8006090:	4293      	cmp	r3, r2
 8006092:	d100      	bne.n	8006096 <memset+0xa>
 8006094:	4770      	bx	lr
 8006096:	f803 1b01 	strb.w	r1, [r3], #1
 800609a:	e7f9      	b.n	8006090 <memset+0x4>

0800609c <_init>:
 800609c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800609e:	bf00      	nop
 80060a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060a2:	bc08      	pop	{r3}
 80060a4:	469e      	mov	lr, r3
 80060a6:	4770      	bx	lr

080060a8 <_fini>:
 80060a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060aa:	bf00      	nop
 80060ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ae:	bc08      	pop	{r3}
 80060b0:	469e      	mov	lr, r3
 80060b2:	4770      	bx	lr
