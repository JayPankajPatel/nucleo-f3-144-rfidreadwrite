
nucleo-f3-144-rfidreadwrite.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a48  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08009bdc  08009bdc  00019bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c5c  08009c5c  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  08009c5c  08009c5c  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009c5c  08009c5c  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c5c  08009c5c  00019c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c60  08009c60  00019c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08009c64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002017c  2**0
                  CONTENTS
 10 .bss          00001300  2000017c  2000017c  0002017c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000147c  2000147c  0002017c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016251  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000341c  00000000  00000000  000363fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fa8  00000000  00000000  00039820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e50  00000000  00000000  0003a7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024230  00000000  00000000  0003b618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016867  00000000  00000000  0005f848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd1ba  00000000  00000000  000760af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00143269  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003f2c  00000000  00000000  001432bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000017c 	.word	0x2000017c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08009bc4 	.word	0x08009bc4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000180 	.word	0x20000180
 80001d0:	08009bc4 	.word	0x08009bc4

080001d4 <RC522_SPI_read_transmit_recieve>:
#include "main.h"

extern hspi1;

uint8_t RC522_SPI_read_transmit_recieve(uint8_t addr, uint8_t* data)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b086      	sub	sp, #24
 80001d8:	af02      	add	r7, sp, #8
 80001da:	4603      	mov	r3, r0
 80001dc:	6039      	str	r1, [r7, #0]
 80001de:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_bits;
	uint8_t read_addr = ((addr << 1) & 0x7E) | 0x80; //8.1.2.3 Table 8
 80001e0:	79fb      	ldrb	r3, [r7, #7]
 80001e2:	005b      	lsls	r3, r3, #1
 80001e4:	b25b      	sxtb	r3, r3
 80001e6:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80001ea:	b25b      	sxtb	r3, r3
 80001ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80001f0:	b25b      	sxtb	r3, r3
 80001f2:	b2db      	uxtb	r3, r3
 80001f4:	737b      	strb	r3, [r7, #13]
	uint8_t status;

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, RESET); 	 // Bring NSS Low to begin transaction.
 80001f6:	2200      	movs	r2, #0
 80001f8:	2101      	movs	r1, #1
 80001fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001fe:	f000 fe65 	bl	8000ecc <HAL_GPIO_WritePin>

	status = (HAL_SPI_TransmitReceive(&hspi1, &read_addr, &rx_bits, 1, HAL_MAX_DELAY)) ==  HAL_OK; // Size param is set in initialization
 8000202:	f107 020e 	add.w	r2, r7, #14
 8000206:	f107 010d 	add.w	r1, r7, #13
 800020a:	f04f 33ff 	mov.w	r3, #4294967295
 800020e:	9300      	str	r3, [sp, #0]
 8000210:	2301      	movs	r3, #1
 8000212:	480b      	ldr	r0, [pc, #44]	; (8000240 <RC522_SPI_read_transmit_recieve+0x6c>)
 8000214:	f004 f9a9 	bl	800456a <HAL_SPI_TransmitReceive>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	bf0c      	ite	eq
 800021e:	2301      	moveq	r3, #1
 8000220:	2300      	movne	r3, #0
 8000222:	b2db      	uxtb	r3, r3
 8000224:	73fb      	strb	r3, [r7, #15]
																   	   	   	   	   	   	   	       // in this case its : hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
																   	   	   	   	   	   	   	   	   // 1 is refering to 1 byte
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, SET);       // Bring NSS High to end transaction.
 8000226:	2201      	movs	r2, #1
 8000228:	2101      	movs	r1, #1
 800022a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800022e:	f000 fe4d 	bl	8000ecc <HAL_GPIO_WritePin>

	data = rx_bits;
 8000232:	7bbb      	ldrb	r3, [r7, #14]
 8000234:	603b      	str	r3, [r7, #0]

	return status;
 8000236:	7bfb      	ldrb	r3, [r7, #15]

}
 8000238:	4618      	mov	r0, r3
 800023a:	3710      	adds	r7, #16
 800023c:	46bd      	mov	sp, r7
 800023e:	bd80      	pop	{r7, pc}
 8000240:	200001b8 	.word	0x200001b8

08000244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b084      	sub	sp, #16
 8000248:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800024a:	f000 fb19 	bl	8000880 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800024e:	f000 f81d 	bl	800028c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000252:	f000 f917 	bl	8000484 <MX_GPIO_Init>
  MX_RTC_Init();
 8000256:	f000 f881 	bl	800035c <MX_RTC_Init>
  MX_USART3_UART_Init();
 800025a:	f000 f8e3 	bl	8000424 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 800025e:	f000 f8a3 	bl	80003a8 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000262:	f008 fffb 	bl	800925c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_6); // Turns on Micro USB Port CN13 for Data Transmission
 8000266:	2140      	movs	r1, #64	; 0x40
 8000268:	4807      	ldr	r0, [pc, #28]	; (8000288 <main+0x44>)
 800026a:	f000 fe47 	bl	8000efc <HAL_GPIO_TogglePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  uint8_t data = 0;
 800026e:	2300      	movs	r3, #0
 8000270:	71fb      	strb	r3, [r7, #7]
	  data = RC522_SPI_read_transmit_recieve(GENRANDID, &data);
 8000272:	1dfb      	adds	r3, r7, #7
 8000274:	4619      	mov	r1, r3
 8000276:	2002      	movs	r0, #2
 8000278:	f7ff ffac 	bl	80001d4 <RC522_SPI_read_transmit_recieve>
 800027c:	4603      	mov	r3, r0
 800027e:	71fb      	strb	r3, [r7, #7]

	  HAL_Delay(100);
 8000280:	2064      	movs	r0, #100	; 0x64
 8000282:	f000 fb63 	bl	800094c <HAL_Delay>
  {
 8000286:	e7f2      	b.n	800026e <main+0x2a>
 8000288:	48001800 	.word	0x48001800

0800028c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b0a6      	sub	sp, #152	; 0x98
 8000290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000292:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000296:	2228      	movs	r2, #40	; 0x28
 8000298:	2100      	movs	r1, #0
 800029a:	4618      	mov	r0, r3
 800029c:	f009 fc8a 	bl	8009bb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002a4:	2200      	movs	r2, #0
 80002a6:	601a      	str	r2, [r3, #0]
 80002a8:	605a      	str	r2, [r3, #4]
 80002aa:	609a      	str	r2, [r3, #8]
 80002ac:	60da      	str	r2, [r3, #12]
 80002ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002b0:	1d3b      	adds	r3, r7, #4
 80002b2:	2258      	movs	r2, #88	; 0x58
 80002b4:	2100      	movs	r1, #0
 80002b6:	4618      	mov	r0, r3
 80002b8:	f009 fc7c 	bl	8009bb4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80002bc:	2309      	movs	r3, #9
 80002be:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80002c0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80002c4:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c6:	2301      	movs	r3, #1
 80002c8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80002ca:	2301      	movs	r3, #1
 80002cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d0:	2302      	movs	r3, #2
 80002d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002de:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002e6:	2300      	movs	r3, #0
 80002e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ec:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002f0:	4618      	mov	r0, r3
 80002f2:	f002 fae1 	bl	80028b8 <HAL_RCC_OscConfig>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80002fc:	f000 f978 	bl	80005f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000300:	230f      	movs	r3, #15
 8000302:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000304:	2302      	movs	r3, #2
 8000306:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000308:	2300      	movs	r3, #0
 800030a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800030c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000310:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000312:	2300      	movs	r3, #0
 8000314:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000316:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800031a:	2102      	movs	r1, #2
 800031c:	4618      	mov	r0, r3
 800031e:	f003 fb1f 	bl	8003960 <HAL_RCC_ClockConfig>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000328:	f000 f962 	bl	80005f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART3
 800032c:	4b0a      	ldr	r3, [pc, #40]	; (8000358 <SystemClock_Config+0xcc>)
 800032e:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000330:	2300      	movs	r3, #0
 8000332:	617b      	str	r3, [r7, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000334:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000338:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800033a:	2300      	movs	r3, #0
 800033c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800033e:	1d3b      	adds	r3, r7, #4
 8000340:	4618      	mov	r0, r3
 8000342:	f003 fd43 	bl	8003dcc <HAL_RCCEx_PeriphCLKConfig>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800034c:	f000 f950 	bl	80005f0 <Error_Handler>
  }
}
 8000350:	bf00      	nop
 8000352:	3798      	adds	r7, #152	; 0x98
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	00030004 	.word	0x00030004

0800035c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000360:	4b0f      	ldr	r3, [pc, #60]	; (80003a0 <MX_RTC_Init+0x44>)
 8000362:	4a10      	ldr	r2, [pc, #64]	; (80003a4 <MX_RTC_Init+0x48>)
 8000364:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000366:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <MX_RTC_Init+0x44>)
 8000368:	2200      	movs	r2, #0
 800036a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800036c:	4b0c      	ldr	r3, [pc, #48]	; (80003a0 <MX_RTC_Init+0x44>)
 800036e:	227f      	movs	r2, #127	; 0x7f
 8000370:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000372:	4b0b      	ldr	r3, [pc, #44]	; (80003a0 <MX_RTC_Init+0x44>)
 8000374:	22ff      	movs	r2, #255	; 0xff
 8000376:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000378:	4b09      	ldr	r3, [pc, #36]	; (80003a0 <MX_RTC_Init+0x44>)
 800037a:	2200      	movs	r2, #0
 800037c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800037e:	4b08      	ldr	r3, [pc, #32]	; (80003a0 <MX_RTC_Init+0x44>)
 8000380:	2200      	movs	r2, #0
 8000382:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000384:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <MX_RTC_Init+0x44>)
 8000386:	2200      	movs	r2, #0
 8000388:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800038a:	4805      	ldr	r0, [pc, #20]	; (80003a0 <MX_RTC_Init+0x44>)
 800038c:	f003 ff3c 	bl	8004208 <HAL_RTC_Init>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000396:	f000 f92b 	bl	80005f0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800039a:	bf00      	nop
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	20000198 	.word	0x20000198
 80003a4:	40002800 	.word	0x40002800

080003a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003ac:	4b1b      	ldr	r3, [pc, #108]	; (800041c <MX_SPI1_Init+0x74>)
 80003ae:	4a1c      	ldr	r2, [pc, #112]	; (8000420 <MX_SPI1_Init+0x78>)
 80003b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003b2:	4b1a      	ldr	r3, [pc, #104]	; (800041c <MX_SPI1_Init+0x74>)
 80003b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80003b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003ba:	4b18      	ldr	r3, [pc, #96]	; (800041c <MX_SPI1_Init+0x74>)
 80003bc:	2200      	movs	r2, #0
 80003be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80003c0:	4b16      	ldr	r3, [pc, #88]	; (800041c <MX_SPI1_Init+0x74>)
 80003c2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80003c6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003c8:	4b14      	ldr	r3, [pc, #80]	; (800041c <MX_SPI1_Init+0x74>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003ce:	4b13      	ldr	r3, [pc, #76]	; (800041c <MX_SPI1_Init+0x74>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003d4:	4b11      	ldr	r3, [pc, #68]	; (800041c <MX_SPI1_Init+0x74>)
 80003d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003da:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80003dc:	4b0f      	ldr	r3, [pc, #60]	; (800041c <MX_SPI1_Init+0x74>)
 80003de:	2220      	movs	r2, #32
 80003e0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003e2:	4b0e      	ldr	r3, [pc, #56]	; (800041c <MX_SPI1_Init+0x74>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003e8:	4b0c      	ldr	r3, [pc, #48]	; (800041c <MX_SPI1_Init+0x74>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003ee:	4b0b      	ldr	r3, [pc, #44]	; (800041c <MX_SPI1_Init+0x74>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80003f4:	4b09      	ldr	r3, [pc, #36]	; (800041c <MX_SPI1_Init+0x74>)
 80003f6:	2207      	movs	r2, #7
 80003f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003fa:	4b08      	ldr	r3, [pc, #32]	; (800041c <MX_SPI1_Init+0x74>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000400:	4b06      	ldr	r3, [pc, #24]	; (800041c <MX_SPI1_Init+0x74>)
 8000402:	2208      	movs	r2, #8
 8000404:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000406:	4805      	ldr	r0, [pc, #20]	; (800041c <MX_SPI1_Init+0x74>)
 8000408:	f004 f804 	bl	8004414 <HAL_SPI_Init>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000412:	f000 f8ed 	bl	80005f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000416:	bf00      	nop
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	200001b8 	.word	0x200001b8
 8000420:	40013000 	.word	0x40013000

08000424 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000428:	4b14      	ldr	r3, [pc, #80]	; (800047c <MX_USART3_UART_Init+0x58>)
 800042a:	4a15      	ldr	r2, [pc, #84]	; (8000480 <MX_USART3_UART_Init+0x5c>)
 800042c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 800042e:	4b13      	ldr	r3, [pc, #76]	; (800047c <MX_USART3_UART_Init+0x58>)
 8000430:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000434:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000436:	4b11      	ldr	r3, [pc, #68]	; (800047c <MX_USART3_UART_Init+0x58>)
 8000438:	2200      	movs	r2, #0
 800043a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800043c:	4b0f      	ldr	r3, [pc, #60]	; (800047c <MX_USART3_UART_Init+0x58>)
 800043e:	2200      	movs	r2, #0
 8000440:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000442:	4b0e      	ldr	r3, [pc, #56]	; (800047c <MX_USART3_UART_Init+0x58>)
 8000444:	2200      	movs	r2, #0
 8000446:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000448:	4b0c      	ldr	r3, [pc, #48]	; (800047c <MX_USART3_UART_Init+0x58>)
 800044a:	220c      	movs	r2, #12
 800044c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800044e:	4b0b      	ldr	r3, [pc, #44]	; (800047c <MX_USART3_UART_Init+0x58>)
 8000450:	2200      	movs	r2, #0
 8000452:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000454:	4b09      	ldr	r3, [pc, #36]	; (800047c <MX_USART3_UART_Init+0x58>)
 8000456:	2200      	movs	r2, #0
 8000458:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800045a:	4b08      	ldr	r3, [pc, #32]	; (800047c <MX_USART3_UART_Init+0x58>)
 800045c:	2200      	movs	r2, #0
 800045e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000460:	4b06      	ldr	r3, [pc, #24]	; (800047c <MX_USART3_UART_Init+0x58>)
 8000462:	2200      	movs	r2, #0
 8000464:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000466:	4805      	ldr	r0, [pc, #20]	; (800047c <MX_USART3_UART_Init+0x58>)
 8000468:	f004 fc06 	bl	8004c78 <HAL_UART_Init>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d001      	beq.n	8000476 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000472:	f000 f8bd 	bl	80005f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000476:	bf00      	nop
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	2000021c 	.word	0x2000021c
 8000480:	40004800 	.word	0x40004800

08000484 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b08c      	sub	sp, #48	; 0x30
 8000488:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048a:	f107 031c 	add.w	r3, r7, #28
 800048e:	2200      	movs	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
 8000492:	605a      	str	r2, [r3, #4]
 8000494:	609a      	str	r2, [r3, #8]
 8000496:	60da      	str	r2, [r3, #12]
 8000498:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800049a:	4b51      	ldr	r3, [pc, #324]	; (80005e0 <MX_GPIO_Init+0x15c>)
 800049c:	695b      	ldr	r3, [r3, #20]
 800049e:	4a50      	ldr	r2, [pc, #320]	; (80005e0 <MX_GPIO_Init+0x15c>)
 80004a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004a4:	6153      	str	r3, [r2, #20]
 80004a6:	4b4e      	ldr	r3, [pc, #312]	; (80005e0 <MX_GPIO_Init+0x15c>)
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80004ae:	61bb      	str	r3, [r7, #24]
 80004b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004b2:	4b4b      	ldr	r3, [pc, #300]	; (80005e0 <MX_GPIO_Init+0x15c>)
 80004b4:	695b      	ldr	r3, [r3, #20]
 80004b6:	4a4a      	ldr	r2, [pc, #296]	; (80005e0 <MX_GPIO_Init+0x15c>)
 80004b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004bc:	6153      	str	r3, [r2, #20]
 80004be:	4b48      	ldr	r3, [pc, #288]	; (80005e0 <MX_GPIO_Init+0x15c>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004c6:	617b      	str	r3, [r7, #20]
 80004c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ca:	4b45      	ldr	r3, [pc, #276]	; (80005e0 <MX_GPIO_Init+0x15c>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	4a44      	ldr	r2, [pc, #272]	; (80005e0 <MX_GPIO_Init+0x15c>)
 80004d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004d4:	6153      	str	r3, [r2, #20]
 80004d6:	4b42      	ldr	r3, [pc, #264]	; (80005e0 <MX_GPIO_Init+0x15c>)
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004de:	613b      	str	r3, [r7, #16]
 80004e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e2:	4b3f      	ldr	r3, [pc, #252]	; (80005e0 <MX_GPIO_Init+0x15c>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	4a3e      	ldr	r2, [pc, #248]	; (80005e0 <MX_GPIO_Init+0x15c>)
 80004e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004ec:	6153      	str	r3, [r2, #20]
 80004ee:	4b3c      	ldr	r3, [pc, #240]	; (80005e0 <MX_GPIO_Init+0x15c>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004f6:	60fb      	str	r3, [r7, #12]
 80004f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004fa:	4b39      	ldr	r3, [pc, #228]	; (80005e0 <MX_GPIO_Init+0x15c>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	4a38      	ldr	r2, [pc, #224]	; (80005e0 <MX_GPIO_Init+0x15c>)
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	6153      	str	r3, [r2, #20]
 8000506:	4b36      	ldr	r3, [pc, #216]	; (80005e0 <MX_GPIO_Init+0x15c>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800050e:	60bb      	str	r3, [r7, #8]
 8000510:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000512:	4b33      	ldr	r3, [pc, #204]	; (80005e0 <MX_GPIO_Init+0x15c>)
 8000514:	695b      	ldr	r3, [r3, #20]
 8000516:	4a32      	ldr	r2, [pc, #200]	; (80005e0 <MX_GPIO_Init+0x15c>)
 8000518:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800051c:	6153      	str	r3, [r2, #20]
 800051e:	4b30      	ldr	r3, [pc, #192]	; (80005e0 <MX_GPIO_Init+0x15c>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SP1_NSS_RC552_GPIO_Port, SP1_NSS_RC552_Pin, GPIO_PIN_RESET);
 800052a:	2200      	movs	r2, #0
 800052c:	2101      	movs	r1, #1
 800052e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000532:	f000 fccb 	bl	8000ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000536:	2200      	movs	r2, #0
 8000538:	f244 0181 	movw	r1, #16513	; 0x4081
 800053c:	4829      	ldr	r0, [pc, #164]	; (80005e4 <MX_GPIO_Init+0x160>)
 800053e:	f000 fcc5 	bl	8000ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000542:	2200      	movs	r2, #0
 8000544:	2140      	movs	r1, #64	; 0x40
 8000546:	4828      	ldr	r0, [pc, #160]	; (80005e8 <MX_GPIO_Init+0x164>)
 8000548:	f000 fcc0 	bl	8000ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800054c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000550:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000552:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000556:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000558:	2300      	movs	r3, #0
 800055a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800055c:	f107 031c 	add.w	r3, r7, #28
 8000560:	4619      	mov	r1, r3
 8000562:	4822      	ldr	r0, [pc, #136]	; (80005ec <MX_GPIO_Init+0x168>)
 8000564:	f000 fb28 	bl	8000bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SP1_NSS_RC552_Pin */
  GPIO_InitStruct.Pin = SP1_NSS_RC552_Pin;
 8000568:	2301      	movs	r3, #1
 800056a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056c:	2301      	movs	r3, #1
 800056e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000570:	2300      	movs	r3, #0
 8000572:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000574:	2300      	movs	r3, #0
 8000576:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SP1_NSS_RC552_GPIO_Port, &GPIO_InitStruct);
 8000578:	f107 031c 	add.w	r3, r7, #28
 800057c:	4619      	mov	r1, r3
 800057e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000582:	f000 fb19 	bl	8000bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000586:	f244 0381 	movw	r3, #16513	; 0x4081
 800058a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058c:	2301      	movs	r3, #1
 800058e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000590:	2300      	movs	r3, #0
 8000592:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000594:	2300      	movs	r3, #0
 8000596:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000598:	f107 031c 	add.w	r3, r7, #28
 800059c:	4619      	mov	r1, r3
 800059e:	4811      	ldr	r0, [pc, #68]	; (80005e4 <MX_GPIO_Init+0x160>)
 80005a0:	f000 fb0a 	bl	8000bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80005a4:	2340      	movs	r3, #64	; 0x40
 80005a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a8:	2301      	movs	r3, #1
 80005aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ac:	2300      	movs	r3, #0
 80005ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b0:	2300      	movs	r3, #0
 80005b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80005b4:	f107 031c 	add.w	r3, r7, #28
 80005b8:	4619      	mov	r1, r3
 80005ba:	480b      	ldr	r0, [pc, #44]	; (80005e8 <MX_GPIO_Init+0x164>)
 80005bc:	f000 fafc 	bl	8000bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80005c0:	2380      	movs	r3, #128	; 0x80
 80005c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005c4:	2300      	movs	r3, #0
 80005c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c8:	2300      	movs	r3, #0
 80005ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80005cc:	f107 031c 	add.w	r3, r7, #28
 80005d0:	4619      	mov	r1, r3
 80005d2:	4805      	ldr	r0, [pc, #20]	; (80005e8 <MX_GPIO_Init+0x164>)
 80005d4:	f000 faf0 	bl	8000bb8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005d8:	bf00      	nop
 80005da:	3730      	adds	r7, #48	; 0x30
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	40021000 	.word	0x40021000
 80005e4:	48000400 	.word	0x48000400
 80005e8:	48001800 	.word	0x48001800
 80005ec:	48000800 	.word	0x48000800

080005f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005f4:	b672      	cpsid	i
}
 80005f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005f8:	e7fe      	b.n	80005f8 <Error_Handler+0x8>
	...

080005fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <HAL_MspInit+0x44>)
 8000604:	699b      	ldr	r3, [r3, #24]
 8000606:	4a0e      	ldr	r2, [pc, #56]	; (8000640 <HAL_MspInit+0x44>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	6193      	str	r3, [r2, #24]
 800060e:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <HAL_MspInit+0x44>)
 8000610:	699b      	ldr	r3, [r3, #24]
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <HAL_MspInit+0x44>)
 800061c:	69db      	ldr	r3, [r3, #28]
 800061e:	4a08      	ldr	r2, [pc, #32]	; (8000640 <HAL_MspInit+0x44>)
 8000620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000624:	61d3      	str	r3, [r2, #28]
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <HAL_MspInit+0x44>)
 8000628:	69db      	ldr	r3, [r3, #28]
 800062a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062e:	603b      	str	r3, [r7, #0]
 8000630:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000632:	bf00      	nop
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	40021000 	.word	0x40021000

08000644 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000644:	b480      	push	{r7}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a0d      	ldr	r2, [pc, #52]	; (8000688 <HAL_RTC_MspInit+0x44>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d111      	bne.n	800067a <HAL_RTC_MspInit+0x36>
 8000656:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800065a:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	fa93 f3a3 	rbit	r3, r3
 8000662:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000664:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000666:	fab3 f383 	clz	r3, r3
 800066a:	b2db      	uxtb	r3, r3
 800066c:	461a      	mov	r2, r3
 800066e:	4b07      	ldr	r3, [pc, #28]	; (800068c <HAL_RTC_MspInit+0x48>)
 8000670:	4413      	add	r3, r2
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	461a      	mov	r2, r3
 8000676:	2301      	movs	r3, #1
 8000678:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800067a:	bf00      	nop
 800067c:	3714      	adds	r7, #20
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	40002800 	.word	0x40002800
 800068c:	10908100 	.word	0x10908100

08000690 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08a      	sub	sp, #40	; 0x28
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a17      	ldr	r2, [pc, #92]	; (800070c <HAL_SPI_MspInit+0x7c>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d127      	bne.n	8000702 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006b2:	4b17      	ldr	r3, [pc, #92]	; (8000710 <HAL_SPI_MspInit+0x80>)
 80006b4:	699b      	ldr	r3, [r3, #24]
 80006b6:	4a16      	ldr	r2, [pc, #88]	; (8000710 <HAL_SPI_MspInit+0x80>)
 80006b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006bc:	6193      	str	r3, [r2, #24]
 80006be:	4b14      	ldr	r3, [pc, #80]	; (8000710 <HAL_SPI_MspInit+0x80>)
 80006c0:	699b      	ldr	r3, [r3, #24]
 80006c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006c6:	613b      	str	r3, [r7, #16]
 80006c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ca:	4b11      	ldr	r3, [pc, #68]	; (8000710 <HAL_SPI_MspInit+0x80>)
 80006cc:	695b      	ldr	r3, [r3, #20]
 80006ce:	4a10      	ldr	r2, [pc, #64]	; (8000710 <HAL_SPI_MspInit+0x80>)
 80006d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006d4:	6153      	str	r3, [r2, #20]
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <HAL_SPI_MspInit+0x80>)
 80006d8:	695b      	ldr	r3, [r3, #20]
 80006da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SP1_SCK_RC552_Pin|SP1_MISO_RC552_Pin|SP1_MOSI_RC552_Pin;
 80006e2:	2338      	movs	r3, #56	; 0x38
 80006e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e6:	2302      	movs	r3, #2
 80006e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006ee:	2303      	movs	r3, #3
 80006f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80006f2:	2305      	movs	r3, #5
 80006f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	4619      	mov	r1, r3
 80006fc:	4805      	ldr	r0, [pc, #20]	; (8000714 <HAL_SPI_MspInit+0x84>)
 80006fe:	f000 fa5b 	bl	8000bb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000702:	bf00      	nop
 8000704:	3728      	adds	r7, #40	; 0x28
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40013000 	.word	0x40013000
 8000710:	40021000 	.word	0x40021000
 8000714:	48000400 	.word	0x48000400

08000718 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08a      	sub	sp, #40	; 0x28
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000720:	f107 0314 	add.w	r3, r7, #20
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a17      	ldr	r2, [pc, #92]	; (8000794 <HAL_UART_MspInit+0x7c>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d128      	bne.n	800078c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <HAL_UART_MspInit+0x80>)
 800073c:	69db      	ldr	r3, [r3, #28]
 800073e:	4a16      	ldr	r2, [pc, #88]	; (8000798 <HAL_UART_MspInit+0x80>)
 8000740:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000744:	61d3      	str	r3, [r2, #28]
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <HAL_UART_MspInit+0x80>)
 8000748:	69db      	ldr	r3, [r3, #28]
 800074a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800074e:	613b      	str	r3, [r7, #16]
 8000750:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <HAL_UART_MspInit+0x80>)
 8000754:	695b      	ldr	r3, [r3, #20]
 8000756:	4a10      	ldr	r2, [pc, #64]	; (8000798 <HAL_UART_MspInit+0x80>)
 8000758:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800075c:	6153      	str	r3, [r2, #20]
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <HAL_UART_MspInit+0x80>)
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800076a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800076e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000770:	2302      	movs	r3, #2
 8000772:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000778:	2303      	movs	r3, #3
 800077a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800077c:	2307      	movs	r3, #7
 800077e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000780:	f107 0314 	add.w	r3, r7, #20
 8000784:	4619      	mov	r1, r3
 8000786:	4805      	ldr	r0, [pc, #20]	; (800079c <HAL_UART_MspInit+0x84>)
 8000788:	f000 fa16 	bl	8000bb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800078c:	bf00      	nop
 800078e:	3728      	adds	r7, #40	; 0x28
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40004800 	.word	0x40004800
 8000798:	40021000 	.word	0x40021000
 800079c:	48000c00 	.word	0x48000c00

080007a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <NMI_Handler+0x4>

080007a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007aa:	e7fe      	b.n	80007aa <HardFault_Handler+0x4>

080007ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <MemManage_Handler+0x4>

080007b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007b6:	e7fe      	b.n	80007b6 <BusFault_Handler+0x4>

080007b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007bc:	e7fe      	b.n	80007bc <UsageFault_Handler+0x4>

080007be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007c2:	bf00      	nop
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr

080007cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr

080007da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ec:	f000 f88e 	bl	800090c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80007f8:	4802      	ldr	r0, [pc, #8]	; (8000804 <USB_LP_IRQHandler+0x10>)
 80007fa:	f000 fc91 	bl	8001120 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000f70 	.word	0x20000f70

08000808 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <SystemInit+0x20>)
 800080e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000812:	4a05      	ldr	r2, [pc, #20]	; (8000828 <SystemInit+0x20>)
 8000814:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000818:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	e000ed00 	.word	0xe000ed00

0800082c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800082c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000864 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000830:	f7ff ffea 	bl	8000808 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000834:	480c      	ldr	r0, [pc, #48]	; (8000868 <LoopForever+0x6>)
  ldr r1, =_edata
 8000836:	490d      	ldr	r1, [pc, #52]	; (800086c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000838:	4a0d      	ldr	r2, [pc, #52]	; (8000870 <LoopForever+0xe>)
  movs r3, #0
 800083a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800083c:	e002      	b.n	8000844 <LoopCopyDataInit>

0800083e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800083e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000840:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000842:	3304      	adds	r3, #4

08000844 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000844:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000846:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000848:	d3f9      	bcc.n	800083e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800084a:	4a0a      	ldr	r2, [pc, #40]	; (8000874 <LoopForever+0x12>)
  ldr r4, =_ebss
 800084c:	4c0a      	ldr	r4, [pc, #40]	; (8000878 <LoopForever+0x16>)
  movs r3, #0
 800084e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000850:	e001      	b.n	8000856 <LoopFillZerobss>

08000852 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000852:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000854:	3204      	adds	r2, #4

08000856 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000856:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000858:	d3fb      	bcc.n	8000852 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800085a:	f009 f987 	bl	8009b6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800085e:	f7ff fcf1 	bl	8000244 <main>

08000862 <LoopForever>:

LoopForever:
    b LoopForever
 8000862:	e7fe      	b.n	8000862 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000864:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000868:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800086c:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8000870:	08009c64 	.word	0x08009c64
  ldr r2, =_sbss
 8000874:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8000878:	2000147c 	.word	0x2000147c

0800087c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800087c:	e7fe      	b.n	800087c <ADC1_2_IRQHandler>
	...

08000880 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000884:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <HAL_Init+0x28>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a07      	ldr	r2, [pc, #28]	; (80008a8 <HAL_Init+0x28>)
 800088a:	f043 0310 	orr.w	r3, r3, #16
 800088e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000890:	2003      	movs	r0, #3
 8000892:	f000 f94f 	bl	8000b34 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000896:	2000      	movs	r0, #0
 8000898:	f000 f808 	bl	80008ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800089c:	f7ff feae 	bl	80005fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008a0:	2300      	movs	r3, #0
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40022000 	.word	0x40022000

080008ac <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <HAL_InitTick+0x54>)
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <HAL_InitTick+0x58>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	4619      	mov	r1, r3
 80008be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 f967 	bl	8000b9e <HAL_SYSTICK_Config>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008d6:	2301      	movs	r3, #1
 80008d8:	e00e      	b.n	80008f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2b0f      	cmp	r3, #15
 80008de:	d80a      	bhi.n	80008f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008e0:	2200      	movs	r2, #0
 80008e2:	6879      	ldr	r1, [r7, #4]
 80008e4:	f04f 30ff 	mov.w	r0, #4294967295
 80008e8:	f000 f92f 	bl	8000b4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008ec:	4a06      	ldr	r2, [pc, #24]	; (8000908 <HAL_InitTick+0x5c>)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80008f2:	2300      	movs	r3, #0
 80008f4:	e000      	b.n	80008f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008f6:	2301      	movs	r3, #1
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20000000 	.word	0x20000000
 8000904:	20000008 	.word	0x20000008
 8000908:	20000004 	.word	0x20000004

0800090c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <HAL_IncTick+0x20>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	461a      	mov	r2, r3
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <HAL_IncTick+0x24>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4413      	add	r3, r2
 800091c:	4a04      	ldr	r2, [pc, #16]	; (8000930 <HAL_IncTick+0x24>)
 800091e:	6013      	str	r3, [r2, #0]
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	20000008 	.word	0x20000008
 8000930:	200002a4 	.word	0x200002a4

08000934 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  return uwTick;  
 8000938:	4b03      	ldr	r3, [pc, #12]	; (8000948 <HAL_GetTick+0x14>)
 800093a:	681b      	ldr	r3, [r3, #0]
}
 800093c:	4618      	mov	r0, r3
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	200002a4 	.word	0x200002a4

0800094c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000954:	f7ff ffee 	bl	8000934 <HAL_GetTick>
 8000958:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000964:	d005      	beq.n	8000972 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000966:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <HAL_Delay+0x44>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	461a      	mov	r2, r3
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	4413      	add	r3, r2
 8000970:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000972:	bf00      	nop
 8000974:	f7ff ffde 	bl	8000934 <HAL_GetTick>
 8000978:	4602      	mov	r2, r0
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	1ad3      	subs	r3, r2, r3
 800097e:	68fa      	ldr	r2, [r7, #12]
 8000980:	429a      	cmp	r2, r3
 8000982:	d8f7      	bhi.n	8000974 <HAL_Delay+0x28>
  {
  }
}
 8000984:	bf00      	nop
 8000986:	bf00      	nop
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000008 	.word	0x20000008

08000994 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	f003 0307 	and.w	r3, r3, #7
 80009a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009a4:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <__NVIC_SetPriorityGrouping+0x44>)
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009aa:	68ba      	ldr	r2, [r7, #8]
 80009ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009b0:	4013      	ands	r3, r2
 80009b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009c6:	4a04      	ldr	r2, [pc, #16]	; (80009d8 <__NVIC_SetPriorityGrouping+0x44>)
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	60d3      	str	r3, [r2, #12]
}
 80009cc:	bf00      	nop
 80009ce:	3714      	adds	r7, #20
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009e0:	4b04      	ldr	r3, [pc, #16]	; (80009f4 <__NVIC_GetPriorityGrouping+0x18>)
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	0a1b      	lsrs	r3, r3, #8
 80009e6:	f003 0307 	and.w	r3, r3, #7
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	db0b      	blt.n	8000a22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	f003 021f 	and.w	r2, r3, #31
 8000a10:	4907      	ldr	r1, [pc, #28]	; (8000a30 <__NVIC_EnableIRQ+0x38>)
 8000a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a16:	095b      	lsrs	r3, r3, #5
 8000a18:	2001      	movs	r0, #1
 8000a1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a22:	bf00      	nop
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	e000e100 	.word	0xe000e100

08000a34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	6039      	str	r1, [r7, #0]
 8000a3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	db0a      	blt.n	8000a5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	b2da      	uxtb	r2, r3
 8000a4c:	490c      	ldr	r1, [pc, #48]	; (8000a80 <__NVIC_SetPriority+0x4c>)
 8000a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a52:	0112      	lsls	r2, r2, #4
 8000a54:	b2d2      	uxtb	r2, r2
 8000a56:	440b      	add	r3, r1
 8000a58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a5c:	e00a      	b.n	8000a74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	b2da      	uxtb	r2, r3
 8000a62:	4908      	ldr	r1, [pc, #32]	; (8000a84 <__NVIC_SetPriority+0x50>)
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	f003 030f 	and.w	r3, r3, #15
 8000a6a:	3b04      	subs	r3, #4
 8000a6c:	0112      	lsls	r2, r2, #4
 8000a6e:	b2d2      	uxtb	r2, r2
 8000a70:	440b      	add	r3, r1
 8000a72:	761a      	strb	r2, [r3, #24]
}
 8000a74:	bf00      	nop
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	e000e100 	.word	0xe000e100
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b089      	sub	sp, #36	; 0x24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	f003 0307 	and.w	r3, r3, #7
 8000a9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a9c:	69fb      	ldr	r3, [r7, #28]
 8000a9e:	f1c3 0307 	rsb	r3, r3, #7
 8000aa2:	2b04      	cmp	r3, #4
 8000aa4:	bf28      	it	cs
 8000aa6:	2304      	movcs	r3, #4
 8000aa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	3304      	adds	r3, #4
 8000aae:	2b06      	cmp	r3, #6
 8000ab0:	d902      	bls.n	8000ab8 <NVIC_EncodePriority+0x30>
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	3b03      	subs	r3, #3
 8000ab6:	e000      	b.n	8000aba <NVIC_EncodePriority+0x32>
 8000ab8:	2300      	movs	r3, #0
 8000aba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000abc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ac0:	69bb      	ldr	r3, [r7, #24]
 8000ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac6:	43da      	mvns	r2, r3
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	401a      	ands	r2, r3
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ad0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ada:	43d9      	mvns	r1, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae0:	4313      	orrs	r3, r2
         );
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3724      	adds	r7, #36	; 0x24
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
	...

08000af0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	3b01      	subs	r3, #1
 8000afc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b00:	d301      	bcc.n	8000b06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b02:	2301      	movs	r3, #1
 8000b04:	e00f      	b.n	8000b26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b06:	4a0a      	ldr	r2, [pc, #40]	; (8000b30 <SysTick_Config+0x40>)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b0e:	210f      	movs	r1, #15
 8000b10:	f04f 30ff 	mov.w	r0, #4294967295
 8000b14:	f7ff ff8e 	bl	8000a34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b18:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <SysTick_Config+0x40>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b1e:	4b04      	ldr	r3, [pc, #16]	; (8000b30 <SysTick_Config+0x40>)
 8000b20:	2207      	movs	r2, #7
 8000b22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b24:	2300      	movs	r3, #0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	e000e010 	.word	0xe000e010

08000b34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f7ff ff29 	bl	8000994 <__NVIC_SetPriorityGrouping>
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b086      	sub	sp, #24
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	4603      	mov	r3, r0
 8000b52:	60b9      	str	r1, [r7, #8]
 8000b54:	607a      	str	r2, [r7, #4]
 8000b56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b5c:	f7ff ff3e 	bl	80009dc <__NVIC_GetPriorityGrouping>
 8000b60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	68b9      	ldr	r1, [r7, #8]
 8000b66:	6978      	ldr	r0, [r7, #20]
 8000b68:	f7ff ff8e 	bl	8000a88 <NVIC_EncodePriority>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b72:	4611      	mov	r1, r2
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff ff5d 	bl	8000a34 <__NVIC_SetPriority>
}
 8000b7a:	bf00      	nop
 8000b7c:	3718      	adds	r7, #24
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b082      	sub	sp, #8
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	4603      	mov	r3, r0
 8000b8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff ff31 	bl	80009f8 <__NVIC_EnableIRQ>
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b082      	sub	sp, #8
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f7ff ffa2 	bl	8000af0 <SysTick_Config>
 8000bac:	4603      	mov	r3, r0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b087      	sub	sp, #28
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bc6:	e160      	b.n	8000e8a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	2101      	movs	r1, #1
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	f000 8152 	beq.w	8000e84 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f003 0303 	and.w	r3, r3, #3
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d005      	beq.n	8000bf8 <HAL_GPIO_Init+0x40>
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f003 0303 	and.w	r3, r3, #3
 8000bf4:	2b02      	cmp	r3, #2
 8000bf6:	d130      	bne.n	8000c5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	689b      	ldr	r3, [r3, #8]
 8000bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	2203      	movs	r2, #3
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	68da      	ldr	r2, [r3, #12]
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1c:	693a      	ldr	r2, [r7, #16]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c2e:	2201      	movs	r2, #1
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	43db      	mvns	r3, r3
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	091b      	lsrs	r3, r3, #4
 8000c44:	f003 0201 	and.w	r2, r3, #1
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f003 0303 	and.w	r3, r3, #3
 8000c62:	2b03      	cmp	r3, #3
 8000c64:	d017      	beq.n	8000c96 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	68db      	ldr	r3, [r3, #12]
 8000c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	2203      	movs	r2, #3
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	43db      	mvns	r3, r3
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	689a      	ldr	r2, [r3, #8]
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f003 0303 	and.w	r3, r3, #3
 8000c9e:	2b02      	cmp	r3, #2
 8000ca0:	d123      	bne.n	8000cea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	08da      	lsrs	r2, r3, #3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	3208      	adds	r2, #8
 8000caa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	220f      	movs	r2, #15
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	693a      	ldr	r2, [r7, #16]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	691a      	ldr	r2, [r3, #16]
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	f003 0307 	and.w	r3, r3, #7
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	08da      	lsrs	r2, r3, #3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3208      	adds	r2, #8
 8000ce4:	6939      	ldr	r1, [r7, #16]
 8000ce6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	2203      	movs	r2, #3
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	43db      	mvns	r3, r3
 8000cfc:	693a      	ldr	r2, [r7, #16]
 8000cfe:	4013      	ands	r3, r2
 8000d00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f003 0203 	and.w	r2, r3, #3
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	f000 80ac 	beq.w	8000e84 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d2c:	4b5e      	ldr	r3, [pc, #376]	; (8000ea8 <HAL_GPIO_Init+0x2f0>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	4a5d      	ldr	r2, [pc, #372]	; (8000ea8 <HAL_GPIO_Init+0x2f0>)
 8000d32:	f043 0301 	orr.w	r3, r3, #1
 8000d36:	6193      	str	r3, [r2, #24]
 8000d38:	4b5b      	ldr	r3, [pc, #364]	; (8000ea8 <HAL_GPIO_Init+0x2f0>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	f003 0301 	and.w	r3, r3, #1
 8000d40:	60bb      	str	r3, [r7, #8]
 8000d42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d44:	4a59      	ldr	r2, [pc, #356]	; (8000eac <HAL_GPIO_Init+0x2f4>)
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	089b      	lsrs	r3, r3, #2
 8000d4a:	3302      	adds	r3, #2
 8000d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	f003 0303 	and.w	r3, r3, #3
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	220f      	movs	r2, #15
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	43db      	mvns	r3, r3
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	4013      	ands	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d6e:	d025      	beq.n	8000dbc <HAL_GPIO_Init+0x204>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4a4f      	ldr	r2, [pc, #316]	; (8000eb0 <HAL_GPIO_Init+0x2f8>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d01f      	beq.n	8000db8 <HAL_GPIO_Init+0x200>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4a4e      	ldr	r2, [pc, #312]	; (8000eb4 <HAL_GPIO_Init+0x2fc>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d019      	beq.n	8000db4 <HAL_GPIO_Init+0x1fc>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4a4d      	ldr	r2, [pc, #308]	; (8000eb8 <HAL_GPIO_Init+0x300>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d013      	beq.n	8000db0 <HAL_GPIO_Init+0x1f8>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4a4c      	ldr	r2, [pc, #304]	; (8000ebc <HAL_GPIO_Init+0x304>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d00d      	beq.n	8000dac <HAL_GPIO_Init+0x1f4>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4a4b      	ldr	r2, [pc, #300]	; (8000ec0 <HAL_GPIO_Init+0x308>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d007      	beq.n	8000da8 <HAL_GPIO_Init+0x1f0>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4a4a      	ldr	r2, [pc, #296]	; (8000ec4 <HAL_GPIO_Init+0x30c>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d101      	bne.n	8000da4 <HAL_GPIO_Init+0x1ec>
 8000da0:	2306      	movs	r3, #6
 8000da2:	e00c      	b.n	8000dbe <HAL_GPIO_Init+0x206>
 8000da4:	2307      	movs	r3, #7
 8000da6:	e00a      	b.n	8000dbe <HAL_GPIO_Init+0x206>
 8000da8:	2305      	movs	r3, #5
 8000daa:	e008      	b.n	8000dbe <HAL_GPIO_Init+0x206>
 8000dac:	2304      	movs	r3, #4
 8000dae:	e006      	b.n	8000dbe <HAL_GPIO_Init+0x206>
 8000db0:	2303      	movs	r3, #3
 8000db2:	e004      	b.n	8000dbe <HAL_GPIO_Init+0x206>
 8000db4:	2302      	movs	r3, #2
 8000db6:	e002      	b.n	8000dbe <HAL_GPIO_Init+0x206>
 8000db8:	2301      	movs	r3, #1
 8000dba:	e000      	b.n	8000dbe <HAL_GPIO_Init+0x206>
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	697a      	ldr	r2, [r7, #20]
 8000dc0:	f002 0203 	and.w	r2, r2, #3
 8000dc4:	0092      	lsls	r2, r2, #2
 8000dc6:	4093      	lsls	r3, r2
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dce:	4937      	ldr	r1, [pc, #220]	; (8000eac <HAL_GPIO_Init+0x2f4>)
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	089b      	lsrs	r3, r3, #2
 8000dd4:	3302      	adds	r3, #2
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ddc:	4b3a      	ldr	r3, [pc, #232]	; (8000ec8 <HAL_GPIO_Init+0x310>)
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	43db      	mvns	r3, r3
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4013      	ands	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d003      	beq.n	8000e00 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e00:	4a31      	ldr	r2, [pc, #196]	; (8000ec8 <HAL_GPIO_Init+0x310>)
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e06:	4b30      	ldr	r3, [pc, #192]	; (8000ec8 <HAL_GPIO_Init+0x310>)
 8000e08:	68db      	ldr	r3, [r3, #12]
 8000e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	4013      	ands	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d003      	beq.n	8000e2a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e2a:	4a27      	ldr	r2, [pc, #156]	; (8000ec8 <HAL_GPIO_Init+0x310>)
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e30:	4b25      	ldr	r3, [pc, #148]	; (8000ec8 <HAL_GPIO_Init+0x310>)
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d003      	beq.n	8000e54 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e54:	4a1c      	ldr	r2, [pc, #112]	; (8000ec8 <HAL_GPIO_Init+0x310>)
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e5a:	4b1b      	ldr	r3, [pc, #108]	; (8000ec8 <HAL_GPIO_Init+0x310>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	43db      	mvns	r3, r3
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	4013      	ands	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d003      	beq.n	8000e7e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e7e:	4a12      	ldr	r2, [pc, #72]	; (8000ec8 <HAL_GPIO_Init+0x310>)
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	3301      	adds	r3, #1
 8000e88:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	fa22 f303 	lsr.w	r3, r2, r3
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	f47f ae97 	bne.w	8000bc8 <HAL_GPIO_Init+0x10>
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	bf00      	nop
 8000e9e:	371c      	adds	r7, #28
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	40010000 	.word	0x40010000
 8000eb0:	48000400 	.word	0x48000400
 8000eb4:	48000800 	.word	0x48000800
 8000eb8:	48000c00 	.word	0x48000c00
 8000ebc:	48001000 	.word	0x48001000
 8000ec0:	48001400 	.word	0x48001400
 8000ec4:	48001800 	.word	0x48001800
 8000ec8:	40010400 	.word	0x40010400

08000ecc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	807b      	strh	r3, [r7, #2]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000edc:	787b      	ldrb	r3, [r7, #1]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d003      	beq.n	8000eea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ee2:	887a      	ldrh	r2, [r7, #2]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ee8:	e002      	b.n	8000ef0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000eea:	887a      	ldrh	r2, [r7, #2]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	460b      	mov	r3, r1
 8000f06:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	695b      	ldr	r3, [r3, #20]
 8000f0c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f0e:	887a      	ldrh	r2, [r7, #2]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	4013      	ands	r3, r2
 8000f14:	041a      	lsls	r2, r3, #16
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	43d9      	mvns	r1, r3
 8000f1a:	887b      	ldrh	r3, [r7, #2]
 8000f1c:	400b      	ands	r3, r1
 8000f1e:	431a      	orrs	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	619a      	str	r2, [r3, #24]
}
 8000f24:	bf00      	nop
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f32:	b08b      	sub	sp, #44	; 0x2c
 8000f34:	af06      	add	r7, sp, #24
 8000f36:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d101      	bne.n	8000f42 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e0c4      	b.n	80010cc <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d106      	bne.n	8000f5c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2200      	movs	r2, #0
 8000f52:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f008 fb4e 	bl	80095f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2203      	movs	r2, #3
 8000f60:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f004 fad3 	bl	8005514 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f6e:	2300      	movs	r3, #0
 8000f70:	73fb      	strb	r3, [r7, #15]
 8000f72:	e040      	b.n	8000ff6 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	1c5a      	adds	r2, r3, #1
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	4413      	add	r3, r2
 8000f80:	00db      	lsls	r3, r3, #3
 8000f82:	440b      	add	r3, r1
 8000f84:	3301      	adds	r3, #1
 8000f86:	2201      	movs	r2, #1
 8000f88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
 8000f8c:	6879      	ldr	r1, [r7, #4]
 8000f8e:	1c5a      	adds	r2, r3, #1
 8000f90:	4613      	mov	r3, r2
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	4413      	add	r3, r2
 8000f96:	00db      	lsls	r3, r3, #3
 8000f98:	440b      	add	r3, r1
 8000f9a:	7bfa      	ldrb	r2, [r7, #15]
 8000f9c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f9e:	7bfb      	ldrb	r3, [r7, #15]
 8000fa0:	6879      	ldr	r1, [r7, #4]
 8000fa2:	1c5a      	adds	r2, r3, #1
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	4413      	add	r3, r2
 8000faa:	00db      	lsls	r3, r3, #3
 8000fac:	440b      	add	r3, r1
 8000fae:	3303      	adds	r3, #3
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000fb4:	7bfa      	ldrb	r2, [r7, #15]
 8000fb6:	6879      	ldr	r1, [r7, #4]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	4413      	add	r3, r2
 8000fbe:	00db      	lsls	r3, r3, #3
 8000fc0:	440b      	add	r3, r1
 8000fc2:	3338      	adds	r3, #56	; 0x38
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000fc8:	7bfa      	ldrb	r2, [r7, #15]
 8000fca:	6879      	ldr	r1, [r7, #4]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	4413      	add	r3, r2
 8000fd2:	00db      	lsls	r3, r3, #3
 8000fd4:	440b      	add	r3, r1
 8000fd6:	333c      	adds	r3, #60	; 0x3c
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000fdc:	7bfa      	ldrb	r2, [r7, #15]
 8000fde:	6879      	ldr	r1, [r7, #4]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	4413      	add	r3, r2
 8000fe6:	00db      	lsls	r3, r3, #3
 8000fe8:	440b      	add	r3, r1
 8000fea:	3340      	adds	r3, #64	; 0x40
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	73fb      	strb	r3, [r7, #15]
 8000ff6:	7bfa      	ldrb	r2, [r7, #15]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d3b9      	bcc.n	8000f74 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001000:	2300      	movs	r3, #0
 8001002:	73fb      	strb	r3, [r7, #15]
 8001004:	e044      	b.n	8001090 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001006:	7bfa      	ldrb	r2, [r7, #15]
 8001008:	6879      	ldr	r1, [r7, #4]
 800100a:	4613      	mov	r3, r2
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	4413      	add	r3, r2
 8001010:	00db      	lsls	r3, r3, #3
 8001012:	440b      	add	r3, r1
 8001014:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001018:	2200      	movs	r2, #0
 800101a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800101c:	7bfa      	ldrb	r2, [r7, #15]
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	4613      	mov	r3, r2
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	4413      	add	r3, r2
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	440b      	add	r3, r1
 800102a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800102e:	7bfa      	ldrb	r2, [r7, #15]
 8001030:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001032:	7bfa      	ldrb	r2, [r7, #15]
 8001034:	6879      	ldr	r1, [r7, #4]
 8001036:	4613      	mov	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4413      	add	r3, r2
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	440b      	add	r3, r1
 8001040:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001044:	2200      	movs	r2, #0
 8001046:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001048:	7bfa      	ldrb	r2, [r7, #15]
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	4613      	mov	r3, r2
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	4413      	add	r3, r2
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	440b      	add	r3, r1
 8001056:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800105e:	7bfa      	ldrb	r2, [r7, #15]
 8001060:	6879      	ldr	r1, [r7, #4]
 8001062:	4613      	mov	r3, r2
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	4413      	add	r3, r2
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	440b      	add	r3, r1
 800106c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001074:	7bfa      	ldrb	r2, [r7, #15]
 8001076:	6879      	ldr	r1, [r7, #4]
 8001078:	4613      	mov	r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	4413      	add	r3, r2
 800107e:	00db      	lsls	r3, r3, #3
 8001080:	440b      	add	r3, r1
 8001082:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	3301      	adds	r3, #1
 800108e:	73fb      	strb	r3, [r7, #15]
 8001090:	7bfa      	ldrb	r2, [r7, #15]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	429a      	cmp	r2, r3
 8001098:	d3b5      	bcc.n	8001006 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	603b      	str	r3, [r7, #0]
 80010a0:	687e      	ldr	r6, [r7, #4]
 80010a2:	466d      	mov	r5, sp
 80010a4:	f106 0410 	add.w	r4, r6, #16
 80010a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010ac:	6823      	ldr	r3, [r4, #0]
 80010ae:	602b      	str	r3, [r5, #0]
 80010b0:	1d33      	adds	r3, r6, #4
 80010b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010b4:	6838      	ldr	r0, [r7, #0]
 80010b6:	f004 fa48 	bl	800554a <USB_DevInit>

  hpcd->USB_Address = 0U;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2201      	movs	r2, #1
 80010c6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80010ca:	2300      	movs	r3, #0
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080010d4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d101      	bne.n	80010ea <HAL_PCD_Start+0x16>
 80010e6:	2302      	movs	r3, #2
 80010e8:	e016      	b.n	8001118 <HAL_PCD_Start+0x44>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2201      	movs	r2, #1
 80010ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f004 f9f5 	bl	80054e6 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80010fc:	2101      	movs	r1, #1
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f008 fcfc 	bl	8009afc <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4618      	mov	r0, r3
 800110a:	f006 fcb4 	bl	8007a76 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2200      	movs	r2, #0
 8001112:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001116:	2300      	movs	r3, #0
}
 8001118:	4618      	mov	r0, r3
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4618      	mov	r0, r3
 800112e:	f006 fcad 	bl	8007a8c <USB_ReadInterrupts>
 8001132:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d003      	beq.n	8001146 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f000 fab2 	bl	80016a8 <PCD_EP_ISR_Handler>

    return;
 8001144:	e0bd      	b.n	80012c2 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800114c:	2b00      	cmp	r3, #0
 800114e:	d013      	beq.n	8001178 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001158:	b29a      	uxth	r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001162:	b292      	uxth	r2, r2
 8001164:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f008 fac8 	bl	80096fe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800116e:	2100      	movs	r1, #0
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f000 f8a9 	bl	80012c8 <HAL_PCD_SetAddress>

    return;
 8001176:	e0a4      	b.n	80012c2 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d00c      	beq.n	800119c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800118a:	b29a      	uxth	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001194:	b292      	uxth	r2, r2
 8001196:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800119a:	e092      	b.n	80012c2 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d00c      	beq.n	80011c0 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80011b8:	b292      	uxth	r2, r2
 80011ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80011be:	e080      	b.n	80012c2 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d027      	beq.n	800121a <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f022 0204 	bic.w	r2, r2, #4
 80011dc:	b292      	uxth	r2, r2
 80011de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f022 0208 	bic.w	r2, r2, #8
 80011f4:	b292      	uxth	r2, r2
 80011f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f008 fab8 	bl	8009770 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001208:	b29a      	uxth	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001212:	b292      	uxth	r2, r2
 8001214:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001218:	e053      	b.n	80012c2 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001220:	2b00      	cmp	r3, #0
 8001222:	d027      	beq.n	8001274 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800122c:	b29a      	uxth	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f042 0208 	orr.w	r2, r2, #8
 8001236:	b292      	uxth	r2, r2
 8001238:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001244:	b29a      	uxth	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800124e:	b292      	uxth	r2, r2
 8001250:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800125c:	b29a      	uxth	r2, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f042 0204 	orr.w	r2, r2, #4
 8001266:	b292      	uxth	r2, r2
 8001268:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f008 fa65 	bl	800973c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001272:	e026      	b.n	80012c2 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800127a:	2b00      	cmp	r3, #0
 800127c:	d00f      	beq.n	800129e <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001286:	b29a      	uxth	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001290:	b292      	uxth	r2, r2
 8001292:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f008 fa23 	bl	80096e2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800129c:	e011      	b.n	80012c2 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d00c      	beq.n	80012c2 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012ba:	b292      	uxth	r2, r2
 80012bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80012c0:	bf00      	nop
  }
}
 80012c2:	3710      	adds	r7, #16
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	460b      	mov	r3, r1
 80012d2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d101      	bne.n	80012e2 <HAL_PCD_SetAddress+0x1a>
 80012de:	2302      	movs	r3, #2
 80012e0:	e013      	b.n	800130a <HAL_PCD_SetAddress+0x42>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2201      	movs	r2, #1
 80012e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	78fa      	ldrb	r2, [r7, #3]
 80012ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	78fa      	ldrb	r2, [r7, #3]
 80012f8:	4611      	mov	r1, r2
 80012fa:	4618      	mov	r0, r3
 80012fc:	f006 fba7 	bl	8007a4e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2200      	movs	r2, #0
 8001304:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b084      	sub	sp, #16
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
 800131a:	4608      	mov	r0, r1
 800131c:	4611      	mov	r1, r2
 800131e:	461a      	mov	r2, r3
 8001320:	4603      	mov	r3, r0
 8001322:	70fb      	strb	r3, [r7, #3]
 8001324:	460b      	mov	r3, r1
 8001326:	803b      	strh	r3, [r7, #0]
 8001328:	4613      	mov	r3, r2
 800132a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800132c:	2300      	movs	r3, #0
 800132e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001330:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001334:	2b00      	cmp	r3, #0
 8001336:	da0e      	bge.n	8001356 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001338:	78fb      	ldrb	r3, [r7, #3]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	1c5a      	adds	r2, r3, #1
 8001340:	4613      	mov	r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	4413      	add	r3, r2
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	4413      	add	r3, r2
 800134c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2201      	movs	r2, #1
 8001352:	705a      	strb	r2, [r3, #1]
 8001354:	e00e      	b.n	8001374 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001356:	78fb      	ldrb	r3, [r7, #3]
 8001358:	f003 0207 	and.w	r2, r3, #7
 800135c:	4613      	mov	r3, r2
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	4413      	add	r3, r2
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	4413      	add	r3, r2
 800136c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	2200      	movs	r2, #0
 8001372:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001374:	78fb      	ldrb	r3, [r7, #3]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	b2da      	uxtb	r2, r3
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001380:	883a      	ldrh	r2, [r7, #0]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	78ba      	ldrb	r2, [r7, #2]
 800138a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800138c:	78bb      	ldrb	r3, [r7, #2]
 800138e:	2b02      	cmp	r3, #2
 8001390:	d102      	bne.n	8001398 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	2200      	movs	r2, #0
 8001396:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d101      	bne.n	80013a6 <HAL_PCD_EP_Open+0x94>
 80013a2:	2302      	movs	r3, #2
 80013a4:	e00e      	b.n	80013c4 <HAL_PCD_EP_Open+0xb2>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2201      	movs	r2, #1
 80013aa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	68f9      	ldr	r1, [r7, #12]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f004 f8e9 	bl	800558c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80013c2:	7afb      	ldrb	r3, [r7, #11]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3710      	adds	r7, #16
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	460b      	mov	r3, r1
 80013d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80013d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	da0e      	bge.n	80013fe <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013e0:	78fb      	ldrb	r3, [r7, #3]
 80013e2:	f003 0307 	and.w	r3, r3, #7
 80013e6:	1c5a      	adds	r2, r3, #1
 80013e8:	4613      	mov	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	4413      	add	r3, r2
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	4413      	add	r3, r2
 80013f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2201      	movs	r2, #1
 80013fa:	705a      	strb	r2, [r3, #1]
 80013fc:	e00e      	b.n	800141c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013fe:	78fb      	ldrb	r3, [r7, #3]
 8001400:	f003 0207 	and.w	r2, r3, #7
 8001404:	4613      	mov	r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	4413      	add	r3, r2
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	4413      	add	r3, r2
 8001414:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	2200      	movs	r2, #0
 800141a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800141c:	78fb      	ldrb	r3, [r7, #3]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	b2da      	uxtb	r2, r3
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800142e:	2b01      	cmp	r3, #1
 8001430:	d101      	bne.n	8001436 <HAL_PCD_EP_Close+0x6a>
 8001432:	2302      	movs	r3, #2
 8001434:	e00e      	b.n	8001454 <HAL_PCD_EP_Close+0x88>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2201      	movs	r2, #1
 800143a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	68f9      	ldr	r1, [r7, #12]
 8001444:	4618      	mov	r0, r3
 8001446:	f004 fc65 	bl	8005d14 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001452:	2300      	movs	r3, #0
}
 8001454:	4618      	mov	r0, r3
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	607a      	str	r2, [r7, #4]
 8001466:	603b      	str	r3, [r7, #0]
 8001468:	460b      	mov	r3, r1
 800146a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800146c:	7afb      	ldrb	r3, [r7, #11]
 800146e:	f003 0207 	and.w	r2, r3, #7
 8001472:	4613      	mov	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	4413      	add	r3, r2
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	4413      	add	r3, r2
 8001482:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	683a      	ldr	r2, [r7, #0]
 800148e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	2200      	movs	r2, #0
 8001494:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	2200      	movs	r2, #0
 800149a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800149c:	7afb      	ldrb	r3, [r7, #11]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	6979      	ldr	r1, [r7, #20]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f004 fe1d 	bl	80060ee <USB_EPStartXfer>

  return HAL_OK;
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3718      	adds	r7, #24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80014be:	b480      	push	{r7}
 80014c0:	b083      	sub	sp, #12
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
 80014c6:	460b      	mov	r3, r1
 80014c8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80014ca:	78fb      	ldrb	r3, [r7, #3]
 80014cc:	f003 0207 	and.w	r2, r3, #7
 80014d0:	6879      	ldr	r1, [r7, #4]
 80014d2:	4613      	mov	r3, r2
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	4413      	add	r3, r2
 80014d8:	00db      	lsls	r3, r3, #3
 80014da:	440b      	add	r3, r1
 80014dc:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80014e0:	681b      	ldr	r3, [r3, #0]
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b086      	sub	sp, #24
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	60f8      	str	r0, [r7, #12]
 80014f6:	607a      	str	r2, [r7, #4]
 80014f8:	603b      	str	r3, [r7, #0]
 80014fa:	460b      	mov	r3, r1
 80014fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014fe:	7afb      	ldrb	r3, [r7, #11]
 8001500:	f003 0307 	and.w	r3, r3, #7
 8001504:	1c5a      	adds	r2, r3, #1
 8001506:	4613      	mov	r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	4413      	add	r3, r2
 800150c:	00db      	lsls	r3, r3, #3
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	4413      	add	r3, r2
 8001512:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	683a      	ldr	r2, [r7, #0]
 800151e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	2201      	movs	r2, #1
 8001524:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	683a      	ldr	r2, [r7, #0]
 800152c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	2200      	movs	r2, #0
 8001532:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	2201      	movs	r2, #1
 8001538:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800153a:	7afb      	ldrb	r3, [r7, #11]
 800153c:	f003 0307 	and.w	r3, r3, #7
 8001540:	b2da      	uxtb	r2, r3
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	6979      	ldr	r1, [r7, #20]
 800154c:	4618      	mov	r0, r3
 800154e:	f004 fdce 	bl	80060ee <USB_EPStartXfer>

  return HAL_OK;
 8001552:	2300      	movs	r3, #0
}
 8001554:	4618      	mov	r0, r3
 8001556:	3718      	adds	r7, #24
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	460b      	mov	r3, r1
 8001566:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001568:	78fb      	ldrb	r3, [r7, #3]
 800156a:	f003 0207 	and.w	r2, r3, #7
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	429a      	cmp	r2, r3
 8001574:	d901      	bls.n	800157a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e03e      	b.n	80015f8 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800157a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800157e:	2b00      	cmp	r3, #0
 8001580:	da0e      	bge.n	80015a0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001582:	78fb      	ldrb	r3, [r7, #3]
 8001584:	f003 0307 	and.w	r3, r3, #7
 8001588:	1c5a      	adds	r2, r3, #1
 800158a:	4613      	mov	r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	4413      	add	r3, r2
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	4413      	add	r3, r2
 8001596:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2201      	movs	r2, #1
 800159c:	705a      	strb	r2, [r3, #1]
 800159e:	e00c      	b.n	80015ba <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80015a0:	78fa      	ldrb	r2, [r7, #3]
 80015a2:	4613      	mov	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	4413      	add	r3, r2
 80015b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2200      	movs	r2, #0
 80015b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2201      	movs	r2, #1
 80015be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015c0:	78fb      	ldrb	r3, [r7, #3]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	b2da      	uxtb	r2, r3
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d101      	bne.n	80015da <HAL_PCD_EP_SetStall+0x7e>
 80015d6:	2302      	movs	r3, #2
 80015d8:	e00e      	b.n	80015f8 <HAL_PCD_EP_SetStall+0x9c>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2201      	movs	r2, #1
 80015de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	68f9      	ldr	r1, [r7, #12]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f006 f931 	bl	8007850 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80015f6:	2300      	movs	r3, #0
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	460b      	mov	r3, r1
 800160a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800160c:	78fb      	ldrb	r3, [r7, #3]
 800160e:	f003 020f 	and.w	r2, r3, #15
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	429a      	cmp	r2, r3
 8001618:	d901      	bls.n	800161e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e040      	b.n	80016a0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800161e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001622:	2b00      	cmp	r3, #0
 8001624:	da0e      	bge.n	8001644 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001626:	78fb      	ldrb	r3, [r7, #3]
 8001628:	f003 0307 	and.w	r3, r3, #7
 800162c:	1c5a      	adds	r2, r3, #1
 800162e:	4613      	mov	r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4413      	add	r3, r2
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	4413      	add	r3, r2
 800163a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2201      	movs	r2, #1
 8001640:	705a      	strb	r2, [r3, #1]
 8001642:	e00e      	b.n	8001662 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001644:	78fb      	ldrb	r3, [r7, #3]
 8001646:	f003 0207 	and.w	r2, r3, #7
 800164a:	4613      	mov	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	4413      	add	r3, r2
 8001650:	00db      	lsls	r3, r3, #3
 8001652:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	4413      	add	r3, r2
 800165a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	2200      	movs	r2, #0
 8001660:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2200      	movs	r2, #0
 8001666:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001668:	78fb      	ldrb	r3, [r7, #3]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	b2da      	uxtb	r2, r3
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800167a:	2b01      	cmp	r3, #1
 800167c:	d101      	bne.n	8001682 <HAL_PCD_EP_ClrStall+0x82>
 800167e:	2302      	movs	r3, #2
 8001680:	e00e      	b.n	80016a0 <HAL_PCD_EP_ClrStall+0xa0>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2201      	movs	r2, #1
 8001686:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	68f9      	ldr	r1, [r7, #12]
 8001690:	4618      	mov	r0, r3
 8001692:	f006 f92e 	bl	80078f2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b096      	sub	sp, #88	; 0x58
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80016b0:	e3b1      	b.n	8001e16 <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016ba:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80016be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	f003 030f 	and.w	r3, r3, #15
 80016c8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80016cc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f040 8173 	bne.w	80019bc <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80016d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80016da:	f003 0310 	and.w	r3, r3, #16
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d150      	bne.n	8001784 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	881b      	ldrh	r3, [r3, #0]
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80016ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016f2:	81fb      	strh	r3, [r7, #14]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	89fb      	ldrh	r3, [r7, #14]
 80016fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80016fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001702:	b29b      	uxth	r3, r3
 8001704:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	3328      	adds	r3, #40	; 0x28
 800170a:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001714:	b29b      	uxth	r3, r3
 8001716:	461a      	mov	r2, r3
 8001718:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	00db      	lsls	r3, r3, #3
 800171e:	4413      	add	r3, r2
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	6812      	ldr	r2, [r2, #0]
 8001724:	4413      	add	r3, r2
 8001726:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800172a:	881b      	ldrh	r3, [r3, #0]
 800172c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001730:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001732:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001734:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001736:	695a      	ldr	r2, [r3, #20]
 8001738:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800173a:	69db      	ldr	r3, [r3, #28]
 800173c:	441a      	add	r2, r3
 800173e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001740:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001742:	2100      	movs	r1, #0
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f007 ffb2 	bl	80096ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001750:	b2db      	uxtb	r3, r3
 8001752:	2b00      	cmp	r3, #0
 8001754:	f000 835f 	beq.w	8001e16 <PCD_EP_ISR_Handler+0x76e>
 8001758:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	2b00      	cmp	r3, #0
 800175e:	f040 835a 	bne.w	8001e16 <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001768:	b2db      	uxtb	r3, r3
 800176a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800176e:	b2da      	uxtb	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	b292      	uxth	r2, r2
 8001776:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001782:	e348      	b.n	8001e16 <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800178a:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	881b      	ldrh	r3, [r3, #0]
 8001792:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001796:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800179a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d032      	beq.n	8001808 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	461a      	mov	r2, r3
 80017ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	4413      	add	r3, r2
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	6812      	ldr	r2, [r2, #0]
 80017ba:	4413      	add	r3, r2
 80017bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80017c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017c8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6818      	ldr	r0, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80017d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017d6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80017d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017da:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80017dc:	b29b      	uxth	r3, r3
 80017de:	f006 f9a7 	bl	8007b30 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	881b      	ldrh	r3, [r3, #0]
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	f640 738f 	movw	r3, #3983	; 0xf8f
 80017ee:	4013      	ands	r3, r2
 80017f0:	823b      	strh	r3, [r7, #16]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	8a3a      	ldrh	r2, [r7, #16]
 80017f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017fc:	b292      	uxth	r2, r2
 80017fe:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f007 ff27 	bl	8009654 <HAL_PCD_SetupStageCallback>
 8001806:	e306      	b.n	8001e16 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001808:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800180c:	2b00      	cmp	r3, #0
 800180e:	f280 8302 	bge.w	8001e16 <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	881b      	ldrh	r3, [r3, #0]
 8001818:	b29a      	uxth	r2, r3
 800181a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800181e:	4013      	ands	r3, r2
 8001820:	83fb      	strh	r3, [r7, #30]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	8bfa      	ldrh	r2, [r7, #30]
 8001828:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800182c:	b292      	uxth	r2, r2
 800182e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001838:	b29b      	uxth	r3, r3
 800183a:	461a      	mov	r2, r3
 800183c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	4413      	add	r3, r2
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	6812      	ldr	r2, [r2, #0]
 8001848:	4413      	add	r3, r2
 800184a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800184e:	881b      	ldrh	r3, [r3, #0]
 8001850:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001854:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001856:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800185a:	69db      	ldr	r3, [r3, #28]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d019      	beq.n	8001894 <PCD_EP_ISR_Handler+0x1ec>
 8001860:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001862:	695b      	ldr	r3, [r3, #20]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d015      	beq.n	8001894 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6818      	ldr	r0, [r3, #0]
 800186c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800186e:	6959      	ldr	r1, [r3, #20]
 8001870:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001872:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001874:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001876:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001878:	b29b      	uxth	r3, r3
 800187a:	f006 f959 	bl	8007b30 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800187e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001880:	695a      	ldr	r2, [r3, #20]
 8001882:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001884:	69db      	ldr	r3, [r3, #28]
 8001886:	441a      	add	r2, r3
 8001888:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800188a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800188c:	2100      	movs	r1, #0
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f007 fef2 	bl	8009678 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	881b      	ldrh	r3, [r3, #0]
 800189a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800189e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80018a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	f040 82b5 	bne.w	8001e16 <PCD_EP_ISR_Handler+0x76e>
 80018ac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80018b0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80018b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80018b8:	f000 82ad 	beq.w	8001e16 <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	61bb      	str	r3, [r7, #24]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	461a      	mov	r2, r3
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	4413      	add	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80018da:	617b      	str	r3, [r7, #20]
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	881b      	ldrh	r3, [r3, #0]
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	801a      	strh	r2, [r3, #0]
 80018ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	2b3e      	cmp	r3, #62	; 0x3e
 80018f2:	d91d      	bls.n	8001930 <PCD_EP_ISR_Handler+0x288>
 80018f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	095b      	lsrs	r3, r3, #5
 80018fa:	647b      	str	r3, [r7, #68]	; 0x44
 80018fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018fe:	691b      	ldr	r3, [r3, #16]
 8001900:	f003 031f 	and.w	r3, r3, #31
 8001904:	2b00      	cmp	r3, #0
 8001906:	d102      	bne.n	800190e <PCD_EP_ISR_Handler+0x266>
 8001908:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800190a:	3b01      	subs	r3, #1
 800190c:	647b      	str	r3, [r7, #68]	; 0x44
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	881b      	ldrh	r3, [r3, #0]
 8001912:	b29a      	uxth	r2, r3
 8001914:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001916:	b29b      	uxth	r3, r3
 8001918:	029b      	lsls	r3, r3, #10
 800191a:	b29b      	uxth	r3, r3
 800191c:	4313      	orrs	r3, r2
 800191e:	b29b      	uxth	r3, r3
 8001920:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001924:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001928:	b29a      	uxth	r2, r3
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	801a      	strh	r2, [r3, #0]
 800192e:	e026      	b.n	800197e <PCD_EP_ISR_Handler+0x2d6>
 8001930:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d10a      	bne.n	800194e <PCD_EP_ISR_Handler+0x2a6>
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	b29b      	uxth	r3, r3
 800193e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001942:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001946:	b29a      	uxth	r2, r3
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	801a      	strh	r2, [r3, #0]
 800194c:	e017      	b.n	800197e <PCD_EP_ISR_Handler+0x2d6>
 800194e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001950:	691b      	ldr	r3, [r3, #16]
 8001952:	085b      	lsrs	r3, r3, #1
 8001954:	647b      	str	r3, [r7, #68]	; 0x44
 8001956:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	2b00      	cmp	r3, #0
 8001960:	d002      	beq.n	8001968 <PCD_EP_ISR_Handler+0x2c0>
 8001962:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001964:	3301      	adds	r3, #1
 8001966:	647b      	str	r3, [r7, #68]	; 0x44
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	881b      	ldrh	r3, [r3, #0]
 800196c:	b29a      	uxth	r2, r3
 800196e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001970:	b29b      	uxth	r3, r3
 8001972:	029b      	lsls	r3, r3, #10
 8001974:	b29b      	uxth	r3, r3
 8001976:	4313      	orrs	r3, r2
 8001978:	b29a      	uxth	r2, r3
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	881b      	ldrh	r3, [r3, #0]
 8001984:	b29b      	uxth	r3, r3
 8001986:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800198a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800198e:	827b      	strh	r3, [r7, #18]
 8001990:	8a7b      	ldrh	r3, [r7, #18]
 8001992:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001996:	827b      	strh	r3, [r7, #18]
 8001998:	8a7b      	ldrh	r3, [r7, #18]
 800199a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800199e:	827b      	strh	r3, [r7, #18]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	8a7b      	ldrh	r3, [r7, #18]
 80019a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80019aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80019ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	8013      	strh	r3, [r2, #0]
 80019ba:	e22c      	b.n	8001e16 <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	461a      	mov	r2, r3
 80019c2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	881b      	ldrh	r3, [r3, #0]
 80019cc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80019d0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	f280 80f6 	bge.w	8001bc6 <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	461a      	mov	r2, r3
 80019e0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	4413      	add	r3, r2
 80019e8:	881b      	ldrh	r3, [r3, #0]
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	f640 738f 	movw	r3, #3983	; 0xf8f
 80019f0:	4013      	ands	r3, r2
 80019f2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	461a      	mov	r2, r3
 80019fc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4413      	add	r3, r2
 8001a04:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001a08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a0c:	b292      	uxth	r2, r2
 8001a0e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001a10:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001a14:	4613      	mov	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	4413      	add	r3, r2
 8001a24:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001a26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a28:	7b1b      	ldrb	r3, [r3, #12]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d123      	bne.n	8001a76 <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	461a      	mov	r2, r3
 8001a3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	4413      	add	r3, r2
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	6812      	ldr	r2, [r2, #0]
 8001a46:	4413      	add	r3, r2
 8001a48:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001a4c:	881b      	ldrh	r3, [r3, #0]
 8001a4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a52:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001a56:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f000 808e 	beq.w	8001b7c <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6818      	ldr	r0, [r3, #0]
 8001a64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a66:	6959      	ldr	r1, [r3, #20]
 8001a68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a6a:	88da      	ldrh	r2, [r3, #6]
 8001a6c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001a70:	f006 f85e 	bl	8007b30 <USB_ReadPMA>
 8001a74:	e082      	b.n	8001b7c <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001a76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a78:	78db      	ldrb	r3, [r3, #3]
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d10a      	bne.n	8001a94 <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001a7e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001a82:	461a      	mov	r2, r3
 8001a84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f000 f9d3 	bl	8001e32 <HAL_PCD_EP_DB_Receive>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001a92:	e073      	b.n	8001b7c <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	4413      	add	r3, r2
 8001aa2:	881b      	ldrh	r3, [r3, #0]
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001aae:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	441a      	add	r2, r3
 8001ac0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001ac4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ac8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001acc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ad0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	461a      	mov	r2, r3
 8001ade:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4413      	add	r3, r2
 8001ae6:	881b      	ldrh	r3, [r3, #0]
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d022      	beq.n	8001b38 <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	461a      	mov	r2, r3
 8001afe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	4413      	add	r3, r2
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	6812      	ldr	r2, [r2, #0]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001b10:	881b      	ldrh	r3, [r3, #0]
 8001b12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b16:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001b1a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d02c      	beq.n	8001b7c <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6818      	ldr	r0, [r3, #0]
 8001b26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b28:	6959      	ldr	r1, [r3, #20]
 8001b2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b2c:	891a      	ldrh	r2, [r3, #8]
 8001b2e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b32:	f005 fffd 	bl	8007b30 <USB_ReadPMA>
 8001b36:	e021      	b.n	8001b7c <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	461a      	mov	r2, r3
 8001b44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	4413      	add	r3, r2
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	6812      	ldr	r2, [r2, #0]
 8001b50:	4413      	add	r3, r2
 8001b52:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001b56:	881b      	ldrh	r3, [r3, #0]
 8001b58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b5c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001b60:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d009      	beq.n	8001b7c <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6818      	ldr	r0, [r3, #0]
 8001b6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b6e:	6959      	ldr	r1, [r3, #20]
 8001b70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b72:	895a      	ldrh	r2, [r3, #10]
 8001b74:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b78:	f005 ffda 	bl	8007b30 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001b7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b7e:	69da      	ldr	r2, [r3, #28]
 8001b80:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b84:	441a      	add	r2, r3
 8001b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b88:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001b8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b8c:	695a      	ldr	r2, [r3, #20]
 8001b8e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b92:	441a      	add	r2, r3
 8001b94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b96:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001b98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d005      	beq.n	8001bac <PCD_EP_ISR_Handler+0x504>
 8001ba0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001ba4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d206      	bcs.n	8001bba <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001bac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f007 fd60 	bl	8009678 <HAL_PCD_DataOutStageCallback>
 8001bb8:	e005      	b.n	8001bc6 <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f004 fa94 	bl	80060ee <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001bc6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f000 8121 	beq.w	8001e16 <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 8001bd4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001bd8:	1c5a      	adds	r2, r3, #1
 8001bda:	4613      	mov	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4413      	add	r3, r2
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	4413      	add	r3, r2
 8001be6:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	461a      	mov	r2, r3
 8001bee:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	881b      	ldrh	r3, [r3, #0]
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c02:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	441a      	add	r2, r3
 8001c14:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001c18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c26:	78db      	ldrb	r3, [r3, #3]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	f040 80a2 	bne.w	8001d72 <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 8001c2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c30:	2200      	movs	r2, #0
 8001c32:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001c34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c36:	7b1b      	ldrb	r3, [r3, #12]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f000 8093 	beq.w	8001d64 <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001c3e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d046      	beq.n	8001cd8 <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001c4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c4c:	785b      	ldrb	r3, [r3, #1]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d126      	bne.n	8001ca0 <PCD_EP_ISR_Handler+0x5f8>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	627b      	str	r3, [r7, #36]	; 0x24
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	461a      	mov	r2, r3
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	4413      	add	r3, r2
 8001c68:	627b      	str	r3, [r7, #36]	; 0x24
 8001c6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	00da      	lsls	r2, r3, #3
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	4413      	add	r3, r2
 8001c74:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001c78:	623b      	str	r3, [r7, #32]
 8001c7a:	6a3b      	ldr	r3, [r7, #32]
 8001c7c:	881b      	ldrh	r3, [r3, #0]
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	6a3b      	ldr	r3, [r7, #32]
 8001c88:	801a      	strh	r2, [r3, #0]
 8001c8a:	6a3b      	ldr	r3, [r7, #32]
 8001c8c:	881b      	ldrh	r3, [r3, #0]
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	6a3b      	ldr	r3, [r7, #32]
 8001c9c:	801a      	strh	r2, [r3, #0]
 8001c9e:	e061      	b.n	8001d64 <PCD_EP_ISR_Handler+0x6bc>
 8001ca0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ca2:	785b      	ldrb	r3, [r3, #1]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d15d      	bne.n	8001d64 <PCD_EP_ISR_Handler+0x6bc>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	461a      	mov	r2, r3
 8001cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cbc:	4413      	add	r3, r2
 8001cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	00da      	lsls	r2, r3, #3
 8001cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc8:	4413      	add	r3, r2
 8001cca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001cce:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	801a      	strh	r2, [r3, #0]
 8001cd6:	e045      	b.n	8001d64 <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ce0:	785b      	ldrb	r3, [r3, #1]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d126      	bne.n	8001d34 <PCD_EP_ISR_Handler+0x68c>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	637b      	str	r3, [r7, #52]	; 0x34
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cfa:	4413      	add	r3, r2
 8001cfc:	637b      	str	r3, [r7, #52]	; 0x34
 8001cfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	00da      	lsls	r2, r3, #3
 8001d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d06:	4413      	add	r3, r2
 8001d08:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001d0c:	633b      	str	r3, [r7, #48]	; 0x30
 8001d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d10:	881b      	ldrh	r3, [r3, #0]
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d18:	b29a      	uxth	r2, r3
 8001d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d1c:	801a      	strh	r2, [r3, #0]
 8001d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d20:	881b      	ldrh	r3, [r3, #0]
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d30:	801a      	strh	r2, [r3, #0]
 8001d32:	e017      	b.n	8001d64 <PCD_EP_ISR_Handler+0x6bc>
 8001d34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d36:	785b      	ldrb	r3, [r3, #1]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d113      	bne.n	8001d64 <PCD_EP_ISR_Handler+0x6bc>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	461a      	mov	r2, r3
 8001d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d4a:	4413      	add	r3, r2
 8001d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	00da      	lsls	r2, r3, #3
 8001d54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d56:	4413      	add	r3, r2
 8001d58:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001d5c:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d60:	2200      	movs	r2, #0
 8001d62:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001d64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	4619      	mov	r1, r3
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f007 fc9f 	bl	80096ae <HAL_PCD_DataInStageCallback>
 8001d70:	e051      	b.n	8001e16 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001d72:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d144      	bne.n	8001e08 <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	461a      	mov	r2, r3
 8001d8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	4413      	add	r3, r2
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	6812      	ldr	r2, [r2, #0]
 8001d96:	4413      	add	r3, r2
 8001d98:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001d9c:	881b      	ldrh	r3, [r3, #0]
 8001d9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001da2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8001da6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001da8:	699a      	ldr	r2, [r3, #24]
 8001daa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d907      	bls.n	8001dc2 <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 8001db2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001db4:	699a      	ldr	r2, [r3, #24]
 8001db6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001dba:	1ad2      	subs	r2, r2, r3
 8001dbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dbe:	619a      	str	r2, [r3, #24]
 8001dc0:	e002      	b.n	8001dc8 <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 8001dc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001dc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d106      	bne.n	8001dde <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001dd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f007 fc69 	bl	80096ae <HAL_PCD_DataInStageCallback>
 8001ddc:	e01b      	b.n	8001e16 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001dde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001de0:	695a      	ldr	r2, [r3, #20]
 8001de2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001de6:	441a      	add	r2, r3
 8001de8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dea:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001dec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dee:	69da      	ldr	r2, [r3, #28]
 8001df0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001df4:	441a      	add	r2, r3
 8001df6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001df8:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001e00:	4618      	mov	r0, r3
 8001e02:	f004 f974 	bl	80060ee <USB_EPStartXfer>
 8001e06:	e006      	b.n	8001e16 <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001e08:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 f917 	bl	8002044 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	b21b      	sxth	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f6ff ac45 	blt.w	80016b2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3758      	adds	r7, #88	; 0x58
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b088      	sub	sp, #32
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	60f8      	str	r0, [r7, #12]
 8001e3a:	60b9      	str	r1, [r7, #8]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001e40:	88fb      	ldrh	r3, [r7, #6]
 8001e42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d07c      	beq.n	8001f44 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	461a      	mov	r2, r3
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	4413      	add	r3, r2
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	6812      	ldr	r2, [r2, #0]
 8001e62:	4413      	add	r3, r2
 8001e64:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001e68:	881b      	ldrh	r3, [r3, #0]
 8001e6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e6e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	699a      	ldr	r2, [r3, #24]
 8001e74:	8b7b      	ldrh	r3, [r7, #26]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d306      	bcc.n	8001e88 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	699a      	ldr	r2, [r3, #24]
 8001e7e:	8b7b      	ldrh	r3, [r7, #26]
 8001e80:	1ad2      	subs	r2, r2, r3
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	619a      	str	r2, [r3, #24]
 8001e86:	e002      	b.n	8001e8e <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d123      	bne.n	8001ede <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4413      	add	r3, r2
 8001ea4:	881b      	ldrh	r3, [r3, #0]
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001eac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eb0:	833b      	strh	r3, [r7, #24]
 8001eb2:	8b3b      	ldrh	r3, [r7, #24]
 8001eb4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001eb8:	833b      	strh	r3, [r7, #24]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	441a      	add	r2, r3
 8001ec8:	8b3b      	ldrh	r3, [r7, #24]
 8001eca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ece:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ed2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001ede:	88fb      	ldrh	r3, [r7, #6]
 8001ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d01f      	beq.n	8001f28 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	461a      	mov	r2, r3
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	881b      	ldrh	r3, [r3, #0]
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f02:	82fb      	strh	r3, [r7, #22]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	461a      	mov	r2, r3
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	441a      	add	r2, r3
 8001f12:	8afb      	ldrh	r3, [r7, #22]
 8001f14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001f28:	8b7b      	ldrh	r3, [r7, #26]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f000 8085 	beq.w	800203a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6818      	ldr	r0, [r3, #0]
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	6959      	ldr	r1, [r3, #20]
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	891a      	ldrh	r2, [r3, #8]
 8001f3c:	8b7b      	ldrh	r3, [r7, #26]
 8001f3e:	f005 fdf7 	bl	8007b30 <USB_ReadPMA>
 8001f42:	e07a      	b.n	800203a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	461a      	mov	r2, r3
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	4413      	add	r3, r2
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	6812      	ldr	r2, [r2, #0]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001f62:	881b      	ldrh	r3, [r3, #0]
 8001f64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f68:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	699a      	ldr	r2, [r3, #24]
 8001f6e:	8b7b      	ldrh	r3, [r7, #26]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d306      	bcc.n	8001f82 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	699a      	ldr	r2, [r3, #24]
 8001f78:	8b7b      	ldrh	r3, [r7, #26]
 8001f7a:	1ad2      	subs	r2, r2, r3
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	619a      	str	r2, [r3, #24]
 8001f80:	e002      	b.n	8001f88 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	2200      	movs	r2, #0
 8001f86:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d123      	bne.n	8001fd8 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	461a      	mov	r2, r3
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4413      	add	r3, r2
 8001f9e:	881b      	ldrh	r3, [r3, #0]
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001faa:	83fb      	strh	r3, [r7, #30]
 8001fac:	8bfb      	ldrh	r3, [r7, #30]
 8001fae:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001fb2:	83fb      	strh	r3, [r7, #30]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	461a      	mov	r2, r3
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	441a      	add	r2, r3
 8001fc2:	8bfb      	ldrh	r3, [r7, #30]
 8001fc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001fd8:	88fb      	ldrh	r3, [r7, #6]
 8001fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d11f      	bne.n	8002022 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4413      	add	r3, r2
 8001ff0:	881b      	ldrh	r3, [r3, #0]
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ff8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ffc:	83bb      	strh	r3, [r7, #28]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	461a      	mov	r2, r3
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	441a      	add	r2, r3
 800200c:	8bbb      	ldrh	r3, [r7, #28]
 800200e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002012:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002016:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800201a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800201e:	b29b      	uxth	r3, r3
 8002020:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002022:	8b7b      	ldrh	r3, [r7, #26]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d008      	beq.n	800203a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6818      	ldr	r0, [r3, #0]
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	6959      	ldr	r1, [r3, #20]
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	895a      	ldrh	r2, [r3, #10]
 8002034:	8b7b      	ldrh	r3, [r7, #26]
 8002036:	f005 fd7b 	bl	8007b30 <USB_ReadPMA>
    }
  }

  return count;
 800203a:	8b7b      	ldrh	r3, [r7, #26]
}
 800203c:	4618      	mov	r0, r3
 800203e:	3720      	adds	r7, #32
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b0a4      	sub	sp, #144	; 0x90
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	4613      	mov	r3, r2
 8002050:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002052:	88fb      	ldrh	r3, [r7, #6]
 8002054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002058:	2b00      	cmp	r3, #0
 800205a:	f000 81db 	beq.w	8002414 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002066:	b29b      	uxth	r3, r3
 8002068:	461a      	mov	r2, r3
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	4413      	add	r3, r2
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	6812      	ldr	r2, [r2, #0]
 8002076:	4413      	add	r3, r2
 8002078:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800207c:	881b      	ldrh	r3, [r3, #0]
 800207e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002082:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	699a      	ldr	r2, [r3, #24]
 800208a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800208e:	429a      	cmp	r2, r3
 8002090:	d907      	bls.n	80020a2 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	699a      	ldr	r2, [r3, #24]
 8002096:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800209a:	1ad2      	subs	r2, r2, r3
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	619a      	str	r2, [r3, #24]
 80020a0:	e002      	b.n	80020a8 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	2200      	movs	r2, #0
 80020a6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f040 80b9 	bne.w	8002224 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	785b      	ldrb	r3, [r3, #1]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d126      	bne.n	8002108 <HAL_PCD_EP_DB_Transmit+0xc4>
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	461a      	mov	r2, r3
 80020cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ce:	4413      	add	r3, r2
 80020d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	00da      	lsls	r2, r3, #3
 80020d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020da:	4413      	add	r3, r2
 80020dc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80020e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80020e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020e4:	881b      	ldrh	r3, [r3, #0]
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f0:	801a      	strh	r2, [r3, #0]
 80020f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f4:	881b      	ldrh	r3, [r3, #0]
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002100:	b29a      	uxth	r2, r3
 8002102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002104:	801a      	strh	r2, [r3, #0]
 8002106:	e01a      	b.n	800213e <HAL_PCD_EP_DB_Transmit+0xfa>
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	785b      	ldrb	r3, [r3, #1]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d116      	bne.n	800213e <HAL_PCD_EP_DB_Transmit+0xfa>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	637b      	str	r3, [r7, #52]	; 0x34
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800211e:	b29b      	uxth	r3, r3
 8002120:	461a      	mov	r2, r3
 8002122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002124:	4413      	add	r3, r2
 8002126:	637b      	str	r3, [r7, #52]	; 0x34
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	00da      	lsls	r2, r3, #3
 800212e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002130:	4413      	add	r3, r2
 8002132:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002136:	633b      	str	r3, [r7, #48]	; 0x30
 8002138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800213a:	2200      	movs	r2, #0
 800213c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	627b      	str	r3, [r7, #36]	; 0x24
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	785b      	ldrb	r3, [r3, #1]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d126      	bne.n	800219a <HAL_PCD_EP_DB_Transmit+0x156>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	61fb      	str	r3, [r7, #28]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800215a:	b29b      	uxth	r3, r3
 800215c:	461a      	mov	r2, r3
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	4413      	add	r3, r2
 8002162:	61fb      	str	r3, [r7, #28]
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	00da      	lsls	r2, r3, #3
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	4413      	add	r3, r2
 800216e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002172:	61bb      	str	r3, [r7, #24]
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	881b      	ldrh	r3, [r3, #0]
 8002178:	b29b      	uxth	r3, r3
 800217a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800217e:	b29a      	uxth	r2, r3
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	801a      	strh	r2, [r3, #0]
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	881b      	ldrh	r3, [r3, #0]
 8002188:	b29b      	uxth	r3, r3
 800218a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800218e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002192:	b29a      	uxth	r2, r3
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	801a      	strh	r2, [r3, #0]
 8002198:	e017      	b.n	80021ca <HAL_PCD_EP_DB_Transmit+0x186>
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	785b      	ldrb	r3, [r3, #1]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d113      	bne.n	80021ca <HAL_PCD_EP_DB_Transmit+0x186>
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	461a      	mov	r2, r3
 80021ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b0:	4413      	add	r3, r2
 80021b2:	627b      	str	r3, [r7, #36]	; 0x24
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	00da      	lsls	r2, r3, #3
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	4413      	add	r3, r2
 80021be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80021c2:	623b      	str	r3, [r7, #32]
 80021c4:	6a3b      	ldr	r3, [r7, #32]
 80021c6:	2200      	movs	r2, #0
 80021c8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	4619      	mov	r1, r3
 80021d0:	68f8      	ldr	r0, [r7, #12]
 80021d2:	f007 fa6c 	bl	80096ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80021d6:	88fb      	ldrh	r3, [r7, #6]
 80021d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f000 82fa 	beq.w	80027d6 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	461a      	mov	r2, r3
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	881b      	ldrh	r3, [r3, #0]
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021fc:	82fb      	strh	r3, [r7, #22]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	461a      	mov	r2, r3
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	441a      	add	r2, r3
 800220c:	8afb      	ldrh	r3, [r7, #22]
 800220e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002212:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002216:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800221a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800221e:	b29b      	uxth	r3, r3
 8002220:	8013      	strh	r3, [r2, #0]
 8002222:	e2d8      	b.n	80027d6 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002224:	88fb      	ldrh	r3, [r7, #6]
 8002226:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d021      	beq.n	8002272 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	461a      	mov	r2, r3
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	4413      	add	r3, r2
 800223c:	881b      	ldrh	r3, [r3, #0]
 800223e:	b29b      	uxth	r3, r3
 8002240:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002244:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002248:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	461a      	mov	r2, r3
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	441a      	add	r2, r3
 800225a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800225e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002262:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002266:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800226a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800226e:	b29b      	uxth	r3, r3
 8002270:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002278:	2b01      	cmp	r3, #1
 800227a:	f040 82ac 	bne.w	80027d6 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	695a      	ldr	r2, [r3, #20]
 8002282:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002286:	441a      	add	r2, r3
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	69da      	ldr	r2, [r3, #28]
 8002290:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002294:	441a      	add	r2, r3
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	6a1a      	ldr	r2, [r3, #32]
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d30b      	bcc.n	80022be <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	6a1a      	ldr	r2, [r3, #32]
 80022b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022b6:	1ad2      	subs	r2, r2, r3
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	621a      	str	r2, [r3, #32]
 80022bc:	e017      	b.n	80022ee <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d108      	bne.n	80022d8 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 80022c6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80022ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80022d6:	e00a      	b.n	80022ee <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	2200      	movs	r2, #0
 80022ec:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	785b      	ldrb	r3, [r3, #1]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d165      	bne.n	80023c2 <HAL_PCD_EP_DB_Transmit+0x37e>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002304:	b29b      	uxth	r3, r3
 8002306:	461a      	mov	r2, r3
 8002308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800230a:	4413      	add	r3, r2
 800230c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	00da      	lsls	r2, r3, #3
 8002314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002316:	4413      	add	r3, r2
 8002318:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800231c:	63bb      	str	r3, [r7, #56]	; 0x38
 800231e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002320:	881b      	ldrh	r3, [r3, #0]
 8002322:	b29b      	uxth	r3, r3
 8002324:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002328:	b29a      	uxth	r2, r3
 800232a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800232c:	801a      	strh	r2, [r3, #0]
 800232e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002332:	2b3e      	cmp	r3, #62	; 0x3e
 8002334:	d91d      	bls.n	8002372 <HAL_PCD_EP_DB_Transmit+0x32e>
 8002336:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800233a:	095b      	lsrs	r3, r3, #5
 800233c:	64bb      	str	r3, [r7, #72]	; 0x48
 800233e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002342:	f003 031f 	and.w	r3, r3, #31
 8002346:	2b00      	cmp	r3, #0
 8002348:	d102      	bne.n	8002350 <HAL_PCD_EP_DB_Transmit+0x30c>
 800234a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800234c:	3b01      	subs	r3, #1
 800234e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002352:	881b      	ldrh	r3, [r3, #0]
 8002354:	b29a      	uxth	r2, r3
 8002356:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002358:	b29b      	uxth	r3, r3
 800235a:	029b      	lsls	r3, r3, #10
 800235c:	b29b      	uxth	r3, r3
 800235e:	4313      	orrs	r3, r2
 8002360:	b29b      	uxth	r3, r3
 8002362:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002366:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800236a:	b29a      	uxth	r2, r3
 800236c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800236e:	801a      	strh	r2, [r3, #0]
 8002370:	e044      	b.n	80023fc <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002372:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10a      	bne.n	8002390 <HAL_PCD_EP_DB_Transmit+0x34c>
 800237a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800237c:	881b      	ldrh	r3, [r3, #0]
 800237e:	b29b      	uxth	r3, r3
 8002380:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002384:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002388:	b29a      	uxth	r2, r3
 800238a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800238c:	801a      	strh	r2, [r3, #0]
 800238e:	e035      	b.n	80023fc <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002390:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002394:	085b      	lsrs	r3, r3, #1
 8002396:	64bb      	str	r3, [r7, #72]	; 0x48
 8002398:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d002      	beq.n	80023aa <HAL_PCD_EP_DB_Transmit+0x366>
 80023a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023a6:	3301      	adds	r3, #1
 80023a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80023aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ac:	881b      	ldrh	r3, [r3, #0]
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	029b      	lsls	r3, r3, #10
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	4313      	orrs	r3, r2
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023be:	801a      	strh	r2, [r3, #0]
 80023c0:	e01c      	b.n	80023fc <HAL_PCD_EP_DB_Transmit+0x3b8>
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	785b      	ldrb	r3, [r3, #1]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d118      	bne.n	80023fc <HAL_PCD_EP_DB_Transmit+0x3b8>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	647b      	str	r3, [r7, #68]	; 0x44
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023d8:	b29b      	uxth	r3, r3
 80023da:	461a      	mov	r2, r3
 80023dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023de:	4413      	add	r3, r2
 80023e0:	647b      	str	r3, [r7, #68]	; 0x44
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	00da      	lsls	r2, r3, #3
 80023e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023ea:	4413      	add	r3, r2
 80023ec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80023f0:	643b      	str	r3, [r7, #64]	; 0x40
 80023f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023fa:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6818      	ldr	r0, [r3, #0]
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	6959      	ldr	r1, [r3, #20]
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	891a      	ldrh	r2, [r3, #8]
 8002408:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800240c:	b29b      	uxth	r3, r3
 800240e:	f005 fb4d 	bl	8007aac <USB_WritePMA>
 8002412:	e1e0      	b.n	80027d6 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800241c:	b29b      	uxth	r3, r3
 800241e:	461a      	mov	r2, r3
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	4413      	add	r3, r2
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	6812      	ldr	r2, [r2, #0]
 800242c:	4413      	add	r3, r2
 800242e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002432:	881b      	ldrh	r3, [r3, #0]
 8002434:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002438:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	699a      	ldr	r2, [r3, #24]
 8002440:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002444:	429a      	cmp	r2, r3
 8002446:	d307      	bcc.n	8002458 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	699a      	ldr	r2, [r3, #24]
 800244c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002450:	1ad2      	subs	r2, r2, r3
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	619a      	str	r2, [r3, #24]
 8002456:	e002      	b.n	800245e <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	2200      	movs	r2, #0
 800245c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	2b00      	cmp	r3, #0
 8002464:	f040 80c0 	bne.w	80025e8 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	785b      	ldrb	r3, [r3, #1]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d126      	bne.n	80024be <HAL_PCD_EP_DB_Transmit+0x47a>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800247e:	b29b      	uxth	r3, r3
 8002480:	461a      	mov	r2, r3
 8002482:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002484:	4413      	add	r3, r2
 8002486:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	00da      	lsls	r2, r3, #3
 800248e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002490:	4413      	add	r3, r2
 8002492:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002496:	67bb      	str	r3, [r7, #120]	; 0x78
 8002498:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800249a:	881b      	ldrh	r3, [r3, #0]
 800249c:	b29b      	uxth	r3, r3
 800249e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024a6:	801a      	strh	r2, [r3, #0]
 80024a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024aa:	881b      	ldrh	r3, [r3, #0]
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024ba:	801a      	strh	r2, [r3, #0]
 80024bc:	e01a      	b.n	80024f4 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	785b      	ldrb	r3, [r3, #1]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d116      	bne.n	80024f4 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	667b      	str	r3, [r7, #100]	; 0x64
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	461a      	mov	r2, r3
 80024d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024da:	4413      	add	r3, r2
 80024dc:	667b      	str	r3, [r7, #100]	; 0x64
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	00da      	lsls	r2, r3, #3
 80024e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024e6:	4413      	add	r3, r2
 80024e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80024ec:	663b      	str	r3, [r7, #96]	; 0x60
 80024ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024f0:	2200      	movs	r2, #0
 80024f2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	677b      	str	r3, [r7, #116]	; 0x74
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	785b      	ldrb	r3, [r3, #1]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d12b      	bne.n	800255a <HAL_PCD_EP_DB_Transmit+0x516>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002510:	b29b      	uxth	r3, r3
 8002512:	461a      	mov	r2, r3
 8002514:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002516:	4413      	add	r3, r2
 8002518:	66fb      	str	r3, [r7, #108]	; 0x6c
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	00da      	lsls	r2, r3, #3
 8002520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002522:	4413      	add	r3, r2
 8002524:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002528:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800252c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002530:	881b      	ldrh	r3, [r3, #0]
 8002532:	b29b      	uxth	r3, r3
 8002534:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002538:	b29a      	uxth	r2, r3
 800253a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800253e:	801a      	strh	r2, [r3, #0]
 8002540:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002544:	881b      	ldrh	r3, [r3, #0]
 8002546:	b29b      	uxth	r3, r3
 8002548:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800254c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002550:	b29a      	uxth	r2, r3
 8002552:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002556:	801a      	strh	r2, [r3, #0]
 8002558:	e017      	b.n	800258a <HAL_PCD_EP_DB_Transmit+0x546>
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	785b      	ldrb	r3, [r3, #1]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d113      	bne.n	800258a <HAL_PCD_EP_DB_Transmit+0x546>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800256a:	b29b      	uxth	r3, r3
 800256c:	461a      	mov	r2, r3
 800256e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002570:	4413      	add	r3, r2
 8002572:	677b      	str	r3, [r7, #116]	; 0x74
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	00da      	lsls	r2, r3, #3
 800257a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800257c:	4413      	add	r3, r2
 800257e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002582:	673b      	str	r3, [r7, #112]	; 0x70
 8002584:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002586:	2200      	movs	r2, #0
 8002588:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	4619      	mov	r1, r3
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f007 f88c 	bl	80096ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002596:	88fb      	ldrh	r3, [r7, #6]
 8002598:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800259c:	2b00      	cmp	r3, #0
 800259e:	f040 811a 	bne.w	80027d6 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	461a      	mov	r2, r3
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	4413      	add	r3, r2
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025bc:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	461a      	mov	r2, r3
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	441a      	add	r2, r3
 80025ce:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80025d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	8013      	strh	r3, [r2, #0]
 80025e6:	e0f6      	b.n	80027d6 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80025e8:	88fb      	ldrh	r3, [r7, #6]
 80025ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d121      	bne.n	8002636 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	461a      	mov	r2, r3
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	881b      	ldrh	r3, [r3, #0]
 8002602:	b29b      	uxth	r3, r3
 8002604:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002608:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800260c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	461a      	mov	r2, r3
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	441a      	add	r2, r3
 800261e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002622:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002626:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800262a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800262e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002632:	b29b      	uxth	r3, r3
 8002634:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800263c:	2b01      	cmp	r3, #1
 800263e:	f040 80ca 	bne.w	80027d6 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	695a      	ldr	r2, [r3, #20]
 8002646:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800264a:	441a      	add	r2, r3
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	69da      	ldr	r2, [r3, #28]
 8002654:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002658:	441a      	add	r2, r3
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	6a1a      	ldr	r2, [r3, #32]
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	429a      	cmp	r2, r3
 8002668:	d30b      	bcc.n	8002682 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	6a1a      	ldr	r2, [r3, #32]
 8002676:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800267a:	1ad2      	subs	r2, r2, r3
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	621a      	str	r2, [r3, #32]
 8002680:	e017      	b.n	80026b2 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	6a1b      	ldr	r3, [r3, #32]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d108      	bne.n	800269c <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800268a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800268e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800269a:	e00a      	b.n	80026b2 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	2200      	movs	r2, #0
 80026a8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	657b      	str	r3, [r7, #84]	; 0x54
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	785b      	ldrb	r3, [r3, #1]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d165      	bne.n	800278c <HAL_PCD_EP_DB_Transmit+0x748>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	461a      	mov	r2, r3
 80026d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026d4:	4413      	add	r3, r2
 80026d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	00da      	lsls	r2, r3, #3
 80026de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026e0:	4413      	add	r3, r2
 80026e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80026e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80026e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026ea:	881b      	ldrh	r3, [r3, #0]
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026f6:	801a      	strh	r2, [r3, #0]
 80026f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026fc:	2b3e      	cmp	r3, #62	; 0x3e
 80026fe:	d91d      	bls.n	800273c <HAL_PCD_EP_DB_Transmit+0x6f8>
 8002700:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002704:	095b      	lsrs	r3, r3, #5
 8002706:	66bb      	str	r3, [r7, #104]	; 0x68
 8002708:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800270c:	f003 031f 	and.w	r3, r3, #31
 8002710:	2b00      	cmp	r3, #0
 8002712:	d102      	bne.n	800271a <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002714:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002716:	3b01      	subs	r3, #1
 8002718:	66bb      	str	r3, [r7, #104]	; 0x68
 800271a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800271c:	881b      	ldrh	r3, [r3, #0]
 800271e:	b29a      	uxth	r2, r3
 8002720:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002722:	b29b      	uxth	r3, r3
 8002724:	029b      	lsls	r3, r3, #10
 8002726:	b29b      	uxth	r3, r3
 8002728:	4313      	orrs	r3, r2
 800272a:	b29b      	uxth	r3, r3
 800272c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002730:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002734:	b29a      	uxth	r2, r3
 8002736:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002738:	801a      	strh	r2, [r3, #0]
 800273a:	e041      	b.n	80027c0 <HAL_PCD_EP_DB_Transmit+0x77c>
 800273c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10a      	bne.n	800275a <HAL_PCD_EP_DB_Transmit+0x716>
 8002744:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002746:	881b      	ldrh	r3, [r3, #0]
 8002748:	b29b      	uxth	r3, r3
 800274a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800274e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002752:	b29a      	uxth	r2, r3
 8002754:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002756:	801a      	strh	r2, [r3, #0]
 8002758:	e032      	b.n	80027c0 <HAL_PCD_EP_DB_Transmit+0x77c>
 800275a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800275e:	085b      	lsrs	r3, r3, #1
 8002760:	66bb      	str	r3, [r7, #104]	; 0x68
 8002762:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b00      	cmp	r3, #0
 800276c:	d002      	beq.n	8002774 <HAL_PCD_EP_DB_Transmit+0x730>
 800276e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002770:	3301      	adds	r3, #1
 8002772:	66bb      	str	r3, [r7, #104]	; 0x68
 8002774:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002776:	881b      	ldrh	r3, [r3, #0]
 8002778:	b29a      	uxth	r2, r3
 800277a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800277c:	b29b      	uxth	r3, r3
 800277e:	029b      	lsls	r3, r3, #10
 8002780:	b29b      	uxth	r3, r3
 8002782:	4313      	orrs	r3, r2
 8002784:	b29a      	uxth	r2, r3
 8002786:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002788:	801a      	strh	r2, [r3, #0]
 800278a:	e019      	b.n	80027c0 <HAL_PCD_EP_DB_Transmit+0x77c>
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	785b      	ldrb	r3, [r3, #1]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d115      	bne.n	80027c0 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800279c:	b29b      	uxth	r3, r3
 800279e:	461a      	mov	r2, r3
 80027a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027a2:	4413      	add	r3, r2
 80027a4:	657b      	str	r3, [r7, #84]	; 0x54
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	00da      	lsls	r2, r3, #3
 80027ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ae:	4413      	add	r3, r2
 80027b0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80027b4:	653b      	str	r3, [r7, #80]	; 0x50
 80027b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027be:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6818      	ldr	r0, [r3, #0]
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	6959      	ldr	r1, [r3, #20]
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	895a      	ldrh	r2, [r3, #10]
 80027cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	f005 f96b 	bl	8007aac <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	461a      	mov	r2, r3
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	4413      	add	r3, r2
 80027e4:	881b      	ldrh	r3, [r3, #0]
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027f0:	82bb      	strh	r3, [r7, #20]
 80027f2:	8abb      	ldrh	r3, [r7, #20]
 80027f4:	f083 0310 	eor.w	r3, r3, #16
 80027f8:	82bb      	strh	r3, [r7, #20]
 80027fa:	8abb      	ldrh	r3, [r7, #20]
 80027fc:	f083 0320 	eor.w	r3, r3, #32
 8002800:	82bb      	strh	r3, [r7, #20]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	461a      	mov	r2, r3
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	441a      	add	r2, r3
 8002810:	8abb      	ldrh	r3, [r7, #20]
 8002812:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002816:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800281a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800281e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002822:	b29b      	uxth	r3, r3
 8002824:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3790      	adds	r7, #144	; 0x90
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002830:	b480      	push	{r7}
 8002832:	b087      	sub	sp, #28
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	607b      	str	r3, [r7, #4]
 800283a:	460b      	mov	r3, r1
 800283c:	817b      	strh	r3, [r7, #10]
 800283e:	4613      	mov	r3, r2
 8002840:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002842:	897b      	ldrh	r3, [r7, #10]
 8002844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002848:	b29b      	uxth	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00b      	beq.n	8002866 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800284e:	897b      	ldrh	r3, [r7, #10]
 8002850:	f003 0307 	and.w	r3, r3, #7
 8002854:	1c5a      	adds	r2, r3, #1
 8002856:	4613      	mov	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	4413      	add	r3, r2
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	4413      	add	r3, r2
 8002862:	617b      	str	r3, [r7, #20]
 8002864:	e009      	b.n	800287a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002866:	897a      	ldrh	r2, [r7, #10]
 8002868:	4613      	mov	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4413      	add	r3, r2
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	4413      	add	r3, r2
 8002878:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800287a:	893b      	ldrh	r3, [r7, #8]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d107      	bne.n	8002890 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	2200      	movs	r2, #0
 8002884:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	b29a      	uxth	r2, r3
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	80da      	strh	r2, [r3, #6]
 800288e:	e00b      	b.n	80028a8 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	2201      	movs	r2, #1
 8002894:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	b29a      	uxth	r2, r3
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	0c1b      	lsrs	r3, r3, #16
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	371c      	adds	r7, #28
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
	...

080028b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80028be:	af00      	add	r7, sp, #0
 80028c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80028c8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028ce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d102      	bne.n	80028de <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	f001 b83a 	b.w	8003952 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028e2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f000 816f 	beq.w	8002bd2 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80028f4:	4bb5      	ldr	r3, [pc, #724]	; (8002bcc <HAL_RCC_OscConfig+0x314>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f003 030c 	and.w	r3, r3, #12
 80028fc:	2b04      	cmp	r3, #4
 80028fe:	d00c      	beq.n	800291a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002900:	4bb2      	ldr	r3, [pc, #712]	; (8002bcc <HAL_RCC_OscConfig+0x314>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f003 030c 	and.w	r3, r3, #12
 8002908:	2b08      	cmp	r3, #8
 800290a:	d15c      	bne.n	80029c6 <HAL_RCC_OscConfig+0x10e>
 800290c:	4baf      	ldr	r3, [pc, #700]	; (8002bcc <HAL_RCC_OscConfig+0x314>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002918:	d155      	bne.n	80029c6 <HAL_RCC_OscConfig+0x10e>
 800291a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800291e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002922:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002926:	fa93 f3a3 	rbit	r3, r3
 800292a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  return result;
 800292e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002932:	fab3 f383 	clz	r3, r3
 8002936:	b2db      	uxtb	r3, r3
 8002938:	095b      	lsrs	r3, r3, #5
 800293a:	b2db      	uxtb	r3, r3
 800293c:	f043 0301 	orr.w	r3, r3, #1
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b01      	cmp	r3, #1
 8002944:	d102      	bne.n	800294c <HAL_RCC_OscConfig+0x94>
 8002946:	4ba1      	ldr	r3, [pc, #644]	; (8002bcc <HAL_RCC_OscConfig+0x314>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	e015      	b.n	8002978 <HAL_RCC_OscConfig+0xc0>
 800294c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002950:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002954:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002958:	fa93 f3a3 	rbit	r3, r3
 800295c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002960:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002964:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002968:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800296c:	fa93 f3a3 	rbit	r3, r3
 8002970:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002974:	4b95      	ldr	r3, [pc, #596]	; (8002bcc <HAL_RCC_OscConfig+0x314>)
 8002976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002978:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800297c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002980:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002984:	fa92 f2a2 	rbit	r2, r2
 8002988:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800298c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002990:	fab2 f282 	clz	r2, r2
 8002994:	b2d2      	uxtb	r2, r2
 8002996:	f042 0220 	orr.w	r2, r2, #32
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	f002 021f 	and.w	r2, r2, #31
 80029a0:	2101      	movs	r1, #1
 80029a2:	fa01 f202 	lsl.w	r2, r1, r2
 80029a6:	4013      	ands	r3, r2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 8111 	beq.w	8002bd0 <HAL_RCC_OscConfig+0x318>
 80029ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029b2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f040 8108 	bne.w	8002bd0 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	f000 bfc6 	b.w	8003952 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029ca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029d6:	d106      	bne.n	80029e6 <HAL_RCC_OscConfig+0x12e>
 80029d8:	4b7c      	ldr	r3, [pc, #496]	; (8002bcc <HAL_RCC_OscConfig+0x314>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a7b      	ldr	r2, [pc, #492]	; (8002bcc <HAL_RCC_OscConfig+0x314>)
 80029de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e2:	6013      	str	r3, [r2, #0]
 80029e4:	e036      	b.n	8002a54 <HAL_RCC_OscConfig+0x19c>
 80029e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029ea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10c      	bne.n	8002a10 <HAL_RCC_OscConfig+0x158>
 80029f6:	4b75      	ldr	r3, [pc, #468]	; (8002bcc <HAL_RCC_OscConfig+0x314>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a74      	ldr	r2, [pc, #464]	; (8002bcc <HAL_RCC_OscConfig+0x314>)
 80029fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a00:	6013      	str	r3, [r2, #0]
 8002a02:	4b72      	ldr	r3, [pc, #456]	; (8002bcc <HAL_RCC_OscConfig+0x314>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a71      	ldr	r2, [pc, #452]	; (8002bcc <HAL_RCC_OscConfig+0x314>)
 8002a08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a0c:	6013      	str	r3, [r2, #0]
 8002a0e:	e021      	b.n	8002a54 <HAL_RCC_OscConfig+0x19c>
 8002a10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a14:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a20:	d10c      	bne.n	8002a3c <HAL_RCC_OscConfig+0x184>
 8002a22:	4b6a      	ldr	r3, [pc, #424]	; (8002bcc <HAL_RCC_OscConfig+0x314>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a69      	ldr	r2, [pc, #420]	; (8002bcc <HAL_RCC_OscConfig+0x314>)
 8002a28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a2c:	6013      	str	r3, [r2, #0]
 8002a2e:	4b67      	ldr	r3, [pc, #412]	; (8002bcc <HAL_RCC_OscConfig+0x314>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a66      	ldr	r2, [pc, #408]	; (8002bcc <HAL_RCC_OscConfig+0x314>)
 8002a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a38:	6013      	str	r3, [r2, #0]
 8002a3a:	e00b      	b.n	8002a54 <HAL_RCC_OscConfig+0x19c>
 8002a3c:	4b63      	ldr	r3, [pc, #396]	; (8002bcc <HAL_RCC_OscConfig+0x314>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a62      	ldr	r2, [pc, #392]	; (8002bcc <HAL_RCC_OscConfig+0x314>)
 8002a42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a46:	6013      	str	r3, [r2, #0]
 8002a48:	4b60      	ldr	r3, [pc, #384]	; (8002bcc <HAL_RCC_OscConfig+0x314>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a5f      	ldr	r2, [pc, #380]	; (8002bcc <HAL_RCC_OscConfig+0x314>)
 8002a4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a52:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a58:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d059      	beq.n	8002b18 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a64:	f7fd ff66 	bl	8000934 <HAL_GetTick>
 8002a68:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a6c:	e00a      	b.n	8002a84 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a6e:	f7fd ff61 	bl	8000934 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b64      	cmp	r3, #100	; 0x64
 8002a7c:	d902      	bls.n	8002a84 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	f000 bf67 	b.w	8003952 <HAL_RCC_OscConfig+0x109a>
 8002a84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a88:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002a90:	fa93 f3a3 	rbit	r3, r3
 8002a94:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002a98:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a9c:	fab3 f383 	clz	r3, r3
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	095b      	lsrs	r3, r3, #5
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	f043 0301 	orr.w	r3, r3, #1
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d102      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x1fe>
 8002ab0:	4b46      	ldr	r3, [pc, #280]	; (8002bcc <HAL_RCC_OscConfig+0x314>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	e015      	b.n	8002ae2 <HAL_RCC_OscConfig+0x22a>
 8002ab6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002aba:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abe:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002ac2:	fa93 f3a3 	rbit	r3, r3
 8002ac6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002aca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ace:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002ad2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002ad6:	fa93 f3a3 	rbit	r3, r3
 8002ada:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002ade:	4b3b      	ldr	r3, [pc, #236]	; (8002bcc <HAL_RCC_OscConfig+0x314>)
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ae6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002aea:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002aee:	fa92 f2a2 	rbit	r2, r2
 8002af2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002af6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002afa:	fab2 f282 	clz	r2, r2
 8002afe:	b2d2      	uxtb	r2, r2
 8002b00:	f042 0220 	orr.w	r2, r2, #32
 8002b04:	b2d2      	uxtb	r2, r2
 8002b06:	f002 021f 	and.w	r2, r2, #31
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b10:	4013      	ands	r3, r2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0ab      	beq.n	8002a6e <HAL_RCC_OscConfig+0x1b6>
 8002b16:	e05c      	b.n	8002bd2 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b18:	f7fd ff0c 	bl	8000934 <HAL_GetTick>
 8002b1c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b20:	e00a      	b.n	8002b38 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b22:	f7fd ff07 	bl	8000934 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b64      	cmp	r3, #100	; 0x64
 8002b30:	d902      	bls.n	8002b38 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	f000 bf0d 	b.w	8003952 <HAL_RCC_OscConfig+0x109a>
 8002b38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b3c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b40:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002b44:	fa93 f3a3 	rbit	r3, r3
 8002b48:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002b4c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b50:	fab3 f383 	clz	r3, r3
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	095b      	lsrs	r3, r3, #5
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	f043 0301 	orr.w	r3, r3, #1
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d102      	bne.n	8002b6a <HAL_RCC_OscConfig+0x2b2>
 8002b64:	4b19      	ldr	r3, [pc, #100]	; (8002bcc <HAL_RCC_OscConfig+0x314>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	e015      	b.n	8002b96 <HAL_RCC_OscConfig+0x2de>
 8002b6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b6e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b72:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002b76:	fa93 f3a3 	rbit	r3, r3
 8002b7a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002b7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b82:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002b86:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b8a:	fa93 f3a3 	rbit	r3, r3
 8002b8e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002b92:	4b0e      	ldr	r3, [pc, #56]	; (8002bcc <HAL_RCC_OscConfig+0x314>)
 8002b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b96:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b9a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002b9e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002ba2:	fa92 f2a2 	rbit	r2, r2
 8002ba6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002baa:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002bae:	fab2 f282 	clz	r2, r2
 8002bb2:	b2d2      	uxtb	r2, r2
 8002bb4:	f042 0220 	orr.w	r2, r2, #32
 8002bb8:	b2d2      	uxtb	r2, r2
 8002bba:	f002 021f 	and.w	r2, r2, #31
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	fa01 f202 	lsl.w	r2, r1, r2
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1ab      	bne.n	8002b22 <HAL_RCC_OscConfig+0x26a>
 8002bca:	e002      	b.n	8002bd2 <HAL_RCC_OscConfig+0x31a>
 8002bcc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bd6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f000 817f 	beq.w	8002ee6 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002be8:	4ba7      	ldr	r3, [pc, #668]	; (8002e88 <HAL_RCC_OscConfig+0x5d0>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f003 030c 	and.w	r3, r3, #12
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00c      	beq.n	8002c0e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002bf4:	4ba4      	ldr	r3, [pc, #656]	; (8002e88 <HAL_RCC_OscConfig+0x5d0>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f003 030c 	and.w	r3, r3, #12
 8002bfc:	2b08      	cmp	r3, #8
 8002bfe:	d173      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x430>
 8002c00:	4ba1      	ldr	r3, [pc, #644]	; (8002e88 <HAL_RCC_OscConfig+0x5d0>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002c08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c0c:	d16c      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x430>
 8002c0e:	2302      	movs	r3, #2
 8002c10:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c14:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002c18:	fa93 f3a3 	rbit	r3, r3
 8002c1c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002c20:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c24:	fab3 f383 	clz	r3, r3
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	095b      	lsrs	r3, r3, #5
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	f043 0301 	orr.w	r3, r3, #1
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d102      	bne.n	8002c3e <HAL_RCC_OscConfig+0x386>
 8002c38:	4b93      	ldr	r3, [pc, #588]	; (8002e88 <HAL_RCC_OscConfig+0x5d0>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	e013      	b.n	8002c66 <HAL_RCC_OscConfig+0x3ae>
 8002c3e:	2302      	movs	r3, #2
 8002c40:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c44:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002c48:	fa93 f3a3 	rbit	r3, r3
 8002c4c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002c50:	2302      	movs	r3, #2
 8002c52:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002c56:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002c5a:	fa93 f3a3 	rbit	r3, r3
 8002c5e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002c62:	4b89      	ldr	r3, [pc, #548]	; (8002e88 <HAL_RCC_OscConfig+0x5d0>)
 8002c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c66:	2202      	movs	r2, #2
 8002c68:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002c6c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002c70:	fa92 f2a2 	rbit	r2, r2
 8002c74:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002c78:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002c7c:	fab2 f282 	clz	r2, r2
 8002c80:	b2d2      	uxtb	r2, r2
 8002c82:	f042 0220 	orr.w	r2, r2, #32
 8002c86:	b2d2      	uxtb	r2, r2
 8002c88:	f002 021f 	and.w	r2, r2, #31
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c92:	4013      	ands	r3, r2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00a      	beq.n	8002cae <HAL_RCC_OscConfig+0x3f6>
 8002c98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c9c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d002      	beq.n	8002cae <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	f000 be52 	b.w	8003952 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cae:	4b76      	ldr	r3, [pc, #472]	; (8002e88 <HAL_RCC_OscConfig+0x5d0>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	21f8      	movs	r1, #248	; 0xf8
 8002cc4:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc8:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002ccc:	fa91 f1a1 	rbit	r1, r1
 8002cd0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002cd4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002cd8:	fab1 f181 	clz	r1, r1
 8002cdc:	b2c9      	uxtb	r1, r1
 8002cde:	408b      	lsls	r3, r1
 8002ce0:	4969      	ldr	r1, [pc, #420]	; (8002e88 <HAL_RCC_OscConfig+0x5d0>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ce6:	e0fe      	b.n	8002ee6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ce8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f000 8088 	beq.w	8002e0a <HAL_RCC_OscConfig+0x552>
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d00:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002d04:	fa93 f3a3 	rbit	r3, r3
 8002d08:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002d0c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d10:	fab3 f383 	clz	r3, r3
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d1a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	461a      	mov	r2, r3
 8002d22:	2301      	movs	r3, #1
 8002d24:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d26:	f7fd fe05 	bl	8000934 <HAL_GetTick>
 8002d2a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d2e:	e00a      	b.n	8002d46 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d30:	f7fd fe00 	bl	8000934 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d902      	bls.n	8002d46 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	f000 be06 	b.w	8003952 <HAL_RCC_OscConfig+0x109a>
 8002d46:	2302      	movs	r3, #2
 8002d48:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002d50:	fa93 f3a3 	rbit	r3, r3
 8002d54:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002d58:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d5c:	fab3 f383 	clz	r3, r3
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	095b      	lsrs	r3, r3, #5
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	f043 0301 	orr.w	r3, r3, #1
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d102      	bne.n	8002d76 <HAL_RCC_OscConfig+0x4be>
 8002d70:	4b45      	ldr	r3, [pc, #276]	; (8002e88 <HAL_RCC_OscConfig+0x5d0>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	e013      	b.n	8002d9e <HAL_RCC_OscConfig+0x4e6>
 8002d76:	2302      	movs	r3, #2
 8002d78:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002d80:	fa93 f3a3 	rbit	r3, r3
 8002d84:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002d88:	2302      	movs	r3, #2
 8002d8a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002d8e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002d92:	fa93 f3a3 	rbit	r3, r3
 8002d96:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002d9a:	4b3b      	ldr	r3, [pc, #236]	; (8002e88 <HAL_RCC_OscConfig+0x5d0>)
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9e:	2202      	movs	r2, #2
 8002da0:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002da4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002da8:	fa92 f2a2 	rbit	r2, r2
 8002dac:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002db0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002db4:	fab2 f282 	clz	r2, r2
 8002db8:	b2d2      	uxtb	r2, r2
 8002dba:	f042 0220 	orr.w	r2, r2, #32
 8002dbe:	b2d2      	uxtb	r2, r2
 8002dc0:	f002 021f 	and.w	r2, r2, #31
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	fa01 f202 	lsl.w	r2, r1, r2
 8002dca:	4013      	ands	r3, r2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d0af      	beq.n	8002d30 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd0:	4b2d      	ldr	r3, [pc, #180]	; (8002e88 <HAL_RCC_OscConfig+0x5d0>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ddc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	21f8      	movs	r1, #248	; 0xf8
 8002de6:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dea:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002dee:	fa91 f1a1 	rbit	r1, r1
 8002df2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002df6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002dfa:	fab1 f181 	clz	r1, r1
 8002dfe:	b2c9      	uxtb	r1, r1
 8002e00:	408b      	lsls	r3, r1
 8002e02:	4921      	ldr	r1, [pc, #132]	; (8002e88 <HAL_RCC_OscConfig+0x5d0>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	600b      	str	r3, [r1, #0]
 8002e08:	e06d      	b.n	8002ee6 <HAL_RCC_OscConfig+0x62e>
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e10:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002e14:	fa93 f3a3 	rbit	r3, r3
 8002e18:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002e1c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e20:	fab3 f383 	clz	r3, r3
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e2a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	461a      	mov	r2, r3
 8002e32:	2300      	movs	r3, #0
 8002e34:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e36:	f7fd fd7d 	bl	8000934 <HAL_GetTick>
 8002e3a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e3e:	e00a      	b.n	8002e56 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e40:	f7fd fd78 	bl	8000934 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d902      	bls.n	8002e56 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	f000 bd7e 	b.w	8003952 <HAL_RCC_OscConfig+0x109a>
 8002e56:	2302      	movs	r3, #2
 8002e58:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002e60:	fa93 f3a3 	rbit	r3, r3
 8002e64:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002e68:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e6c:	fab3 f383 	clz	r3, r3
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	095b      	lsrs	r3, r3, #5
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	f043 0301 	orr.w	r3, r3, #1
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d105      	bne.n	8002e8c <HAL_RCC_OscConfig+0x5d4>
 8002e80:	4b01      	ldr	r3, [pc, #4]	; (8002e88 <HAL_RCC_OscConfig+0x5d0>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	e016      	b.n	8002eb4 <HAL_RCC_OscConfig+0x5fc>
 8002e86:	bf00      	nop
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002e96:	fa93 f3a3 	rbit	r3, r3
 8002e9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002ea4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002ea8:	fa93 f3a3 	rbit	r3, r3
 8002eac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002eb0:	4bbf      	ldr	r3, [pc, #764]	; (80031b0 <HAL_RCC_OscConfig+0x8f8>)
 8002eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb4:	2202      	movs	r2, #2
 8002eb6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002eba:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002ebe:	fa92 f2a2 	rbit	r2, r2
 8002ec2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002ec6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002eca:	fab2 f282 	clz	r2, r2
 8002ece:	b2d2      	uxtb	r2, r2
 8002ed0:	f042 0220 	orr.w	r2, r2, #32
 8002ed4:	b2d2      	uxtb	r2, r2
 8002ed6:	f002 021f 	and.w	r2, r2, #31
 8002eda:	2101      	movs	r1, #1
 8002edc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1ac      	bne.n	8002e40 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ee6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0308 	and.w	r3, r3, #8
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	f000 8113 	beq.w	8003122 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002efc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f00:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d07c      	beq.n	8003006 <HAL_RCC_OscConfig+0x74e>
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f16:	fa93 f3a3 	rbit	r3, r3
 8002f1a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002f1e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f22:	fab3 f383 	clz	r3, r3
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	461a      	mov	r2, r3
 8002f2a:	4ba2      	ldr	r3, [pc, #648]	; (80031b4 <HAL_RCC_OscConfig+0x8fc>)
 8002f2c:	4413      	add	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	461a      	mov	r2, r3
 8002f32:	2301      	movs	r3, #1
 8002f34:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f36:	f7fd fcfd 	bl	8000934 <HAL_GetTick>
 8002f3a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f3e:	e00a      	b.n	8002f56 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f40:	f7fd fcf8 	bl	8000934 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d902      	bls.n	8002f56 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	f000 bcfe 	b.w	8003952 <HAL_RCC_OscConfig+0x109a>
 8002f56:	2302      	movs	r3, #2
 8002f58:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f60:	fa93 f2a3 	rbit	r2, r3
 8002f64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f68:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002f76:	2202      	movs	r2, #2
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	fa93 f2a3 	rbit	r2, r3
 8002f88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f96:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	601a      	str	r2, [r3, #0]
 8002f9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fa2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	fa93 f2a3 	rbit	r2, r3
 8002fac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fb0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002fb4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fb6:	4b7e      	ldr	r3, [pc, #504]	; (80031b0 <HAL_RCC_OscConfig+0x8f8>)
 8002fb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fbe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002fc2:	2102      	movs	r1, #2
 8002fc4:	6019      	str	r1, [r3, #0]
 8002fc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	fa93 f1a3 	rbit	r1, r3
 8002fd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fd8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002fdc:	6019      	str	r1, [r3, #0]
  return result;
 8002fde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fe2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	fab3 f383 	clz	r3, r3
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	f003 031f 	and.w	r3, r3, #31
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8002ffe:	4013      	ands	r3, r2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d09d      	beq.n	8002f40 <HAL_RCC_OscConfig+0x688>
 8003004:	e08d      	b.n	8003122 <HAL_RCC_OscConfig+0x86a>
 8003006:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800300a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800300e:	2201      	movs	r2, #1
 8003010:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003012:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003016:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	fa93 f2a3 	rbit	r2, r3
 8003020:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003024:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003028:	601a      	str	r2, [r3, #0]
  return result;
 800302a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800302e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003032:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003034:	fab3 f383 	clz	r3, r3
 8003038:	b2db      	uxtb	r3, r3
 800303a:	461a      	mov	r2, r3
 800303c:	4b5d      	ldr	r3, [pc, #372]	; (80031b4 <HAL_RCC_OscConfig+0x8fc>)
 800303e:	4413      	add	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	461a      	mov	r2, r3
 8003044:	2300      	movs	r3, #0
 8003046:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003048:	f7fd fc74 	bl	8000934 <HAL_GetTick>
 800304c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003050:	e00a      	b.n	8003068 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003052:	f7fd fc6f 	bl	8000934 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d902      	bls.n	8003068 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	f000 bc75 	b.w	8003952 <HAL_RCC_OscConfig+0x109a>
 8003068:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800306c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003070:	2202      	movs	r2, #2
 8003072:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003074:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003078:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	fa93 f2a3 	rbit	r2, r3
 8003082:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003086:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003090:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003094:	2202      	movs	r2, #2
 8003096:	601a      	str	r2, [r3, #0]
 8003098:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800309c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	fa93 f2a3 	rbit	r2, r3
 80030a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030b4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80030b8:	2202      	movs	r2, #2
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030c0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	fa93 f2a3 	rbit	r2, r3
 80030ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030ce:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80030d2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030d4:	4b36      	ldr	r3, [pc, #216]	; (80031b0 <HAL_RCC_OscConfig+0x8f8>)
 80030d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030dc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80030e0:	2102      	movs	r1, #2
 80030e2:	6019      	str	r1, [r3, #0]
 80030e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030e8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	fa93 f1a3 	rbit	r1, r3
 80030f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030f6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80030fa:	6019      	str	r1, [r3, #0]
  return result;
 80030fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003100:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	fab3 f383 	clz	r3, r3
 800310a:	b2db      	uxtb	r3, r3
 800310c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003110:	b2db      	uxtb	r3, r3
 8003112:	f003 031f 	and.w	r3, r3, #31
 8003116:	2101      	movs	r1, #1
 8003118:	fa01 f303 	lsl.w	r3, r1, r3
 800311c:	4013      	ands	r3, r2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d197      	bne.n	8003052 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003122:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003126:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0304 	and.w	r3, r3, #4
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 81a5 	beq.w	8003482 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003138:	2300      	movs	r3, #0
 800313a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800313e:	4b1c      	ldr	r3, [pc, #112]	; (80031b0 <HAL_RCC_OscConfig+0x8f8>)
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d116      	bne.n	8003178 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800314a:	4b19      	ldr	r3, [pc, #100]	; (80031b0 <HAL_RCC_OscConfig+0x8f8>)
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	4a18      	ldr	r2, [pc, #96]	; (80031b0 <HAL_RCC_OscConfig+0x8f8>)
 8003150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003154:	61d3      	str	r3, [r2, #28]
 8003156:	4b16      	ldr	r3, [pc, #88]	; (80031b0 <HAL_RCC_OscConfig+0x8f8>)
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800315e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003162:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003166:	601a      	str	r2, [r3, #0]
 8003168:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800316c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003170:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003172:	2301      	movs	r3, #1
 8003174:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003178:	4b0f      	ldr	r3, [pc, #60]	; (80031b8 <HAL_RCC_OscConfig+0x900>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003180:	2b00      	cmp	r3, #0
 8003182:	d121      	bne.n	80031c8 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003184:	4b0c      	ldr	r3, [pc, #48]	; (80031b8 <HAL_RCC_OscConfig+0x900>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a0b      	ldr	r2, [pc, #44]	; (80031b8 <HAL_RCC_OscConfig+0x900>)
 800318a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800318e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003190:	f7fd fbd0 	bl	8000934 <HAL_GetTick>
 8003194:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003198:	e010      	b.n	80031bc <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800319a:	f7fd fbcb 	bl	8000934 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b64      	cmp	r3, #100	; 0x64
 80031a8:	d908      	bls.n	80031bc <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e3d1      	b.n	8003952 <HAL_RCC_OscConfig+0x109a>
 80031ae:	bf00      	nop
 80031b0:	40021000 	.word	0x40021000
 80031b4:	10908120 	.word	0x10908120
 80031b8:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031bc:	4b8d      	ldr	r3, [pc, #564]	; (80033f4 <HAL_RCC_OscConfig+0xb3c>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d0e8      	beq.n	800319a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031cc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d106      	bne.n	80031e6 <HAL_RCC_OscConfig+0x92e>
 80031d8:	4b87      	ldr	r3, [pc, #540]	; (80033f8 <HAL_RCC_OscConfig+0xb40>)
 80031da:	6a1b      	ldr	r3, [r3, #32]
 80031dc:	4a86      	ldr	r2, [pc, #536]	; (80033f8 <HAL_RCC_OscConfig+0xb40>)
 80031de:	f043 0301 	orr.w	r3, r3, #1
 80031e2:	6213      	str	r3, [r2, #32]
 80031e4:	e035      	b.n	8003252 <HAL_RCC_OscConfig+0x99a>
 80031e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031ea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10c      	bne.n	8003210 <HAL_RCC_OscConfig+0x958>
 80031f6:	4b80      	ldr	r3, [pc, #512]	; (80033f8 <HAL_RCC_OscConfig+0xb40>)
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	4a7f      	ldr	r2, [pc, #508]	; (80033f8 <HAL_RCC_OscConfig+0xb40>)
 80031fc:	f023 0301 	bic.w	r3, r3, #1
 8003200:	6213      	str	r3, [r2, #32]
 8003202:	4b7d      	ldr	r3, [pc, #500]	; (80033f8 <HAL_RCC_OscConfig+0xb40>)
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	4a7c      	ldr	r2, [pc, #496]	; (80033f8 <HAL_RCC_OscConfig+0xb40>)
 8003208:	f023 0304 	bic.w	r3, r3, #4
 800320c:	6213      	str	r3, [r2, #32]
 800320e:	e020      	b.n	8003252 <HAL_RCC_OscConfig+0x99a>
 8003210:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003214:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	2b05      	cmp	r3, #5
 800321e:	d10c      	bne.n	800323a <HAL_RCC_OscConfig+0x982>
 8003220:	4b75      	ldr	r3, [pc, #468]	; (80033f8 <HAL_RCC_OscConfig+0xb40>)
 8003222:	6a1b      	ldr	r3, [r3, #32]
 8003224:	4a74      	ldr	r2, [pc, #464]	; (80033f8 <HAL_RCC_OscConfig+0xb40>)
 8003226:	f043 0304 	orr.w	r3, r3, #4
 800322a:	6213      	str	r3, [r2, #32]
 800322c:	4b72      	ldr	r3, [pc, #456]	; (80033f8 <HAL_RCC_OscConfig+0xb40>)
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	4a71      	ldr	r2, [pc, #452]	; (80033f8 <HAL_RCC_OscConfig+0xb40>)
 8003232:	f043 0301 	orr.w	r3, r3, #1
 8003236:	6213      	str	r3, [r2, #32]
 8003238:	e00b      	b.n	8003252 <HAL_RCC_OscConfig+0x99a>
 800323a:	4b6f      	ldr	r3, [pc, #444]	; (80033f8 <HAL_RCC_OscConfig+0xb40>)
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	4a6e      	ldr	r2, [pc, #440]	; (80033f8 <HAL_RCC_OscConfig+0xb40>)
 8003240:	f023 0301 	bic.w	r3, r3, #1
 8003244:	6213      	str	r3, [r2, #32]
 8003246:	4b6c      	ldr	r3, [pc, #432]	; (80033f8 <HAL_RCC_OscConfig+0xb40>)
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	4a6b      	ldr	r2, [pc, #428]	; (80033f8 <HAL_RCC_OscConfig+0xb40>)
 800324c:	f023 0304 	bic.w	r3, r3, #4
 8003250:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003252:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003256:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	2b00      	cmp	r3, #0
 8003260:	f000 8081 	beq.w	8003366 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003264:	f7fd fb66 	bl	8000934 <HAL_GetTick>
 8003268:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800326c:	e00b      	b.n	8003286 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800326e:	f7fd fb61 	bl	8000934 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	f241 3288 	movw	r2, #5000	; 0x1388
 800327e:	4293      	cmp	r3, r2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e365      	b.n	8003952 <HAL_RCC_OscConfig+0x109a>
 8003286:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800328a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800328e:	2202      	movs	r2, #2
 8003290:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003292:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003296:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	fa93 f2a3 	rbit	r2, r3
 80032a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032a4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80032a8:	601a      	str	r2, [r3, #0]
 80032aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032ae:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80032b2:	2202      	movs	r2, #2
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032ba:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	fa93 f2a3 	rbit	r2, r3
 80032c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032c8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80032cc:	601a      	str	r2, [r3, #0]
  return result;
 80032ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032d2:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80032d6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d8:	fab3 f383 	clz	r3, r3
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	095b      	lsrs	r3, r3, #5
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	f043 0302 	orr.w	r3, r3, #2
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d102      	bne.n	80032f2 <HAL_RCC_OscConfig+0xa3a>
 80032ec:	4b42      	ldr	r3, [pc, #264]	; (80033f8 <HAL_RCC_OscConfig+0xb40>)
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	e013      	b.n	800331a <HAL_RCC_OscConfig+0xa62>
 80032f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032f6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80032fa:	2202      	movs	r2, #2
 80032fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003302:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	fa93 f2a3 	rbit	r2, r3
 800330c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003310:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003314:	601a      	str	r2, [r3, #0]
 8003316:	4b38      	ldr	r3, [pc, #224]	; (80033f8 <HAL_RCC_OscConfig+0xb40>)
 8003318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800331e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003322:	2102      	movs	r1, #2
 8003324:	6011      	str	r1, [r2, #0]
 8003326:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800332a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800332e:	6812      	ldr	r2, [r2, #0]
 8003330:	fa92 f1a2 	rbit	r1, r2
 8003334:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003338:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800333c:	6011      	str	r1, [r2, #0]
  return result;
 800333e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003342:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003346:	6812      	ldr	r2, [r2, #0]
 8003348:	fab2 f282 	clz	r2, r2
 800334c:	b2d2      	uxtb	r2, r2
 800334e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003352:	b2d2      	uxtb	r2, r2
 8003354:	f002 021f 	and.w	r2, r2, #31
 8003358:	2101      	movs	r1, #1
 800335a:	fa01 f202 	lsl.w	r2, r1, r2
 800335e:	4013      	ands	r3, r2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d084      	beq.n	800326e <HAL_RCC_OscConfig+0x9b6>
 8003364:	e083      	b.n	800346e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003366:	f7fd fae5 	bl	8000934 <HAL_GetTick>
 800336a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800336e:	e00b      	b.n	8003388 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003370:	f7fd fae0 	bl	8000934 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003380:	4293      	cmp	r3, r2
 8003382:	d901      	bls.n	8003388 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e2e4      	b.n	8003952 <HAL_RCC_OscConfig+0x109a>
 8003388:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800338c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003390:	2202      	movs	r2, #2
 8003392:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003394:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003398:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	fa93 f2a3 	rbit	r2, r3
 80033a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033a6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80033aa:	601a      	str	r2, [r3, #0]
 80033ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033b0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80033b4:	2202      	movs	r2, #2
 80033b6:	601a      	str	r2, [r3, #0]
 80033b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033bc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	fa93 f2a3 	rbit	r2, r3
 80033c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033ca:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80033ce:	601a      	str	r2, [r3, #0]
  return result;
 80033d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033d4:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80033d8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033da:	fab3 f383 	clz	r3, r3
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	095b      	lsrs	r3, r3, #5
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	f043 0302 	orr.w	r3, r3, #2
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d106      	bne.n	80033fc <HAL_RCC_OscConfig+0xb44>
 80033ee:	4b02      	ldr	r3, [pc, #8]	; (80033f8 <HAL_RCC_OscConfig+0xb40>)
 80033f0:	6a1b      	ldr	r3, [r3, #32]
 80033f2:	e017      	b.n	8003424 <HAL_RCC_OscConfig+0xb6c>
 80033f4:	40007000 	.word	0x40007000
 80033f8:	40021000 	.word	0x40021000
 80033fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003400:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003404:	2202      	movs	r2, #2
 8003406:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003408:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800340c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	fa93 f2a3 	rbit	r2, r3
 8003416:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800341a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800341e:	601a      	str	r2, [r3, #0]
 8003420:	4bb3      	ldr	r3, [pc, #716]	; (80036f0 <HAL_RCC_OscConfig+0xe38>)
 8003422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003424:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003428:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800342c:	2102      	movs	r1, #2
 800342e:	6011      	str	r1, [r2, #0]
 8003430:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003434:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003438:	6812      	ldr	r2, [r2, #0]
 800343a:	fa92 f1a2 	rbit	r1, r2
 800343e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003442:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003446:	6011      	str	r1, [r2, #0]
  return result;
 8003448:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800344c:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003450:	6812      	ldr	r2, [r2, #0]
 8003452:	fab2 f282 	clz	r2, r2
 8003456:	b2d2      	uxtb	r2, r2
 8003458:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800345c:	b2d2      	uxtb	r2, r2
 800345e:	f002 021f 	and.w	r2, r2, #31
 8003462:	2101      	movs	r1, #1
 8003464:	fa01 f202 	lsl.w	r2, r1, r2
 8003468:	4013      	ands	r3, r2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d180      	bne.n	8003370 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800346e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003472:	2b01      	cmp	r3, #1
 8003474:	d105      	bne.n	8003482 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003476:	4b9e      	ldr	r3, [pc, #632]	; (80036f0 <HAL_RCC_OscConfig+0xe38>)
 8003478:	69db      	ldr	r3, [r3, #28]
 800347a:	4a9d      	ldr	r2, [pc, #628]	; (80036f0 <HAL_RCC_OscConfig+0xe38>)
 800347c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003480:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003482:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003486:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	2b00      	cmp	r3, #0
 8003490:	f000 825e 	beq.w	8003950 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003494:	4b96      	ldr	r3, [pc, #600]	; (80036f0 <HAL_RCC_OscConfig+0xe38>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f003 030c 	and.w	r3, r3, #12
 800349c:	2b08      	cmp	r3, #8
 800349e:	f000 821f 	beq.w	80038e0 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034a6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	f040 8170 	bne.w	8003794 <HAL_RCC_OscConfig+0xedc>
 80034b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034b8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80034bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80034c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034c6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	fa93 f2a3 	rbit	r2, r3
 80034d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034d4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80034d8:	601a      	str	r2, [r3, #0]
  return result;
 80034da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034de:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80034e2:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034e4:	fab3 f383 	clz	r3, r3
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034ee:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	461a      	mov	r2, r3
 80034f6:	2300      	movs	r3, #0
 80034f8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034fa:	f7fd fa1b 	bl	8000934 <HAL_GetTick>
 80034fe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003502:	e009      	b.n	8003518 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003504:	f7fd fa16 	bl	8000934 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d901      	bls.n	8003518 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e21c      	b.n	8003952 <HAL_RCC_OscConfig+0x109a>
 8003518:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800351c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003520:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003524:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003526:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800352a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	fa93 f2a3 	rbit	r2, r3
 8003534:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003538:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800353c:	601a      	str	r2, [r3, #0]
  return result;
 800353e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003542:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003546:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003548:	fab3 f383 	clz	r3, r3
 800354c:	b2db      	uxtb	r3, r3
 800354e:	095b      	lsrs	r3, r3, #5
 8003550:	b2db      	uxtb	r3, r3
 8003552:	f043 0301 	orr.w	r3, r3, #1
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b01      	cmp	r3, #1
 800355a:	d102      	bne.n	8003562 <HAL_RCC_OscConfig+0xcaa>
 800355c:	4b64      	ldr	r3, [pc, #400]	; (80036f0 <HAL_RCC_OscConfig+0xe38>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	e027      	b.n	80035b2 <HAL_RCC_OscConfig+0xcfa>
 8003562:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003566:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800356a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800356e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003570:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003574:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	fa93 f2a3 	rbit	r2, r3
 800357e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003582:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003586:	601a      	str	r2, [r3, #0]
 8003588:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800358c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003590:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003594:	601a      	str	r2, [r3, #0]
 8003596:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800359a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	fa93 f2a3 	rbit	r2, r3
 80035a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035a8:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80035ac:	601a      	str	r2, [r3, #0]
 80035ae:	4b50      	ldr	r3, [pc, #320]	; (80036f0 <HAL_RCC_OscConfig+0xe38>)
 80035b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80035b6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80035ba:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80035be:	6011      	str	r1, [r2, #0]
 80035c0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80035c4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80035c8:	6812      	ldr	r2, [r2, #0]
 80035ca:	fa92 f1a2 	rbit	r1, r2
 80035ce:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80035d2:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80035d6:	6011      	str	r1, [r2, #0]
  return result;
 80035d8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80035dc:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80035e0:	6812      	ldr	r2, [r2, #0]
 80035e2:	fab2 f282 	clz	r2, r2
 80035e6:	b2d2      	uxtb	r2, r2
 80035e8:	f042 0220 	orr.w	r2, r2, #32
 80035ec:	b2d2      	uxtb	r2, r2
 80035ee:	f002 021f 	and.w	r2, r2, #31
 80035f2:	2101      	movs	r1, #1
 80035f4:	fa01 f202 	lsl.w	r2, r1, r2
 80035f8:	4013      	ands	r3, r2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d182      	bne.n	8003504 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035fe:	4b3c      	ldr	r3, [pc, #240]	; (80036f0 <HAL_RCC_OscConfig+0xe38>)
 8003600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003602:	f023 020f 	bic.w	r2, r3, #15
 8003606:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800360a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	4937      	ldr	r1, [pc, #220]	; (80036f0 <HAL_RCC_OscConfig+0xe38>)
 8003614:	4313      	orrs	r3, r2
 8003616:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003618:	4b35      	ldr	r3, [pc, #212]	; (80036f0 <HAL_RCC_OscConfig+0xe38>)
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003620:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003624:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6a19      	ldr	r1, [r3, #32]
 800362c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003630:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	69db      	ldr	r3, [r3, #28]
 8003638:	430b      	orrs	r3, r1
 800363a:	492d      	ldr	r1, [pc, #180]	; (80036f0 <HAL_RCC_OscConfig+0xe38>)
 800363c:	4313      	orrs	r3, r2
 800363e:	604b      	str	r3, [r1, #4]
 8003640:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003644:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003648:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800364c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800364e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003652:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	fa93 f2a3 	rbit	r2, r3
 800365c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003660:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003664:	601a      	str	r2, [r3, #0]
  return result;
 8003666:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800366a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800366e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003670:	fab3 f383 	clz	r3, r3
 8003674:	b2db      	uxtb	r3, r3
 8003676:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800367a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	461a      	mov	r2, r3
 8003682:	2301      	movs	r3, #1
 8003684:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003686:	f7fd f955 	bl	8000934 <HAL_GetTick>
 800368a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800368e:	e009      	b.n	80036a4 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003690:	f7fd f950 	bl	8000934 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	2b02      	cmp	r3, #2
 800369e:	d901      	bls.n	80036a4 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e156      	b.n	8003952 <HAL_RCC_OscConfig+0x109a>
 80036a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036a8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80036ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036b6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	fa93 f2a3 	rbit	r2, r3
 80036c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036c4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80036c8:	601a      	str	r2, [r3, #0]
  return result;
 80036ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036ce:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80036d2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036d4:	fab3 f383 	clz	r3, r3
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	095b      	lsrs	r3, r3, #5
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	f043 0301 	orr.w	r3, r3, #1
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d105      	bne.n	80036f4 <HAL_RCC_OscConfig+0xe3c>
 80036e8:	4b01      	ldr	r3, [pc, #4]	; (80036f0 <HAL_RCC_OscConfig+0xe38>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	e02a      	b.n	8003744 <HAL_RCC_OscConfig+0xe8c>
 80036ee:	bf00      	nop
 80036f0:	40021000 	.word	0x40021000
 80036f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036f8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80036fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003700:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003702:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003706:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	fa93 f2a3 	rbit	r2, r3
 8003710:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003714:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003718:	601a      	str	r2, [r3, #0]
 800371a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800371e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003722:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003726:	601a      	str	r2, [r3, #0]
 8003728:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800372c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	fa93 f2a3 	rbit	r2, r3
 8003736:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800373a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800373e:	601a      	str	r2, [r3, #0]
 8003740:	4b86      	ldr	r3, [pc, #536]	; (800395c <HAL_RCC_OscConfig+0x10a4>)
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003744:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003748:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800374c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003750:	6011      	str	r1, [r2, #0]
 8003752:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003756:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800375a:	6812      	ldr	r2, [r2, #0]
 800375c:	fa92 f1a2 	rbit	r1, r2
 8003760:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003764:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003768:	6011      	str	r1, [r2, #0]
  return result;
 800376a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800376e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003772:	6812      	ldr	r2, [r2, #0]
 8003774:	fab2 f282 	clz	r2, r2
 8003778:	b2d2      	uxtb	r2, r2
 800377a:	f042 0220 	orr.w	r2, r2, #32
 800377e:	b2d2      	uxtb	r2, r2
 8003780:	f002 021f 	and.w	r2, r2, #31
 8003784:	2101      	movs	r1, #1
 8003786:	fa01 f202 	lsl.w	r2, r1, r2
 800378a:	4013      	ands	r3, r2
 800378c:	2b00      	cmp	r3, #0
 800378e:	f43f af7f 	beq.w	8003690 <HAL_RCC_OscConfig+0xdd8>
 8003792:	e0dd      	b.n	8003950 <HAL_RCC_OscConfig+0x1098>
 8003794:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003798:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800379c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80037a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037a6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	fa93 f2a3 	rbit	r2, r3
 80037b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037b4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80037b8:	601a      	str	r2, [r3, #0]
  return result;
 80037ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037be:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80037c2:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037c4:	fab3 f383 	clz	r3, r3
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80037ce:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	461a      	mov	r2, r3
 80037d6:	2300      	movs	r3, #0
 80037d8:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037da:	f7fd f8ab 	bl	8000934 <HAL_GetTick>
 80037de:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037e2:	e009      	b.n	80037f8 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037e4:	f7fd f8a6 	bl	8000934 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e0ac      	b.n	8003952 <HAL_RCC_OscConfig+0x109a>
 80037f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037fc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003800:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003804:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003806:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800380a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	fa93 f2a3 	rbit	r2, r3
 8003814:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003818:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800381c:	601a      	str	r2, [r3, #0]
  return result;
 800381e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003822:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003826:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003828:	fab3 f383 	clz	r3, r3
 800382c:	b2db      	uxtb	r3, r3
 800382e:	095b      	lsrs	r3, r3, #5
 8003830:	b2db      	uxtb	r3, r3
 8003832:	f043 0301 	orr.w	r3, r3, #1
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b01      	cmp	r3, #1
 800383a:	d102      	bne.n	8003842 <HAL_RCC_OscConfig+0xf8a>
 800383c:	4b47      	ldr	r3, [pc, #284]	; (800395c <HAL_RCC_OscConfig+0x10a4>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	e027      	b.n	8003892 <HAL_RCC_OscConfig+0xfda>
 8003842:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003846:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800384a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800384e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003850:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003854:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	fa93 f2a3 	rbit	r2, r3
 800385e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003862:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800386c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003870:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003874:	601a      	str	r2, [r3, #0]
 8003876:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800387a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	fa93 f2a3 	rbit	r2, r3
 8003884:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003888:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800388c:	601a      	str	r2, [r3, #0]
 800388e:	4b33      	ldr	r3, [pc, #204]	; (800395c <HAL_RCC_OscConfig+0x10a4>)
 8003890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003892:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003896:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800389a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800389e:	6011      	str	r1, [r2, #0]
 80038a0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80038a4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80038a8:	6812      	ldr	r2, [r2, #0]
 80038aa:	fa92 f1a2 	rbit	r1, r2
 80038ae:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80038b2:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80038b6:	6011      	str	r1, [r2, #0]
  return result;
 80038b8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80038bc:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80038c0:	6812      	ldr	r2, [r2, #0]
 80038c2:	fab2 f282 	clz	r2, r2
 80038c6:	b2d2      	uxtb	r2, r2
 80038c8:	f042 0220 	orr.w	r2, r2, #32
 80038cc:	b2d2      	uxtb	r2, r2
 80038ce:	f002 021f 	and.w	r2, r2, #31
 80038d2:	2101      	movs	r1, #1
 80038d4:	fa01 f202 	lsl.w	r2, r1, r2
 80038d8:	4013      	ands	r3, r2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d182      	bne.n	80037e4 <HAL_RCC_OscConfig+0xf2c>
 80038de:	e037      	b.n	8003950 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038e4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d101      	bne.n	80038f4 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e02e      	b.n	8003952 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80038f4:	4b19      	ldr	r3, [pc, #100]	; (800395c <HAL_RCC_OscConfig+0x10a4>)
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80038fc:	4b17      	ldr	r3, [pc, #92]	; (800395c <HAL_RCC_OscConfig+0x10a4>)
 80038fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003900:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003904:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003908:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800390c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003910:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	69db      	ldr	r3, [r3, #28]
 8003918:	429a      	cmp	r2, r3
 800391a:	d117      	bne.n	800394c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800391c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003920:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003924:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003928:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003930:	429a      	cmp	r2, r3
 8003932:	d10b      	bne.n	800394c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003934:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003938:	f003 020f 	and.w	r2, r3, #15
 800393c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003940:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003948:	429a      	cmp	r2, r3
 800394a:	d001      	beq.n	8003950 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e000      	b.n	8003952 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	40021000 	.word	0x40021000

08003960 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b09e      	sub	sp, #120	; 0x78
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800396a:	2300      	movs	r3, #0
 800396c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d101      	bne.n	8003978 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e162      	b.n	8003c3e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003978:	4b90      	ldr	r3, [pc, #576]	; (8003bbc <HAL_RCC_ClockConfig+0x25c>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0307 	and.w	r3, r3, #7
 8003980:	683a      	ldr	r2, [r7, #0]
 8003982:	429a      	cmp	r2, r3
 8003984:	d910      	bls.n	80039a8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003986:	4b8d      	ldr	r3, [pc, #564]	; (8003bbc <HAL_RCC_ClockConfig+0x25c>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f023 0207 	bic.w	r2, r3, #7
 800398e:	498b      	ldr	r1, [pc, #556]	; (8003bbc <HAL_RCC_ClockConfig+0x25c>)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	4313      	orrs	r3, r2
 8003994:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003996:	4b89      	ldr	r3, [pc, #548]	; (8003bbc <HAL_RCC_ClockConfig+0x25c>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0307 	and.w	r3, r3, #7
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d001      	beq.n	80039a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e14a      	b.n	8003c3e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d008      	beq.n	80039c6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039b4:	4b82      	ldr	r3, [pc, #520]	; (8003bc0 <HAL_RCC_ClockConfig+0x260>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	497f      	ldr	r1, [pc, #508]	; (8003bc0 <HAL_RCC_ClockConfig+0x260>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f000 80dc 	beq.w	8003b8c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d13c      	bne.n	8003a56 <HAL_RCC_ClockConfig+0xf6>
 80039dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039e0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039e4:	fa93 f3a3 	rbit	r3, r3
 80039e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80039ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ec:	fab3 f383 	clz	r3, r3
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	095b      	lsrs	r3, r3, #5
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	f043 0301 	orr.w	r3, r3, #1
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d102      	bne.n	8003a06 <HAL_RCC_ClockConfig+0xa6>
 8003a00:	4b6f      	ldr	r3, [pc, #444]	; (8003bc0 <HAL_RCC_ClockConfig+0x260>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	e00f      	b.n	8003a26 <HAL_RCC_ClockConfig+0xc6>
 8003a06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a0a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a0e:	fa93 f3a3 	rbit	r3, r3
 8003a12:	667b      	str	r3, [r7, #100]	; 0x64
 8003a14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a18:	663b      	str	r3, [r7, #96]	; 0x60
 8003a1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a1c:	fa93 f3a3 	rbit	r3, r3
 8003a20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a22:	4b67      	ldr	r3, [pc, #412]	; (8003bc0 <HAL_RCC_ClockConfig+0x260>)
 8003a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a2a:	65ba      	str	r2, [r7, #88]	; 0x58
 8003a2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a2e:	fa92 f2a2 	rbit	r2, r2
 8003a32:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003a34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003a36:	fab2 f282 	clz	r2, r2
 8003a3a:	b2d2      	uxtb	r2, r2
 8003a3c:	f042 0220 	orr.w	r2, r2, #32
 8003a40:	b2d2      	uxtb	r2, r2
 8003a42:	f002 021f 	and.w	r2, r2, #31
 8003a46:	2101      	movs	r1, #1
 8003a48:	fa01 f202 	lsl.w	r2, r1, r2
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d17b      	bne.n	8003b4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e0f3      	b.n	8003c3e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d13c      	bne.n	8003ad8 <HAL_RCC_ClockConfig+0x178>
 8003a5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a62:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a66:	fa93 f3a3 	rbit	r3, r3
 8003a6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003a6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a6e:	fab3 f383 	clz	r3, r3
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	095b      	lsrs	r3, r3, #5
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	f043 0301 	orr.w	r3, r3, #1
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d102      	bne.n	8003a88 <HAL_RCC_ClockConfig+0x128>
 8003a82:	4b4f      	ldr	r3, [pc, #316]	; (8003bc0 <HAL_RCC_ClockConfig+0x260>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	e00f      	b.n	8003aa8 <HAL_RCC_ClockConfig+0x148>
 8003a88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a8c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a90:	fa93 f3a3 	rbit	r3, r3
 8003a94:	647b      	str	r3, [r7, #68]	; 0x44
 8003a96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a9a:	643b      	str	r3, [r7, #64]	; 0x40
 8003a9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a9e:	fa93 f3a3 	rbit	r3, r3
 8003aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003aa4:	4b46      	ldr	r3, [pc, #280]	; (8003bc0 <HAL_RCC_ClockConfig+0x260>)
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003aac:	63ba      	str	r2, [r7, #56]	; 0x38
 8003aae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ab0:	fa92 f2a2 	rbit	r2, r2
 8003ab4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003ab6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ab8:	fab2 f282 	clz	r2, r2
 8003abc:	b2d2      	uxtb	r2, r2
 8003abe:	f042 0220 	orr.w	r2, r2, #32
 8003ac2:	b2d2      	uxtb	r2, r2
 8003ac4:	f002 021f 	and.w	r2, r2, #31
 8003ac8:	2101      	movs	r1, #1
 8003aca:	fa01 f202 	lsl.w	r2, r1, r2
 8003ace:	4013      	ands	r3, r2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d13a      	bne.n	8003b4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e0b2      	b.n	8003c3e <HAL_RCC_ClockConfig+0x2de>
 8003ad8:	2302      	movs	r3, #2
 8003ada:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ade:	fa93 f3a3 	rbit	r3, r3
 8003ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae6:	fab3 f383 	clz	r3, r3
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	095b      	lsrs	r3, r3, #5
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	f043 0301 	orr.w	r3, r3, #1
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d102      	bne.n	8003b00 <HAL_RCC_ClockConfig+0x1a0>
 8003afa:	4b31      	ldr	r3, [pc, #196]	; (8003bc0 <HAL_RCC_ClockConfig+0x260>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	e00d      	b.n	8003b1c <HAL_RCC_ClockConfig+0x1bc>
 8003b00:	2302      	movs	r3, #2
 8003b02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b06:	fa93 f3a3 	rbit	r3, r3
 8003b0a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	623b      	str	r3, [r7, #32]
 8003b10:	6a3b      	ldr	r3, [r7, #32]
 8003b12:	fa93 f3a3 	rbit	r3, r3
 8003b16:	61fb      	str	r3, [r7, #28]
 8003b18:	4b29      	ldr	r3, [pc, #164]	; (8003bc0 <HAL_RCC_ClockConfig+0x260>)
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1c:	2202      	movs	r2, #2
 8003b1e:	61ba      	str	r2, [r7, #24]
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	fa92 f2a2 	rbit	r2, r2
 8003b26:	617a      	str	r2, [r7, #20]
  return result;
 8003b28:	697a      	ldr	r2, [r7, #20]
 8003b2a:	fab2 f282 	clz	r2, r2
 8003b2e:	b2d2      	uxtb	r2, r2
 8003b30:	f042 0220 	orr.w	r2, r2, #32
 8003b34:	b2d2      	uxtb	r2, r2
 8003b36:	f002 021f 	and.w	r2, r2, #31
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b40:	4013      	ands	r3, r2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e079      	b.n	8003c3e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b4a:	4b1d      	ldr	r3, [pc, #116]	; (8003bc0 <HAL_RCC_ClockConfig+0x260>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f023 0203 	bic.w	r2, r3, #3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	491a      	ldr	r1, [pc, #104]	; (8003bc0 <HAL_RCC_ClockConfig+0x260>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b5c:	f7fc feea 	bl	8000934 <HAL_GetTick>
 8003b60:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b62:	e00a      	b.n	8003b7a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b64:	f7fc fee6 	bl	8000934 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e061      	b.n	8003c3e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b7a:	4b11      	ldr	r3, [pc, #68]	; (8003bc0 <HAL_RCC_ClockConfig+0x260>)
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f003 020c 	and.w	r2, r3, #12
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d1eb      	bne.n	8003b64 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b8c:	4b0b      	ldr	r3, [pc, #44]	; (8003bbc <HAL_RCC_ClockConfig+0x25c>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0307 	and.w	r3, r3, #7
 8003b94:	683a      	ldr	r2, [r7, #0]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d214      	bcs.n	8003bc4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b9a:	4b08      	ldr	r3, [pc, #32]	; (8003bbc <HAL_RCC_ClockConfig+0x25c>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f023 0207 	bic.w	r2, r3, #7
 8003ba2:	4906      	ldr	r1, [pc, #24]	; (8003bbc <HAL_RCC_ClockConfig+0x25c>)
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003baa:	4b04      	ldr	r3, [pc, #16]	; (8003bbc <HAL_RCC_ClockConfig+0x25c>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0307 	and.w	r3, r3, #7
 8003bb2:	683a      	ldr	r2, [r7, #0]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d005      	beq.n	8003bc4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e040      	b.n	8003c3e <HAL_RCC_ClockConfig+0x2de>
 8003bbc:	40022000 	.word	0x40022000
 8003bc0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d008      	beq.n	8003be2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bd0:	4b1d      	ldr	r3, [pc, #116]	; (8003c48 <HAL_RCC_ClockConfig+0x2e8>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	491a      	ldr	r1, [pc, #104]	; (8003c48 <HAL_RCC_ClockConfig+0x2e8>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0308 	and.w	r3, r3, #8
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d009      	beq.n	8003c02 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bee:	4b16      	ldr	r3, [pc, #88]	; (8003c48 <HAL_RCC_ClockConfig+0x2e8>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	4912      	ldr	r1, [pc, #72]	; (8003c48 <HAL_RCC_ClockConfig+0x2e8>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003c02:	f000 f829 	bl	8003c58 <HAL_RCC_GetSysClockFreq>
 8003c06:	4601      	mov	r1, r0
 8003c08:	4b0f      	ldr	r3, [pc, #60]	; (8003c48 <HAL_RCC_ClockConfig+0x2e8>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c10:	22f0      	movs	r2, #240	; 0xf0
 8003c12:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	fa92 f2a2 	rbit	r2, r2
 8003c1a:	60fa      	str	r2, [r7, #12]
  return result;
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	fab2 f282 	clz	r2, r2
 8003c22:	b2d2      	uxtb	r2, r2
 8003c24:	40d3      	lsrs	r3, r2
 8003c26:	4a09      	ldr	r2, [pc, #36]	; (8003c4c <HAL_RCC_ClockConfig+0x2ec>)
 8003c28:	5cd3      	ldrb	r3, [r2, r3]
 8003c2a:	fa21 f303 	lsr.w	r3, r1, r3
 8003c2e:	4a08      	ldr	r2, [pc, #32]	; (8003c50 <HAL_RCC_ClockConfig+0x2f0>)
 8003c30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003c32:	4b08      	ldr	r3, [pc, #32]	; (8003c54 <HAL_RCC_ClockConfig+0x2f4>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7fc fe38 	bl	80008ac <HAL_InitTick>
  
  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3778      	adds	r7, #120	; 0x78
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	40021000 	.word	0x40021000
 8003c4c:	08009c24 	.word	0x08009c24
 8003c50:	20000000 	.word	0x20000000
 8003c54:	20000004 	.word	0x20000004

08003c58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b08b      	sub	sp, #44	; 0x2c
 8003c5c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	61fb      	str	r3, [r7, #28]
 8003c62:	2300      	movs	r3, #0
 8003c64:	61bb      	str	r3, [r7, #24]
 8003c66:	2300      	movs	r3, #0
 8003c68:	627b      	str	r3, [r7, #36]	; 0x24
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003c72:	4b2a      	ldr	r3, [pc, #168]	; (8003d1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	f003 030c 	and.w	r3, r3, #12
 8003c7e:	2b04      	cmp	r3, #4
 8003c80:	d002      	beq.n	8003c88 <HAL_RCC_GetSysClockFreq+0x30>
 8003c82:	2b08      	cmp	r3, #8
 8003c84:	d003      	beq.n	8003c8e <HAL_RCC_GetSysClockFreq+0x36>
 8003c86:	e03f      	b.n	8003d08 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c88:	4b25      	ldr	r3, [pc, #148]	; (8003d20 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003c8a:	623b      	str	r3, [r7, #32]
      break;
 8003c8c:	e03f      	b.n	8003d0e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003c94:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003c98:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9a:	68ba      	ldr	r2, [r7, #8]
 8003c9c:	fa92 f2a2 	rbit	r2, r2
 8003ca0:	607a      	str	r2, [r7, #4]
  return result;
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	fab2 f282 	clz	r2, r2
 8003ca8:	b2d2      	uxtb	r2, r2
 8003caa:	40d3      	lsrs	r3, r2
 8003cac:	4a1d      	ldr	r2, [pc, #116]	; (8003d24 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003cae:	5cd3      	ldrb	r3, [r2, r3]
 8003cb0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003cb2:	4b1a      	ldr	r3, [pc, #104]	; (8003d1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb6:	f003 030f 	and.w	r3, r3, #15
 8003cba:	220f      	movs	r2, #15
 8003cbc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	fa92 f2a2 	rbit	r2, r2
 8003cc4:	60fa      	str	r2, [r7, #12]
  return result;
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	fab2 f282 	clz	r2, r2
 8003ccc:	b2d2      	uxtb	r2, r2
 8003cce:	40d3      	lsrs	r3, r2
 8003cd0:	4a15      	ldr	r2, [pc, #84]	; (8003d28 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003cd2:	5cd3      	ldrb	r3, [r2, r3]
 8003cd4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d008      	beq.n	8003cf2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003ce0:	4a0f      	ldr	r2, [pc, #60]	; (8003d20 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	fb02 f303 	mul.w	r3, r2, r3
 8003cee:	627b      	str	r3, [r7, #36]	; 0x24
 8003cf0:	e007      	b.n	8003d02 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003cf2:	4a0b      	ldr	r2, [pc, #44]	; (8003d20 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	fb02 f303 	mul.w	r3, r2, r3
 8003d00:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d04:	623b      	str	r3, [r7, #32]
      break;
 8003d06:	e002      	b.n	8003d0e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d08:	4b05      	ldr	r3, [pc, #20]	; (8003d20 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003d0a:	623b      	str	r3, [r7, #32]
      break;
 8003d0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d0e:	6a3b      	ldr	r3, [r7, #32]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	372c      	adds	r7, #44	; 0x2c
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr
 8003d1c:	40021000 	.word	0x40021000
 8003d20:	007a1200 	.word	0x007a1200
 8003d24:	08009c3c 	.word	0x08009c3c
 8003d28:	08009c4c 	.word	0x08009c4c

08003d2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d30:	4b03      	ldr	r3, [pc, #12]	; (8003d40 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d32:	681b      	ldr	r3, [r3, #0]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	20000000 	.word	0x20000000

08003d44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003d4a:	f7ff ffef 	bl	8003d2c <HAL_RCC_GetHCLKFreq>
 8003d4e:	4601      	mov	r1, r0
 8003d50:	4b0b      	ldr	r3, [pc, #44]	; (8003d80 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d58:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003d5c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	fa92 f2a2 	rbit	r2, r2
 8003d64:	603a      	str	r2, [r7, #0]
  return result;
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	fab2 f282 	clz	r2, r2
 8003d6c:	b2d2      	uxtb	r2, r2
 8003d6e:	40d3      	lsrs	r3, r2
 8003d70:	4a04      	ldr	r2, [pc, #16]	; (8003d84 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003d72:	5cd3      	ldrb	r3, [r2, r3]
 8003d74:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3708      	adds	r7, #8
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	40021000 	.word	0x40021000
 8003d84:	08009c34 	.word	0x08009c34

08003d88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003d8e:	f7ff ffcd 	bl	8003d2c <HAL_RCC_GetHCLKFreq>
 8003d92:	4601      	mov	r1, r0
 8003d94:	4b0b      	ldr	r3, [pc, #44]	; (8003dc4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003d9c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003da0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	fa92 f2a2 	rbit	r2, r2
 8003da8:	603a      	str	r2, [r7, #0]
  return result;
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	fab2 f282 	clz	r2, r2
 8003db0:	b2d2      	uxtb	r2, r2
 8003db2:	40d3      	lsrs	r3, r2
 8003db4:	4a04      	ldr	r2, [pc, #16]	; (8003dc8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003db6:	5cd3      	ldrb	r3, [r2, r3]
 8003db8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3708      	adds	r7, #8
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	40021000 	.word	0x40021000
 8003dc8:	08009c34 	.word	0x08009c34

08003dcc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b092      	sub	sp, #72	; 0x48
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f000 80d4 	beq.w	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003df0:	4b4e      	ldr	r3, [pc, #312]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003df2:	69db      	ldr	r3, [r3, #28]
 8003df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d10e      	bne.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dfc:	4b4b      	ldr	r3, [pc, #300]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dfe:	69db      	ldr	r3, [r3, #28]
 8003e00:	4a4a      	ldr	r2, [pc, #296]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e06:	61d3      	str	r3, [r2, #28]
 8003e08:	4b48      	ldr	r3, [pc, #288]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e0a:	69db      	ldr	r3, [r3, #28]
 8003e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e10:	60bb      	str	r3, [r7, #8]
 8003e12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e14:	2301      	movs	r3, #1
 8003e16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e1a:	4b45      	ldr	r3, [pc, #276]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d118      	bne.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e26:	4b42      	ldr	r3, [pc, #264]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a41      	ldr	r2, [pc, #260]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e30:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e32:	f7fc fd7f 	bl	8000934 <HAL_GetTick>
 8003e36:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e38:	e008      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e3a:	f7fc fd7b 	bl	8000934 <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	2b64      	cmp	r3, #100	; 0x64
 8003e46:	d901      	bls.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e1d6      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e4c:	4b38      	ldr	r3, [pc, #224]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d0f0      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e58:	4b34      	ldr	r3, [pc, #208]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
 8003e5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e60:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f000 8084 	beq.w	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d07c      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e78:	4b2c      	ldr	r3, [pc, #176]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e86:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8a:	fa93 f3a3 	rbit	r3, r3
 8003e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e92:	fab3 f383 	clz	r3, r3
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	461a      	mov	r2, r3
 8003e9a:	4b26      	ldr	r3, [pc, #152]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e9c:	4413      	add	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	6013      	str	r3, [r2, #0]
 8003ea6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003eaa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eae:	fa93 f3a3 	rbit	r3, r3
 8003eb2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003eb6:	fab3 f383 	clz	r3, r3
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	4b1d      	ldr	r3, [pc, #116]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ec0:	4413      	add	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003eca:	4a18      	ldr	r2, [pc, #96]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ece:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d04b      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eda:	f7fc fd2b 	bl	8000934 <HAL_GetTick>
 8003ede:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee0:	e00a      	b.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ee2:	f7fc fd27 	bl	8000934 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e180      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003ef8:	2302      	movs	r3, #2
 8003efa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efe:	fa93 f3a3 	rbit	r3, r3
 8003f02:	627b      	str	r3, [r7, #36]	; 0x24
 8003f04:	2302      	movs	r3, #2
 8003f06:	623b      	str	r3, [r7, #32]
 8003f08:	6a3b      	ldr	r3, [r7, #32]
 8003f0a:	fa93 f3a3 	rbit	r3, r3
 8003f0e:	61fb      	str	r3, [r7, #28]
  return result;
 8003f10:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f12:	fab3 f383 	clz	r3, r3
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	095b      	lsrs	r3, r3, #5
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	f043 0302 	orr.w	r3, r3, #2
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d108      	bne.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003f26:	4b01      	ldr	r3, [pc, #4]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	e00d      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003f2c:	40021000 	.word	0x40021000
 8003f30:	40007000 	.word	0x40007000
 8003f34:	10908100 	.word	0x10908100
 8003f38:	2302      	movs	r3, #2
 8003f3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	fa93 f3a3 	rbit	r3, r3
 8003f42:	617b      	str	r3, [r7, #20]
 8003f44:	4b9a      	ldr	r3, [pc, #616]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f48:	2202      	movs	r2, #2
 8003f4a:	613a      	str	r2, [r7, #16]
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	fa92 f2a2 	rbit	r2, r2
 8003f52:	60fa      	str	r2, [r7, #12]
  return result;
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	fab2 f282 	clz	r2, r2
 8003f5a:	b2d2      	uxtb	r2, r2
 8003f5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f60:	b2d2      	uxtb	r2, r2
 8003f62:	f002 021f 	and.w	r2, r2, #31
 8003f66:	2101      	movs	r1, #1
 8003f68:	fa01 f202 	lsl.w	r2, r1, r2
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d0b7      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003f72:	4b8f      	ldr	r3, [pc, #572]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	498c      	ldr	r1, [pc, #560]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f84:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d105      	bne.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f8c:	4b88      	ldr	r3, [pc, #544]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f8e:	69db      	ldr	r3, [r3, #28]
 8003f90:	4a87      	ldr	r2, [pc, #540]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f96:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d008      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fa4:	4b82      	ldr	r3, [pc, #520]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa8:	f023 0203 	bic.w	r2, r3, #3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	497f      	ldr	r1, [pc, #508]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d008      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fc2:	4b7b      	ldr	r3, [pc, #492]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	4978      	ldr	r1, [pc, #480]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0304 	and.w	r3, r3, #4
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d008      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fe0:	4b73      	ldr	r3, [pc, #460]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	4970      	ldr	r1, [pc, #448]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0320 	and.w	r3, r3, #32
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d008      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ffe:	4b6c      	ldr	r3, [pc, #432]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004002:	f023 0210 	bic.w	r2, r3, #16
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	4969      	ldr	r1, [pc, #420]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800400c:	4313      	orrs	r3, r2
 800400e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d008      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800401c:	4b64      	ldr	r3, [pc, #400]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004028:	4961      	ldr	r1, [pc, #388]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800402a:	4313      	orrs	r3, r2
 800402c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004036:	2b00      	cmp	r3, #0
 8004038:	d008      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800403a:	4b5d      	ldr	r3, [pc, #372]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800403c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403e:	f023 0220 	bic.w	r2, r3, #32
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	495a      	ldr	r1, [pc, #360]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004048:	4313      	orrs	r3, r2
 800404a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d008      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004058:	4b55      	ldr	r3, [pc, #340]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800405a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004064:	4952      	ldr	r1, [pc, #328]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004066:	4313      	orrs	r3, r2
 8004068:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0308 	and.w	r3, r3, #8
 8004072:	2b00      	cmp	r3, #0
 8004074:	d008      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004076:	4b4e      	ldr	r3, [pc, #312]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	494b      	ldr	r1, [pc, #300]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004084:	4313      	orrs	r3, r2
 8004086:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0310 	and.w	r3, r3, #16
 8004090:	2b00      	cmp	r3, #0
 8004092:	d008      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004094:	4b46      	ldr	r3, [pc, #280]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004098:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	4943      	ldr	r1, [pc, #268]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d008      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80040b2:	4b3f      	ldr	r3, [pc, #252]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040be:	493c      	ldr	r1, [pc, #240]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d008      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80040d0:	4b37      	ldr	r3, [pc, #220]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040dc:	4934      	ldr	r1, [pc, #208]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d008      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80040ee:	4b30      	ldr	r3, [pc, #192]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fa:	492d      	ldr	r1, [pc, #180]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d008      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800410c:	4b28      	ldr	r3, [pc, #160]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800410e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004110:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004118:	4925      	ldr	r1, [pc, #148]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800411a:	4313      	orrs	r3, r2
 800411c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d008      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800412a:	4b21      	ldr	r3, [pc, #132]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800412c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004136:	491e      	ldr	r1, [pc, #120]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004138:	4313      	orrs	r3, r2
 800413a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d008      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004148:	4b19      	ldr	r3, [pc, #100]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800414a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004154:	4916      	ldr	r1, [pc, #88]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004156:	4313      	orrs	r3, r2
 8004158:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d008      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004166:	4b12      	ldr	r3, [pc, #72]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004172:	490f      	ldr	r1, [pc, #60]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004174:	4313      	orrs	r3, r2
 8004176:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d008      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004184:	4b0a      	ldr	r3, [pc, #40]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004188:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004190:	4907      	ldr	r1, [pc, #28]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004192:	4313      	orrs	r3, r2
 8004194:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00c      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80041a2:	4b03      	ldr	r3, [pc, #12]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	e002      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80041ae:	bf00      	nop
 80041b0:	40021000 	.word	0x40021000
 80041b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041b6:	4913      	ldr	r1, [pc, #76]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d008      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80041c8:	4b0e      	ldr	r3, [pc, #56]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80041ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041d4:	490b      	ldr	r1, [pc, #44]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d008      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80041e6:	4b07      	ldr	r3, [pc, #28]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80041e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ea:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041f2:	4904      	ldr	r1, [pc, #16]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3748      	adds	r7, #72	; 0x48
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	40021000 	.word	0x40021000

08004208 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e073      	b.n	8004306 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	7f5b      	ldrb	r3, [r3, #29]
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b00      	cmp	r3, #0
 8004226:	d105      	bne.n	8004234 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f7fc fa08 	bl	8000644 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2202      	movs	r2, #2
 8004238:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	f003 0310 	and.w	r3, r3, #16
 8004244:	2b10      	cmp	r3, #16
 8004246:	d055      	beq.n	80042f4 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	22ca      	movs	r2, #202	; 0xca
 800424e:	625a      	str	r2, [r3, #36]	; 0x24
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2253      	movs	r2, #83	; 0x53
 8004256:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 f87f 	bl	800435c <RTC_EnterInitMode>
 800425e:	4603      	mov	r3, r0
 8004260:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004262:	7bfb      	ldrb	r3, [r7, #15]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d12c      	bne.n	80042c2 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	6812      	ldr	r2, [r2, #0]
 8004272:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004276:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800427a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	6899      	ldr	r1, [r3, #8]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685a      	ldr	r2, [r3, #4]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	431a      	orrs	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	431a      	orrs	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	430a      	orrs	r2, r1
 8004298:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	68d2      	ldr	r2, [r2, #12]
 80042a2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6919      	ldr	r1, [r3, #16]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	041a      	lsls	r2, r3, #16
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	430a      	orrs	r2, r1
 80042b6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 f886 	bl	80043ca <RTC_ExitInitMode>
 80042be:	4603      	mov	r3, r0
 80042c0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80042c2:	7bfb      	ldrb	r3, [r7, #15]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d110      	bne.n	80042ea <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80042d6:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	699a      	ldr	r2, [r3, #24]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	22ff      	movs	r2, #255	; 0xff
 80042f0:	625a      	str	r2, [r3, #36]	; 0x24
 80042f2:	e001      	b.n	80042f8 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80042f4:	2300      	movs	r3, #0
 80042f6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80042f8:	7bfb      	ldrb	r3, [r7, #15]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d102      	bne.n	8004304 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2201      	movs	r2, #1
 8004302:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8004304:	7bfb      	ldrb	r3, [r7, #15]
}
 8004306:	4618      	mov	r0, r3
 8004308:	3710      	adds	r7, #16
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
	...

08004310 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004318:	2300      	movs	r3, #0
 800431a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a0d      	ldr	r2, [pc, #52]	; (8004358 <HAL_RTC_WaitForSynchro+0x48>)
 8004322:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004324:	f7fc fb06 	bl	8000934 <HAL_GetTick>
 8004328:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800432a:	e009      	b.n	8004340 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800432c:	f7fc fb02 	bl	8000934 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800433a:	d901      	bls.n	8004340 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e007      	b.n	8004350 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	f003 0320 	and.w	r3, r3, #32
 800434a:	2b00      	cmp	r3, #0
 800434c:	d0ee      	beq.n	800432c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	0001ff5f 	.word	0x0001ff5f

0800435c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004364:	2300      	movs	r3, #0
 8004366:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004368:	2300      	movs	r3, #0
 800436a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004376:	2b00      	cmp	r3, #0
 8004378:	d122      	bne.n	80043c0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68da      	ldr	r2, [r3, #12]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004388:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800438a:	f7fc fad3 	bl	8000934 <HAL_GetTick>
 800438e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004390:	e00c      	b.n	80043ac <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004392:	f7fc facf 	bl	8000934 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043a0:	d904      	bls.n	80043ac <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2204      	movs	r2, #4
 80043a6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d102      	bne.n	80043c0 <RTC_EnterInitMode+0x64>
 80043ba:	7bfb      	ldrb	r3, [r7, #15]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d1e8      	bne.n	8004392 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80043c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b084      	sub	sp, #16
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043d2:	2300      	movs	r3, #0
 80043d4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68da      	ldr	r2, [r3, #12]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043e4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f003 0320 	and.w	r3, r3, #32
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d10a      	bne.n	800440a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f7ff ff8b 	bl	8004310 <HAL_RTC_WaitForSynchro>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d004      	beq.n	800440a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2204      	movs	r2, #4
 8004404:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800440a:	7bfb      	ldrb	r3, [r7, #15]
}
 800440c:	4618      	mov	r0, r3
 800440e:	3710      	adds	r7, #16
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e09d      	b.n	8004562 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442a:	2b00      	cmp	r3, #0
 800442c:	d108      	bne.n	8004440 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004436:	d009      	beq.n	800444c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	61da      	str	r2, [r3, #28]
 800443e:	e005      	b.n	800444c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b00      	cmp	r3, #0
 800445c:	d106      	bne.n	800446c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f7fc f912 	bl	8000690 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2202      	movs	r2, #2
 8004470:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004482:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800448c:	d902      	bls.n	8004494 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800448e:	2300      	movs	r3, #0
 8004490:	60fb      	str	r3, [r7, #12]
 8004492:	e002      	b.n	800449a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004494:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004498:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80044a2:	d007      	beq.n	80044b4 <HAL_SPI_Init+0xa0>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80044ac:	d002      	beq.n	80044b4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80044c4:	431a      	orrs	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	431a      	orrs	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	f003 0301 	and.w	r3, r3, #1
 80044d8:	431a      	orrs	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	699b      	ldr	r3, [r3, #24]
 80044de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044e2:	431a      	orrs	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	69db      	ldr	r3, [r3, #28]
 80044e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044ec:	431a      	orrs	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044f6:	ea42 0103 	orr.w	r1, r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	430a      	orrs	r2, r1
 8004508:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	0c1b      	lsrs	r3, r3, #16
 8004510:	f003 0204 	and.w	r2, r3, #4
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004518:	f003 0310 	and.w	r3, r3, #16
 800451c:	431a      	orrs	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004522:	f003 0308 	and.w	r3, r3, #8
 8004526:	431a      	orrs	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004530:	ea42 0103 	orr.w	r1, r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	430a      	orrs	r2, r1
 8004540:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	69da      	ldr	r2, [r3, #28]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004550:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3710      	adds	r7, #16
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b08a      	sub	sp, #40	; 0x28
 800456e:	af00      	add	r7, sp, #0
 8004570:	60f8      	str	r0, [r7, #12]
 8004572:	60b9      	str	r1, [r7, #8]
 8004574:	607a      	str	r2, [r7, #4]
 8004576:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004578:	2301      	movs	r3, #1
 800457a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800457c:	2300      	movs	r3, #0
 800457e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004588:	2b01      	cmp	r3, #1
 800458a:	d101      	bne.n	8004590 <HAL_SPI_TransmitReceive+0x26>
 800458c:	2302      	movs	r3, #2
 800458e:	e20a      	b.n	80049a6 <HAL_SPI_TransmitReceive+0x43c>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004598:	f7fc f9cc 	bl	8000934 <HAL_GetTick>
 800459c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80045a4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80045ac:	887b      	ldrh	r3, [r7, #2]
 80045ae:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80045b0:	887b      	ldrh	r3, [r7, #2]
 80045b2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80045b4:	7efb      	ldrb	r3, [r7, #27]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d00e      	beq.n	80045d8 <HAL_SPI_TransmitReceive+0x6e>
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045c0:	d106      	bne.n	80045d0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d102      	bne.n	80045d0 <HAL_SPI_TransmitReceive+0x66>
 80045ca:	7efb      	ldrb	r3, [r7, #27]
 80045cc:	2b04      	cmp	r3, #4
 80045ce:	d003      	beq.n	80045d8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80045d0:	2302      	movs	r3, #2
 80045d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80045d6:	e1e0      	b.n	800499a <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d005      	beq.n	80045ea <HAL_SPI_TransmitReceive+0x80>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d002      	beq.n	80045ea <HAL_SPI_TransmitReceive+0x80>
 80045e4:	887b      	ldrh	r3, [r7, #2]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d103      	bne.n	80045f2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80045f0:	e1d3      	b.n	800499a <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b04      	cmp	r3, #4
 80045fc:	d003      	beq.n	8004606 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2205      	movs	r2, #5
 8004602:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	887a      	ldrh	r2, [r7, #2]
 8004616:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	887a      	ldrh	r2, [r7, #2]
 800461e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	68ba      	ldr	r2, [r7, #8]
 8004626:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	887a      	ldrh	r2, [r7, #2]
 800462c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	887a      	ldrh	r2, [r7, #2]
 8004632:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004648:	d802      	bhi.n	8004650 <HAL_SPI_TransmitReceive+0xe6>
 800464a:	8a3b      	ldrh	r3, [r7, #16]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d908      	bls.n	8004662 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	685a      	ldr	r2, [r3, #4]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800465e:	605a      	str	r2, [r3, #4]
 8004660:	e007      	b.n	8004672 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	685a      	ldr	r2, [r3, #4]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004670:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800467c:	2b40      	cmp	r3, #64	; 0x40
 800467e:	d007      	beq.n	8004690 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800468e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004698:	f240 8081 	bls.w	800479e <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d002      	beq.n	80046aa <HAL_SPI_TransmitReceive+0x140>
 80046a4:	8a7b      	ldrh	r3, [r7, #18]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d16d      	bne.n	8004786 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ae:	881a      	ldrh	r2, [r3, #0]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ba:	1c9a      	adds	r2, r3, #2
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	3b01      	subs	r3, #1
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046ce:	e05a      	b.n	8004786 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d11b      	bne.n	8004716 <HAL_SPI_TransmitReceive+0x1ac>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d016      	beq.n	8004716 <HAL_SPI_TransmitReceive+0x1ac>
 80046e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d113      	bne.n	8004716 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f2:	881a      	ldrh	r2, [r3, #0]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fe:	1c9a      	adds	r2, r3, #2
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004708:	b29b      	uxth	r3, r3
 800470a:	3b01      	subs	r3, #1
 800470c:	b29a      	uxth	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004712:	2300      	movs	r3, #0
 8004714:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f003 0301 	and.w	r3, r3, #1
 8004720:	2b01      	cmp	r3, #1
 8004722:	d11c      	bne.n	800475e <HAL_SPI_TransmitReceive+0x1f4>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800472a:	b29b      	uxth	r3, r3
 800472c:	2b00      	cmp	r3, #0
 800472e:	d016      	beq.n	800475e <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68da      	ldr	r2, [r3, #12]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473a:	b292      	uxth	r2, r2
 800473c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004742:	1c9a      	adds	r2, r3, #2
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800474e:	b29b      	uxth	r3, r3
 8004750:	3b01      	subs	r3, #1
 8004752:	b29a      	uxth	r2, r3
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800475a:	2301      	movs	r3, #1
 800475c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800475e:	f7fc f8e9 	bl	8000934 <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800476a:	429a      	cmp	r2, r3
 800476c:	d80b      	bhi.n	8004786 <HAL_SPI_TransmitReceive+0x21c>
 800476e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004774:	d007      	beq.n	8004786 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004784:	e109      	b.n	800499a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800478a:	b29b      	uxth	r3, r3
 800478c:	2b00      	cmp	r3, #0
 800478e:	d19f      	bne.n	80046d0 <HAL_SPI_TransmitReceive+0x166>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004796:	b29b      	uxth	r3, r3
 8004798:	2b00      	cmp	r3, #0
 800479a:	d199      	bne.n	80046d0 <HAL_SPI_TransmitReceive+0x166>
 800479c:	e0e3      	b.n	8004966 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d003      	beq.n	80047ae <HAL_SPI_TransmitReceive+0x244>
 80047a6:	8a7b      	ldrh	r3, [r7, #18]
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	f040 80cf 	bne.w	800494c <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d912      	bls.n	80047de <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047bc:	881a      	ldrh	r2, [r3, #0]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c8:	1c9a      	adds	r2, r3, #2
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	3b02      	subs	r3, #2
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80047dc:	e0b6      	b.n	800494c <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	330c      	adds	r3, #12
 80047e8:	7812      	ldrb	r2, [r2, #0]
 80047ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f0:	1c5a      	adds	r2, r3, #1
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	3b01      	subs	r3, #1
 80047fe:	b29a      	uxth	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004804:	e0a2      	b.n	800494c <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	2b02      	cmp	r3, #2
 8004812:	d134      	bne.n	800487e <HAL_SPI_TransmitReceive+0x314>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004818:	b29b      	uxth	r3, r3
 800481a:	2b00      	cmp	r3, #0
 800481c:	d02f      	beq.n	800487e <HAL_SPI_TransmitReceive+0x314>
 800481e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004820:	2b01      	cmp	r3, #1
 8004822:	d12c      	bne.n	800487e <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004828:	b29b      	uxth	r3, r3
 800482a:	2b01      	cmp	r3, #1
 800482c:	d912      	bls.n	8004854 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004832:	881a      	ldrh	r2, [r3, #0]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483e:	1c9a      	adds	r2, r3, #2
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004848:	b29b      	uxth	r3, r3
 800484a:	3b02      	subs	r3, #2
 800484c:	b29a      	uxth	r2, r3
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004852:	e012      	b.n	800487a <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	330c      	adds	r3, #12
 800485e:	7812      	ldrb	r2, [r2, #0]
 8004860:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004866:	1c5a      	adds	r2, r3, #1
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004870:	b29b      	uxth	r3, r3
 8004872:	3b01      	subs	r3, #1
 8004874:	b29a      	uxth	r2, r3
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800487a:	2300      	movs	r3, #0
 800487c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f003 0301 	and.w	r3, r3, #1
 8004888:	2b01      	cmp	r3, #1
 800488a:	d148      	bne.n	800491e <HAL_SPI_TransmitReceive+0x3b4>
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004892:	b29b      	uxth	r3, r3
 8004894:	2b00      	cmp	r3, #0
 8004896:	d042      	beq.n	800491e <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800489e:	b29b      	uxth	r3, r3
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d923      	bls.n	80048ec <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68da      	ldr	r2, [r3, #12]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ae:	b292      	uxth	r2, r2
 80048b0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b6:	1c9a      	adds	r2, r3, #2
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	3b02      	subs	r3, #2
 80048c6:	b29a      	uxth	r2, r3
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d81f      	bhi.n	800491a <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	685a      	ldr	r2, [r3, #4]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80048e8:	605a      	str	r2, [r3, #4]
 80048ea:	e016      	b.n	800491a <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f103 020c 	add.w	r2, r3, #12
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f8:	7812      	ldrb	r2, [r2, #0]
 80048fa:	b2d2      	uxtb	r2, r2
 80048fc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004902:	1c5a      	adds	r2, r3, #1
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800490e:	b29b      	uxth	r3, r3
 8004910:	3b01      	subs	r3, #1
 8004912:	b29a      	uxth	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800491a:	2301      	movs	r3, #1
 800491c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800491e:	f7fc f809 	bl	8000934 <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800492a:	429a      	cmp	r2, r3
 800492c:	d803      	bhi.n	8004936 <HAL_SPI_TransmitReceive+0x3cc>
 800492e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004934:	d102      	bne.n	800493c <HAL_SPI_TransmitReceive+0x3d2>
 8004936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004938:	2b00      	cmp	r3, #0
 800493a:	d107      	bne.n	800494c <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800494a:	e026      	b.n	800499a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004950:	b29b      	uxth	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	f47f af57 	bne.w	8004806 <HAL_SPI_TransmitReceive+0x29c>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800495e:	b29b      	uxth	r3, r3
 8004960:	2b00      	cmp	r3, #0
 8004962:	f47f af50 	bne.w	8004806 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004966:	69fa      	ldr	r2, [r7, #28]
 8004968:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f000 f93e 	bl	8004bec <SPI_EndRxTxTransaction>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d005      	beq.n	8004982 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2220      	movs	r2, #32
 8004980:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004986:	2b00      	cmp	r3, #0
 8004988:	d003      	beq.n	8004992 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004990:	e003      	b.n	800499a <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2201      	movs	r2, #1
 8004996:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80049a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3728      	adds	r7, #40	; 0x28
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
	...

080049b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b088      	sub	sp, #32
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	603b      	str	r3, [r7, #0]
 80049bc:	4613      	mov	r3, r2
 80049be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80049c0:	f7fb ffb8 	bl	8000934 <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c8:	1a9b      	subs	r3, r3, r2
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	4413      	add	r3, r2
 80049ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80049d0:	f7fb ffb0 	bl	8000934 <HAL_GetTick>
 80049d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80049d6:	4b39      	ldr	r3, [pc, #228]	; (8004abc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	015b      	lsls	r3, r3, #5
 80049dc:	0d1b      	lsrs	r3, r3, #20
 80049de:	69fa      	ldr	r2, [r7, #28]
 80049e0:	fb02 f303 	mul.w	r3, r2, r3
 80049e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049e6:	e054      	b.n	8004a92 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ee:	d050      	beq.n	8004a92 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80049f0:	f7fb ffa0 	bl	8000934 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	69fa      	ldr	r2, [r7, #28]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d902      	bls.n	8004a06 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d13d      	bne.n	8004a82 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	685a      	ldr	r2, [r3, #4]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a1e:	d111      	bne.n	8004a44 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a28:	d004      	beq.n	8004a34 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a32:	d107      	bne.n	8004a44 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a4c:	d10f      	bne.n	8004a6e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a5c:	601a      	str	r2, [r3, #0]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e017      	b.n	8004ab2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d101      	bne.n	8004a8c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	689a      	ldr	r2, [r3, #8]
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	68ba      	ldr	r2, [r7, #8]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	bf0c      	ite	eq
 8004aa2:	2301      	moveq	r3, #1
 8004aa4:	2300      	movne	r3, #0
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	79fb      	ldrb	r3, [r7, #7]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d19b      	bne.n	80049e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3720      	adds	r7, #32
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	20000000 	.word	0x20000000

08004ac0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b08a      	sub	sp, #40	; 0x28
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
 8004acc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004ad2:	f7fb ff2f 	bl	8000934 <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ada:	1a9b      	subs	r3, r3, r2
 8004adc:	683a      	ldr	r2, [r7, #0]
 8004ade:	4413      	add	r3, r2
 8004ae0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004ae2:	f7fb ff27 	bl	8000934 <HAL_GetTick>
 8004ae6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	330c      	adds	r3, #12
 8004aee:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004af0:	4b3d      	ldr	r3, [pc, #244]	; (8004be8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	4613      	mov	r3, r2
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	4413      	add	r3, r2
 8004afa:	00da      	lsls	r2, r3, #3
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	0d1b      	lsrs	r3, r3, #20
 8004b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b02:	fb02 f303 	mul.w	r3, r2, r3
 8004b06:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004b08:	e060      	b.n	8004bcc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004b10:	d107      	bne.n	8004b22 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d104      	bne.n	8004b22 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004b20:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b28:	d050      	beq.n	8004bcc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b2a:	f7fb ff03 	bl	8000934 <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	6a3b      	ldr	r3, [r7, #32]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d902      	bls.n	8004b40 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d13d      	bne.n	8004bbc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	685a      	ldr	r2, [r3, #4]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b4e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b58:	d111      	bne.n	8004b7e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b62:	d004      	beq.n	8004b6e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b6c:	d107      	bne.n	8004b7e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b7c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b86:	d10f      	bne.n	8004ba8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b96:	601a      	str	r2, [r3, #0]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ba6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e010      	b.n	8004bde <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	689a      	ldr	r2, [r3, #8]
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d196      	bne.n	8004b0a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3728      	adds	r7, #40	; 0x28
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	20000000 	.word	0x20000000

08004bec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af02      	add	r7, sp, #8
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	9300      	str	r3, [sp, #0]
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f7ff ff5b 	bl	8004ac0 <SPI_WaitFifoStateUntilTimeout>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d007      	beq.n	8004c20 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c14:	f043 0220 	orr.w	r2, r3, #32
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e027      	b.n	8004c70 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	9300      	str	r3, [sp, #0]
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	2200      	movs	r2, #0
 8004c28:	2180      	movs	r1, #128	; 0x80
 8004c2a:	68f8      	ldr	r0, [r7, #12]
 8004c2c:	f7ff fec0 	bl	80049b0 <SPI_WaitFlagStateUntilTimeout>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d007      	beq.n	8004c46 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c3a:	f043 0220 	orr.w	r2, r3, #32
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e014      	b.n	8004c70 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	9300      	str	r3, [sp, #0]
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f7ff ff34 	bl	8004ac0 <SPI_WaitFifoStateUntilTimeout>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d007      	beq.n	8004c6e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c62:	f043 0220 	orr.w	r2, r3, #32
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e000      	b.n	8004c70 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e040      	b.n	8004d0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d106      	bne.n	8004ca0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f7fb fd3c 	bl	8000718 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2224      	movs	r2, #36	; 0x24
 8004ca4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f022 0201 	bic.w	r2, r2, #1
 8004cb4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 f82c 	bl	8004d14 <UART_SetConfig>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d101      	bne.n	8004cc6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e022      	b.n	8004d0c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d002      	beq.n	8004cd4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 f9f4 	bl	80050bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	685a      	ldr	r2, [r3, #4]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ce2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	689a      	ldr	r2, [r3, #8]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cf2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f042 0201 	orr.w	r2, r2, #1
 8004d02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f000 fa7b 	bl	8005200 <UART_CheckIdleState>
 8004d0a:	4603      	mov	r3, r0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3708      	adds	r7, #8
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b088      	sub	sp, #32
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	689a      	ldr	r2, [r3, #8]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	431a      	orrs	r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	431a      	orrs	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	69db      	ldr	r3, [r3, #28]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	4b92      	ldr	r3, [pc, #584]	; (8004f88 <UART_SetConfig+0x274>)
 8004d40:	4013      	ands	r3, r2
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	6812      	ldr	r2, [r2, #0]
 8004d46:	6979      	ldr	r1, [r7, #20]
 8004d48:	430b      	orrs	r3, r1
 8004d4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	68da      	ldr	r2, [r3, #12]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a1b      	ldr	r3, [r3, #32]
 8004d6c:	697a      	ldr	r2, [r7, #20]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	697a      	ldr	r2, [r7, #20]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a80      	ldr	r2, [pc, #512]	; (8004f8c <UART_SetConfig+0x278>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d120      	bne.n	8004dd2 <UART_SetConfig+0xbe>
 8004d90:	4b7f      	ldr	r3, [pc, #508]	; (8004f90 <UART_SetConfig+0x27c>)
 8004d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d94:	f003 0303 	and.w	r3, r3, #3
 8004d98:	2b03      	cmp	r3, #3
 8004d9a:	d817      	bhi.n	8004dcc <UART_SetConfig+0xb8>
 8004d9c:	a201      	add	r2, pc, #4	; (adr r2, 8004da4 <UART_SetConfig+0x90>)
 8004d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da2:	bf00      	nop
 8004da4:	08004db5 	.word	0x08004db5
 8004da8:	08004dc1 	.word	0x08004dc1
 8004dac:	08004dc7 	.word	0x08004dc7
 8004db0:	08004dbb 	.word	0x08004dbb
 8004db4:	2301      	movs	r3, #1
 8004db6:	77fb      	strb	r3, [r7, #31]
 8004db8:	e0b5      	b.n	8004f26 <UART_SetConfig+0x212>
 8004dba:	2302      	movs	r3, #2
 8004dbc:	77fb      	strb	r3, [r7, #31]
 8004dbe:	e0b2      	b.n	8004f26 <UART_SetConfig+0x212>
 8004dc0:	2304      	movs	r3, #4
 8004dc2:	77fb      	strb	r3, [r7, #31]
 8004dc4:	e0af      	b.n	8004f26 <UART_SetConfig+0x212>
 8004dc6:	2308      	movs	r3, #8
 8004dc8:	77fb      	strb	r3, [r7, #31]
 8004dca:	e0ac      	b.n	8004f26 <UART_SetConfig+0x212>
 8004dcc:	2310      	movs	r3, #16
 8004dce:	77fb      	strb	r3, [r7, #31]
 8004dd0:	e0a9      	b.n	8004f26 <UART_SetConfig+0x212>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a6f      	ldr	r2, [pc, #444]	; (8004f94 <UART_SetConfig+0x280>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d124      	bne.n	8004e26 <UART_SetConfig+0x112>
 8004ddc:	4b6c      	ldr	r3, [pc, #432]	; (8004f90 <UART_SetConfig+0x27c>)
 8004dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004de4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004de8:	d011      	beq.n	8004e0e <UART_SetConfig+0xfa>
 8004dea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004dee:	d817      	bhi.n	8004e20 <UART_SetConfig+0x10c>
 8004df0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004df4:	d011      	beq.n	8004e1a <UART_SetConfig+0x106>
 8004df6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004dfa:	d811      	bhi.n	8004e20 <UART_SetConfig+0x10c>
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d003      	beq.n	8004e08 <UART_SetConfig+0xf4>
 8004e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e04:	d006      	beq.n	8004e14 <UART_SetConfig+0x100>
 8004e06:	e00b      	b.n	8004e20 <UART_SetConfig+0x10c>
 8004e08:	2300      	movs	r3, #0
 8004e0a:	77fb      	strb	r3, [r7, #31]
 8004e0c:	e08b      	b.n	8004f26 <UART_SetConfig+0x212>
 8004e0e:	2302      	movs	r3, #2
 8004e10:	77fb      	strb	r3, [r7, #31]
 8004e12:	e088      	b.n	8004f26 <UART_SetConfig+0x212>
 8004e14:	2304      	movs	r3, #4
 8004e16:	77fb      	strb	r3, [r7, #31]
 8004e18:	e085      	b.n	8004f26 <UART_SetConfig+0x212>
 8004e1a:	2308      	movs	r3, #8
 8004e1c:	77fb      	strb	r3, [r7, #31]
 8004e1e:	e082      	b.n	8004f26 <UART_SetConfig+0x212>
 8004e20:	2310      	movs	r3, #16
 8004e22:	77fb      	strb	r3, [r7, #31]
 8004e24:	e07f      	b.n	8004f26 <UART_SetConfig+0x212>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a5b      	ldr	r2, [pc, #364]	; (8004f98 <UART_SetConfig+0x284>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d124      	bne.n	8004e7a <UART_SetConfig+0x166>
 8004e30:	4b57      	ldr	r3, [pc, #348]	; (8004f90 <UART_SetConfig+0x27c>)
 8004e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e34:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004e38:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004e3c:	d011      	beq.n	8004e62 <UART_SetConfig+0x14e>
 8004e3e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004e42:	d817      	bhi.n	8004e74 <UART_SetConfig+0x160>
 8004e44:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004e48:	d011      	beq.n	8004e6e <UART_SetConfig+0x15a>
 8004e4a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004e4e:	d811      	bhi.n	8004e74 <UART_SetConfig+0x160>
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d003      	beq.n	8004e5c <UART_SetConfig+0x148>
 8004e54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e58:	d006      	beq.n	8004e68 <UART_SetConfig+0x154>
 8004e5a:	e00b      	b.n	8004e74 <UART_SetConfig+0x160>
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	77fb      	strb	r3, [r7, #31]
 8004e60:	e061      	b.n	8004f26 <UART_SetConfig+0x212>
 8004e62:	2302      	movs	r3, #2
 8004e64:	77fb      	strb	r3, [r7, #31]
 8004e66:	e05e      	b.n	8004f26 <UART_SetConfig+0x212>
 8004e68:	2304      	movs	r3, #4
 8004e6a:	77fb      	strb	r3, [r7, #31]
 8004e6c:	e05b      	b.n	8004f26 <UART_SetConfig+0x212>
 8004e6e:	2308      	movs	r3, #8
 8004e70:	77fb      	strb	r3, [r7, #31]
 8004e72:	e058      	b.n	8004f26 <UART_SetConfig+0x212>
 8004e74:	2310      	movs	r3, #16
 8004e76:	77fb      	strb	r3, [r7, #31]
 8004e78:	e055      	b.n	8004f26 <UART_SetConfig+0x212>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a47      	ldr	r2, [pc, #284]	; (8004f9c <UART_SetConfig+0x288>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d124      	bne.n	8004ece <UART_SetConfig+0x1ba>
 8004e84:	4b42      	ldr	r3, [pc, #264]	; (8004f90 <UART_SetConfig+0x27c>)
 8004e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e88:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004e8c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e90:	d011      	beq.n	8004eb6 <UART_SetConfig+0x1a2>
 8004e92:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e96:	d817      	bhi.n	8004ec8 <UART_SetConfig+0x1b4>
 8004e98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e9c:	d011      	beq.n	8004ec2 <UART_SetConfig+0x1ae>
 8004e9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ea2:	d811      	bhi.n	8004ec8 <UART_SetConfig+0x1b4>
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d003      	beq.n	8004eb0 <UART_SetConfig+0x19c>
 8004ea8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004eac:	d006      	beq.n	8004ebc <UART_SetConfig+0x1a8>
 8004eae:	e00b      	b.n	8004ec8 <UART_SetConfig+0x1b4>
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	77fb      	strb	r3, [r7, #31]
 8004eb4:	e037      	b.n	8004f26 <UART_SetConfig+0x212>
 8004eb6:	2302      	movs	r3, #2
 8004eb8:	77fb      	strb	r3, [r7, #31]
 8004eba:	e034      	b.n	8004f26 <UART_SetConfig+0x212>
 8004ebc:	2304      	movs	r3, #4
 8004ebe:	77fb      	strb	r3, [r7, #31]
 8004ec0:	e031      	b.n	8004f26 <UART_SetConfig+0x212>
 8004ec2:	2308      	movs	r3, #8
 8004ec4:	77fb      	strb	r3, [r7, #31]
 8004ec6:	e02e      	b.n	8004f26 <UART_SetConfig+0x212>
 8004ec8:	2310      	movs	r3, #16
 8004eca:	77fb      	strb	r3, [r7, #31]
 8004ecc:	e02b      	b.n	8004f26 <UART_SetConfig+0x212>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a33      	ldr	r2, [pc, #204]	; (8004fa0 <UART_SetConfig+0x28c>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d124      	bne.n	8004f22 <UART_SetConfig+0x20e>
 8004ed8:	4b2d      	ldr	r3, [pc, #180]	; (8004f90 <UART_SetConfig+0x27c>)
 8004eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004edc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004ee0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004ee4:	d011      	beq.n	8004f0a <UART_SetConfig+0x1f6>
 8004ee6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004eea:	d817      	bhi.n	8004f1c <UART_SetConfig+0x208>
 8004eec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ef0:	d011      	beq.n	8004f16 <UART_SetConfig+0x202>
 8004ef2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ef6:	d811      	bhi.n	8004f1c <UART_SetConfig+0x208>
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d003      	beq.n	8004f04 <UART_SetConfig+0x1f0>
 8004efc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f00:	d006      	beq.n	8004f10 <UART_SetConfig+0x1fc>
 8004f02:	e00b      	b.n	8004f1c <UART_SetConfig+0x208>
 8004f04:	2300      	movs	r3, #0
 8004f06:	77fb      	strb	r3, [r7, #31]
 8004f08:	e00d      	b.n	8004f26 <UART_SetConfig+0x212>
 8004f0a:	2302      	movs	r3, #2
 8004f0c:	77fb      	strb	r3, [r7, #31]
 8004f0e:	e00a      	b.n	8004f26 <UART_SetConfig+0x212>
 8004f10:	2304      	movs	r3, #4
 8004f12:	77fb      	strb	r3, [r7, #31]
 8004f14:	e007      	b.n	8004f26 <UART_SetConfig+0x212>
 8004f16:	2308      	movs	r3, #8
 8004f18:	77fb      	strb	r3, [r7, #31]
 8004f1a:	e004      	b.n	8004f26 <UART_SetConfig+0x212>
 8004f1c:	2310      	movs	r3, #16
 8004f1e:	77fb      	strb	r3, [r7, #31]
 8004f20:	e001      	b.n	8004f26 <UART_SetConfig+0x212>
 8004f22:	2310      	movs	r3, #16
 8004f24:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	69db      	ldr	r3, [r3, #28]
 8004f2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f2e:	d16b      	bne.n	8005008 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8004f30:	7ffb      	ldrb	r3, [r7, #31]
 8004f32:	2b08      	cmp	r3, #8
 8004f34:	d838      	bhi.n	8004fa8 <UART_SetConfig+0x294>
 8004f36:	a201      	add	r2, pc, #4	; (adr r2, 8004f3c <UART_SetConfig+0x228>)
 8004f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f3c:	08004f61 	.word	0x08004f61
 8004f40:	08004f69 	.word	0x08004f69
 8004f44:	08004f71 	.word	0x08004f71
 8004f48:	08004fa9 	.word	0x08004fa9
 8004f4c:	08004f77 	.word	0x08004f77
 8004f50:	08004fa9 	.word	0x08004fa9
 8004f54:	08004fa9 	.word	0x08004fa9
 8004f58:	08004fa9 	.word	0x08004fa9
 8004f5c:	08004f7f 	.word	0x08004f7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f60:	f7fe fef0 	bl	8003d44 <HAL_RCC_GetPCLK1Freq>
 8004f64:	61b8      	str	r0, [r7, #24]
        break;
 8004f66:	e024      	b.n	8004fb2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f68:	f7fe ff0e 	bl	8003d88 <HAL_RCC_GetPCLK2Freq>
 8004f6c:	61b8      	str	r0, [r7, #24]
        break;
 8004f6e:	e020      	b.n	8004fb2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f70:	4b0c      	ldr	r3, [pc, #48]	; (8004fa4 <UART_SetConfig+0x290>)
 8004f72:	61bb      	str	r3, [r7, #24]
        break;
 8004f74:	e01d      	b.n	8004fb2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f76:	f7fe fe6f 	bl	8003c58 <HAL_RCC_GetSysClockFreq>
 8004f7a:	61b8      	str	r0, [r7, #24]
        break;
 8004f7c:	e019      	b.n	8004fb2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f82:	61bb      	str	r3, [r7, #24]
        break;
 8004f84:	e015      	b.n	8004fb2 <UART_SetConfig+0x29e>
 8004f86:	bf00      	nop
 8004f88:	efff69f3 	.word	0xefff69f3
 8004f8c:	40013800 	.word	0x40013800
 8004f90:	40021000 	.word	0x40021000
 8004f94:	40004400 	.word	0x40004400
 8004f98:	40004800 	.word	0x40004800
 8004f9c:	40004c00 	.word	0x40004c00
 8004fa0:	40005000 	.word	0x40005000
 8004fa4:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	77bb      	strb	r3, [r7, #30]
        break;
 8004fb0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d073      	beq.n	80050a0 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	005a      	lsls	r2, r3, #1
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	085b      	lsrs	r3, r3, #1
 8004fc2:	441a      	add	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fcc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	2b0f      	cmp	r3, #15
 8004fd2:	d916      	bls.n	8005002 <UART_SetConfig+0x2ee>
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fda:	d212      	bcs.n	8005002 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	f023 030f 	bic.w	r3, r3, #15
 8004fe4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	085b      	lsrs	r3, r3, #1
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	f003 0307 	and.w	r3, r3, #7
 8004ff0:	b29a      	uxth	r2, r3
 8004ff2:	89fb      	ldrh	r3, [r7, #14]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	89fa      	ldrh	r2, [r7, #14]
 8004ffe:	60da      	str	r2, [r3, #12]
 8005000:	e04e      	b.n	80050a0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	77bb      	strb	r3, [r7, #30]
 8005006:	e04b      	b.n	80050a0 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005008:	7ffb      	ldrb	r3, [r7, #31]
 800500a:	2b08      	cmp	r3, #8
 800500c:	d827      	bhi.n	800505e <UART_SetConfig+0x34a>
 800500e:	a201      	add	r2, pc, #4	; (adr r2, 8005014 <UART_SetConfig+0x300>)
 8005010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005014:	08005039 	.word	0x08005039
 8005018:	08005041 	.word	0x08005041
 800501c:	08005049 	.word	0x08005049
 8005020:	0800505f 	.word	0x0800505f
 8005024:	0800504f 	.word	0x0800504f
 8005028:	0800505f 	.word	0x0800505f
 800502c:	0800505f 	.word	0x0800505f
 8005030:	0800505f 	.word	0x0800505f
 8005034:	08005057 	.word	0x08005057
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005038:	f7fe fe84 	bl	8003d44 <HAL_RCC_GetPCLK1Freq>
 800503c:	61b8      	str	r0, [r7, #24]
        break;
 800503e:	e013      	b.n	8005068 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005040:	f7fe fea2 	bl	8003d88 <HAL_RCC_GetPCLK2Freq>
 8005044:	61b8      	str	r0, [r7, #24]
        break;
 8005046:	e00f      	b.n	8005068 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005048:	4b1b      	ldr	r3, [pc, #108]	; (80050b8 <UART_SetConfig+0x3a4>)
 800504a:	61bb      	str	r3, [r7, #24]
        break;
 800504c:	e00c      	b.n	8005068 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800504e:	f7fe fe03 	bl	8003c58 <HAL_RCC_GetSysClockFreq>
 8005052:	61b8      	str	r0, [r7, #24]
        break;
 8005054:	e008      	b.n	8005068 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005056:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800505a:	61bb      	str	r3, [r7, #24]
        break;
 800505c:	e004      	b.n	8005068 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800505e:	2300      	movs	r3, #0
 8005060:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	77bb      	strb	r3, [r7, #30]
        break;
 8005066:	bf00      	nop
    }

    if (pclk != 0U)
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d018      	beq.n	80050a0 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	085a      	lsrs	r2, r3, #1
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	441a      	add	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005080:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	2b0f      	cmp	r3, #15
 8005086:	d909      	bls.n	800509c <UART_SetConfig+0x388>
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800508e:	d205      	bcs.n	800509c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	b29a      	uxth	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	60da      	str	r2, [r3, #12]
 800509a:	e001      	b.n	80050a0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80050ac:	7fbb      	ldrb	r3, [r7, #30]
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3720      	adds	r7, #32
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	007a1200 	.word	0x007a1200

080050bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c8:	f003 0301 	and.w	r3, r3, #1
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00a      	beq.n	80050e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	430a      	orrs	r2, r1
 80050e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ea:	f003 0302 	and.w	r3, r3, #2
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00a      	beq.n	8005108 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	430a      	orrs	r2, r1
 8005106:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510c:	f003 0304 	and.w	r3, r3, #4
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00a      	beq.n	800512a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	430a      	orrs	r2, r1
 8005128:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512e:	f003 0308 	and.w	r3, r3, #8
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00a      	beq.n	800514c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	430a      	orrs	r2, r1
 800514a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005150:	f003 0310 	and.w	r3, r3, #16
 8005154:	2b00      	cmp	r3, #0
 8005156:	d00a      	beq.n	800516e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	430a      	orrs	r2, r1
 800516c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005172:	f003 0320 	and.w	r3, r3, #32
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00a      	beq.n	8005190 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	430a      	orrs	r2, r1
 800518e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005198:	2b00      	cmp	r3, #0
 800519a:	d01a      	beq.n	80051d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	430a      	orrs	r2, r1
 80051b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051ba:	d10a      	bne.n	80051d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	430a      	orrs	r2, r1
 80051d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00a      	beq.n	80051f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	430a      	orrs	r2, r1
 80051f2:	605a      	str	r2, [r3, #4]
  }
}
 80051f4:	bf00      	nop
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b098      	sub	sp, #96	; 0x60
 8005204:	af02      	add	r7, sp, #8
 8005206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005210:	f7fb fb90 	bl	8000934 <HAL_GetTick>
 8005214:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0308 	and.w	r3, r3, #8
 8005220:	2b08      	cmp	r3, #8
 8005222:	d12e      	bne.n	8005282 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005224:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005228:	9300      	str	r3, [sp, #0]
 800522a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800522c:	2200      	movs	r2, #0
 800522e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 f88c 	bl	8005350 <UART_WaitOnFlagUntilTimeout>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d021      	beq.n	8005282 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005246:	e853 3f00 	ldrex	r3, [r3]
 800524a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800524c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800524e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005252:	653b      	str	r3, [r7, #80]	; 0x50
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	461a      	mov	r2, r3
 800525a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800525c:	647b      	str	r3, [r7, #68]	; 0x44
 800525e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005260:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005262:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005264:	e841 2300 	strex	r3, r2, [r1]
 8005268:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800526a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1e6      	bne.n	800523e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2220      	movs	r2, #32
 8005274:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e062      	b.n	8005348 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0304 	and.w	r3, r3, #4
 800528c:	2b04      	cmp	r3, #4
 800528e:	d149      	bne.n	8005324 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005290:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005294:	9300      	str	r3, [sp, #0]
 8005296:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005298:	2200      	movs	r2, #0
 800529a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 f856 	bl	8005350 <UART_WaitOnFlagUntilTimeout>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d03c      	beq.n	8005324 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b2:	e853 3f00 	ldrex	r3, [r3]
 80052b6:	623b      	str	r3, [r7, #32]
   return(result);
 80052b8:	6a3b      	ldr	r3, [r7, #32]
 80052ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	461a      	mov	r2, r3
 80052c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052c8:	633b      	str	r3, [r7, #48]	; 0x30
 80052ca:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052d0:	e841 2300 	strex	r3, r2, [r1]
 80052d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80052d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1e6      	bne.n	80052aa <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	3308      	adds	r3, #8
 80052e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	e853 3f00 	ldrex	r3, [r3]
 80052ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f023 0301 	bic.w	r3, r3, #1
 80052f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	3308      	adds	r3, #8
 80052fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052fc:	61fa      	str	r2, [r7, #28]
 80052fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005300:	69b9      	ldr	r1, [r7, #24]
 8005302:	69fa      	ldr	r2, [r7, #28]
 8005304:	e841 2300 	strex	r3, r2, [r1]
 8005308:	617b      	str	r3, [r7, #20]
   return(result);
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1e5      	bne.n	80052dc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2220      	movs	r2, #32
 8005314:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	e011      	b.n	8005348 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2220      	movs	r2, #32
 8005328:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2220      	movs	r2, #32
 800532e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	3758      	adds	r7, #88	; 0x58
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	603b      	str	r3, [r7, #0]
 800535c:	4613      	mov	r3, r2
 800535e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005360:	e049      	b.n	80053f6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005368:	d045      	beq.n	80053f6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800536a:	f7fb fae3 	bl	8000934 <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	69ba      	ldr	r2, [r7, #24]
 8005376:	429a      	cmp	r2, r3
 8005378:	d302      	bcc.n	8005380 <UART_WaitOnFlagUntilTimeout+0x30>
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d101      	bne.n	8005384 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e048      	b.n	8005416 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0304 	and.w	r3, r3, #4
 800538e:	2b00      	cmp	r3, #0
 8005390:	d031      	beq.n	80053f6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	69db      	ldr	r3, [r3, #28]
 8005398:	f003 0308 	and.w	r3, r3, #8
 800539c:	2b08      	cmp	r3, #8
 800539e:	d110      	bne.n	80053c2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2208      	movs	r2, #8
 80053a6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	f000 f838 	bl	800541e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2208      	movs	r2, #8
 80053b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e029      	b.n	8005416 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	69db      	ldr	r3, [r3, #28]
 80053c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053d0:	d111      	bne.n	80053f6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053dc:	68f8      	ldr	r0, [r7, #12]
 80053de:	f000 f81e 	bl	800541e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2220      	movs	r2, #32
 80053e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e00f      	b.n	8005416 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	69da      	ldr	r2, [r3, #28]
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	4013      	ands	r3, r2
 8005400:	68ba      	ldr	r2, [r7, #8]
 8005402:	429a      	cmp	r2, r3
 8005404:	bf0c      	ite	eq
 8005406:	2301      	moveq	r3, #1
 8005408:	2300      	movne	r3, #0
 800540a:	b2db      	uxtb	r3, r3
 800540c:	461a      	mov	r2, r3
 800540e:	79fb      	ldrb	r3, [r7, #7]
 8005410:	429a      	cmp	r2, r3
 8005412:	d0a6      	beq.n	8005362 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3710      	adds	r7, #16
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}

0800541e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800541e:	b480      	push	{r7}
 8005420:	b095      	sub	sp, #84	; 0x54
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800542c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800542e:	e853 3f00 	ldrex	r3, [r3]
 8005432:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005436:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800543a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	461a      	mov	r2, r3
 8005442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005444:	643b      	str	r3, [r7, #64]	; 0x40
 8005446:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005448:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800544a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800544c:	e841 2300 	strex	r3, r2, [r1]
 8005450:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005454:	2b00      	cmp	r3, #0
 8005456:	d1e6      	bne.n	8005426 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	3308      	adds	r3, #8
 800545e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005460:	6a3b      	ldr	r3, [r7, #32]
 8005462:	e853 3f00 	ldrex	r3, [r3]
 8005466:	61fb      	str	r3, [r7, #28]
   return(result);
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	f023 0301 	bic.w	r3, r3, #1
 800546e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	3308      	adds	r3, #8
 8005476:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005478:	62fa      	str	r2, [r7, #44]	; 0x2c
 800547a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800547e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005480:	e841 2300 	strex	r3, r2, [r1]
 8005484:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005488:	2b00      	cmp	r3, #0
 800548a:	d1e5      	bne.n	8005458 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005490:	2b01      	cmp	r3, #1
 8005492:	d118      	bne.n	80054c6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	e853 3f00 	ldrex	r3, [r3]
 80054a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	f023 0310 	bic.w	r3, r3, #16
 80054a8:	647b      	str	r3, [r7, #68]	; 0x44
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	461a      	mov	r2, r3
 80054b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054b2:	61bb      	str	r3, [r7, #24]
 80054b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b6:	6979      	ldr	r1, [r7, #20]
 80054b8:	69ba      	ldr	r2, [r7, #24]
 80054ba:	e841 2300 	strex	r3, r2, [r1]
 80054be:	613b      	str	r3, [r7, #16]
   return(result);
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1e6      	bne.n	8005494 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2220      	movs	r2, #32
 80054ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80054da:	bf00      	nop
 80054dc:	3754      	adds	r7, #84	; 0x54
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr

080054e6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80054e6:	b480      	push	{r7}
 80054e8:	b085      	sub	sp, #20
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80054f6:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80054fa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	b29a      	uxth	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3714      	adds	r7, #20
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800551c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005520:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005528:	b29a      	uxth	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	b29b      	uxth	r3, r3
 800552e:	43db      	mvns	r3, r3
 8005530:	b29b      	uxth	r3, r3
 8005532:	4013      	ands	r3, r2
 8005534:	b29a      	uxth	r2, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3714      	adds	r7, #20
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr

0800554a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800554a:	b084      	sub	sp, #16
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	f107 0014 	add.w	r0, r7, #20
 8005558:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	370c      	adds	r7, #12
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	b004      	add	sp, #16
 800558a:	4770      	bx	lr

0800558c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800558c:	b480      	push	{r7}
 800558e:	b09d      	sub	sp, #116	; 0x74
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005596:	2300      	movs	r3, #0
 8005598:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	4413      	add	r3, r2
 80055a6:	881b      	ldrh	r3, [r3, #0]
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80055ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	78db      	ldrb	r3, [r3, #3]
 80055ba:	2b03      	cmp	r3, #3
 80055bc:	d81f      	bhi.n	80055fe <USB_ActivateEndpoint+0x72>
 80055be:	a201      	add	r2, pc, #4	; (adr r2, 80055c4 <USB_ActivateEndpoint+0x38>)
 80055c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c4:	080055d5 	.word	0x080055d5
 80055c8:	080055f1 	.word	0x080055f1
 80055cc:	08005607 	.word	0x08005607
 80055d0:	080055e3 	.word	0x080055e3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80055d4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80055d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80055dc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80055e0:	e012      	b.n	8005608 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80055e2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80055e6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80055ea:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80055ee:	e00b      	b.n	8005608 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80055f0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80055f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80055f8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80055fc:	e004      	b.n	8005608 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005604:	e000      	b.n	8005608 <USB_ActivateEndpoint+0x7c>
      break;
 8005606:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	441a      	add	r2, r3
 8005612:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005616:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800561a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800561e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005622:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005626:	b29b      	uxth	r3, r3
 8005628:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	4413      	add	r3, r2
 8005634:	881b      	ldrh	r3, [r3, #0]
 8005636:	b29b      	uxth	r3, r3
 8005638:	b21b      	sxth	r3, r3
 800563a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800563e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005642:	b21a      	sxth	r2, r3
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	b21b      	sxth	r3, r3
 800564a:	4313      	orrs	r3, r2
 800564c:	b21b      	sxth	r3, r3
 800564e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	441a      	add	r2, r3
 800565c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005660:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005664:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005668:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800566c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005670:	b29b      	uxth	r3, r3
 8005672:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	7b1b      	ldrb	r3, [r3, #12]
 8005678:	2b00      	cmp	r3, #0
 800567a:	f040 8178 	bne.w	800596e <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	785b      	ldrb	r3, [r3, #1]
 8005682:	2b00      	cmp	r3, #0
 8005684:	f000 8084 	beq.w	8005790 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	61bb      	str	r3, [r7, #24]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005692:	b29b      	uxth	r3, r3
 8005694:	461a      	mov	r2, r3
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	4413      	add	r3, r2
 800569a:	61bb      	str	r3, [r7, #24]
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	00da      	lsls	r2, r3, #3
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	4413      	add	r3, r2
 80056a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056aa:	617b      	str	r3, [r7, #20]
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	88db      	ldrh	r3, [r3, #6]
 80056b0:	085b      	lsrs	r3, r3, #1
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	005b      	lsls	r3, r3, #1
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	4413      	add	r3, r2
 80056c6:	881b      	ldrh	r3, [r3, #0]
 80056c8:	827b      	strh	r3, [r7, #18]
 80056ca:	8a7b      	ldrh	r3, [r7, #18]
 80056cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d01b      	beq.n	800570c <USB_ActivateEndpoint+0x180>
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	4413      	add	r3, r2
 80056de:	881b      	ldrh	r3, [r3, #0]
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ea:	823b      	strh	r3, [r7, #16]
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	441a      	add	r2, r3
 80056f6:	8a3b      	ldrh	r3, [r7, #16]
 80056f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005700:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005704:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005708:	b29b      	uxth	r3, r3
 800570a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	78db      	ldrb	r3, [r3, #3]
 8005710:	2b01      	cmp	r3, #1
 8005712:	d020      	beq.n	8005756 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4413      	add	r3, r2
 800571e:	881b      	ldrh	r3, [r3, #0]
 8005720:	b29b      	uxth	r3, r3
 8005722:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005726:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800572a:	81bb      	strh	r3, [r7, #12]
 800572c:	89bb      	ldrh	r3, [r7, #12]
 800572e:	f083 0320 	eor.w	r3, r3, #32
 8005732:	81bb      	strh	r3, [r7, #12]
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	441a      	add	r2, r3
 800573e:	89bb      	ldrh	r3, [r7, #12]
 8005740:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005744:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005748:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800574c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005750:	b29b      	uxth	r3, r3
 8005752:	8013      	strh	r3, [r2, #0]
 8005754:	e2d5      	b.n	8005d02 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	4413      	add	r3, r2
 8005760:	881b      	ldrh	r3, [r3, #0]
 8005762:	b29b      	uxth	r3, r3
 8005764:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005768:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800576c:	81fb      	strh	r3, [r7, #14]
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	441a      	add	r2, r3
 8005778:	89fb      	ldrh	r3, [r7, #14]
 800577a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800577e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005782:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800578a:	b29b      	uxth	r3, r3
 800578c:	8013      	strh	r3, [r2, #0]
 800578e:	e2b8      	b.n	8005d02 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	633b      	str	r3, [r7, #48]	; 0x30
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800579a:	b29b      	uxth	r3, r3
 800579c:	461a      	mov	r2, r3
 800579e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a0:	4413      	add	r3, r2
 80057a2:	633b      	str	r3, [r7, #48]	; 0x30
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	00da      	lsls	r2, r3, #3
 80057aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ac:	4413      	add	r3, r2
 80057ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80057b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	88db      	ldrh	r3, [r3, #6]
 80057b8:	085b      	lsrs	r3, r3, #1
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	005b      	lsls	r3, r3, #1
 80057be:	b29a      	uxth	r2, r3
 80057c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	461a      	mov	r2, r3
 80057d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d4:	4413      	add	r3, r2
 80057d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	00da      	lsls	r2, r3, #3
 80057de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e0:	4413      	add	r3, r2
 80057e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80057e6:	627b      	str	r3, [r7, #36]	; 0x24
 80057e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ea:	881b      	ldrh	r3, [r3, #0]
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057f2:	b29a      	uxth	r2, r3
 80057f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f6:	801a      	strh	r2, [r3, #0]
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	2b3e      	cmp	r3, #62	; 0x3e
 80057fe:	d91d      	bls.n	800583c <USB_ActivateEndpoint+0x2b0>
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	095b      	lsrs	r3, r3, #5
 8005806:	66bb      	str	r3, [r7, #104]	; 0x68
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	f003 031f 	and.w	r3, r3, #31
 8005810:	2b00      	cmp	r3, #0
 8005812:	d102      	bne.n	800581a <USB_ActivateEndpoint+0x28e>
 8005814:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005816:	3b01      	subs	r3, #1
 8005818:	66bb      	str	r3, [r7, #104]	; 0x68
 800581a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581c:	881b      	ldrh	r3, [r3, #0]
 800581e:	b29a      	uxth	r2, r3
 8005820:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005822:	b29b      	uxth	r3, r3
 8005824:	029b      	lsls	r3, r3, #10
 8005826:	b29b      	uxth	r3, r3
 8005828:	4313      	orrs	r3, r2
 800582a:	b29b      	uxth	r3, r3
 800582c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005830:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005834:	b29a      	uxth	r2, r3
 8005836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005838:	801a      	strh	r2, [r3, #0]
 800583a:	e026      	b.n	800588a <USB_ActivateEndpoint+0x2fe>
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	691b      	ldr	r3, [r3, #16]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d10a      	bne.n	800585a <USB_ActivateEndpoint+0x2ce>
 8005844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005846:	881b      	ldrh	r3, [r3, #0]
 8005848:	b29b      	uxth	r3, r3
 800584a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800584e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005852:	b29a      	uxth	r2, r3
 8005854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005856:	801a      	strh	r2, [r3, #0]
 8005858:	e017      	b.n	800588a <USB_ActivateEndpoint+0x2fe>
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	085b      	lsrs	r3, r3, #1
 8005860:	66bb      	str	r3, [r7, #104]	; 0x68
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	f003 0301 	and.w	r3, r3, #1
 800586a:	2b00      	cmp	r3, #0
 800586c:	d002      	beq.n	8005874 <USB_ActivateEndpoint+0x2e8>
 800586e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005870:	3301      	adds	r3, #1
 8005872:	66bb      	str	r3, [r7, #104]	; 0x68
 8005874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005876:	881b      	ldrh	r3, [r3, #0]
 8005878:	b29a      	uxth	r2, r3
 800587a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800587c:	b29b      	uxth	r3, r3
 800587e:	029b      	lsls	r3, r3, #10
 8005880:	b29b      	uxth	r3, r3
 8005882:	4313      	orrs	r3, r2
 8005884:	b29a      	uxth	r2, r3
 8005886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005888:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	4413      	add	r3, r2
 8005894:	881b      	ldrh	r3, [r3, #0]
 8005896:	847b      	strh	r3, [r7, #34]	; 0x22
 8005898:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800589a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d01b      	beq.n	80058da <USB_ActivateEndpoint+0x34e>
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	4413      	add	r3, r2
 80058ac:	881b      	ldrh	r3, [r3, #0]
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b8:	843b      	strh	r3, [r7, #32]
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	441a      	add	r2, r3
 80058c4:	8c3b      	ldrh	r3, [r7, #32]
 80058c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80058d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d124      	bne.n	800592c <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	4413      	add	r3, r2
 80058ec:	881b      	ldrh	r3, [r3, #0]
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058f8:	83bb      	strh	r3, [r7, #28]
 80058fa:	8bbb      	ldrh	r3, [r7, #28]
 80058fc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005900:	83bb      	strh	r3, [r7, #28]
 8005902:	8bbb      	ldrh	r3, [r7, #28]
 8005904:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005908:	83bb      	strh	r3, [r7, #28]
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	441a      	add	r2, r3
 8005914:	8bbb      	ldrh	r3, [r7, #28]
 8005916:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800591a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800591e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005926:	b29b      	uxth	r3, r3
 8005928:	8013      	strh	r3, [r2, #0]
 800592a:	e1ea      	b.n	8005d02 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	4413      	add	r3, r2
 8005936:	881b      	ldrh	r3, [r3, #0]
 8005938:	b29b      	uxth	r3, r3
 800593a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800593e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005942:	83fb      	strh	r3, [r7, #30]
 8005944:	8bfb      	ldrh	r3, [r7, #30]
 8005946:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800594a:	83fb      	strh	r3, [r7, #30]
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	441a      	add	r2, r3
 8005956:	8bfb      	ldrh	r3, [r7, #30]
 8005958:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800595c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005960:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005968:	b29b      	uxth	r3, r3
 800596a:	8013      	strh	r3, [r2, #0]
 800596c:	e1c9      	b.n	8005d02 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	78db      	ldrb	r3, [r3, #3]
 8005972:	2b02      	cmp	r3, #2
 8005974:	d11e      	bne.n	80059b4 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	4413      	add	r3, r2
 8005980:	881b      	ldrh	r3, [r3, #0]
 8005982:	b29b      	uxth	r3, r3
 8005984:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800598c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	441a      	add	r2, r3
 800599a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800599e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059a6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80059aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	8013      	strh	r3, [r2, #0]
 80059b2:	e01d      	b.n	80059f0 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	4413      	add	r3, r2
 80059be:	881b      	ldrh	r3, [r3, #0]
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80059c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ca:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	441a      	add	r2, r3
 80059d8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80059dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	461a      	mov	r2, r3
 80059fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a00:	4413      	add	r3, r2
 8005a02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	00da      	lsls	r2, r3, #3
 8005a0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a12:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	891b      	ldrh	r3, [r3, #8]
 8005a18:	085b      	lsrs	r3, r3, #1
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	005b      	lsls	r3, r3, #1
 8005a1e:	b29a      	uxth	r2, r3
 8005a20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a22:	801a      	strh	r2, [r3, #0]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	657b      	str	r3, [r7, #84]	; 0x54
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	461a      	mov	r2, r3
 8005a32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a34:	4413      	add	r3, r2
 8005a36:	657b      	str	r3, [r7, #84]	; 0x54
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	00da      	lsls	r2, r3, #3
 8005a3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a40:	4413      	add	r3, r2
 8005a42:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a46:	653b      	str	r3, [r7, #80]	; 0x50
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	895b      	ldrh	r3, [r3, #10]
 8005a4c:	085b      	lsrs	r3, r3, #1
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	005b      	lsls	r3, r3, #1
 8005a52:	b29a      	uxth	r2, r3
 8005a54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a56:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	785b      	ldrb	r3, [r3, #1]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	f040 8093 	bne.w	8005b88 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	4413      	add	r3, r2
 8005a6c:	881b      	ldrh	r3, [r3, #0]
 8005a6e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005a72:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d01b      	beq.n	8005ab6 <USB_ActivateEndpoint+0x52a>
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4413      	add	r3, r2
 8005a88:	881b      	ldrh	r3, [r3, #0]
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a94:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	441a      	add	r2, r3
 8005aa0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005aa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005aaa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	4413      	add	r3, r2
 8005ac0:	881b      	ldrh	r3, [r3, #0]
 8005ac2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005ac4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d01b      	beq.n	8005b06 <USB_ActivateEndpoint+0x57a>
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	4413      	add	r3, r2
 8005ad8:	881b      	ldrh	r3, [r3, #0]
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ae0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ae4:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	441a      	add	r2, r3
 8005af0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005af2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005af6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005afa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005afe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	4413      	add	r3, r2
 8005b10:	881b      	ldrh	r3, [r3, #0]
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b1c:	873b      	strh	r3, [r7, #56]	; 0x38
 8005b1e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005b20:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005b24:	873b      	strh	r3, [r7, #56]	; 0x38
 8005b26:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005b28:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005b2c:	873b      	strh	r3, [r7, #56]	; 0x38
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	441a      	add	r2, r3
 8005b38:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005b3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4413      	add	r3, r2
 8005b58:	881b      	ldrh	r3, [r3, #0]
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b64:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	441a      	add	r2, r3
 8005b70:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005b72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	8013      	strh	r3, [r2, #0]
 8005b86:	e0bc      	b.n	8005d02 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	4413      	add	r3, r2
 8005b92:	881b      	ldrh	r3, [r3, #0]
 8005b94:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005b98:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d01d      	beq.n	8005be0 <USB_ActivateEndpoint+0x654>
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	4413      	add	r3, r2
 8005bae:	881b      	ldrh	r3, [r3, #0]
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bba:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	441a      	add	r2, r3
 8005bc8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005bcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	4413      	add	r3, r2
 8005bea:	881b      	ldrh	r3, [r3, #0]
 8005bec:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005bf0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d01d      	beq.n	8005c38 <USB_ActivateEndpoint+0x6ac>
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	4413      	add	r3, r2
 8005c06:	881b      	ldrh	r3, [r3, #0]
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c12:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	441a      	add	r2, r3
 8005c20:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005c24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	78db      	ldrb	r3, [r3, #3]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d024      	beq.n	8005c8a <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	4413      	add	r3, r2
 8005c4a:	881b      	ldrh	r3, [r3, #0]
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c56:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005c5a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005c5e:	f083 0320 	eor.w	r3, r3, #32
 8005c62:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	441a      	add	r2, r3
 8005c70:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005c74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	8013      	strh	r3, [r2, #0]
 8005c88:	e01d      	b.n	8005cc6 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	4413      	add	r3, r2
 8005c94:	881b      	ldrh	r3, [r3, #0]
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ca0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	441a      	add	r2, r3
 8005cae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005cb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	4413      	add	r3, r2
 8005cd0:	881b      	ldrh	r3, [r3, #0]
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cdc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	441a      	add	r2, r3
 8005cea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005cee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005d02:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3774      	adds	r7, #116	; 0x74
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop

08005d14 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b08d      	sub	sp, #52	; 0x34
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	7b1b      	ldrb	r3, [r3, #12]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	f040 808e 	bne.w	8005e44 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	785b      	ldrb	r3, [r3, #1]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d044      	beq.n	8005dba <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	4413      	add	r3, r2
 8005d3a:	881b      	ldrh	r3, [r3, #0]
 8005d3c:	81bb      	strh	r3, [r7, #12]
 8005d3e:	89bb      	ldrh	r3, [r7, #12]
 8005d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d01b      	beq.n	8005d80 <USB_DeactivateEndpoint+0x6c>
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	4413      	add	r3, r2
 8005d52:	881b      	ldrh	r3, [r3, #0]
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d5e:	817b      	strh	r3, [r7, #10]
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	441a      	add	r2, r3
 8005d6a:	897b      	ldrh	r3, [r7, #10]
 8005d6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d78:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	4413      	add	r3, r2
 8005d8a:	881b      	ldrh	r3, [r3, #0]
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d96:	813b      	strh	r3, [r7, #8]
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	441a      	add	r2, r3
 8005da2:	893b      	ldrh	r3, [r7, #8]
 8005da4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005da8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	8013      	strh	r3, [r2, #0]
 8005db8:	e192      	b.n	80060e0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	4413      	add	r3, r2
 8005dc4:	881b      	ldrh	r3, [r3, #0]
 8005dc6:	827b      	strh	r3, [r7, #18]
 8005dc8:	8a7b      	ldrh	r3, [r7, #18]
 8005dca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d01b      	beq.n	8005e0a <USB_DeactivateEndpoint+0xf6>
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	4413      	add	r3, r2
 8005ddc:	881b      	ldrh	r3, [r3, #0]
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005de4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005de8:	823b      	strh	r3, [r7, #16]
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	441a      	add	r2, r3
 8005df4:	8a3b      	ldrh	r3, [r7, #16]
 8005df6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dfe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	4413      	add	r3, r2
 8005e14:	881b      	ldrh	r3, [r3, #0]
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e20:	81fb      	strh	r3, [r7, #14]
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	441a      	add	r2, r3
 8005e2c:	89fb      	ldrh	r3, [r7, #14]
 8005e2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	8013      	strh	r3, [r2, #0]
 8005e42:	e14d      	b.n	80060e0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	785b      	ldrb	r3, [r3, #1]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	f040 80a5 	bne.w	8005f98 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	4413      	add	r3, r2
 8005e58:	881b      	ldrh	r3, [r3, #0]
 8005e5a:	843b      	strh	r3, [r7, #32]
 8005e5c:	8c3b      	ldrh	r3, [r7, #32]
 8005e5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d01b      	beq.n	8005e9e <USB_DeactivateEndpoint+0x18a>
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	4413      	add	r3, r2
 8005e70:	881b      	ldrh	r3, [r3, #0]
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e7c:	83fb      	strh	r3, [r7, #30]
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	441a      	add	r2, r3
 8005e88:	8bfb      	ldrh	r3, [r7, #30]
 8005e8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	4413      	add	r3, r2
 8005ea8:	881b      	ldrh	r3, [r3, #0]
 8005eaa:	83bb      	strh	r3, [r7, #28]
 8005eac:	8bbb      	ldrh	r3, [r7, #28]
 8005eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d01b      	beq.n	8005eee <USB_DeactivateEndpoint+0x1da>
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	4413      	add	r3, r2
 8005ec0:	881b      	ldrh	r3, [r3, #0]
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ec8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ecc:	837b      	strh	r3, [r7, #26]
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	441a      	add	r2, r3
 8005ed8:	8b7b      	ldrh	r3, [r7, #26]
 8005eda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ede:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ee2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ee6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	4413      	add	r3, r2
 8005ef8:	881b      	ldrh	r3, [r3, #0]
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f04:	833b      	strh	r3, [r7, #24]
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	441a      	add	r2, r3
 8005f10:	8b3b      	ldrh	r3, [r7, #24]
 8005f12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f1e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	4413      	add	r3, r2
 8005f30:	881b      	ldrh	r3, [r3, #0]
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f3c:	82fb      	strh	r3, [r7, #22]
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	441a      	add	r2, r3
 8005f48:	8afb      	ldrh	r3, [r7, #22]
 8005f4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	4413      	add	r3, r2
 8005f68:	881b      	ldrh	r3, [r3, #0]
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f74:	82bb      	strh	r3, [r7, #20]
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	441a      	add	r2, r3
 8005f80:	8abb      	ldrh	r3, [r7, #20]
 8005f82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	8013      	strh	r3, [r2, #0]
 8005f96:	e0a3      	b.n	80060e0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	4413      	add	r3, r2
 8005fa2:	881b      	ldrh	r3, [r3, #0]
 8005fa4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005fa6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005fa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d01b      	beq.n	8005fe8 <USB_DeactivateEndpoint+0x2d4>
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	4413      	add	r3, r2
 8005fba:	881b      	ldrh	r3, [r3, #0]
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fc6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	441a      	add	r2, r3
 8005fd2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005fd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005fe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	4413      	add	r3, r2
 8005ff2:	881b      	ldrh	r3, [r3, #0]
 8005ff4:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005ff6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d01b      	beq.n	8006038 <USB_DeactivateEndpoint+0x324>
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	4413      	add	r3, r2
 800600a:	881b      	ldrh	r3, [r3, #0]
 800600c:	b29b      	uxth	r3, r3
 800600e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006016:	853b      	strh	r3, [r7, #40]	; 0x28
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	441a      	add	r2, r3
 8006022:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006024:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006028:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800602c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006030:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006034:	b29b      	uxth	r3, r3
 8006036:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	4413      	add	r3, r2
 8006042:	881b      	ldrh	r3, [r3, #0]
 8006044:	b29b      	uxth	r3, r3
 8006046:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800604a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800604e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	441a      	add	r2, r3
 800605a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800605c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006060:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006064:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800606c:	b29b      	uxth	r3, r3
 800606e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	4413      	add	r3, r2
 800607a:	881b      	ldrh	r3, [r3, #0]
 800607c:	b29b      	uxth	r3, r3
 800607e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006082:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006086:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	441a      	add	r2, r3
 8006092:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006094:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006098:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800609c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	4413      	add	r3, r2
 80060b2:	881b      	ldrh	r3, [r3, #0]
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060be:	847b      	strh	r3, [r7, #34]	; 0x22
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	441a      	add	r2, r3
 80060ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80060cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060dc:	b29b      	uxth	r3, r3
 80060de:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3734      	adds	r7, #52	; 0x34
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr

080060ee <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b0c2      	sub	sp, #264	; 0x108
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060fc:	6018      	str	r0, [r3, #0]
 80060fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006102:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006106:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006108:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800610c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	785b      	ldrb	r3, [r3, #1]
 8006114:	2b01      	cmp	r3, #1
 8006116:	f040 86b7 	bne.w	8006e88 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800611a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800611e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	699a      	ldr	r2, [r3, #24]
 8006126:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800612a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	429a      	cmp	r2, r3
 8006134:	d908      	bls.n	8006148 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006136:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800613a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006146:	e007      	b.n	8006158 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006148:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800614c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	699b      	ldr	r3, [r3, #24]
 8006154:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006158:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800615c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	7b1b      	ldrb	r3, [r3, #12]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d13a      	bne.n	80061de <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006168:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800616c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	6959      	ldr	r1, [r3, #20]
 8006174:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006178:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	88da      	ldrh	r2, [r3, #6]
 8006180:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006184:	b29b      	uxth	r3, r3
 8006186:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800618a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800618e:	6800      	ldr	r0, [r0, #0]
 8006190:	f001 fc8c 	bl	8007aac <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006194:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006198:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	613b      	str	r3, [r7, #16]
 80061a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	461a      	mov	r2, r3
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	4413      	add	r3, r2
 80061b6:	613b      	str	r3, [r7, #16]
 80061b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	00da      	lsls	r2, r3, #3
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	4413      	add	r3, r2
 80061ca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80061ce:	60fb      	str	r3, [r7, #12]
 80061d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061d4:	b29a      	uxth	r2, r3
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	801a      	strh	r2, [r3, #0]
 80061da:	f000 be1f 	b.w	8006e1c <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80061de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	78db      	ldrb	r3, [r3, #3]
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	f040 8462 	bne.w	8006ab4 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80061f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	6a1a      	ldr	r2, [r3, #32]
 80061fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006200:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	429a      	cmp	r2, r3
 800620a:	f240 83df 	bls.w	80069cc <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800620e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006212:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800621c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	4413      	add	r3, r2
 8006228:	881b      	ldrh	r3, [r3, #0]
 800622a:	b29b      	uxth	r3, r3
 800622c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006230:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006234:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006238:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800623c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006246:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	441a      	add	r2, r3
 8006252:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006256:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800625a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800625e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006266:	b29b      	uxth	r3, r3
 8006268:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800626a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800626e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	6a1a      	ldr	r2, [r3, #32]
 8006276:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800627a:	1ad2      	subs	r2, r2, r3
 800627c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006280:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006288:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800628c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006296:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	4413      	add	r3, r2
 80062a2:	881b      	ldrh	r3, [r3, #0]
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	f000 81c7 	beq.w	800663e <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80062b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	633b      	str	r3, [r7, #48]	; 0x30
 80062bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	785b      	ldrb	r3, [r3, #1]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d177      	bne.n	80063bc <USB_EPStartXfer+0x2ce>
 80062cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80062d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	461a      	mov	r2, r3
 80062ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ec:	4413      	add	r3, r2
 80062ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80062f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	00da      	lsls	r2, r3, #3
 80062fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006300:	4413      	add	r3, r2
 8006302:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006306:	627b      	str	r3, [r7, #36]	; 0x24
 8006308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630a:	881b      	ldrh	r3, [r3, #0]
 800630c:	b29b      	uxth	r3, r3
 800630e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006312:	b29a      	uxth	r2, r3
 8006314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006316:	801a      	strh	r2, [r3, #0]
 8006318:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800631c:	2b3e      	cmp	r3, #62	; 0x3e
 800631e:	d921      	bls.n	8006364 <USB_EPStartXfer+0x276>
 8006320:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006324:	095b      	lsrs	r3, r3, #5
 8006326:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800632a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800632e:	f003 031f 	and.w	r3, r3, #31
 8006332:	2b00      	cmp	r3, #0
 8006334:	d104      	bne.n	8006340 <USB_EPStartXfer+0x252>
 8006336:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800633a:	3b01      	subs	r3, #1
 800633c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006342:	881b      	ldrh	r3, [r3, #0]
 8006344:	b29a      	uxth	r2, r3
 8006346:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800634a:	b29b      	uxth	r3, r3
 800634c:	029b      	lsls	r3, r3, #10
 800634e:	b29b      	uxth	r3, r3
 8006350:	4313      	orrs	r3, r2
 8006352:	b29b      	uxth	r3, r3
 8006354:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006358:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800635c:	b29a      	uxth	r2, r3
 800635e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006360:	801a      	strh	r2, [r3, #0]
 8006362:	e050      	b.n	8006406 <USB_EPStartXfer+0x318>
 8006364:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006368:	2b00      	cmp	r3, #0
 800636a:	d10a      	bne.n	8006382 <USB_EPStartXfer+0x294>
 800636c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636e:	881b      	ldrh	r3, [r3, #0]
 8006370:	b29b      	uxth	r3, r3
 8006372:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006376:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800637a:	b29a      	uxth	r2, r3
 800637c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637e:	801a      	strh	r2, [r3, #0]
 8006380:	e041      	b.n	8006406 <USB_EPStartXfer+0x318>
 8006382:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006386:	085b      	lsrs	r3, r3, #1
 8006388:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800638c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006390:	f003 0301 	and.w	r3, r3, #1
 8006394:	2b00      	cmp	r3, #0
 8006396:	d004      	beq.n	80063a2 <USB_EPStartXfer+0x2b4>
 8006398:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800639c:	3301      	adds	r3, #1
 800639e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80063a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a4:	881b      	ldrh	r3, [r3, #0]
 80063a6:	b29a      	uxth	r2, r3
 80063a8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	029b      	lsls	r3, r3, #10
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	4313      	orrs	r3, r2
 80063b4:	b29a      	uxth	r2, r3
 80063b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b8:	801a      	strh	r2, [r3, #0]
 80063ba:	e024      	b.n	8006406 <USB_EPStartXfer+0x318>
 80063bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	785b      	ldrb	r3, [r3, #1]
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d11c      	bne.n	8006406 <USB_EPStartXfer+0x318>
 80063cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063da:	b29b      	uxth	r3, r3
 80063dc:	461a      	mov	r2, r3
 80063de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e0:	4413      	add	r3, r2
 80063e2:	633b      	str	r3, [r7, #48]	; 0x30
 80063e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	00da      	lsls	r2, r3, #3
 80063f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f4:	4413      	add	r3, r2
 80063f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80063fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006400:	b29a      	uxth	r2, r3
 8006402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006404:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006406:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800640a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	895b      	ldrh	r3, [r3, #10]
 8006412:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006416:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800641a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	6959      	ldr	r1, [r3, #20]
 8006422:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006426:	b29b      	uxth	r3, r3
 8006428:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800642c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006430:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006434:	6800      	ldr	r0, [r0, #0]
 8006436:	f001 fb39 	bl	8007aac <USB_WritePMA>
            ep->xfer_buff += len;
 800643a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800643e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	695a      	ldr	r2, [r3, #20]
 8006446:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800644a:	441a      	add	r2, r3
 800644c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006450:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006458:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800645c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	6a1a      	ldr	r2, [r3, #32]
 8006464:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006468:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	691b      	ldr	r3, [r3, #16]
 8006470:	429a      	cmp	r2, r3
 8006472:	d90f      	bls.n	8006494 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006474:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006478:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	6a1a      	ldr	r2, [r3, #32]
 8006480:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006484:	1ad2      	subs	r2, r2, r3
 8006486:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800648a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	621a      	str	r2, [r3, #32]
 8006492:	e00e      	b.n	80064b2 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006494:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006498:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	6a1b      	ldr	r3, [r3, #32]
 80064a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80064a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2200      	movs	r2, #0
 80064b0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80064b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	785b      	ldrb	r3, [r3, #1]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d177      	bne.n	80065b2 <USB_EPStartXfer+0x4c4>
 80064c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	61bb      	str	r3, [r7, #24]
 80064ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064dc:	b29b      	uxth	r3, r3
 80064de:	461a      	mov	r2, r3
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	4413      	add	r3, r2
 80064e4:	61bb      	str	r3, [r7, #24]
 80064e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	00da      	lsls	r2, r3, #3
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	4413      	add	r3, r2
 80064f8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80064fc:	617b      	str	r3, [r7, #20]
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	881b      	ldrh	r3, [r3, #0]
 8006502:	b29b      	uxth	r3, r3
 8006504:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006508:	b29a      	uxth	r2, r3
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	801a      	strh	r2, [r3, #0]
 800650e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006512:	2b3e      	cmp	r3, #62	; 0x3e
 8006514:	d921      	bls.n	800655a <USB_EPStartXfer+0x46c>
 8006516:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800651a:	095b      	lsrs	r3, r3, #5
 800651c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006520:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006524:	f003 031f 	and.w	r3, r3, #31
 8006528:	2b00      	cmp	r3, #0
 800652a:	d104      	bne.n	8006536 <USB_EPStartXfer+0x448>
 800652c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006530:	3b01      	subs	r3, #1
 8006532:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	881b      	ldrh	r3, [r3, #0]
 800653a:	b29a      	uxth	r2, r3
 800653c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006540:	b29b      	uxth	r3, r3
 8006542:	029b      	lsls	r3, r3, #10
 8006544:	b29b      	uxth	r3, r3
 8006546:	4313      	orrs	r3, r2
 8006548:	b29b      	uxth	r3, r3
 800654a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800654e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006552:	b29a      	uxth	r2, r3
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	801a      	strh	r2, [r3, #0]
 8006558:	e056      	b.n	8006608 <USB_EPStartXfer+0x51a>
 800655a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800655e:	2b00      	cmp	r3, #0
 8006560:	d10a      	bne.n	8006578 <USB_EPStartXfer+0x48a>
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	881b      	ldrh	r3, [r3, #0]
 8006566:	b29b      	uxth	r3, r3
 8006568:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800656c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006570:	b29a      	uxth	r2, r3
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	801a      	strh	r2, [r3, #0]
 8006576:	e047      	b.n	8006608 <USB_EPStartXfer+0x51a>
 8006578:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800657c:	085b      	lsrs	r3, r3, #1
 800657e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006582:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006586:	f003 0301 	and.w	r3, r3, #1
 800658a:	2b00      	cmp	r3, #0
 800658c:	d004      	beq.n	8006598 <USB_EPStartXfer+0x4aa>
 800658e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006592:	3301      	adds	r3, #1
 8006594:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	881b      	ldrh	r3, [r3, #0]
 800659c:	b29a      	uxth	r2, r3
 800659e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	029b      	lsls	r3, r3, #10
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	4313      	orrs	r3, r2
 80065aa:	b29a      	uxth	r2, r3
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	801a      	strh	r2, [r3, #0]
 80065b0:	e02a      	b.n	8006608 <USB_EPStartXfer+0x51a>
 80065b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	785b      	ldrb	r3, [r3, #1]
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d122      	bne.n	8006608 <USB_EPStartXfer+0x51a>
 80065c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	623b      	str	r3, [r7, #32]
 80065ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065dc:	b29b      	uxth	r3, r3
 80065de:	461a      	mov	r2, r3
 80065e0:	6a3b      	ldr	r3, [r7, #32]
 80065e2:	4413      	add	r3, r2
 80065e4:	623b      	str	r3, [r7, #32]
 80065e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	00da      	lsls	r2, r3, #3
 80065f4:	6a3b      	ldr	r3, [r7, #32]
 80065f6:	4413      	add	r3, r2
 80065f8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80065fc:	61fb      	str	r3, [r7, #28]
 80065fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006602:	b29a      	uxth	r2, r3
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006608:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800660c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	891b      	ldrh	r3, [r3, #8]
 8006614:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006618:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800661c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	6959      	ldr	r1, [r3, #20]
 8006624:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006628:	b29b      	uxth	r3, r3
 800662a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800662e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006632:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006636:	6800      	ldr	r0, [r0, #0]
 8006638:	f001 fa38 	bl	8007aac <USB_WritePMA>
 800663c:	e3ee      	b.n	8006e1c <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800663e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006642:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	785b      	ldrb	r3, [r3, #1]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d177      	bne.n	800673e <USB_EPStartXfer+0x650>
 800664e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006652:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	64bb      	str	r3, [r7, #72]	; 0x48
 800665a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800665e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006668:	b29b      	uxth	r3, r3
 800666a:	461a      	mov	r2, r3
 800666c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800666e:	4413      	add	r3, r2
 8006670:	64bb      	str	r3, [r7, #72]	; 0x48
 8006672:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006676:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	00da      	lsls	r2, r3, #3
 8006680:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006682:	4413      	add	r3, r2
 8006684:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006688:	647b      	str	r3, [r7, #68]	; 0x44
 800668a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800668c:	881b      	ldrh	r3, [r3, #0]
 800668e:	b29b      	uxth	r3, r3
 8006690:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006694:	b29a      	uxth	r2, r3
 8006696:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006698:	801a      	strh	r2, [r3, #0]
 800669a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800669e:	2b3e      	cmp	r3, #62	; 0x3e
 80066a0:	d921      	bls.n	80066e6 <USB_EPStartXfer+0x5f8>
 80066a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066a6:	095b      	lsrs	r3, r3, #5
 80066a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80066ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066b0:	f003 031f 	and.w	r3, r3, #31
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d104      	bne.n	80066c2 <USB_EPStartXfer+0x5d4>
 80066b8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80066bc:	3b01      	subs	r3, #1
 80066be:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80066c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066c4:	881b      	ldrh	r3, [r3, #0]
 80066c6:	b29a      	uxth	r2, r3
 80066c8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	029b      	lsls	r3, r3, #10
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	4313      	orrs	r3, r2
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066de:	b29a      	uxth	r2, r3
 80066e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066e2:	801a      	strh	r2, [r3, #0]
 80066e4:	e056      	b.n	8006794 <USB_EPStartXfer+0x6a6>
 80066e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d10a      	bne.n	8006704 <USB_EPStartXfer+0x616>
 80066ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066f0:	881b      	ldrh	r3, [r3, #0]
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066fc:	b29a      	uxth	r2, r3
 80066fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006700:	801a      	strh	r2, [r3, #0]
 8006702:	e047      	b.n	8006794 <USB_EPStartXfer+0x6a6>
 8006704:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006708:	085b      	lsrs	r3, r3, #1
 800670a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800670e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006712:	f003 0301 	and.w	r3, r3, #1
 8006716:	2b00      	cmp	r3, #0
 8006718:	d004      	beq.n	8006724 <USB_EPStartXfer+0x636>
 800671a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800671e:	3301      	adds	r3, #1
 8006720:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006724:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006726:	881b      	ldrh	r3, [r3, #0]
 8006728:	b29a      	uxth	r2, r3
 800672a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800672e:	b29b      	uxth	r3, r3
 8006730:	029b      	lsls	r3, r3, #10
 8006732:	b29b      	uxth	r3, r3
 8006734:	4313      	orrs	r3, r2
 8006736:	b29a      	uxth	r2, r3
 8006738:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800673a:	801a      	strh	r2, [r3, #0]
 800673c:	e02a      	b.n	8006794 <USB_EPStartXfer+0x6a6>
 800673e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006742:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	785b      	ldrb	r3, [r3, #1]
 800674a:	2b01      	cmp	r3, #1
 800674c:	d122      	bne.n	8006794 <USB_EPStartXfer+0x6a6>
 800674e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006752:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	653b      	str	r3, [r7, #80]	; 0x50
 800675a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800675e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006768:	b29b      	uxth	r3, r3
 800676a:	461a      	mov	r2, r3
 800676c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800676e:	4413      	add	r3, r2
 8006770:	653b      	str	r3, [r7, #80]	; 0x50
 8006772:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006776:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	00da      	lsls	r2, r3, #3
 8006780:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006782:	4413      	add	r3, r2
 8006784:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006788:	64fb      	str	r3, [r7, #76]	; 0x4c
 800678a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800678e:	b29a      	uxth	r2, r3
 8006790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006792:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006794:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006798:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	891b      	ldrh	r3, [r3, #8]
 80067a0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	6959      	ldr	r1, [r3, #20]
 80067b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80067ba:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80067be:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80067c2:	6800      	ldr	r0, [r0, #0]
 80067c4:	f001 f972 	bl	8007aac <USB_WritePMA>
            ep->xfer_buff += len;
 80067c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	695a      	ldr	r2, [r3, #20]
 80067d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067d8:	441a      	add	r2, r3
 80067da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80067e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	6a1a      	ldr	r2, [r3, #32]
 80067f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	429a      	cmp	r2, r3
 8006800:	d90f      	bls.n	8006822 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006802:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006806:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	6a1a      	ldr	r2, [r3, #32]
 800680e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006812:	1ad2      	subs	r2, r2, r3
 8006814:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006818:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	621a      	str	r2, [r3, #32]
 8006820:	e00e      	b.n	8006840 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006822:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006826:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	6a1b      	ldr	r3, [r3, #32]
 800682e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006832:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006836:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2200      	movs	r2, #0
 800683e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006840:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006844:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	643b      	str	r3, [r7, #64]	; 0x40
 800684c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006850:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	785b      	ldrb	r3, [r3, #1]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d177      	bne.n	800694c <USB_EPStartXfer+0x85e>
 800685c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006860:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	63bb      	str	r3, [r7, #56]	; 0x38
 8006868:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800686c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006876:	b29b      	uxth	r3, r3
 8006878:	461a      	mov	r2, r3
 800687a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800687c:	4413      	add	r3, r2
 800687e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006880:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006884:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	00da      	lsls	r2, r3, #3
 800688e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006890:	4413      	add	r3, r2
 8006892:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006896:	637b      	str	r3, [r7, #52]	; 0x34
 8006898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800689a:	881b      	ldrh	r3, [r3, #0]
 800689c:	b29b      	uxth	r3, r3
 800689e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068a2:	b29a      	uxth	r2, r3
 80068a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068a6:	801a      	strh	r2, [r3, #0]
 80068a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068ac:	2b3e      	cmp	r3, #62	; 0x3e
 80068ae:	d921      	bls.n	80068f4 <USB_EPStartXfer+0x806>
 80068b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068b4:	095b      	lsrs	r3, r3, #5
 80068b6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80068ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068be:	f003 031f 	and.w	r3, r3, #31
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d104      	bne.n	80068d0 <USB_EPStartXfer+0x7e2>
 80068c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068ca:	3b01      	subs	r3, #1
 80068cc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80068d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068d2:	881b      	ldrh	r3, [r3, #0]
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068da:	b29b      	uxth	r3, r3
 80068dc:	029b      	lsls	r3, r3, #10
 80068de:	b29b      	uxth	r3, r3
 80068e0:	4313      	orrs	r3, r2
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068ec:	b29a      	uxth	r2, r3
 80068ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068f0:	801a      	strh	r2, [r3, #0]
 80068f2:	e050      	b.n	8006996 <USB_EPStartXfer+0x8a8>
 80068f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d10a      	bne.n	8006912 <USB_EPStartXfer+0x824>
 80068fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068fe:	881b      	ldrh	r3, [r3, #0]
 8006900:	b29b      	uxth	r3, r3
 8006902:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006906:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800690a:	b29a      	uxth	r2, r3
 800690c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800690e:	801a      	strh	r2, [r3, #0]
 8006910:	e041      	b.n	8006996 <USB_EPStartXfer+0x8a8>
 8006912:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006916:	085b      	lsrs	r3, r3, #1
 8006918:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800691c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006920:	f003 0301 	and.w	r3, r3, #1
 8006924:	2b00      	cmp	r3, #0
 8006926:	d004      	beq.n	8006932 <USB_EPStartXfer+0x844>
 8006928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800692c:	3301      	adds	r3, #1
 800692e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006934:	881b      	ldrh	r3, [r3, #0]
 8006936:	b29a      	uxth	r2, r3
 8006938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800693c:	b29b      	uxth	r3, r3
 800693e:	029b      	lsls	r3, r3, #10
 8006940:	b29b      	uxth	r3, r3
 8006942:	4313      	orrs	r3, r2
 8006944:	b29a      	uxth	r2, r3
 8006946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006948:	801a      	strh	r2, [r3, #0]
 800694a:	e024      	b.n	8006996 <USB_EPStartXfer+0x8a8>
 800694c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006950:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	785b      	ldrb	r3, [r3, #1]
 8006958:	2b01      	cmp	r3, #1
 800695a:	d11c      	bne.n	8006996 <USB_EPStartXfer+0x8a8>
 800695c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006960:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800696a:	b29b      	uxth	r3, r3
 800696c:	461a      	mov	r2, r3
 800696e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006970:	4413      	add	r3, r2
 8006972:	643b      	str	r3, [r7, #64]	; 0x40
 8006974:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006978:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	00da      	lsls	r2, r3, #3
 8006982:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006984:	4413      	add	r3, r2
 8006986:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800698a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800698c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006990:	b29a      	uxth	r2, r3
 8006992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006994:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006996:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800699a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	895b      	ldrh	r3, [r3, #10]
 80069a2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	6959      	ldr	r1, [r3, #20]
 80069b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80069bc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80069c0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80069c4:	6800      	ldr	r0, [r0, #0]
 80069c6:	f001 f871 	bl	8007aac <USB_WritePMA>
 80069ca:	e227      	b.n	8006e1c <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80069cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	6a1b      	ldr	r3, [r3, #32]
 80069d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80069dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	4413      	add	r3, r2
 80069f6:	881b      	ldrh	r3, [r3, #0]
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80069fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a02:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006a06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	441a      	add	r2, r3
 8006a20:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006a24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006a38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	461a      	mov	r2, r3
 8006a56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a58:	4413      	add	r3, r2
 8006a5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	00da      	lsls	r2, r3, #3
 8006a6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a6c:	4413      	add	r3, r2
 8006a6e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a72:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a78:	b29a      	uxth	r2, r3
 8006a7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a7c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006a7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	891b      	ldrh	r3, [r3, #8]
 8006a8a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	6959      	ldr	r1, [r3, #20]
 8006a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006aa4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006aa8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006aac:	6800      	ldr	r0, [r0, #0]
 8006aae:	f000 fffd 	bl	8007aac <USB_WritePMA>
 8006ab2:	e1b3      	b.n	8006e1c <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006ab4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ab8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	6a1a      	ldr	r2, [r3, #32]
 8006ac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ac4:	1ad2      	subs	r2, r2, r3
 8006ac6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006ad2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ad6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ae0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	4413      	add	r3, r2
 8006aec:	881b      	ldrh	r3, [r3, #0]
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	f000 80c6 	beq.w	8006c86 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006afa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006afe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	673b      	str	r3, [r7, #112]	; 0x70
 8006b06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	785b      	ldrb	r3, [r3, #1]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d177      	bne.n	8006c06 <USB_EPStartXfer+0xb18>
 8006b16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	461a      	mov	r2, r3
 8006b34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b36:	4413      	add	r3, r2
 8006b38:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	00da      	lsls	r2, r3, #3
 8006b48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b4a:	4413      	add	r3, r2
 8006b4c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b50:	667b      	str	r3, [r7, #100]	; 0x64
 8006b52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b54:	881b      	ldrh	r3, [r3, #0]
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b5c:	b29a      	uxth	r2, r3
 8006b5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b60:	801a      	strh	r2, [r3, #0]
 8006b62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b66:	2b3e      	cmp	r3, #62	; 0x3e
 8006b68:	d921      	bls.n	8006bae <USB_EPStartXfer+0xac0>
 8006b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b6e:	095b      	lsrs	r3, r3, #5
 8006b70:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006b74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b78:	f003 031f 	and.w	r3, r3, #31
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d104      	bne.n	8006b8a <USB_EPStartXfer+0xa9c>
 8006b80:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006b84:	3b01      	subs	r3, #1
 8006b86:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006b8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b8c:	881b      	ldrh	r3, [r3, #0]
 8006b8e:	b29a      	uxth	r2, r3
 8006b90:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	029b      	lsls	r3, r3, #10
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ba2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ba6:	b29a      	uxth	r2, r3
 8006ba8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006baa:	801a      	strh	r2, [r3, #0]
 8006bac:	e050      	b.n	8006c50 <USB_EPStartXfer+0xb62>
 8006bae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d10a      	bne.n	8006bcc <USB_EPStartXfer+0xade>
 8006bb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bb8:	881b      	ldrh	r3, [r3, #0]
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bc4:	b29a      	uxth	r2, r3
 8006bc6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bc8:	801a      	strh	r2, [r3, #0]
 8006bca:	e041      	b.n	8006c50 <USB_EPStartXfer+0xb62>
 8006bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bd0:	085b      	lsrs	r3, r3, #1
 8006bd2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bda:	f003 0301 	and.w	r3, r3, #1
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d004      	beq.n	8006bec <USB_EPStartXfer+0xafe>
 8006be2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006be6:	3301      	adds	r3, #1
 8006be8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006bec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bee:	881b      	ldrh	r3, [r3, #0]
 8006bf0:	b29a      	uxth	r2, r3
 8006bf2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	029b      	lsls	r3, r3, #10
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	b29a      	uxth	r2, r3
 8006c00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c02:	801a      	strh	r2, [r3, #0]
 8006c04:	e024      	b.n	8006c50 <USB_EPStartXfer+0xb62>
 8006c06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	785b      	ldrb	r3, [r3, #1]
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d11c      	bne.n	8006c50 <USB_EPStartXfer+0xb62>
 8006c16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	461a      	mov	r2, r3
 8006c28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c2a:	4413      	add	r3, r2
 8006c2c:	673b      	str	r3, [r7, #112]	; 0x70
 8006c2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	00da      	lsls	r2, r3, #3
 8006c3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c3e:	4413      	add	r3, r2
 8006c40:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c44:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c4a:	b29a      	uxth	r2, r3
 8006c4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c4e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006c50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	895b      	ldrh	r3, [r3, #10]
 8006c5c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	6959      	ldr	r1, [r3, #20]
 8006c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006c76:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006c7a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006c7e:	6800      	ldr	r0, [r0, #0]
 8006c80:	f000 ff14 	bl	8007aac <USB_WritePMA>
 8006c84:	e0ca      	b.n	8006e1c <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006c86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	785b      	ldrb	r3, [r3, #1]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d177      	bne.n	8006d86 <USB_EPStartXfer+0xc98>
 8006c96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006ca2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ca6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006cb6:	4413      	add	r3, r2
 8006cb8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006cba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	00da      	lsls	r2, r3, #3
 8006cc8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006cca:	4413      	add	r3, r2
 8006ccc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006cd0:	67bb      	str	r3, [r7, #120]	; 0x78
 8006cd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cd4:	881b      	ldrh	r3, [r3, #0]
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006cdc:	b29a      	uxth	r2, r3
 8006cde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ce0:	801a      	strh	r2, [r3, #0]
 8006ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ce6:	2b3e      	cmp	r3, #62	; 0x3e
 8006ce8:	d921      	bls.n	8006d2e <USB_EPStartXfer+0xc40>
 8006cea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cee:	095b      	lsrs	r3, r3, #5
 8006cf0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cf8:	f003 031f 	and.w	r3, r3, #31
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d104      	bne.n	8006d0a <USB_EPStartXfer+0xc1c>
 8006d00:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006d04:	3b01      	subs	r3, #1
 8006d06:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006d0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d0c:	881b      	ldrh	r3, [r3, #0]
 8006d0e:	b29a      	uxth	r2, r3
 8006d10:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	029b      	lsls	r3, r3, #10
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d26:	b29a      	uxth	r2, r3
 8006d28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d2a:	801a      	strh	r2, [r3, #0]
 8006d2c:	e05c      	b.n	8006de8 <USB_EPStartXfer+0xcfa>
 8006d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d10a      	bne.n	8006d4c <USB_EPStartXfer+0xc5e>
 8006d36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d38:	881b      	ldrh	r3, [r3, #0]
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d44:	b29a      	uxth	r2, r3
 8006d46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d48:	801a      	strh	r2, [r3, #0]
 8006d4a:	e04d      	b.n	8006de8 <USB_EPStartXfer+0xcfa>
 8006d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d50:	085b      	lsrs	r3, r3, #1
 8006d52:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d5a:	f003 0301 	and.w	r3, r3, #1
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d004      	beq.n	8006d6c <USB_EPStartXfer+0xc7e>
 8006d62:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006d66:	3301      	adds	r3, #1
 8006d68:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006d6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d6e:	881b      	ldrh	r3, [r3, #0]
 8006d70:	b29a      	uxth	r2, r3
 8006d72:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	029b      	lsls	r3, r3, #10
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	b29a      	uxth	r2, r3
 8006d80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d82:	801a      	strh	r2, [r3, #0]
 8006d84:	e030      	b.n	8006de8 <USB_EPStartXfer+0xcfa>
 8006d86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	785b      	ldrb	r3, [r3, #1]
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d128      	bne.n	8006de8 <USB_EPStartXfer+0xcfa>
 8006d96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006da4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006da8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	461a      	mov	r2, r3
 8006db6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006dba:	4413      	add	r3, r2
 8006dbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006dc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	00da      	lsls	r2, r3, #3
 8006dce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006dd2:	4413      	add	r3, r2
 8006dd4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006dd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006de0:	b29a      	uxth	r2, r3
 8006de2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006de6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006de8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	891b      	ldrh	r3, [r3, #8]
 8006df4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006df8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	6959      	ldr	r1, [r3, #20]
 8006e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006e0e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006e12:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006e16:	6800      	ldr	r0, [r0, #0]
 8006e18:	f000 fe48 	bl	8007aac <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006e1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	4413      	add	r3, r2
 8006e36:	881b      	ldrh	r3, [r3, #0]
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e42:	817b      	strh	r3, [r7, #10]
 8006e44:	897b      	ldrh	r3, [r7, #10]
 8006e46:	f083 0310 	eor.w	r3, r3, #16
 8006e4a:	817b      	strh	r3, [r7, #10]
 8006e4c:	897b      	ldrh	r3, [r7, #10]
 8006e4e:	f083 0320 	eor.w	r3, r3, #32
 8006e52:	817b      	strh	r3, [r7, #10]
 8006e54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	441a      	add	r2, r3
 8006e6e:	897b      	ldrh	r3, [r7, #10]
 8006e70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	8013      	strh	r3, [r2, #0]
 8006e84:	f000 bcde 	b.w	8007844 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006e88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	7b1b      	ldrb	r3, [r3, #12]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	f040 80bb 	bne.w	8007010 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006e9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	699a      	ldr	r2, [r3, #24]
 8006ea6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d917      	bls.n	8006ee6 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006eb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8006ec6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	699a      	ldr	r2, [r3, #24]
 8006ed2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ed6:	1ad2      	subs	r2, r2, r3
 8006ed8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006edc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	619a      	str	r2, [r3, #24]
 8006ee4:	e00e      	b.n	8006f04 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006ee6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	699b      	ldr	r3, [r3, #24]
 8006ef2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8006ef6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006efa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2200      	movs	r2, #0
 8006f02:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006f04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	461a      	mov	r2, r3
 8006f24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f28:	4413      	add	r3, r2
 8006f2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	00da      	lsls	r2, r3, #3
 8006f3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f40:	4413      	add	r3, r2
 8006f42:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006f4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f4e:	881b      	ldrh	r3, [r3, #0]
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f56:	b29a      	uxth	r2, r3
 8006f58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f5c:	801a      	strh	r2, [r3, #0]
 8006f5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f62:	2b3e      	cmp	r3, #62	; 0x3e
 8006f64:	d924      	bls.n	8006fb0 <USB_EPStartXfer+0xec2>
 8006f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f6a:	095b      	lsrs	r3, r3, #5
 8006f6c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f74:	f003 031f 	and.w	r3, r3, #31
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d104      	bne.n	8006f86 <USB_EPStartXfer+0xe98>
 8006f7c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006f80:	3b01      	subs	r3, #1
 8006f82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f8a:	881b      	ldrh	r3, [r3, #0]
 8006f8c:	b29a      	uxth	r2, r3
 8006f8e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	029b      	lsls	r3, r3, #10
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fa4:	b29a      	uxth	r2, r3
 8006fa6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006faa:	801a      	strh	r2, [r3, #0]
 8006fac:	f000 bc10 	b.w	80077d0 <USB_EPStartXfer+0x16e2>
 8006fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d10c      	bne.n	8006fd2 <USB_EPStartXfer+0xee4>
 8006fb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fbc:	881b      	ldrh	r3, [r3, #0]
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fc8:	b29a      	uxth	r2, r3
 8006fca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fce:	801a      	strh	r2, [r3, #0]
 8006fd0:	e3fe      	b.n	80077d0 <USB_EPStartXfer+0x16e2>
 8006fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fd6:	085b      	lsrs	r3, r3, #1
 8006fd8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fe0:	f003 0301 	and.w	r3, r3, #1
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d004      	beq.n	8006ff2 <USB_EPStartXfer+0xf04>
 8006fe8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fec:	3301      	adds	r3, #1
 8006fee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006ff2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ff6:	881b      	ldrh	r3, [r3, #0]
 8006ff8:	b29a      	uxth	r2, r3
 8006ffa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	029b      	lsls	r3, r3, #10
 8007002:	b29b      	uxth	r3, r3
 8007004:	4313      	orrs	r3, r2
 8007006:	b29a      	uxth	r2, r3
 8007008:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800700c:	801a      	strh	r2, [r3, #0]
 800700e:	e3df      	b.n	80077d0 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007010:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007014:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	78db      	ldrb	r3, [r3, #3]
 800701c:	2b02      	cmp	r3, #2
 800701e:	f040 8218 	bne.w	8007452 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007022:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007026:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	785b      	ldrb	r3, [r3, #1]
 800702e:	2b00      	cmp	r3, #0
 8007030:	f040 809d 	bne.w	800716e <USB_EPStartXfer+0x1080>
 8007034:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007038:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007042:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007046:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007050:	b29b      	uxth	r3, r3
 8007052:	461a      	mov	r2, r3
 8007054:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007058:	4413      	add	r3, r2
 800705a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800705e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007062:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	00da      	lsls	r2, r3, #3
 800706c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007070:	4413      	add	r3, r2
 8007072:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007076:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800707a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800707e:	881b      	ldrh	r3, [r3, #0]
 8007080:	b29b      	uxth	r3, r3
 8007082:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007086:	b29a      	uxth	r2, r3
 8007088:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800708c:	801a      	strh	r2, [r3, #0]
 800708e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007092:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	2b3e      	cmp	r3, #62	; 0x3e
 800709c:	d92b      	bls.n	80070f6 <USB_EPStartXfer+0x1008>
 800709e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	691b      	ldr	r3, [r3, #16]
 80070aa:	095b      	lsrs	r3, r3, #5
 80070ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80070b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	691b      	ldr	r3, [r3, #16]
 80070bc:	f003 031f 	and.w	r3, r3, #31
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d104      	bne.n	80070ce <USB_EPStartXfer+0xfe0>
 80070c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070c8:	3b01      	subs	r3, #1
 80070ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80070ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80070d2:	881b      	ldrh	r3, [r3, #0]
 80070d4:	b29a      	uxth	r2, r3
 80070d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070da:	b29b      	uxth	r3, r3
 80070dc:	029b      	lsls	r3, r3, #10
 80070de:	b29b      	uxth	r3, r3
 80070e0:	4313      	orrs	r3, r2
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070ec:	b29a      	uxth	r2, r3
 80070ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80070f2:	801a      	strh	r2, [r3, #0]
 80070f4:	e070      	b.n	80071d8 <USB_EPStartXfer+0x10ea>
 80070f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	691b      	ldr	r3, [r3, #16]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d10c      	bne.n	8007120 <USB_EPStartXfer+0x1032>
 8007106:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800710a:	881b      	ldrh	r3, [r3, #0]
 800710c:	b29b      	uxth	r3, r3
 800710e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007112:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007116:	b29a      	uxth	r2, r3
 8007118:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800711c:	801a      	strh	r2, [r3, #0]
 800711e:	e05b      	b.n	80071d8 <USB_EPStartXfer+0x10ea>
 8007120:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007124:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	691b      	ldr	r3, [r3, #16]
 800712c:	085b      	lsrs	r3, r3, #1
 800712e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007132:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007136:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	f003 0301 	and.w	r3, r3, #1
 8007142:	2b00      	cmp	r3, #0
 8007144:	d004      	beq.n	8007150 <USB_EPStartXfer+0x1062>
 8007146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800714a:	3301      	adds	r3, #1
 800714c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007150:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007154:	881b      	ldrh	r3, [r3, #0]
 8007156:	b29a      	uxth	r2, r3
 8007158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800715c:	b29b      	uxth	r3, r3
 800715e:	029b      	lsls	r3, r3, #10
 8007160:	b29b      	uxth	r3, r3
 8007162:	4313      	orrs	r3, r2
 8007164:	b29a      	uxth	r2, r3
 8007166:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800716a:	801a      	strh	r2, [r3, #0]
 800716c:	e034      	b.n	80071d8 <USB_EPStartXfer+0x10ea>
 800716e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007172:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	785b      	ldrb	r3, [r3, #1]
 800717a:	2b01      	cmp	r3, #1
 800717c:	d12c      	bne.n	80071d8 <USB_EPStartXfer+0x10ea>
 800717e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007182:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800718c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007190:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800719a:	b29b      	uxth	r3, r3
 800719c:	461a      	mov	r2, r3
 800719e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80071a2:	4413      	add	r3, r2
 80071a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80071a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	00da      	lsls	r2, r3, #3
 80071b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80071ba:	4413      	add	r3, r2
 80071bc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80071c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80071c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	b29a      	uxth	r2, r3
 80071d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80071d6:	801a      	strh	r2, [r3, #0]
 80071d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80071e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	785b      	ldrb	r3, [r3, #1]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	f040 809d 	bne.w	8007332 <USB_EPStartXfer+0x1244>
 80071f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007206:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800720a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007214:	b29b      	uxth	r3, r3
 8007216:	461a      	mov	r2, r3
 8007218:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800721c:	4413      	add	r3, r2
 800721e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007222:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007226:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	00da      	lsls	r2, r3, #3
 8007230:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007234:	4413      	add	r3, r2
 8007236:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800723a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800723e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007242:	881b      	ldrh	r3, [r3, #0]
 8007244:	b29b      	uxth	r3, r3
 8007246:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800724a:	b29a      	uxth	r2, r3
 800724c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007250:	801a      	strh	r2, [r3, #0]
 8007252:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007256:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	2b3e      	cmp	r3, #62	; 0x3e
 8007260:	d92b      	bls.n	80072ba <USB_EPStartXfer+0x11cc>
 8007262:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007266:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	691b      	ldr	r3, [r3, #16]
 800726e:	095b      	lsrs	r3, r3, #5
 8007270:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007274:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007278:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	f003 031f 	and.w	r3, r3, #31
 8007284:	2b00      	cmp	r3, #0
 8007286:	d104      	bne.n	8007292 <USB_EPStartXfer+0x11a4>
 8007288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800728c:	3b01      	subs	r3, #1
 800728e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007292:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007296:	881b      	ldrh	r3, [r3, #0]
 8007298:	b29a      	uxth	r2, r3
 800729a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800729e:	b29b      	uxth	r3, r3
 80072a0:	029b      	lsls	r3, r3, #10
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	4313      	orrs	r3, r2
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072b0:	b29a      	uxth	r2, r3
 80072b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072b6:	801a      	strh	r2, [r3, #0]
 80072b8:	e069      	b.n	800738e <USB_EPStartXfer+0x12a0>
 80072ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	691b      	ldr	r3, [r3, #16]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d10c      	bne.n	80072e4 <USB_EPStartXfer+0x11f6>
 80072ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072ce:	881b      	ldrh	r3, [r3, #0]
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072da:	b29a      	uxth	r2, r3
 80072dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072e0:	801a      	strh	r2, [r3, #0]
 80072e2:	e054      	b.n	800738e <USB_EPStartXfer+0x12a0>
 80072e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	691b      	ldr	r3, [r3, #16]
 80072f0:	085b      	lsrs	r3, r3, #1
 80072f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80072f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	f003 0301 	and.w	r3, r3, #1
 8007306:	2b00      	cmp	r3, #0
 8007308:	d004      	beq.n	8007314 <USB_EPStartXfer+0x1226>
 800730a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800730e:	3301      	adds	r3, #1
 8007310:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007314:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007318:	881b      	ldrh	r3, [r3, #0]
 800731a:	b29a      	uxth	r2, r3
 800731c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007320:	b29b      	uxth	r3, r3
 8007322:	029b      	lsls	r3, r3, #10
 8007324:	b29b      	uxth	r3, r3
 8007326:	4313      	orrs	r3, r2
 8007328:	b29a      	uxth	r2, r3
 800732a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800732e:	801a      	strh	r2, [r3, #0]
 8007330:	e02d      	b.n	800738e <USB_EPStartXfer+0x12a0>
 8007332:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007336:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	785b      	ldrb	r3, [r3, #1]
 800733e:	2b01      	cmp	r3, #1
 8007340:	d125      	bne.n	800738e <USB_EPStartXfer+0x12a0>
 8007342:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007346:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007350:	b29b      	uxth	r3, r3
 8007352:	461a      	mov	r2, r3
 8007354:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007358:	4413      	add	r3, r2
 800735a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800735e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007362:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	00da      	lsls	r2, r3, #3
 800736c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007370:	4413      	add	r3, r2
 8007372:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007376:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800737a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800737e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	b29a      	uxth	r2, r3
 8007388:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800738c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800738e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007392:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	69db      	ldr	r3, [r3, #28]
 800739a:	2b00      	cmp	r3, #0
 800739c:	f000 8218 	beq.w	80077d0 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80073a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	4413      	add	r3, r2
 80073ba:	881b      	ldrh	r3, [r3, #0]
 80073bc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80073c0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80073c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d005      	beq.n	80073d8 <USB_EPStartXfer+0x12ea>
 80073cc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80073d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d10d      	bne.n	80073f4 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80073d8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80073dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	f040 81f5 	bne.w	80077d0 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80073e6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80073ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	f040 81ee 	bne.w	80077d0 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80073f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007402:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	4413      	add	r3, r2
 800740e:	881b      	ldrh	r3, [r3, #0]
 8007410:	b29b      	uxth	r3, r3
 8007412:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800741a:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800741e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007422:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800742c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	441a      	add	r2, r3
 8007438:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800743c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007440:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007444:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007448:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800744c:	b29b      	uxth	r3, r3
 800744e:	8013      	strh	r3, [r2, #0]
 8007450:	e1be      	b.n	80077d0 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007456:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	78db      	ldrb	r3, [r3, #3]
 800745e:	2b01      	cmp	r3, #1
 8007460:	f040 81b4 	bne.w	80077cc <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007464:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007468:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	699a      	ldr	r2, [r3, #24]
 8007470:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007474:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	691b      	ldr	r3, [r3, #16]
 800747c:	429a      	cmp	r2, r3
 800747e:	d917      	bls.n	80074b0 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8007480:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007484:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	691b      	ldr	r3, [r3, #16]
 800748c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8007490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007494:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	699a      	ldr	r2, [r3, #24]
 800749c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074a0:	1ad2      	subs	r2, r2, r3
 80074a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	619a      	str	r2, [r3, #24]
 80074ae:	e00e      	b.n	80074ce <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80074b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	699b      	ldr	r3, [r3, #24]
 80074bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80074c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2200      	movs	r2, #0
 80074cc:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80074ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	785b      	ldrb	r3, [r3, #1]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	f040 8085 	bne.w	80075ea <USB_EPStartXfer+0x14fc>
 80074e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80074ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	461a      	mov	r2, r3
 8007500:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007504:	4413      	add	r3, r2
 8007506:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800750a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800750e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	00da      	lsls	r2, r3, #3
 8007518:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800751c:	4413      	add	r3, r2
 800751e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007522:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007526:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800752a:	881b      	ldrh	r3, [r3, #0]
 800752c:	b29b      	uxth	r3, r3
 800752e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007532:	b29a      	uxth	r2, r3
 8007534:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007538:	801a      	strh	r2, [r3, #0]
 800753a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800753e:	2b3e      	cmp	r3, #62	; 0x3e
 8007540:	d923      	bls.n	800758a <USB_EPStartXfer+0x149c>
 8007542:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007546:	095b      	lsrs	r3, r3, #5
 8007548:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800754c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007550:	f003 031f 	and.w	r3, r3, #31
 8007554:	2b00      	cmp	r3, #0
 8007556:	d104      	bne.n	8007562 <USB_EPStartXfer+0x1474>
 8007558:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800755c:	3b01      	subs	r3, #1
 800755e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007562:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007566:	881b      	ldrh	r3, [r3, #0]
 8007568:	b29a      	uxth	r2, r3
 800756a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800756e:	b29b      	uxth	r3, r3
 8007570:	029b      	lsls	r3, r3, #10
 8007572:	b29b      	uxth	r3, r3
 8007574:	4313      	orrs	r3, r2
 8007576:	b29b      	uxth	r3, r3
 8007578:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800757c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007580:	b29a      	uxth	r2, r3
 8007582:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007586:	801a      	strh	r2, [r3, #0]
 8007588:	e060      	b.n	800764c <USB_EPStartXfer+0x155e>
 800758a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800758e:	2b00      	cmp	r3, #0
 8007590:	d10c      	bne.n	80075ac <USB_EPStartXfer+0x14be>
 8007592:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007596:	881b      	ldrh	r3, [r3, #0]
 8007598:	b29b      	uxth	r3, r3
 800759a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800759e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075a2:	b29a      	uxth	r2, r3
 80075a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80075a8:	801a      	strh	r2, [r3, #0]
 80075aa:	e04f      	b.n	800764c <USB_EPStartXfer+0x155e>
 80075ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075b0:	085b      	lsrs	r3, r3, #1
 80075b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80075b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075ba:	f003 0301 	and.w	r3, r3, #1
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d004      	beq.n	80075cc <USB_EPStartXfer+0x14de>
 80075c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075c6:	3301      	adds	r3, #1
 80075c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80075cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80075d0:	881b      	ldrh	r3, [r3, #0]
 80075d2:	b29a      	uxth	r2, r3
 80075d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075d8:	b29b      	uxth	r3, r3
 80075da:	029b      	lsls	r3, r3, #10
 80075dc:	b29b      	uxth	r3, r3
 80075de:	4313      	orrs	r3, r2
 80075e0:	b29a      	uxth	r2, r3
 80075e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80075e6:	801a      	strh	r2, [r3, #0]
 80075e8:	e030      	b.n	800764c <USB_EPStartXfer+0x155e>
 80075ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	785b      	ldrb	r3, [r3, #1]
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d128      	bne.n	800764c <USB_EPStartXfer+0x155e>
 80075fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007608:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800760c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007616:	b29b      	uxth	r3, r3
 8007618:	461a      	mov	r2, r3
 800761a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800761e:	4413      	add	r3, r2
 8007620:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007624:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007628:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	00da      	lsls	r2, r3, #3
 8007632:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007636:	4413      	add	r3, r2
 8007638:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800763c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007640:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007644:	b29a      	uxth	r2, r3
 8007646:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800764a:	801a      	strh	r2, [r3, #0]
 800764c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007650:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800765a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800765e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	785b      	ldrb	r3, [r3, #1]
 8007666:	2b00      	cmp	r3, #0
 8007668:	f040 8085 	bne.w	8007776 <USB_EPStartXfer+0x1688>
 800766c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007670:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800767a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800767e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007688:	b29b      	uxth	r3, r3
 800768a:	461a      	mov	r2, r3
 800768c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007690:	4413      	add	r3, r2
 8007692:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007696:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800769a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	00da      	lsls	r2, r3, #3
 80076a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80076a8:	4413      	add	r3, r2
 80076aa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80076ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80076b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80076b6:	881b      	ldrh	r3, [r3, #0]
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80076be:	b29a      	uxth	r2, r3
 80076c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80076c4:	801a      	strh	r2, [r3, #0]
 80076c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076ca:	2b3e      	cmp	r3, #62	; 0x3e
 80076cc:	d923      	bls.n	8007716 <USB_EPStartXfer+0x1628>
 80076ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076d2:	095b      	lsrs	r3, r3, #5
 80076d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80076d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076dc:	f003 031f 	and.w	r3, r3, #31
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d104      	bne.n	80076ee <USB_EPStartXfer+0x1600>
 80076e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076e8:	3b01      	subs	r3, #1
 80076ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80076ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80076f2:	881b      	ldrh	r3, [r3, #0]
 80076f4:	b29a      	uxth	r2, r3
 80076f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	029b      	lsls	r3, r3, #10
 80076fe:	b29b      	uxth	r3, r3
 8007700:	4313      	orrs	r3, r2
 8007702:	b29b      	uxth	r3, r3
 8007704:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007708:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800770c:	b29a      	uxth	r2, r3
 800770e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007712:	801a      	strh	r2, [r3, #0]
 8007714:	e05c      	b.n	80077d0 <USB_EPStartXfer+0x16e2>
 8007716:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800771a:	2b00      	cmp	r3, #0
 800771c:	d10c      	bne.n	8007738 <USB_EPStartXfer+0x164a>
 800771e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007722:	881b      	ldrh	r3, [r3, #0]
 8007724:	b29b      	uxth	r3, r3
 8007726:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800772a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800772e:	b29a      	uxth	r2, r3
 8007730:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007734:	801a      	strh	r2, [r3, #0]
 8007736:	e04b      	b.n	80077d0 <USB_EPStartXfer+0x16e2>
 8007738:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800773c:	085b      	lsrs	r3, r3, #1
 800773e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007742:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007746:	f003 0301 	and.w	r3, r3, #1
 800774a:	2b00      	cmp	r3, #0
 800774c:	d004      	beq.n	8007758 <USB_EPStartXfer+0x166a>
 800774e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007752:	3301      	adds	r3, #1
 8007754:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007758:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800775c:	881b      	ldrh	r3, [r3, #0]
 800775e:	b29a      	uxth	r2, r3
 8007760:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007764:	b29b      	uxth	r3, r3
 8007766:	029b      	lsls	r3, r3, #10
 8007768:	b29b      	uxth	r3, r3
 800776a:	4313      	orrs	r3, r2
 800776c:	b29a      	uxth	r2, r3
 800776e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007772:	801a      	strh	r2, [r3, #0]
 8007774:	e02c      	b.n	80077d0 <USB_EPStartXfer+0x16e2>
 8007776:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800777a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	785b      	ldrb	r3, [r3, #1]
 8007782:	2b01      	cmp	r3, #1
 8007784:	d124      	bne.n	80077d0 <USB_EPStartXfer+0x16e2>
 8007786:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800778a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007794:	b29b      	uxth	r3, r3
 8007796:	461a      	mov	r2, r3
 8007798:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800779c:	4413      	add	r3, r2
 800779e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80077a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	00da      	lsls	r2, r3, #3
 80077b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80077b4:	4413      	add	r3, r2
 80077b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80077ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80077be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077c2:	b29a      	uxth	r2, r3
 80077c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80077c8:	801a      	strh	r2, [r3, #0]
 80077ca:	e001      	b.n	80077d0 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80077cc:	2301      	movs	r3, #1
 80077ce:	e03a      	b.n	8007846 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80077d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	009b      	lsls	r3, r3, #2
 80077e8:	4413      	add	r3, r2
 80077ea:	881b      	ldrh	r3, [r3, #0]
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077f6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80077fa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80077fe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007802:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007806:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800780a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800780e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007812:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007816:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007820:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	441a      	add	r2, r3
 800782c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007830:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007834:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007838:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800783c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007840:	b29b      	uxth	r3, r3
 8007842:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007844:	2300      	movs	r3, #0
}
 8007846:	4618      	mov	r0, r3
 8007848:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007850:	b480      	push	{r7}
 8007852:	b085      	sub	sp, #20
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	785b      	ldrb	r3, [r3, #1]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d020      	beq.n	80078a4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	009b      	lsls	r3, r3, #2
 800786a:	4413      	add	r3, r2
 800786c:	881b      	ldrh	r3, [r3, #0]
 800786e:	b29b      	uxth	r3, r3
 8007870:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007874:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007878:	81bb      	strh	r3, [r7, #12]
 800787a:	89bb      	ldrh	r3, [r7, #12]
 800787c:	f083 0310 	eor.w	r3, r3, #16
 8007880:	81bb      	strh	r3, [r7, #12]
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	441a      	add	r2, r3
 800788c:	89bb      	ldrh	r3, [r7, #12]
 800788e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007892:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800789a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800789e:	b29b      	uxth	r3, r3
 80078a0:	8013      	strh	r3, [r2, #0]
 80078a2:	e01f      	b.n	80078e4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	4413      	add	r3, r2
 80078ae:	881b      	ldrh	r3, [r3, #0]
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078ba:	81fb      	strh	r3, [r7, #14]
 80078bc:	89fb      	ldrh	r3, [r7, #14]
 80078be:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80078c2:	81fb      	strh	r3, [r7, #14]
 80078c4:	687a      	ldr	r2, [r7, #4]
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	781b      	ldrb	r3, [r3, #0]
 80078ca:	009b      	lsls	r3, r3, #2
 80078cc:	441a      	add	r2, r3
 80078ce:	89fb      	ldrh	r3, [r7, #14]
 80078d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80078e4:	2300      	movs	r3, #0
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3714      	adds	r7, #20
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr

080078f2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80078f2:	b480      	push	{r7}
 80078f4:	b087      	sub	sp, #28
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
 80078fa:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	7b1b      	ldrb	r3, [r3, #12]
 8007900:	2b00      	cmp	r3, #0
 8007902:	f040 809d 	bne.w	8007a40 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	785b      	ldrb	r3, [r3, #1]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d04c      	beq.n	80079a8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	4413      	add	r3, r2
 8007918:	881b      	ldrh	r3, [r3, #0]
 800791a:	823b      	strh	r3, [r7, #16]
 800791c:	8a3b      	ldrh	r3, [r7, #16]
 800791e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007922:	2b00      	cmp	r3, #0
 8007924:	d01b      	beq.n	800795e <USB_EPClearStall+0x6c>
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	4413      	add	r3, r2
 8007930:	881b      	ldrh	r3, [r3, #0]
 8007932:	b29b      	uxth	r3, r3
 8007934:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800793c:	81fb      	strh	r3, [r7, #14]
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	441a      	add	r2, r3
 8007948:	89fb      	ldrh	r3, [r7, #14]
 800794a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800794e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007952:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007956:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800795a:	b29b      	uxth	r3, r3
 800795c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	78db      	ldrb	r3, [r3, #3]
 8007962:	2b01      	cmp	r3, #1
 8007964:	d06c      	beq.n	8007a40 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	4413      	add	r3, r2
 8007970:	881b      	ldrh	r3, [r3, #0]
 8007972:	b29b      	uxth	r3, r3
 8007974:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007978:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800797c:	81bb      	strh	r3, [r7, #12]
 800797e:	89bb      	ldrh	r3, [r7, #12]
 8007980:	f083 0320 	eor.w	r3, r3, #32
 8007984:	81bb      	strh	r3, [r7, #12]
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	441a      	add	r2, r3
 8007990:	89bb      	ldrh	r3, [r7, #12]
 8007992:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007996:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800799a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800799e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	8013      	strh	r3, [r2, #0]
 80079a6:	e04b      	b.n	8007a40 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	4413      	add	r3, r2
 80079b2:	881b      	ldrh	r3, [r3, #0]
 80079b4:	82fb      	strh	r3, [r7, #22]
 80079b6:	8afb      	ldrh	r3, [r7, #22]
 80079b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d01b      	beq.n	80079f8 <USB_EPClearStall+0x106>
 80079c0:	687a      	ldr	r2, [r7, #4]
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	781b      	ldrb	r3, [r3, #0]
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	4413      	add	r3, r2
 80079ca:	881b      	ldrh	r3, [r3, #0]
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079d6:	82bb      	strh	r3, [r7, #20]
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	441a      	add	r2, r3
 80079e2:	8abb      	ldrh	r3, [r7, #20]
 80079e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80079f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	4413      	add	r3, r2
 8007a02:	881b      	ldrh	r3, [r3, #0]
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a0e:	827b      	strh	r3, [r7, #18]
 8007a10:	8a7b      	ldrh	r3, [r7, #18]
 8007a12:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007a16:	827b      	strh	r3, [r7, #18]
 8007a18:	8a7b      	ldrh	r3, [r7, #18]
 8007a1a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007a1e:	827b      	strh	r3, [r7, #18]
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	441a      	add	r2, r3
 8007a2a:	8a7b      	ldrh	r3, [r7, #18]
 8007a2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007a40:	2300      	movs	r3, #0
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	371c      	adds	r7, #28
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr

08007a4e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007a4e:	b480      	push	{r7}
 8007a50:	b083      	sub	sp, #12
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
 8007a56:	460b      	mov	r3, r1
 8007a58:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007a5a:	78fb      	ldrb	r3, [r7, #3]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d103      	bne.n	8007a68 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2280      	movs	r2, #128	; 0x80
 8007a64:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007a68:	2300      	movs	r3, #0
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	370c      	adds	r7, #12
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr

08007a76 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007a76:	b480      	push	{r7}
 8007a78:	b083      	sub	sp, #12
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007a7e:	2300      	movs	r3, #0
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	370c      	adds	r7, #12
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b085      	sub	sp, #20
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3714      	adds	r7, #20
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b08b      	sub	sp, #44	; 0x2c
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	4611      	mov	r1, r2
 8007ab8:	461a      	mov	r2, r3
 8007aba:	460b      	mov	r3, r1
 8007abc:	80fb      	strh	r3, [r7, #6]
 8007abe:	4613      	mov	r3, r2
 8007ac0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007ac2:	88bb      	ldrh	r3, [r7, #4]
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	085b      	lsrs	r3, r3, #1
 8007ac8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007ad2:	88fa      	ldrh	r2, [r7, #6]
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007adc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007ade:	69bb      	ldr	r3, [r7, #24]
 8007ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8007ae2:	e01b      	b.n	8007b1c <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007aea:	69fb      	ldr	r3, [r7, #28]
 8007aec:	3301      	adds	r3, #1
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	021b      	lsls	r3, r3, #8
 8007af2:	b21a      	sxth	r2, r3
 8007af4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007af8:	4313      	orrs	r3, r2
 8007afa:	b21b      	sxth	r3, r3
 8007afc:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007afe:	6a3b      	ldr	r3, [r7, #32]
 8007b00:	8a7a      	ldrh	r2, [r7, #18]
 8007b02:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007b04:	6a3b      	ldr	r3, [r7, #32]
 8007b06:	3302      	adds	r3, #2
 8007b08:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	3301      	adds	r3, #1
 8007b0e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007b10:	69fb      	ldr	r3, [r7, #28]
 8007b12:	3301      	adds	r3, #1
 8007b14:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b18:	3b01      	subs	r3, #1
 8007b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8007b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d1e0      	bne.n	8007ae4 <USB_WritePMA+0x38>
  }
}
 8007b22:	bf00      	nop
 8007b24:	bf00      	nop
 8007b26:	372c      	adds	r7, #44	; 0x2c
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b08b      	sub	sp, #44	; 0x2c
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	60b9      	str	r1, [r7, #8]
 8007b3a:	4611      	mov	r1, r2
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	460b      	mov	r3, r1
 8007b40:	80fb      	strh	r3, [r7, #6]
 8007b42:	4613      	mov	r3, r2
 8007b44:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007b46:	88bb      	ldrh	r3, [r7, #4]
 8007b48:	085b      	lsrs	r3, r3, #1
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007b56:	88fa      	ldrh	r2, [r7, #6]
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	4413      	add	r3, r2
 8007b5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b60:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007b62:	69bb      	ldr	r3, [r7, #24]
 8007b64:	627b      	str	r3, [r7, #36]	; 0x24
 8007b66:	e018      	b.n	8007b9a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007b68:	6a3b      	ldr	r3, [r7, #32]
 8007b6a:	881b      	ldrh	r3, [r3, #0]
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007b70:	6a3b      	ldr	r3, [r7, #32]
 8007b72:	3302      	adds	r3, #2
 8007b74:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	b2da      	uxtb	r2, r3
 8007b7a:	69fb      	ldr	r3, [r7, #28]
 8007b7c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007b7e:	69fb      	ldr	r3, [r7, #28]
 8007b80:	3301      	adds	r3, #1
 8007b82:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	0a1b      	lsrs	r3, r3, #8
 8007b88:	b2da      	uxtb	r2, r3
 8007b8a:	69fb      	ldr	r3, [r7, #28]
 8007b8c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007b8e:	69fb      	ldr	r3, [r7, #28]
 8007b90:	3301      	adds	r3, #1
 8007b92:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b96:	3b01      	subs	r3, #1
 8007b98:	627b      	str	r3, [r7, #36]	; 0x24
 8007b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d1e3      	bne.n	8007b68 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007ba0:	88bb      	ldrh	r3, [r7, #4]
 8007ba2:	f003 0301 	and.w	r3, r3, #1
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d007      	beq.n	8007bbc <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8007bac:	6a3b      	ldr	r3, [r7, #32]
 8007bae:	881b      	ldrh	r3, [r3, #0]
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	b2da      	uxtb	r2, r3
 8007bb8:	69fb      	ldr	r3, [r7, #28]
 8007bba:	701a      	strb	r2, [r3, #0]
  }
}
 8007bbc:	bf00      	nop
 8007bbe:	372c      	adds	r7, #44	; 0x2c
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr

08007bc8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	460b      	mov	r3, r1
 8007bd2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	7c1b      	ldrb	r3, [r3, #16]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d115      	bne.n	8007c0c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007be0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007be4:	2202      	movs	r2, #2
 8007be6:	2181      	movs	r1, #129	; 0x81
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f001 fe46 	bl	800987a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007bf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bf8:	2202      	movs	r2, #2
 8007bfa:	2101      	movs	r1, #1
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f001 fe3c 	bl	800987a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2201      	movs	r2, #1
 8007c06:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007c0a:	e012      	b.n	8007c32 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007c0c:	2340      	movs	r3, #64	; 0x40
 8007c0e:	2202      	movs	r2, #2
 8007c10:	2181      	movs	r1, #129	; 0x81
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f001 fe31 	bl	800987a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007c1e:	2340      	movs	r3, #64	; 0x40
 8007c20:	2202      	movs	r2, #2
 8007c22:	2101      	movs	r1, #1
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f001 fe28 	bl	800987a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007c32:	2308      	movs	r3, #8
 8007c34:	2203      	movs	r2, #3
 8007c36:	2182      	movs	r1, #130	; 0x82
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f001 fe1e 	bl	800987a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2201      	movs	r2, #1
 8007c42:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007c44:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007c48:	f001 ff40 	bl	8009acc <USBD_static_malloc>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d102      	bne.n	8007c64 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	73fb      	strb	r3, [r7, #15]
 8007c62:	e026      	b.n	8007cb2 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c6a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	2200      	movs	r2, #0
 8007c82:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	7c1b      	ldrb	r3, [r3, #16]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d109      	bne.n	8007ca2 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c98:	2101      	movs	r1, #1
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f001 fedf 	bl	8009a5e <USBD_LL_PrepareReceive>
 8007ca0:	e007      	b.n	8007cb2 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ca8:	2340      	movs	r3, #64	; 0x40
 8007caa:	2101      	movs	r1, #1
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f001 fed6 	bl	8009a5e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3710      	adds	r7, #16
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007ccc:	2181      	movs	r1, #129	; 0x81
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f001 fdf9 	bl	80098c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007cda:	2101      	movs	r1, #1
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f001 fdf2 	bl	80098c6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007cea:	2182      	movs	r1, #130	; 0x82
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f001 fdea 	bl	80098c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d00e      	beq.n	8007d20 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d12:	4618      	mov	r0, r3
 8007d14:	f001 fee8 	bl	8009ae8 <USBD_static_free>
    pdev->pClassData = NULL;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3710      	adds	r7, #16
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}

08007d2a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007d2a:	b580      	push	{r7, lr}
 8007d2c:	b086      	sub	sp, #24
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	6078      	str	r0, [r7, #4]
 8007d32:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d3a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007d40:	2300      	movs	r3, #0
 8007d42:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007d44:	2300      	movs	r3, #0
 8007d46:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d039      	beq.n	8007dc8 <USBD_CDC_Setup+0x9e>
 8007d54:	2b20      	cmp	r3, #32
 8007d56:	d17f      	bne.n	8007e58 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	88db      	ldrh	r3, [r3, #6]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d029      	beq.n	8007db4 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	781b      	ldrb	r3, [r3, #0]
 8007d64:	b25b      	sxtb	r3, r3
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	da11      	bge.n	8007d8e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	683a      	ldr	r2, [r7, #0]
 8007d74:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007d76:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007d78:	683a      	ldr	r2, [r7, #0]
 8007d7a:	88d2      	ldrh	r2, [r2, #6]
 8007d7c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007d7e:	6939      	ldr	r1, [r7, #16]
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	88db      	ldrh	r3, [r3, #6]
 8007d84:	461a      	mov	r2, r3
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f001 f9e3 	bl	8009152 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007d8c:	e06b      	b.n	8007e66 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	785a      	ldrb	r2, [r3, #1]
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	88db      	ldrh	r3, [r3, #6]
 8007d9c:	b2da      	uxtb	r2, r3
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007da4:	6939      	ldr	r1, [r7, #16]
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	88db      	ldrh	r3, [r3, #6]
 8007daa:	461a      	mov	r2, r3
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f001 f9fe 	bl	80091ae <USBD_CtlPrepareRx>
      break;
 8007db2:	e058      	b.n	8007e66 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	683a      	ldr	r2, [r7, #0]
 8007dbe:	7850      	ldrb	r0, [r2, #1]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	6839      	ldr	r1, [r7, #0]
 8007dc4:	4798      	blx	r3
      break;
 8007dc6:	e04e      	b.n	8007e66 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	785b      	ldrb	r3, [r3, #1]
 8007dcc:	2b0b      	cmp	r3, #11
 8007dce:	d02e      	beq.n	8007e2e <USBD_CDC_Setup+0x104>
 8007dd0:	2b0b      	cmp	r3, #11
 8007dd2:	dc38      	bgt.n	8007e46 <USBD_CDC_Setup+0x11c>
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d002      	beq.n	8007dde <USBD_CDC_Setup+0xb4>
 8007dd8:	2b0a      	cmp	r3, #10
 8007dda:	d014      	beq.n	8007e06 <USBD_CDC_Setup+0xdc>
 8007ddc:	e033      	b.n	8007e46 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007de4:	2b03      	cmp	r3, #3
 8007de6:	d107      	bne.n	8007df8 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007de8:	f107 030c 	add.w	r3, r7, #12
 8007dec:	2202      	movs	r2, #2
 8007dee:	4619      	mov	r1, r3
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f001 f9ae 	bl	8009152 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007df6:	e02e      	b.n	8007e56 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007df8:	6839      	ldr	r1, [r7, #0]
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f001 f93e 	bl	800907c <USBD_CtlError>
            ret = USBD_FAIL;
 8007e00:	2302      	movs	r3, #2
 8007e02:	75fb      	strb	r3, [r7, #23]
          break;
 8007e04:	e027      	b.n	8007e56 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e0c:	2b03      	cmp	r3, #3
 8007e0e:	d107      	bne.n	8007e20 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007e10:	f107 030f 	add.w	r3, r7, #15
 8007e14:	2201      	movs	r2, #1
 8007e16:	4619      	mov	r1, r3
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f001 f99a 	bl	8009152 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e1e:	e01a      	b.n	8007e56 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007e20:	6839      	ldr	r1, [r7, #0]
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f001 f92a 	bl	800907c <USBD_CtlError>
            ret = USBD_FAIL;
 8007e28:	2302      	movs	r3, #2
 8007e2a:	75fb      	strb	r3, [r7, #23]
          break;
 8007e2c:	e013      	b.n	8007e56 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e34:	2b03      	cmp	r3, #3
 8007e36:	d00d      	beq.n	8007e54 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007e38:	6839      	ldr	r1, [r7, #0]
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f001 f91e 	bl	800907c <USBD_CtlError>
            ret = USBD_FAIL;
 8007e40:	2302      	movs	r3, #2
 8007e42:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007e44:	e006      	b.n	8007e54 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007e46:	6839      	ldr	r1, [r7, #0]
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f001 f917 	bl	800907c <USBD_CtlError>
          ret = USBD_FAIL;
 8007e4e:	2302      	movs	r3, #2
 8007e50:	75fb      	strb	r3, [r7, #23]
          break;
 8007e52:	e000      	b.n	8007e56 <USBD_CDC_Setup+0x12c>
          break;
 8007e54:	bf00      	nop
      }
      break;
 8007e56:	e006      	b.n	8007e66 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007e58:	6839      	ldr	r1, [r7, #0]
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f001 f90e 	bl	800907c <USBD_CtlError>
      ret = USBD_FAIL;
 8007e60:	2302      	movs	r3, #2
 8007e62:	75fb      	strb	r3, [r7, #23]
      break;
 8007e64:	bf00      	nop
  }

  return ret;
 8007e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3718      	adds	r7, #24
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	460b      	mov	r3, r1
 8007e7a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e82:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e8a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d03a      	beq.n	8007f0c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007e96:	78fa      	ldrb	r2, [r7, #3]
 8007e98:	6879      	ldr	r1, [r7, #4]
 8007e9a:	4613      	mov	r3, r2
 8007e9c:	009b      	lsls	r3, r3, #2
 8007e9e:	4413      	add	r3, r2
 8007ea0:	009b      	lsls	r3, r3, #2
 8007ea2:	440b      	add	r3, r1
 8007ea4:	331c      	adds	r3, #28
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d029      	beq.n	8007f00 <USBD_CDC_DataIn+0x90>
 8007eac:	78fa      	ldrb	r2, [r7, #3]
 8007eae:	6879      	ldr	r1, [r7, #4]
 8007eb0:	4613      	mov	r3, r2
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	4413      	add	r3, r2
 8007eb6:	009b      	lsls	r3, r3, #2
 8007eb8:	440b      	add	r3, r1
 8007eba:	331c      	adds	r3, #28
 8007ebc:	681a      	ldr	r2, [r3, #0]
 8007ebe:	78f9      	ldrb	r1, [r7, #3]
 8007ec0:	68b8      	ldr	r0, [r7, #8]
 8007ec2:	460b      	mov	r3, r1
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	440b      	add	r3, r1
 8007ec8:	00db      	lsls	r3, r3, #3
 8007eca:	4403      	add	r3, r0
 8007ecc:	3338      	adds	r3, #56	; 0x38
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	fbb2 f1f3 	udiv	r1, r2, r3
 8007ed4:	fb01 f303 	mul.w	r3, r1, r3
 8007ed8:	1ad3      	subs	r3, r2, r3
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d110      	bne.n	8007f00 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007ede:	78fa      	ldrb	r2, [r7, #3]
 8007ee0:	6879      	ldr	r1, [r7, #4]
 8007ee2:	4613      	mov	r3, r2
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	4413      	add	r3, r2
 8007ee8:	009b      	lsls	r3, r3, #2
 8007eea:	440b      	add	r3, r1
 8007eec:	331c      	adds	r3, #28
 8007eee:	2200      	movs	r2, #0
 8007ef0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007ef2:	78f9      	ldrb	r1, [r7, #3]
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f001 fd8d 	bl	8009a18 <USBD_LL_Transmit>
 8007efe:	e003      	b.n	8007f08 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2200      	movs	r2, #0
 8007f04:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	e000      	b.n	8007f0e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007f0c:	2302      	movs	r3, #2
  }
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3710      	adds	r7, #16
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}

08007f16 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f16:	b580      	push	{r7, lr}
 8007f18:	b084      	sub	sp, #16
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
 8007f1e:	460b      	mov	r3, r1
 8007f20:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f28:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007f2a:	78fb      	ldrb	r3, [r7, #3]
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f001 fdb8 	bl	8009aa4 <USBD_LL_GetRxDataSize>
 8007f34:	4602      	mov	r2, r0
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00d      	beq.n	8007f62 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f4c:	68db      	ldr	r3, [r3, #12]
 8007f4e:	68fa      	ldr	r2, [r7, #12]
 8007f50:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007f54:	68fa      	ldr	r2, [r7, #12]
 8007f56:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007f5a:	4611      	mov	r1, r2
 8007f5c:	4798      	blx	r3

    return USBD_OK;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	e000      	b.n	8007f64 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007f62:	2302      	movs	r3, #2
  }
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3710      	adds	r7, #16
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f7a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d015      	beq.n	8007fb2 <USBD_CDC_EP0_RxReady+0x46>
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007f8c:	2bff      	cmp	r3, #255	; 0xff
 8007f8e:	d010      	beq.n	8007fb2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f96:	689b      	ldr	r3, [r3, #8]
 8007f98:	68fa      	ldr	r2, [r7, #12]
 8007f9a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007f9e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007fa0:	68fa      	ldr	r2, [r7, #12]
 8007fa2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007fa6:	b292      	uxth	r2, r2
 8007fa8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	22ff      	movs	r2, #255	; 0xff
 8007fae:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007fb2:	2300      	movs	r3, #0
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3710      	adds	r7, #16
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2243      	movs	r2, #67	; 0x43
 8007fc8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007fca:	4b03      	ldr	r3, [pc, #12]	; (8007fd8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	370c      	adds	r7, #12
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr
 8007fd8:	20000094 	.word	0x20000094

08007fdc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b083      	sub	sp, #12
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2243      	movs	r2, #67	; 0x43
 8007fe8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007fea:	4b03      	ldr	r3, [pc, #12]	; (8007ff8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	370c      	adds	r7, #12
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr
 8007ff8:	20000050 	.word	0x20000050

08007ffc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2243      	movs	r2, #67	; 0x43
 8008008:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800800a:	4b03      	ldr	r3, [pc, #12]	; (8008018 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800800c:	4618      	mov	r0, r3
 800800e:	370c      	adds	r7, #12
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr
 8008018:	200000d8 	.word	0x200000d8

0800801c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	220a      	movs	r2, #10
 8008028:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800802a:	4b03      	ldr	r3, [pc, #12]	; (8008038 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800802c:	4618      	mov	r0, r3
 800802e:	370c      	adds	r7, #12
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr
 8008038:	2000000c 	.word	0x2000000c

0800803c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800803c:	b480      	push	{r7}
 800803e:	b085      	sub	sp, #20
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008046:	2302      	movs	r3, #2
 8008048:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d005      	beq.n	800805c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	683a      	ldr	r2, [r7, #0]
 8008054:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008058:	2300      	movs	r3, #0
 800805a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800805c:	7bfb      	ldrb	r3, [r7, #15]
}
 800805e:	4618      	mov	r0, r3
 8008060:	3714      	adds	r7, #20
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr

0800806a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800806a:	b480      	push	{r7}
 800806c:	b087      	sub	sp, #28
 800806e:	af00      	add	r7, sp, #0
 8008070:	60f8      	str	r0, [r7, #12]
 8008072:	60b9      	str	r1, [r7, #8]
 8008074:	4613      	mov	r3, r2
 8008076:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800807e:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	68ba      	ldr	r2, [r7, #8]
 8008084:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008088:	88fa      	ldrh	r2, [r7, #6]
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008090:	2300      	movs	r3, #0
}
 8008092:	4618      	mov	r0, r3
 8008094:	371c      	adds	r7, #28
 8008096:	46bd      	mov	sp, r7
 8008098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809c:	4770      	bx	lr

0800809e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800809e:	b480      	push	{r7}
 80080a0:	b085      	sub	sp, #20
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
 80080a6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080ae:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	683a      	ldr	r2, [r7, #0]
 80080b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80080b8:	2300      	movs	r3, #0
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3714      	adds	r7, #20
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr

080080c6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80080c6:	b580      	push	{r7, lr}
 80080c8:	b084      	sub	sp, #16
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080d4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d017      	beq.n	8008110 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	7c1b      	ldrb	r3, [r3, #16]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d109      	bne.n	80080fc <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80080ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080f2:	2101      	movs	r1, #1
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f001 fcb2 	bl	8009a5e <USBD_LL_PrepareReceive>
 80080fa:	e007      	b.n	800810c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008102:	2340      	movs	r3, #64	; 0x40
 8008104:	2101      	movs	r1, #1
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f001 fca9 	bl	8009a5e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800810c:	2300      	movs	r3, #0
 800810e:	e000      	b.n	8008112 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008110:	2302      	movs	r3, #2
  }
}
 8008112:	4618      	mov	r0, r3
 8008114:	3710      	adds	r7, #16
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}

0800811a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800811a:	b580      	push	{r7, lr}
 800811c:	b084      	sub	sp, #16
 800811e:	af00      	add	r7, sp, #0
 8008120:	60f8      	str	r0, [r7, #12]
 8008122:	60b9      	str	r1, [r7, #8]
 8008124:	4613      	mov	r3, r2
 8008126:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d101      	bne.n	8008132 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800812e:	2302      	movs	r3, #2
 8008130:	e01a      	b.n	8008168 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008138:	2b00      	cmp	r3, #0
 800813a:	d003      	beq.n	8008144 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2200      	movs	r2, #0
 8008140:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d003      	beq.n	8008152 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	68ba      	ldr	r2, [r7, #8]
 800814e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2201      	movs	r2, #1
 8008156:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	79fa      	ldrb	r2, [r7, #7]
 800815e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008160:	68f8      	ldr	r0, [r7, #12]
 8008162:	f001 fb13 	bl	800978c <USBD_LL_Init>

  return USBD_OK;
 8008166:	2300      	movs	r3, #0
}
 8008168:	4618      	mov	r0, r3
 800816a:	3710      	adds	r7, #16
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008170:	b480      	push	{r7}
 8008172:	b085      	sub	sp, #20
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800817a:	2300      	movs	r3, #0
 800817c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d006      	beq.n	8008192 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	683a      	ldr	r2, [r7, #0]
 8008188:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800818c:	2300      	movs	r3, #0
 800818e:	73fb      	strb	r3, [r7, #15]
 8008190:	e001      	b.n	8008196 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008192:	2302      	movs	r3, #2
 8008194:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008196:	7bfb      	ldrb	r3, [r7, #15]
}
 8008198:	4618      	mov	r0, r3
 800819a:	3714      	adds	r7, #20
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b082      	sub	sp, #8
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f001 fb49 	bl	8009844 <USBD_LL_Start>

  return USBD_OK;
 80081b2:	2300      	movs	r3, #0
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3708      	adds	r7, #8
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80081c4:	2300      	movs	r3, #0
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	370c      	adds	r7, #12
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr

080081d2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80081d2:	b580      	push	{r7, lr}
 80081d4:	b084      	sub	sp, #16
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
 80081da:	460b      	mov	r3, r1
 80081dc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80081de:	2302      	movs	r3, #2
 80081e0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d00c      	beq.n	8008206 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	78fa      	ldrb	r2, [r7, #3]
 80081f6:	4611      	mov	r1, r2
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	4798      	blx	r3
 80081fc:	4603      	mov	r3, r0
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d101      	bne.n	8008206 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008202:	2300      	movs	r3, #0
 8008204:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008206:	7bfb      	ldrb	r3, [r7, #15]
}
 8008208:	4618      	mov	r0, r3
 800820a:	3710      	adds	r7, #16
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b082      	sub	sp, #8
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	460b      	mov	r3, r1
 800821a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	78fa      	ldrb	r2, [r7, #3]
 8008226:	4611      	mov	r1, r2
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	4798      	blx	r3

  return USBD_OK;
 800822c:	2300      	movs	r3, #0
}
 800822e:	4618      	mov	r0, r3
 8008230:	3708      	adds	r7, #8
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}

08008236 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008236:	b580      	push	{r7, lr}
 8008238:	b082      	sub	sp, #8
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
 800823e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008246:	6839      	ldr	r1, [r7, #0]
 8008248:	4618      	mov	r0, r3
 800824a:	f000 feda 	bl	8009002 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2201      	movs	r2, #1
 8008252:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800825c:	461a      	mov	r2, r3
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800826a:	f003 031f 	and.w	r3, r3, #31
 800826e:	2b02      	cmp	r3, #2
 8008270:	d016      	beq.n	80082a0 <USBD_LL_SetupStage+0x6a>
 8008272:	2b02      	cmp	r3, #2
 8008274:	d81c      	bhi.n	80082b0 <USBD_LL_SetupStage+0x7a>
 8008276:	2b00      	cmp	r3, #0
 8008278:	d002      	beq.n	8008280 <USBD_LL_SetupStage+0x4a>
 800827a:	2b01      	cmp	r3, #1
 800827c:	d008      	beq.n	8008290 <USBD_LL_SetupStage+0x5a>
 800827e:	e017      	b.n	80082b0 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008286:	4619      	mov	r1, r3
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 f9cd 	bl	8008628 <USBD_StdDevReq>
      break;
 800828e:	e01a      	b.n	80082c6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008296:	4619      	mov	r1, r3
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 fa2f 	bl	80086fc <USBD_StdItfReq>
      break;
 800829e:	e012      	b.n	80082c6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80082a6:	4619      	mov	r1, r3
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 fa6f 	bl	800878c <USBD_StdEPReq>
      break;
 80082ae:	e00a      	b.n	80082c6 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80082b6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80082ba:	b2db      	uxtb	r3, r3
 80082bc:	4619      	mov	r1, r3
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f001 fb20 	bl	8009904 <USBD_LL_StallEP>
      break;
 80082c4:	bf00      	nop
  }

  return USBD_OK;
 80082c6:	2300      	movs	r3, #0
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3708      	adds	r7, #8
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b086      	sub	sp, #24
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	460b      	mov	r3, r1
 80082da:	607a      	str	r2, [r7, #4]
 80082dc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80082de:	7afb      	ldrb	r3, [r7, #11]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d14b      	bne.n	800837c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80082ea:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80082f2:	2b03      	cmp	r3, #3
 80082f4:	d134      	bne.n	8008360 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	68da      	ldr	r2, [r3, #12]
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	429a      	cmp	r2, r3
 8008300:	d919      	bls.n	8008336 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	68da      	ldr	r2, [r3, #12]
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	691b      	ldr	r3, [r3, #16]
 800830a:	1ad2      	subs	r2, r2, r3
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	68da      	ldr	r2, [r3, #12]
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008318:	429a      	cmp	r2, r3
 800831a:	d203      	bcs.n	8008324 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008320:	b29b      	uxth	r3, r3
 8008322:	e002      	b.n	800832a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008328:	b29b      	uxth	r3, r3
 800832a:	461a      	mov	r2, r3
 800832c:	6879      	ldr	r1, [r7, #4]
 800832e:	68f8      	ldr	r0, [r7, #12]
 8008330:	f000 ff5b 	bl	80091ea <USBD_CtlContinueRx>
 8008334:	e038      	b.n	80083a8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800833c:	691b      	ldr	r3, [r3, #16]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d00a      	beq.n	8008358 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008348:	2b03      	cmp	r3, #3
 800834a:	d105      	bne.n	8008358 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008352:	691b      	ldr	r3, [r3, #16]
 8008354:	68f8      	ldr	r0, [r7, #12]
 8008356:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008358:	68f8      	ldr	r0, [r7, #12]
 800835a:	f000 ff58 	bl	800920e <USBD_CtlSendStatus>
 800835e:	e023      	b.n	80083a8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008366:	2b05      	cmp	r3, #5
 8008368:	d11e      	bne.n	80083a8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2200      	movs	r2, #0
 800836e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008372:	2100      	movs	r1, #0
 8008374:	68f8      	ldr	r0, [r7, #12]
 8008376:	f001 fac5 	bl	8009904 <USBD_LL_StallEP>
 800837a:	e015      	b.n	80083a8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008382:	699b      	ldr	r3, [r3, #24]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d00d      	beq.n	80083a4 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800838e:	2b03      	cmp	r3, #3
 8008390:	d108      	bne.n	80083a4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008398:	699b      	ldr	r3, [r3, #24]
 800839a:	7afa      	ldrb	r2, [r7, #11]
 800839c:	4611      	mov	r1, r2
 800839e:	68f8      	ldr	r0, [r7, #12]
 80083a0:	4798      	blx	r3
 80083a2:	e001      	b.n	80083a8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80083a4:	2302      	movs	r3, #2
 80083a6:	e000      	b.n	80083aa <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80083a8:	2300      	movs	r3, #0
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3718      	adds	r7, #24
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}

080083b2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80083b2:	b580      	push	{r7, lr}
 80083b4:	b086      	sub	sp, #24
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	60f8      	str	r0, [r7, #12]
 80083ba:	460b      	mov	r3, r1
 80083bc:	607a      	str	r2, [r7, #4]
 80083be:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80083c0:	7afb      	ldrb	r3, [r7, #11]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d17f      	bne.n	80084c6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	3314      	adds	r3, #20
 80083ca:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80083d2:	2b02      	cmp	r3, #2
 80083d4:	d15c      	bne.n	8008490 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	68da      	ldr	r2, [r3, #12]
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	691b      	ldr	r3, [r3, #16]
 80083de:	429a      	cmp	r2, r3
 80083e0:	d915      	bls.n	800840e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	68da      	ldr	r2, [r3, #12]
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	691b      	ldr	r3, [r3, #16]
 80083ea:	1ad2      	subs	r2, r2, r3
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	68db      	ldr	r3, [r3, #12]
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	461a      	mov	r2, r3
 80083f8:	6879      	ldr	r1, [r7, #4]
 80083fa:	68f8      	ldr	r0, [r7, #12]
 80083fc:	f000 fec5 	bl	800918a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008400:	2300      	movs	r3, #0
 8008402:	2200      	movs	r2, #0
 8008404:	2100      	movs	r1, #0
 8008406:	68f8      	ldr	r0, [r7, #12]
 8008408:	f001 fb29 	bl	8009a5e <USBD_LL_PrepareReceive>
 800840c:	e04e      	b.n	80084ac <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	689b      	ldr	r3, [r3, #8]
 8008412:	697a      	ldr	r2, [r7, #20]
 8008414:	6912      	ldr	r2, [r2, #16]
 8008416:	fbb3 f1f2 	udiv	r1, r3, r2
 800841a:	fb01 f202 	mul.w	r2, r1, r2
 800841e:	1a9b      	subs	r3, r3, r2
 8008420:	2b00      	cmp	r3, #0
 8008422:	d11c      	bne.n	800845e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	689a      	ldr	r2, [r3, #8]
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800842c:	429a      	cmp	r2, r3
 800842e:	d316      	bcc.n	800845e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	689a      	ldr	r2, [r3, #8]
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800843a:	429a      	cmp	r2, r3
 800843c:	d20f      	bcs.n	800845e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800843e:	2200      	movs	r2, #0
 8008440:	2100      	movs	r1, #0
 8008442:	68f8      	ldr	r0, [r7, #12]
 8008444:	f000 fea1 	bl	800918a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2200      	movs	r2, #0
 800844c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008450:	2300      	movs	r3, #0
 8008452:	2200      	movs	r2, #0
 8008454:	2100      	movs	r1, #0
 8008456:	68f8      	ldr	r0, [r7, #12]
 8008458:	f001 fb01 	bl	8009a5e <USBD_LL_PrepareReceive>
 800845c:	e026      	b.n	80084ac <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d00a      	beq.n	8008480 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008470:	2b03      	cmp	r3, #3
 8008472:	d105      	bne.n	8008480 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800847a:	68db      	ldr	r3, [r3, #12]
 800847c:	68f8      	ldr	r0, [r7, #12]
 800847e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008480:	2180      	movs	r1, #128	; 0x80
 8008482:	68f8      	ldr	r0, [r7, #12]
 8008484:	f001 fa3e 	bl	8009904 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008488:	68f8      	ldr	r0, [r7, #12]
 800848a:	f000 fed3 	bl	8009234 <USBD_CtlReceiveStatus>
 800848e:	e00d      	b.n	80084ac <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008496:	2b04      	cmp	r3, #4
 8008498:	d004      	beq.n	80084a4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d103      	bne.n	80084ac <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80084a4:	2180      	movs	r1, #128	; 0x80
 80084a6:	68f8      	ldr	r0, [r7, #12]
 80084a8:	f001 fa2c 	bl	8009904 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80084b2:	2b01      	cmp	r3, #1
 80084b4:	d11d      	bne.n	80084f2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80084b6:	68f8      	ldr	r0, [r7, #12]
 80084b8:	f7ff fe80 	bl	80081bc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2200      	movs	r2, #0
 80084c0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80084c4:	e015      	b.n	80084f2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084cc:	695b      	ldr	r3, [r3, #20]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d00d      	beq.n	80084ee <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80084d8:	2b03      	cmp	r3, #3
 80084da:	d108      	bne.n	80084ee <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084e2:	695b      	ldr	r3, [r3, #20]
 80084e4:	7afa      	ldrb	r2, [r7, #11]
 80084e6:	4611      	mov	r1, r2
 80084e8:	68f8      	ldr	r0, [r7, #12]
 80084ea:	4798      	blx	r3
 80084ec:	e001      	b.n	80084f2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80084ee:	2302      	movs	r3, #2
 80084f0:	e000      	b.n	80084f4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80084f2:	2300      	movs	r3, #0
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3718      	adds	r7, #24
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}

080084fc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b082      	sub	sp, #8
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008504:	2340      	movs	r3, #64	; 0x40
 8008506:	2200      	movs	r2, #0
 8008508:	2100      	movs	r1, #0
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f001 f9b5 	bl	800987a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2201      	movs	r2, #1
 8008514:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2240      	movs	r2, #64	; 0x40
 800851c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008520:	2340      	movs	r3, #64	; 0x40
 8008522:	2200      	movs	r2, #0
 8008524:	2180      	movs	r1, #128	; 0x80
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f001 f9a7 	bl	800987a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2201      	movs	r2, #1
 8008530:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2240      	movs	r2, #64	; 0x40
 8008536:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2201      	movs	r2, #1
 800853c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2200      	movs	r2, #0
 8008552:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800855c:	2b00      	cmp	r3, #0
 800855e:	d009      	beq.n	8008574 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	6852      	ldr	r2, [r2, #4]
 800856c:	b2d2      	uxtb	r2, r2
 800856e:	4611      	mov	r1, r2
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	4798      	blx	r3
  }

  return USBD_OK;
 8008574:	2300      	movs	r3, #0
}
 8008576:	4618      	mov	r0, r3
 8008578:	3708      	adds	r7, #8
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}

0800857e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800857e:	b480      	push	{r7}
 8008580:	b083      	sub	sp, #12
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]
 8008586:	460b      	mov	r3, r1
 8008588:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	78fa      	ldrb	r2, [r7, #3]
 800858e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008590:	2300      	movs	r3, #0
}
 8008592:	4618      	mov	r0, r3
 8008594:	370c      	adds	r7, #12
 8008596:	46bd      	mov	sp, r7
 8008598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859c:	4770      	bx	lr

0800859e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800859e:	b480      	push	{r7}
 80085a0:	b083      	sub	sp, #12
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2204      	movs	r2, #4
 80085b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80085ba:	2300      	movs	r3, #0
}
 80085bc:	4618      	mov	r0, r3
 80085be:	370c      	adds	r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085d6:	2b04      	cmp	r3, #4
 80085d8:	d105      	bne.n	80085e6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80085e6:	2300      	movs	r3, #0
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	370c      	adds	r7, #12
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr

080085f4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b082      	sub	sp, #8
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008602:	2b03      	cmp	r3, #3
 8008604:	d10b      	bne.n	800861e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800860c:	69db      	ldr	r3, [r3, #28]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d005      	beq.n	800861e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008618:	69db      	ldr	r3, [r3, #28]
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800861e:	2300      	movs	r3, #0
}
 8008620:	4618      	mov	r0, r3
 8008622:	3708      	adds	r7, #8
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008632:	2300      	movs	r3, #0
 8008634:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800863e:	2b40      	cmp	r3, #64	; 0x40
 8008640:	d005      	beq.n	800864e <USBD_StdDevReq+0x26>
 8008642:	2b40      	cmp	r3, #64	; 0x40
 8008644:	d84f      	bhi.n	80086e6 <USBD_StdDevReq+0xbe>
 8008646:	2b00      	cmp	r3, #0
 8008648:	d009      	beq.n	800865e <USBD_StdDevReq+0x36>
 800864a:	2b20      	cmp	r3, #32
 800864c:	d14b      	bne.n	80086e6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	6839      	ldr	r1, [r7, #0]
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	4798      	blx	r3
      break;
 800865c:	e048      	b.n	80086f0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	785b      	ldrb	r3, [r3, #1]
 8008662:	2b09      	cmp	r3, #9
 8008664:	d839      	bhi.n	80086da <USBD_StdDevReq+0xb2>
 8008666:	a201      	add	r2, pc, #4	; (adr r2, 800866c <USBD_StdDevReq+0x44>)
 8008668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800866c:	080086bd 	.word	0x080086bd
 8008670:	080086d1 	.word	0x080086d1
 8008674:	080086db 	.word	0x080086db
 8008678:	080086c7 	.word	0x080086c7
 800867c:	080086db 	.word	0x080086db
 8008680:	0800869f 	.word	0x0800869f
 8008684:	08008695 	.word	0x08008695
 8008688:	080086db 	.word	0x080086db
 800868c:	080086b3 	.word	0x080086b3
 8008690:	080086a9 	.word	0x080086a9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008694:	6839      	ldr	r1, [r7, #0]
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 f9dc 	bl	8008a54 <USBD_GetDescriptor>
          break;
 800869c:	e022      	b.n	80086e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800869e:	6839      	ldr	r1, [r7, #0]
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f000 fb3f 	bl	8008d24 <USBD_SetAddress>
          break;
 80086a6:	e01d      	b.n	80086e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80086a8:	6839      	ldr	r1, [r7, #0]
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 fb7e 	bl	8008dac <USBD_SetConfig>
          break;
 80086b0:	e018      	b.n	80086e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80086b2:	6839      	ldr	r1, [r7, #0]
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 fc07 	bl	8008ec8 <USBD_GetConfig>
          break;
 80086ba:	e013      	b.n	80086e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80086bc:	6839      	ldr	r1, [r7, #0]
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 fc37 	bl	8008f32 <USBD_GetStatus>
          break;
 80086c4:	e00e      	b.n	80086e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80086c6:	6839      	ldr	r1, [r7, #0]
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 fc65 	bl	8008f98 <USBD_SetFeature>
          break;
 80086ce:	e009      	b.n	80086e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80086d0:	6839      	ldr	r1, [r7, #0]
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 fc74 	bl	8008fc0 <USBD_ClrFeature>
          break;
 80086d8:	e004      	b.n	80086e4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80086da:	6839      	ldr	r1, [r7, #0]
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 fccd 	bl	800907c <USBD_CtlError>
          break;
 80086e2:	bf00      	nop
      }
      break;
 80086e4:	e004      	b.n	80086f0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80086e6:	6839      	ldr	r1, [r7, #0]
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 fcc7 	bl	800907c <USBD_CtlError>
      break;
 80086ee:	bf00      	nop
  }

  return ret;
 80086f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3710      	adds	r7, #16
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}
 80086fa:	bf00      	nop

080086fc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b084      	sub	sp, #16
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008706:	2300      	movs	r3, #0
 8008708:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008712:	2b40      	cmp	r3, #64	; 0x40
 8008714:	d005      	beq.n	8008722 <USBD_StdItfReq+0x26>
 8008716:	2b40      	cmp	r3, #64	; 0x40
 8008718:	d82e      	bhi.n	8008778 <USBD_StdItfReq+0x7c>
 800871a:	2b00      	cmp	r3, #0
 800871c:	d001      	beq.n	8008722 <USBD_StdItfReq+0x26>
 800871e:	2b20      	cmp	r3, #32
 8008720:	d12a      	bne.n	8008778 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008728:	3b01      	subs	r3, #1
 800872a:	2b02      	cmp	r3, #2
 800872c:	d81d      	bhi.n	800876a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	889b      	ldrh	r3, [r3, #4]
 8008732:	b2db      	uxtb	r3, r3
 8008734:	2b01      	cmp	r3, #1
 8008736:	d813      	bhi.n	8008760 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	6839      	ldr	r1, [r7, #0]
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	4798      	blx	r3
 8008746:	4603      	mov	r3, r0
 8008748:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	88db      	ldrh	r3, [r3, #6]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d110      	bne.n	8008774 <USBD_StdItfReq+0x78>
 8008752:	7bfb      	ldrb	r3, [r7, #15]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d10d      	bne.n	8008774 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 fd58 	bl	800920e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800875e:	e009      	b.n	8008774 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008760:	6839      	ldr	r1, [r7, #0]
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 fc8a 	bl	800907c <USBD_CtlError>
          break;
 8008768:	e004      	b.n	8008774 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800876a:	6839      	ldr	r1, [r7, #0]
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 fc85 	bl	800907c <USBD_CtlError>
          break;
 8008772:	e000      	b.n	8008776 <USBD_StdItfReq+0x7a>
          break;
 8008774:	bf00      	nop
      }
      break;
 8008776:	e004      	b.n	8008782 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008778:	6839      	ldr	r1, [r7, #0]
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 fc7e 	bl	800907c <USBD_CtlError>
      break;
 8008780:	bf00      	nop
  }

  return USBD_OK;
 8008782:	2300      	movs	r3, #0
}
 8008784:	4618      	mov	r0, r3
 8008786:	3710      	adds	r7, #16
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008796:	2300      	movs	r3, #0
 8008798:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	889b      	ldrh	r3, [r3, #4]
 800879e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	781b      	ldrb	r3, [r3, #0]
 80087a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087a8:	2b40      	cmp	r3, #64	; 0x40
 80087aa:	d007      	beq.n	80087bc <USBD_StdEPReq+0x30>
 80087ac:	2b40      	cmp	r3, #64	; 0x40
 80087ae:	f200 8146 	bhi.w	8008a3e <USBD_StdEPReq+0x2b2>
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d00a      	beq.n	80087cc <USBD_StdEPReq+0x40>
 80087b6:	2b20      	cmp	r3, #32
 80087b8:	f040 8141 	bne.w	8008a3e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087c2:	689b      	ldr	r3, [r3, #8]
 80087c4:	6839      	ldr	r1, [r7, #0]
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	4798      	blx	r3
      break;
 80087ca:	e13d      	b.n	8008a48 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	781b      	ldrb	r3, [r3, #0]
 80087d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087d4:	2b20      	cmp	r3, #32
 80087d6:	d10a      	bne.n	80087ee <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087de:	689b      	ldr	r3, [r3, #8]
 80087e0:	6839      	ldr	r1, [r7, #0]
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	4798      	blx	r3
 80087e6:	4603      	mov	r3, r0
 80087e8:	73fb      	strb	r3, [r7, #15]

        return ret;
 80087ea:	7bfb      	ldrb	r3, [r7, #15]
 80087ec:	e12d      	b.n	8008a4a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	785b      	ldrb	r3, [r3, #1]
 80087f2:	2b03      	cmp	r3, #3
 80087f4:	d007      	beq.n	8008806 <USBD_StdEPReq+0x7a>
 80087f6:	2b03      	cmp	r3, #3
 80087f8:	f300 811b 	bgt.w	8008a32 <USBD_StdEPReq+0x2a6>
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d072      	beq.n	80088e6 <USBD_StdEPReq+0x15a>
 8008800:	2b01      	cmp	r3, #1
 8008802:	d03a      	beq.n	800887a <USBD_StdEPReq+0xee>
 8008804:	e115      	b.n	8008a32 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800880c:	2b02      	cmp	r3, #2
 800880e:	d002      	beq.n	8008816 <USBD_StdEPReq+0x8a>
 8008810:	2b03      	cmp	r3, #3
 8008812:	d015      	beq.n	8008840 <USBD_StdEPReq+0xb4>
 8008814:	e02b      	b.n	800886e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008816:	7bbb      	ldrb	r3, [r7, #14]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d00c      	beq.n	8008836 <USBD_StdEPReq+0xaa>
 800881c:	7bbb      	ldrb	r3, [r7, #14]
 800881e:	2b80      	cmp	r3, #128	; 0x80
 8008820:	d009      	beq.n	8008836 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008822:	7bbb      	ldrb	r3, [r7, #14]
 8008824:	4619      	mov	r1, r3
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f001 f86c 	bl	8009904 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800882c:	2180      	movs	r1, #128	; 0x80
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f001 f868 	bl	8009904 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008834:	e020      	b.n	8008878 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008836:	6839      	ldr	r1, [r7, #0]
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f000 fc1f 	bl	800907c <USBD_CtlError>
              break;
 800883e:	e01b      	b.n	8008878 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	885b      	ldrh	r3, [r3, #2]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d10e      	bne.n	8008866 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008848:	7bbb      	ldrb	r3, [r7, #14]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d00b      	beq.n	8008866 <USBD_StdEPReq+0xda>
 800884e:	7bbb      	ldrb	r3, [r7, #14]
 8008850:	2b80      	cmp	r3, #128	; 0x80
 8008852:	d008      	beq.n	8008866 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	88db      	ldrh	r3, [r3, #6]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d104      	bne.n	8008866 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800885c:	7bbb      	ldrb	r3, [r7, #14]
 800885e:	4619      	mov	r1, r3
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f001 f84f 	bl	8009904 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f000 fcd1 	bl	800920e <USBD_CtlSendStatus>

              break;
 800886c:	e004      	b.n	8008878 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800886e:	6839      	ldr	r1, [r7, #0]
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 fc03 	bl	800907c <USBD_CtlError>
              break;
 8008876:	bf00      	nop
          }
          break;
 8008878:	e0e0      	b.n	8008a3c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008880:	2b02      	cmp	r3, #2
 8008882:	d002      	beq.n	800888a <USBD_StdEPReq+0xfe>
 8008884:	2b03      	cmp	r3, #3
 8008886:	d015      	beq.n	80088b4 <USBD_StdEPReq+0x128>
 8008888:	e026      	b.n	80088d8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800888a:	7bbb      	ldrb	r3, [r7, #14]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d00c      	beq.n	80088aa <USBD_StdEPReq+0x11e>
 8008890:	7bbb      	ldrb	r3, [r7, #14]
 8008892:	2b80      	cmp	r3, #128	; 0x80
 8008894:	d009      	beq.n	80088aa <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008896:	7bbb      	ldrb	r3, [r7, #14]
 8008898:	4619      	mov	r1, r3
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f001 f832 	bl	8009904 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80088a0:	2180      	movs	r1, #128	; 0x80
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f001 f82e 	bl	8009904 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80088a8:	e01c      	b.n	80088e4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80088aa:	6839      	ldr	r1, [r7, #0]
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 fbe5 	bl	800907c <USBD_CtlError>
              break;
 80088b2:	e017      	b.n	80088e4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	885b      	ldrh	r3, [r3, #2]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d112      	bne.n	80088e2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80088bc:	7bbb      	ldrb	r3, [r7, #14]
 80088be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d004      	beq.n	80088d0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80088c6:	7bbb      	ldrb	r3, [r7, #14]
 80088c8:	4619      	mov	r1, r3
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f001 f839 	bl	8009942 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 fc9c 	bl	800920e <USBD_CtlSendStatus>
              }
              break;
 80088d6:	e004      	b.n	80088e2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80088d8:	6839      	ldr	r1, [r7, #0]
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f000 fbce 	bl	800907c <USBD_CtlError>
              break;
 80088e0:	e000      	b.n	80088e4 <USBD_StdEPReq+0x158>
              break;
 80088e2:	bf00      	nop
          }
          break;
 80088e4:	e0aa      	b.n	8008a3c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088ec:	2b02      	cmp	r3, #2
 80088ee:	d002      	beq.n	80088f6 <USBD_StdEPReq+0x16a>
 80088f0:	2b03      	cmp	r3, #3
 80088f2:	d032      	beq.n	800895a <USBD_StdEPReq+0x1ce>
 80088f4:	e097      	b.n	8008a26 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80088f6:	7bbb      	ldrb	r3, [r7, #14]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d007      	beq.n	800890c <USBD_StdEPReq+0x180>
 80088fc:	7bbb      	ldrb	r3, [r7, #14]
 80088fe:	2b80      	cmp	r3, #128	; 0x80
 8008900:	d004      	beq.n	800890c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008902:	6839      	ldr	r1, [r7, #0]
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f000 fbb9 	bl	800907c <USBD_CtlError>
                break;
 800890a:	e091      	b.n	8008a30 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800890c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008910:	2b00      	cmp	r3, #0
 8008912:	da0b      	bge.n	800892c <USBD_StdEPReq+0x1a0>
 8008914:	7bbb      	ldrb	r3, [r7, #14]
 8008916:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800891a:	4613      	mov	r3, r2
 800891c:	009b      	lsls	r3, r3, #2
 800891e:	4413      	add	r3, r2
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	3310      	adds	r3, #16
 8008924:	687a      	ldr	r2, [r7, #4]
 8008926:	4413      	add	r3, r2
 8008928:	3304      	adds	r3, #4
 800892a:	e00b      	b.n	8008944 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800892c:	7bbb      	ldrb	r3, [r7, #14]
 800892e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008932:	4613      	mov	r3, r2
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	4413      	add	r3, r2
 8008938:	009b      	lsls	r3, r3, #2
 800893a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	4413      	add	r3, r2
 8008942:	3304      	adds	r3, #4
 8008944:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	2200      	movs	r2, #0
 800894a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	2202      	movs	r2, #2
 8008950:	4619      	mov	r1, r3
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 fbfd 	bl	8009152 <USBD_CtlSendData>
              break;
 8008958:	e06a      	b.n	8008a30 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800895a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800895e:	2b00      	cmp	r3, #0
 8008960:	da11      	bge.n	8008986 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008962:	7bbb      	ldrb	r3, [r7, #14]
 8008964:	f003 020f 	and.w	r2, r3, #15
 8008968:	6879      	ldr	r1, [r7, #4]
 800896a:	4613      	mov	r3, r2
 800896c:	009b      	lsls	r3, r3, #2
 800896e:	4413      	add	r3, r2
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	440b      	add	r3, r1
 8008974:	3318      	adds	r3, #24
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d117      	bne.n	80089ac <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800897c:	6839      	ldr	r1, [r7, #0]
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 fb7c 	bl	800907c <USBD_CtlError>
                  break;
 8008984:	e054      	b.n	8008a30 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008986:	7bbb      	ldrb	r3, [r7, #14]
 8008988:	f003 020f 	and.w	r2, r3, #15
 800898c:	6879      	ldr	r1, [r7, #4]
 800898e:	4613      	mov	r3, r2
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	4413      	add	r3, r2
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	440b      	add	r3, r1
 8008998:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d104      	bne.n	80089ac <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80089a2:	6839      	ldr	r1, [r7, #0]
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 fb69 	bl	800907c <USBD_CtlError>
                  break;
 80089aa:	e041      	b.n	8008a30 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	da0b      	bge.n	80089cc <USBD_StdEPReq+0x240>
 80089b4:	7bbb      	ldrb	r3, [r7, #14]
 80089b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80089ba:	4613      	mov	r3, r2
 80089bc:	009b      	lsls	r3, r3, #2
 80089be:	4413      	add	r3, r2
 80089c0:	009b      	lsls	r3, r3, #2
 80089c2:	3310      	adds	r3, #16
 80089c4:	687a      	ldr	r2, [r7, #4]
 80089c6:	4413      	add	r3, r2
 80089c8:	3304      	adds	r3, #4
 80089ca:	e00b      	b.n	80089e4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80089cc:	7bbb      	ldrb	r3, [r7, #14]
 80089ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089d2:	4613      	mov	r3, r2
 80089d4:	009b      	lsls	r3, r3, #2
 80089d6:	4413      	add	r3, r2
 80089d8:	009b      	lsls	r3, r3, #2
 80089da:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	4413      	add	r3, r2
 80089e2:	3304      	adds	r3, #4
 80089e4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80089e6:	7bbb      	ldrb	r3, [r7, #14]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d002      	beq.n	80089f2 <USBD_StdEPReq+0x266>
 80089ec:	7bbb      	ldrb	r3, [r7, #14]
 80089ee:	2b80      	cmp	r3, #128	; 0x80
 80089f0:	d103      	bne.n	80089fa <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	2200      	movs	r2, #0
 80089f6:	601a      	str	r2, [r3, #0]
 80089f8:	e00e      	b.n	8008a18 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80089fa:	7bbb      	ldrb	r3, [r7, #14]
 80089fc:	4619      	mov	r1, r3
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 ffbe 	bl	8009980 <USBD_LL_IsStallEP>
 8008a04:	4603      	mov	r3, r0
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d003      	beq.n	8008a12 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	2201      	movs	r2, #1
 8008a0e:	601a      	str	r2, [r3, #0]
 8008a10:	e002      	b.n	8008a18 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	2200      	movs	r2, #0
 8008a16:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	2202      	movs	r2, #2
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 fb97 	bl	8009152 <USBD_CtlSendData>
              break;
 8008a24:	e004      	b.n	8008a30 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008a26:	6839      	ldr	r1, [r7, #0]
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 fb27 	bl	800907c <USBD_CtlError>
              break;
 8008a2e:	bf00      	nop
          }
          break;
 8008a30:	e004      	b.n	8008a3c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008a32:	6839      	ldr	r1, [r7, #0]
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f000 fb21 	bl	800907c <USBD_CtlError>
          break;
 8008a3a:	bf00      	nop
      }
      break;
 8008a3c:	e004      	b.n	8008a48 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008a3e:	6839      	ldr	r1, [r7, #0]
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f000 fb1b 	bl	800907c <USBD_CtlError>
      break;
 8008a46:	bf00      	nop
  }

  return ret;
 8008a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3710      	adds	r7, #16
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
	...

08008a54 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b084      	sub	sp, #16
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
 8008a5c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008a62:	2300      	movs	r3, #0
 8008a64:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008a66:	2300      	movs	r3, #0
 8008a68:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	885b      	ldrh	r3, [r3, #2]
 8008a6e:	0a1b      	lsrs	r3, r3, #8
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	3b01      	subs	r3, #1
 8008a74:	2b06      	cmp	r3, #6
 8008a76:	f200 8128 	bhi.w	8008cca <USBD_GetDescriptor+0x276>
 8008a7a:	a201      	add	r2, pc, #4	; (adr r2, 8008a80 <USBD_GetDescriptor+0x2c>)
 8008a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a80:	08008a9d 	.word	0x08008a9d
 8008a84:	08008ab5 	.word	0x08008ab5
 8008a88:	08008af5 	.word	0x08008af5
 8008a8c:	08008ccb 	.word	0x08008ccb
 8008a90:	08008ccb 	.word	0x08008ccb
 8008a94:	08008c6b 	.word	0x08008c6b
 8008a98:	08008c97 	.word	0x08008c97
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	7c12      	ldrb	r2, [r2, #16]
 8008aa8:	f107 0108 	add.w	r1, r7, #8
 8008aac:	4610      	mov	r0, r2
 8008aae:	4798      	blx	r3
 8008ab0:	60f8      	str	r0, [r7, #12]
      break;
 8008ab2:	e112      	b.n	8008cda <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	7c1b      	ldrb	r3, [r3, #16]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d10d      	bne.n	8008ad8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ac4:	f107 0208 	add.w	r2, r7, #8
 8008ac8:	4610      	mov	r0, r2
 8008aca:	4798      	blx	r3
 8008acc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	3301      	adds	r3, #1
 8008ad2:	2202      	movs	r2, #2
 8008ad4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008ad6:	e100      	b.n	8008cda <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae0:	f107 0208 	add.w	r2, r7, #8
 8008ae4:	4610      	mov	r0, r2
 8008ae6:	4798      	blx	r3
 8008ae8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	3301      	adds	r3, #1
 8008aee:	2202      	movs	r2, #2
 8008af0:	701a      	strb	r2, [r3, #0]
      break;
 8008af2:	e0f2      	b.n	8008cda <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	885b      	ldrh	r3, [r3, #2]
 8008af8:	b2db      	uxtb	r3, r3
 8008afa:	2b05      	cmp	r3, #5
 8008afc:	f200 80ac 	bhi.w	8008c58 <USBD_GetDescriptor+0x204>
 8008b00:	a201      	add	r2, pc, #4	; (adr r2, 8008b08 <USBD_GetDescriptor+0xb4>)
 8008b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b06:	bf00      	nop
 8008b08:	08008b21 	.word	0x08008b21
 8008b0c:	08008b55 	.word	0x08008b55
 8008b10:	08008b89 	.word	0x08008b89
 8008b14:	08008bbd 	.word	0x08008bbd
 8008b18:	08008bf1 	.word	0x08008bf1
 8008b1c:	08008c25 	.word	0x08008c25
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d00b      	beq.n	8008b44 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	7c12      	ldrb	r2, [r2, #16]
 8008b38:	f107 0108 	add.w	r1, r7, #8
 8008b3c:	4610      	mov	r0, r2
 8008b3e:	4798      	blx	r3
 8008b40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b42:	e091      	b.n	8008c68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b44:	6839      	ldr	r1, [r7, #0]
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f000 fa98 	bl	800907c <USBD_CtlError>
            err++;
 8008b4c:	7afb      	ldrb	r3, [r7, #11]
 8008b4e:	3301      	adds	r3, #1
 8008b50:	72fb      	strb	r3, [r7, #11]
          break;
 8008b52:	e089      	b.n	8008c68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b5a:	689b      	ldr	r3, [r3, #8]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d00b      	beq.n	8008b78 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b66:	689b      	ldr	r3, [r3, #8]
 8008b68:	687a      	ldr	r2, [r7, #4]
 8008b6a:	7c12      	ldrb	r2, [r2, #16]
 8008b6c:	f107 0108 	add.w	r1, r7, #8
 8008b70:	4610      	mov	r0, r2
 8008b72:	4798      	blx	r3
 8008b74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b76:	e077      	b.n	8008c68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b78:	6839      	ldr	r1, [r7, #0]
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 fa7e 	bl	800907c <USBD_CtlError>
            err++;
 8008b80:	7afb      	ldrb	r3, [r7, #11]
 8008b82:	3301      	adds	r3, #1
 8008b84:	72fb      	strb	r3, [r7, #11]
          break;
 8008b86:	e06f      	b.n	8008c68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b8e:	68db      	ldr	r3, [r3, #12]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d00b      	beq.n	8008bac <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b9a:	68db      	ldr	r3, [r3, #12]
 8008b9c:	687a      	ldr	r2, [r7, #4]
 8008b9e:	7c12      	ldrb	r2, [r2, #16]
 8008ba0:	f107 0108 	add.w	r1, r7, #8
 8008ba4:	4610      	mov	r0, r2
 8008ba6:	4798      	blx	r3
 8008ba8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008baa:	e05d      	b.n	8008c68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008bac:	6839      	ldr	r1, [r7, #0]
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 fa64 	bl	800907c <USBD_CtlError>
            err++;
 8008bb4:	7afb      	ldrb	r3, [r7, #11]
 8008bb6:	3301      	adds	r3, #1
 8008bb8:	72fb      	strb	r3, [r7, #11]
          break;
 8008bba:	e055      	b.n	8008c68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008bc2:	691b      	ldr	r3, [r3, #16]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d00b      	beq.n	8008be0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008bce:	691b      	ldr	r3, [r3, #16]
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	7c12      	ldrb	r2, [r2, #16]
 8008bd4:	f107 0108 	add.w	r1, r7, #8
 8008bd8:	4610      	mov	r0, r2
 8008bda:	4798      	blx	r3
 8008bdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008bde:	e043      	b.n	8008c68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008be0:	6839      	ldr	r1, [r7, #0]
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 fa4a 	bl	800907c <USBD_CtlError>
            err++;
 8008be8:	7afb      	ldrb	r3, [r7, #11]
 8008bea:	3301      	adds	r3, #1
 8008bec:	72fb      	strb	r3, [r7, #11]
          break;
 8008bee:	e03b      	b.n	8008c68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008bf6:	695b      	ldr	r3, [r3, #20]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d00b      	beq.n	8008c14 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c02:	695b      	ldr	r3, [r3, #20]
 8008c04:	687a      	ldr	r2, [r7, #4]
 8008c06:	7c12      	ldrb	r2, [r2, #16]
 8008c08:	f107 0108 	add.w	r1, r7, #8
 8008c0c:	4610      	mov	r0, r2
 8008c0e:	4798      	blx	r3
 8008c10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c12:	e029      	b.n	8008c68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c14:	6839      	ldr	r1, [r7, #0]
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f000 fa30 	bl	800907c <USBD_CtlError>
            err++;
 8008c1c:	7afb      	ldrb	r3, [r7, #11]
 8008c1e:	3301      	adds	r3, #1
 8008c20:	72fb      	strb	r3, [r7, #11]
          break;
 8008c22:	e021      	b.n	8008c68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c2a:	699b      	ldr	r3, [r3, #24]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d00b      	beq.n	8008c48 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c36:	699b      	ldr	r3, [r3, #24]
 8008c38:	687a      	ldr	r2, [r7, #4]
 8008c3a:	7c12      	ldrb	r2, [r2, #16]
 8008c3c:	f107 0108 	add.w	r1, r7, #8
 8008c40:	4610      	mov	r0, r2
 8008c42:	4798      	blx	r3
 8008c44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c46:	e00f      	b.n	8008c68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c48:	6839      	ldr	r1, [r7, #0]
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 fa16 	bl	800907c <USBD_CtlError>
            err++;
 8008c50:	7afb      	ldrb	r3, [r7, #11]
 8008c52:	3301      	adds	r3, #1
 8008c54:	72fb      	strb	r3, [r7, #11]
          break;
 8008c56:	e007      	b.n	8008c68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008c58:	6839      	ldr	r1, [r7, #0]
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 fa0e 	bl	800907c <USBD_CtlError>
          err++;
 8008c60:	7afb      	ldrb	r3, [r7, #11]
 8008c62:	3301      	adds	r3, #1
 8008c64:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008c66:	e038      	b.n	8008cda <USBD_GetDescriptor+0x286>
 8008c68:	e037      	b.n	8008cda <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	7c1b      	ldrb	r3, [r3, #16]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d109      	bne.n	8008c86 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c7a:	f107 0208 	add.w	r2, r7, #8
 8008c7e:	4610      	mov	r0, r2
 8008c80:	4798      	blx	r3
 8008c82:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c84:	e029      	b.n	8008cda <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008c86:	6839      	ldr	r1, [r7, #0]
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 f9f7 	bl	800907c <USBD_CtlError>
        err++;
 8008c8e:	7afb      	ldrb	r3, [r7, #11]
 8008c90:	3301      	adds	r3, #1
 8008c92:	72fb      	strb	r3, [r7, #11]
      break;
 8008c94:	e021      	b.n	8008cda <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	7c1b      	ldrb	r3, [r3, #16]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d10d      	bne.n	8008cba <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ca6:	f107 0208 	add.w	r2, r7, #8
 8008caa:	4610      	mov	r0, r2
 8008cac:	4798      	blx	r3
 8008cae:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	2207      	movs	r2, #7
 8008cb6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008cb8:	e00f      	b.n	8008cda <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008cba:	6839      	ldr	r1, [r7, #0]
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f000 f9dd 	bl	800907c <USBD_CtlError>
        err++;
 8008cc2:	7afb      	ldrb	r3, [r7, #11]
 8008cc4:	3301      	adds	r3, #1
 8008cc6:	72fb      	strb	r3, [r7, #11]
      break;
 8008cc8:	e007      	b.n	8008cda <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008cca:	6839      	ldr	r1, [r7, #0]
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f000 f9d5 	bl	800907c <USBD_CtlError>
      err++;
 8008cd2:	7afb      	ldrb	r3, [r7, #11]
 8008cd4:	3301      	adds	r3, #1
 8008cd6:	72fb      	strb	r3, [r7, #11]
      break;
 8008cd8:	bf00      	nop
  }

  if (err != 0U)
 8008cda:	7afb      	ldrb	r3, [r7, #11]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d11c      	bne.n	8008d1a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008ce0:	893b      	ldrh	r3, [r7, #8]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d011      	beq.n	8008d0a <USBD_GetDescriptor+0x2b6>
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	88db      	ldrh	r3, [r3, #6]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d00d      	beq.n	8008d0a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	88da      	ldrh	r2, [r3, #6]
 8008cf2:	893b      	ldrh	r3, [r7, #8]
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	bf28      	it	cs
 8008cf8:	4613      	movcs	r3, r2
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008cfe:	893b      	ldrh	r3, [r7, #8]
 8008d00:	461a      	mov	r2, r3
 8008d02:	68f9      	ldr	r1, [r7, #12]
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f000 fa24 	bl	8009152 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	88db      	ldrh	r3, [r3, #6]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d104      	bne.n	8008d1c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 fa7b 	bl	800920e <USBD_CtlSendStatus>
 8008d18:	e000      	b.n	8008d1c <USBD_GetDescriptor+0x2c8>
    return;
 8008d1a:	bf00      	nop
    }
  }
}
 8008d1c:	3710      	adds	r7, #16
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}
 8008d22:	bf00      	nop

08008d24 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b084      	sub	sp, #16
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	889b      	ldrh	r3, [r3, #4]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d130      	bne.n	8008d98 <USBD_SetAddress+0x74>
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	88db      	ldrh	r3, [r3, #6]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d12c      	bne.n	8008d98 <USBD_SetAddress+0x74>
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	885b      	ldrh	r3, [r3, #2]
 8008d42:	2b7f      	cmp	r3, #127	; 0x7f
 8008d44:	d828      	bhi.n	8008d98 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	885b      	ldrh	r3, [r3, #2]
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d50:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d58:	2b03      	cmp	r3, #3
 8008d5a:	d104      	bne.n	8008d66 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008d5c:	6839      	ldr	r1, [r7, #0]
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 f98c 	bl	800907c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d64:	e01d      	b.n	8008da2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	7bfa      	ldrb	r2, [r7, #15]
 8008d6a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008d6e:	7bfb      	ldrb	r3, [r7, #15]
 8008d70:	4619      	mov	r1, r3
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 fe31 	bl	80099da <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 fa48 	bl	800920e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008d7e:	7bfb      	ldrb	r3, [r7, #15]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d004      	beq.n	8008d8e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2202      	movs	r2, #2
 8008d88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d8c:	e009      	b.n	8008da2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2201      	movs	r2, #1
 8008d92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d96:	e004      	b.n	8008da2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008d98:	6839      	ldr	r1, [r7, #0]
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 f96e 	bl	800907c <USBD_CtlError>
  }
}
 8008da0:	bf00      	nop
 8008da2:	bf00      	nop
 8008da4:	3710      	adds	r7, #16
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}
	...

08008dac <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b082      	sub	sp, #8
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	885b      	ldrh	r3, [r3, #2]
 8008dba:	b2da      	uxtb	r2, r3
 8008dbc:	4b41      	ldr	r3, [pc, #260]	; (8008ec4 <USBD_SetConfig+0x118>)
 8008dbe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008dc0:	4b40      	ldr	r3, [pc, #256]	; (8008ec4 <USBD_SetConfig+0x118>)
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d904      	bls.n	8008dd2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008dc8:	6839      	ldr	r1, [r7, #0]
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f000 f956 	bl	800907c <USBD_CtlError>
 8008dd0:	e075      	b.n	8008ebe <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dd8:	2b02      	cmp	r3, #2
 8008dda:	d002      	beq.n	8008de2 <USBD_SetConfig+0x36>
 8008ddc:	2b03      	cmp	r3, #3
 8008dde:	d023      	beq.n	8008e28 <USBD_SetConfig+0x7c>
 8008de0:	e062      	b.n	8008ea8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008de2:	4b38      	ldr	r3, [pc, #224]	; (8008ec4 <USBD_SetConfig+0x118>)
 8008de4:	781b      	ldrb	r3, [r3, #0]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d01a      	beq.n	8008e20 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008dea:	4b36      	ldr	r3, [pc, #216]	; (8008ec4 <USBD_SetConfig+0x118>)
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	461a      	mov	r2, r3
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2203      	movs	r2, #3
 8008df8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008dfc:	4b31      	ldr	r3, [pc, #196]	; (8008ec4 <USBD_SetConfig+0x118>)
 8008dfe:	781b      	ldrb	r3, [r3, #0]
 8008e00:	4619      	mov	r1, r3
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f7ff f9e5 	bl	80081d2 <USBD_SetClassConfig>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	2b02      	cmp	r3, #2
 8008e0c:	d104      	bne.n	8008e18 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008e0e:	6839      	ldr	r1, [r7, #0]
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f000 f933 	bl	800907c <USBD_CtlError>
            return;
 8008e16:	e052      	b.n	8008ebe <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f000 f9f8 	bl	800920e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008e1e:	e04e      	b.n	8008ebe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f000 f9f4 	bl	800920e <USBD_CtlSendStatus>
        break;
 8008e26:	e04a      	b.n	8008ebe <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008e28:	4b26      	ldr	r3, [pc, #152]	; (8008ec4 <USBD_SetConfig+0x118>)
 8008e2a:	781b      	ldrb	r3, [r3, #0]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d112      	bne.n	8008e56 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2202      	movs	r2, #2
 8008e34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008e38:	4b22      	ldr	r3, [pc, #136]	; (8008ec4 <USBD_SetConfig+0x118>)
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	461a      	mov	r2, r3
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008e42:	4b20      	ldr	r3, [pc, #128]	; (8008ec4 <USBD_SetConfig+0x118>)
 8008e44:	781b      	ldrb	r3, [r3, #0]
 8008e46:	4619      	mov	r1, r3
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f7ff f9e1 	bl	8008210 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 f9dd 	bl	800920e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008e54:	e033      	b.n	8008ebe <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008e56:	4b1b      	ldr	r3, [pc, #108]	; (8008ec4 <USBD_SetConfig+0x118>)
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	429a      	cmp	r2, r3
 8008e62:	d01d      	beq.n	8008ea0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	685b      	ldr	r3, [r3, #4]
 8008e68:	b2db      	uxtb	r3, r3
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f7ff f9cf 	bl	8008210 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008e72:	4b14      	ldr	r3, [pc, #80]	; (8008ec4 <USBD_SetConfig+0x118>)
 8008e74:	781b      	ldrb	r3, [r3, #0]
 8008e76:	461a      	mov	r2, r3
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008e7c:	4b11      	ldr	r3, [pc, #68]	; (8008ec4 <USBD_SetConfig+0x118>)
 8008e7e:	781b      	ldrb	r3, [r3, #0]
 8008e80:	4619      	mov	r1, r3
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f7ff f9a5 	bl	80081d2 <USBD_SetClassConfig>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	2b02      	cmp	r3, #2
 8008e8c:	d104      	bne.n	8008e98 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008e8e:	6839      	ldr	r1, [r7, #0]
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f000 f8f3 	bl	800907c <USBD_CtlError>
            return;
 8008e96:	e012      	b.n	8008ebe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f000 f9b8 	bl	800920e <USBD_CtlSendStatus>
        break;
 8008e9e:	e00e      	b.n	8008ebe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 f9b4 	bl	800920e <USBD_CtlSendStatus>
        break;
 8008ea6:	e00a      	b.n	8008ebe <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008ea8:	6839      	ldr	r1, [r7, #0]
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 f8e6 	bl	800907c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008eb0:	4b04      	ldr	r3, [pc, #16]	; (8008ec4 <USBD_SetConfig+0x118>)
 8008eb2:	781b      	ldrb	r3, [r3, #0]
 8008eb4:	4619      	mov	r1, r3
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f7ff f9aa 	bl	8008210 <USBD_ClrClassConfig>
        break;
 8008ebc:	bf00      	nop
    }
  }
}
 8008ebe:	3708      	adds	r7, #8
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}
 8008ec4:	200002a8 	.word	0x200002a8

08008ec8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
 8008ed0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	88db      	ldrh	r3, [r3, #6]
 8008ed6:	2b01      	cmp	r3, #1
 8008ed8:	d004      	beq.n	8008ee4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008eda:	6839      	ldr	r1, [r7, #0]
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f000 f8cd 	bl	800907c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008ee2:	e022      	b.n	8008f2a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008eea:	2b02      	cmp	r3, #2
 8008eec:	dc02      	bgt.n	8008ef4 <USBD_GetConfig+0x2c>
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	dc03      	bgt.n	8008efa <USBD_GetConfig+0x32>
 8008ef2:	e015      	b.n	8008f20 <USBD_GetConfig+0x58>
 8008ef4:	2b03      	cmp	r3, #3
 8008ef6:	d00b      	beq.n	8008f10 <USBD_GetConfig+0x48>
 8008ef8:	e012      	b.n	8008f20 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2200      	movs	r2, #0
 8008efe:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	3308      	adds	r3, #8
 8008f04:	2201      	movs	r2, #1
 8008f06:	4619      	mov	r1, r3
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f000 f922 	bl	8009152 <USBD_CtlSendData>
        break;
 8008f0e:	e00c      	b.n	8008f2a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	3304      	adds	r3, #4
 8008f14:	2201      	movs	r2, #1
 8008f16:	4619      	mov	r1, r3
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 f91a 	bl	8009152 <USBD_CtlSendData>
        break;
 8008f1e:	e004      	b.n	8008f2a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008f20:	6839      	ldr	r1, [r7, #0]
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 f8aa 	bl	800907c <USBD_CtlError>
        break;
 8008f28:	bf00      	nop
}
 8008f2a:	bf00      	nop
 8008f2c:	3708      	adds	r7, #8
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}

08008f32 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f32:	b580      	push	{r7, lr}
 8008f34:	b082      	sub	sp, #8
 8008f36:	af00      	add	r7, sp, #0
 8008f38:	6078      	str	r0, [r7, #4]
 8008f3a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f42:	3b01      	subs	r3, #1
 8008f44:	2b02      	cmp	r3, #2
 8008f46:	d81e      	bhi.n	8008f86 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	88db      	ldrh	r3, [r3, #6]
 8008f4c:	2b02      	cmp	r3, #2
 8008f4e:	d004      	beq.n	8008f5a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008f50:	6839      	ldr	r1, [r7, #0]
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 f892 	bl	800907c <USBD_CtlError>
        break;
 8008f58:	e01a      	b.n	8008f90 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2201      	movs	r2, #1
 8008f5e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d005      	beq.n	8008f76 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	68db      	ldr	r3, [r3, #12]
 8008f6e:	f043 0202 	orr.w	r2, r3, #2
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	330c      	adds	r3, #12
 8008f7a:	2202      	movs	r2, #2
 8008f7c:	4619      	mov	r1, r3
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f000 f8e7 	bl	8009152 <USBD_CtlSendData>
      break;
 8008f84:	e004      	b.n	8008f90 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008f86:	6839      	ldr	r1, [r7, #0]
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f000 f877 	bl	800907c <USBD_CtlError>
      break;
 8008f8e:	bf00      	nop
  }
}
 8008f90:	bf00      	nop
 8008f92:	3708      	adds	r7, #8
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b082      	sub	sp, #8
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	885b      	ldrh	r3, [r3, #2]
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	d106      	bne.n	8008fb8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2201      	movs	r2, #1
 8008fae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 f92b 	bl	800920e <USBD_CtlSendStatus>
  }
}
 8008fb8:	bf00      	nop
 8008fba:	3708      	adds	r7, #8
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fd0:	3b01      	subs	r3, #1
 8008fd2:	2b02      	cmp	r3, #2
 8008fd4:	d80b      	bhi.n	8008fee <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	885b      	ldrh	r3, [r3, #2]
 8008fda:	2b01      	cmp	r3, #1
 8008fdc:	d10c      	bne.n	8008ff8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 f911 	bl	800920e <USBD_CtlSendStatus>
      }
      break;
 8008fec:	e004      	b.n	8008ff8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008fee:	6839      	ldr	r1, [r7, #0]
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f000 f843 	bl	800907c <USBD_CtlError>
      break;
 8008ff6:	e000      	b.n	8008ffa <USBD_ClrFeature+0x3a>
      break;
 8008ff8:	bf00      	nop
  }
}
 8008ffa:	bf00      	nop
 8008ffc:	3708      	adds	r7, #8
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}

08009002 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009002:	b480      	push	{r7}
 8009004:	b083      	sub	sp, #12
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
 800900a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	781a      	ldrb	r2, [r3, #0]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	785a      	ldrb	r2, [r3, #1]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	3302      	adds	r3, #2
 8009020:	781b      	ldrb	r3, [r3, #0]
 8009022:	b29a      	uxth	r2, r3
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	3303      	adds	r3, #3
 8009028:	781b      	ldrb	r3, [r3, #0]
 800902a:	b29b      	uxth	r3, r3
 800902c:	021b      	lsls	r3, r3, #8
 800902e:	b29b      	uxth	r3, r3
 8009030:	4413      	add	r3, r2
 8009032:	b29a      	uxth	r2, r3
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	3304      	adds	r3, #4
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	b29a      	uxth	r2, r3
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	3305      	adds	r3, #5
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	b29b      	uxth	r3, r3
 8009048:	021b      	lsls	r3, r3, #8
 800904a:	b29b      	uxth	r3, r3
 800904c:	4413      	add	r3, r2
 800904e:	b29a      	uxth	r2, r3
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	3306      	adds	r3, #6
 8009058:	781b      	ldrb	r3, [r3, #0]
 800905a:	b29a      	uxth	r2, r3
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	3307      	adds	r3, #7
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	b29b      	uxth	r3, r3
 8009064:	021b      	lsls	r3, r3, #8
 8009066:	b29b      	uxth	r3, r3
 8009068:	4413      	add	r3, r2
 800906a:	b29a      	uxth	r2, r3
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	80da      	strh	r2, [r3, #6]

}
 8009070:	bf00      	nop
 8009072:	370c      	adds	r7, #12
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr

0800907c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009086:	2180      	movs	r1, #128	; 0x80
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 fc3b 	bl	8009904 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800908e:	2100      	movs	r1, #0
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f000 fc37 	bl	8009904 <USBD_LL_StallEP>
}
 8009096:	bf00      	nop
 8009098:	3708      	adds	r7, #8
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}

0800909e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800909e:	b580      	push	{r7, lr}
 80090a0:	b086      	sub	sp, #24
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	60f8      	str	r0, [r7, #12]
 80090a6:	60b9      	str	r1, [r7, #8]
 80090a8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80090aa:	2300      	movs	r3, #0
 80090ac:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d032      	beq.n	800911a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80090b4:	68f8      	ldr	r0, [r7, #12]
 80090b6:	f000 f834 	bl	8009122 <USBD_GetLen>
 80090ba:	4603      	mov	r3, r0
 80090bc:	3301      	adds	r3, #1
 80090be:	b29b      	uxth	r3, r3
 80090c0:	005b      	lsls	r3, r3, #1
 80090c2:	b29a      	uxth	r2, r3
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80090c8:	7dfb      	ldrb	r3, [r7, #23]
 80090ca:	1c5a      	adds	r2, r3, #1
 80090cc:	75fa      	strb	r2, [r7, #23]
 80090ce:	461a      	mov	r2, r3
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	4413      	add	r3, r2
 80090d4:	687a      	ldr	r2, [r7, #4]
 80090d6:	7812      	ldrb	r2, [r2, #0]
 80090d8:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80090da:	7dfb      	ldrb	r3, [r7, #23]
 80090dc:	1c5a      	adds	r2, r3, #1
 80090de:	75fa      	strb	r2, [r7, #23]
 80090e0:	461a      	mov	r2, r3
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	4413      	add	r3, r2
 80090e6:	2203      	movs	r2, #3
 80090e8:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80090ea:	e012      	b.n	8009112 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	1c5a      	adds	r2, r3, #1
 80090f0:	60fa      	str	r2, [r7, #12]
 80090f2:	7dfa      	ldrb	r2, [r7, #23]
 80090f4:	1c51      	adds	r1, r2, #1
 80090f6:	75f9      	strb	r1, [r7, #23]
 80090f8:	4611      	mov	r1, r2
 80090fa:	68ba      	ldr	r2, [r7, #8]
 80090fc:	440a      	add	r2, r1
 80090fe:	781b      	ldrb	r3, [r3, #0]
 8009100:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009102:	7dfb      	ldrb	r3, [r7, #23]
 8009104:	1c5a      	adds	r2, r3, #1
 8009106:	75fa      	strb	r2, [r7, #23]
 8009108:	461a      	mov	r2, r3
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	4413      	add	r3, r2
 800910e:	2200      	movs	r2, #0
 8009110:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	781b      	ldrb	r3, [r3, #0]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d1e8      	bne.n	80090ec <USBD_GetString+0x4e>
    }
  }
}
 800911a:	bf00      	nop
 800911c:	3718      	adds	r7, #24
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}

08009122 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009122:	b480      	push	{r7}
 8009124:	b085      	sub	sp, #20
 8009126:	af00      	add	r7, sp, #0
 8009128:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800912a:	2300      	movs	r3, #0
 800912c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800912e:	e005      	b.n	800913c <USBD_GetLen+0x1a>
  {
    len++;
 8009130:	7bfb      	ldrb	r3, [r7, #15]
 8009132:	3301      	adds	r3, #1
 8009134:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	3301      	adds	r3, #1
 800913a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	781b      	ldrb	r3, [r3, #0]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d1f5      	bne.n	8009130 <USBD_GetLen+0xe>
  }

  return len;
 8009144:	7bfb      	ldrb	r3, [r7, #15]
}
 8009146:	4618      	mov	r0, r3
 8009148:	3714      	adds	r7, #20
 800914a:	46bd      	mov	sp, r7
 800914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009150:	4770      	bx	lr

08009152 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009152:	b580      	push	{r7, lr}
 8009154:	b084      	sub	sp, #16
 8009156:	af00      	add	r7, sp, #0
 8009158:	60f8      	str	r0, [r7, #12]
 800915a:	60b9      	str	r1, [r7, #8]
 800915c:	4613      	mov	r3, r2
 800915e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2202      	movs	r2, #2
 8009164:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009168:	88fa      	ldrh	r2, [r7, #6]
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800916e:	88fa      	ldrh	r2, [r7, #6]
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009174:	88fb      	ldrh	r3, [r7, #6]
 8009176:	68ba      	ldr	r2, [r7, #8]
 8009178:	2100      	movs	r1, #0
 800917a:	68f8      	ldr	r0, [r7, #12]
 800917c:	f000 fc4c 	bl	8009a18 <USBD_LL_Transmit>

  return USBD_OK;
 8009180:	2300      	movs	r3, #0
}
 8009182:	4618      	mov	r0, r3
 8009184:	3710      	adds	r7, #16
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}

0800918a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800918a:	b580      	push	{r7, lr}
 800918c:	b084      	sub	sp, #16
 800918e:	af00      	add	r7, sp, #0
 8009190:	60f8      	str	r0, [r7, #12]
 8009192:	60b9      	str	r1, [r7, #8]
 8009194:	4613      	mov	r3, r2
 8009196:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009198:	88fb      	ldrh	r3, [r7, #6]
 800919a:	68ba      	ldr	r2, [r7, #8]
 800919c:	2100      	movs	r1, #0
 800919e:	68f8      	ldr	r0, [r7, #12]
 80091a0:	f000 fc3a 	bl	8009a18 <USBD_LL_Transmit>

  return USBD_OK;
 80091a4:	2300      	movs	r3, #0
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3710      	adds	r7, #16
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}

080091ae <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80091ae:	b580      	push	{r7, lr}
 80091b0:	b084      	sub	sp, #16
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	60f8      	str	r0, [r7, #12]
 80091b6:	60b9      	str	r1, [r7, #8]
 80091b8:	4613      	mov	r3, r2
 80091ba:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2203      	movs	r2, #3
 80091c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80091c4:	88fa      	ldrh	r2, [r7, #6]
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80091cc:	88fa      	ldrh	r2, [r7, #6]
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80091d4:	88fb      	ldrh	r3, [r7, #6]
 80091d6:	68ba      	ldr	r2, [r7, #8]
 80091d8:	2100      	movs	r1, #0
 80091da:	68f8      	ldr	r0, [r7, #12]
 80091dc:	f000 fc3f 	bl	8009a5e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80091e0:	2300      	movs	r3, #0
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3710      	adds	r7, #16
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b084      	sub	sp, #16
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	60f8      	str	r0, [r7, #12]
 80091f2:	60b9      	str	r1, [r7, #8]
 80091f4:	4613      	mov	r3, r2
 80091f6:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80091f8:	88fb      	ldrh	r3, [r7, #6]
 80091fa:	68ba      	ldr	r2, [r7, #8]
 80091fc:	2100      	movs	r1, #0
 80091fe:	68f8      	ldr	r0, [r7, #12]
 8009200:	f000 fc2d 	bl	8009a5e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009204:	2300      	movs	r3, #0
}
 8009206:	4618      	mov	r0, r3
 8009208:	3710      	adds	r7, #16
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}

0800920e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800920e:	b580      	push	{r7, lr}
 8009210:	b082      	sub	sp, #8
 8009212:	af00      	add	r7, sp, #0
 8009214:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2204      	movs	r2, #4
 800921a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800921e:	2300      	movs	r3, #0
 8009220:	2200      	movs	r2, #0
 8009222:	2100      	movs	r1, #0
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f000 fbf7 	bl	8009a18 <USBD_LL_Transmit>

  return USBD_OK;
 800922a:	2300      	movs	r3, #0
}
 800922c:	4618      	mov	r0, r3
 800922e:	3708      	adds	r7, #8
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b082      	sub	sp, #8
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2205      	movs	r2, #5
 8009240:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009244:	2300      	movs	r3, #0
 8009246:	2200      	movs	r2, #0
 8009248:	2100      	movs	r1, #0
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f000 fc07 	bl	8009a5e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009250:	2300      	movs	r3, #0
}
 8009252:	4618      	mov	r0, r3
 8009254:	3708      	adds	r7, #8
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
	...

0800925c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009260:	2200      	movs	r2, #0
 8009262:	4912      	ldr	r1, [pc, #72]	; (80092ac <MX_USB_DEVICE_Init+0x50>)
 8009264:	4812      	ldr	r0, [pc, #72]	; (80092b0 <MX_USB_DEVICE_Init+0x54>)
 8009266:	f7fe ff58 	bl	800811a <USBD_Init>
 800926a:	4603      	mov	r3, r0
 800926c:	2b00      	cmp	r3, #0
 800926e:	d001      	beq.n	8009274 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009270:	f7f7 f9be 	bl	80005f0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009274:	490f      	ldr	r1, [pc, #60]	; (80092b4 <MX_USB_DEVICE_Init+0x58>)
 8009276:	480e      	ldr	r0, [pc, #56]	; (80092b0 <MX_USB_DEVICE_Init+0x54>)
 8009278:	f7fe ff7a 	bl	8008170 <USBD_RegisterClass>
 800927c:	4603      	mov	r3, r0
 800927e:	2b00      	cmp	r3, #0
 8009280:	d001      	beq.n	8009286 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009282:	f7f7 f9b5 	bl	80005f0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009286:	490c      	ldr	r1, [pc, #48]	; (80092b8 <MX_USB_DEVICE_Init+0x5c>)
 8009288:	4809      	ldr	r0, [pc, #36]	; (80092b0 <MX_USB_DEVICE_Init+0x54>)
 800928a:	f7fe fed7 	bl	800803c <USBD_CDC_RegisterInterface>
 800928e:	4603      	mov	r3, r0
 8009290:	2b00      	cmp	r3, #0
 8009292:	d001      	beq.n	8009298 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009294:	f7f7 f9ac 	bl	80005f0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009298:	4805      	ldr	r0, [pc, #20]	; (80092b0 <MX_USB_DEVICE_Init+0x54>)
 800929a:	f7fe ff83 	bl	80081a4 <USBD_Start>
 800929e:	4603      	mov	r3, r0
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d001      	beq.n	80092a8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80092a4:	f7f7 f9a4 	bl	80005f0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80092a8:	bf00      	nop
 80092aa:	bd80      	pop	{r7, pc}
 80092ac:	2000012c 	.word	0x2000012c
 80092b0:	200002ac 	.word	0x200002ac
 80092b4:	20000018 	.word	0x20000018
 80092b8:	2000011c 	.word	0x2000011c

080092bc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80092c0:	2200      	movs	r2, #0
 80092c2:	4905      	ldr	r1, [pc, #20]	; (80092d8 <CDC_Init_FS+0x1c>)
 80092c4:	4805      	ldr	r0, [pc, #20]	; (80092dc <CDC_Init_FS+0x20>)
 80092c6:	f7fe fed0 	bl	800806a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80092ca:	4905      	ldr	r1, [pc, #20]	; (80092e0 <CDC_Init_FS+0x24>)
 80092cc:	4803      	ldr	r0, [pc, #12]	; (80092dc <CDC_Init_FS+0x20>)
 80092ce:	f7fe fee6 	bl	800809e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80092d2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	bd80      	pop	{r7, pc}
 80092d8:	20000970 	.word	0x20000970
 80092dc:	200002ac 	.word	0x200002ac
 80092e0:	20000570 	.word	0x20000570

080092e4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80092e4:	b480      	push	{r7}
 80092e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80092e8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	46bd      	mov	sp, r7
 80092ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f2:	4770      	bx	lr

080092f4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80092f4:	b480      	push	{r7}
 80092f6:	b083      	sub	sp, #12
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	4603      	mov	r3, r0
 80092fc:	6039      	str	r1, [r7, #0]
 80092fe:	71fb      	strb	r3, [r7, #7]
 8009300:	4613      	mov	r3, r2
 8009302:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009304:	79fb      	ldrb	r3, [r7, #7]
 8009306:	2b23      	cmp	r3, #35	; 0x23
 8009308:	d84a      	bhi.n	80093a0 <CDC_Control_FS+0xac>
 800930a:	a201      	add	r2, pc, #4	; (adr r2, 8009310 <CDC_Control_FS+0x1c>)
 800930c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009310:	080093a1 	.word	0x080093a1
 8009314:	080093a1 	.word	0x080093a1
 8009318:	080093a1 	.word	0x080093a1
 800931c:	080093a1 	.word	0x080093a1
 8009320:	080093a1 	.word	0x080093a1
 8009324:	080093a1 	.word	0x080093a1
 8009328:	080093a1 	.word	0x080093a1
 800932c:	080093a1 	.word	0x080093a1
 8009330:	080093a1 	.word	0x080093a1
 8009334:	080093a1 	.word	0x080093a1
 8009338:	080093a1 	.word	0x080093a1
 800933c:	080093a1 	.word	0x080093a1
 8009340:	080093a1 	.word	0x080093a1
 8009344:	080093a1 	.word	0x080093a1
 8009348:	080093a1 	.word	0x080093a1
 800934c:	080093a1 	.word	0x080093a1
 8009350:	080093a1 	.word	0x080093a1
 8009354:	080093a1 	.word	0x080093a1
 8009358:	080093a1 	.word	0x080093a1
 800935c:	080093a1 	.word	0x080093a1
 8009360:	080093a1 	.word	0x080093a1
 8009364:	080093a1 	.word	0x080093a1
 8009368:	080093a1 	.word	0x080093a1
 800936c:	080093a1 	.word	0x080093a1
 8009370:	080093a1 	.word	0x080093a1
 8009374:	080093a1 	.word	0x080093a1
 8009378:	080093a1 	.word	0x080093a1
 800937c:	080093a1 	.word	0x080093a1
 8009380:	080093a1 	.word	0x080093a1
 8009384:	080093a1 	.word	0x080093a1
 8009388:	080093a1 	.word	0x080093a1
 800938c:	080093a1 	.word	0x080093a1
 8009390:	080093a1 	.word	0x080093a1
 8009394:	080093a1 	.word	0x080093a1
 8009398:	080093a1 	.word	0x080093a1
 800939c:	080093a1 	.word	0x080093a1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80093a0:	bf00      	nop
  }

  return (USBD_OK);
 80093a2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	370c      	adds	r7, #12
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr

080093b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b082      	sub	sp, #8
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80093ba:	6879      	ldr	r1, [r7, #4]
 80093bc:	4805      	ldr	r0, [pc, #20]	; (80093d4 <CDC_Receive_FS+0x24>)
 80093be:	f7fe fe6e 	bl	800809e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80093c2:	4804      	ldr	r0, [pc, #16]	; (80093d4 <CDC_Receive_FS+0x24>)
 80093c4:	f7fe fe7f 	bl	80080c6 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80093c8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3708      	adds	r7, #8
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}
 80093d2:	bf00      	nop
 80093d4:	200002ac 	.word	0x200002ac

080093d8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093d8:	b480      	push	{r7}
 80093da:	b083      	sub	sp, #12
 80093dc:	af00      	add	r7, sp, #0
 80093de:	4603      	mov	r3, r0
 80093e0:	6039      	str	r1, [r7, #0]
 80093e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	2212      	movs	r2, #18
 80093e8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80093ea:	4b03      	ldr	r3, [pc, #12]	; (80093f8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	370c      	adds	r7, #12
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr
 80093f8:	20000148 	.word	0x20000148

080093fc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b083      	sub	sp, #12
 8009400:	af00      	add	r7, sp, #0
 8009402:	4603      	mov	r3, r0
 8009404:	6039      	str	r1, [r7, #0]
 8009406:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	2204      	movs	r2, #4
 800940c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800940e:	4b03      	ldr	r3, [pc, #12]	; (800941c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009410:	4618      	mov	r0, r3
 8009412:	370c      	adds	r7, #12
 8009414:	46bd      	mov	sp, r7
 8009416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941a:	4770      	bx	lr
 800941c:	2000015c 	.word	0x2000015c

08009420 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b082      	sub	sp, #8
 8009424:	af00      	add	r7, sp, #0
 8009426:	4603      	mov	r3, r0
 8009428:	6039      	str	r1, [r7, #0]
 800942a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800942c:	79fb      	ldrb	r3, [r7, #7]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d105      	bne.n	800943e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009432:	683a      	ldr	r2, [r7, #0]
 8009434:	4907      	ldr	r1, [pc, #28]	; (8009454 <USBD_FS_ProductStrDescriptor+0x34>)
 8009436:	4808      	ldr	r0, [pc, #32]	; (8009458 <USBD_FS_ProductStrDescriptor+0x38>)
 8009438:	f7ff fe31 	bl	800909e <USBD_GetString>
 800943c:	e004      	b.n	8009448 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800943e:	683a      	ldr	r2, [r7, #0]
 8009440:	4904      	ldr	r1, [pc, #16]	; (8009454 <USBD_FS_ProductStrDescriptor+0x34>)
 8009442:	4805      	ldr	r0, [pc, #20]	; (8009458 <USBD_FS_ProductStrDescriptor+0x38>)
 8009444:	f7ff fe2b 	bl	800909e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009448:	4b02      	ldr	r3, [pc, #8]	; (8009454 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800944a:	4618      	mov	r0, r3
 800944c:	3708      	adds	r7, #8
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	20000d70 	.word	0x20000d70
 8009458:	08009bdc 	.word	0x08009bdc

0800945c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b082      	sub	sp, #8
 8009460:	af00      	add	r7, sp, #0
 8009462:	4603      	mov	r3, r0
 8009464:	6039      	str	r1, [r7, #0]
 8009466:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009468:	683a      	ldr	r2, [r7, #0]
 800946a:	4904      	ldr	r1, [pc, #16]	; (800947c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800946c:	4804      	ldr	r0, [pc, #16]	; (8009480 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800946e:	f7ff fe16 	bl	800909e <USBD_GetString>
  return USBD_StrDesc;
 8009472:	4b02      	ldr	r3, [pc, #8]	; (800947c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009474:	4618      	mov	r0, r3
 8009476:	3708      	adds	r7, #8
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}
 800947c:	20000d70 	.word	0x20000d70
 8009480:	08009bf4 	.word	0x08009bf4

08009484 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b082      	sub	sp, #8
 8009488:	af00      	add	r7, sp, #0
 800948a:	4603      	mov	r3, r0
 800948c:	6039      	str	r1, [r7, #0]
 800948e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	221a      	movs	r2, #26
 8009494:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009496:	f000 f843 	bl	8009520 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800949a:	4b02      	ldr	r3, [pc, #8]	; (80094a4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800949c:	4618      	mov	r0, r3
 800949e:	3708      	adds	r7, #8
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}
 80094a4:	20000160 	.word	0x20000160

080094a8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b082      	sub	sp, #8
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	4603      	mov	r3, r0
 80094b0:	6039      	str	r1, [r7, #0]
 80094b2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80094b4:	79fb      	ldrb	r3, [r7, #7]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d105      	bne.n	80094c6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80094ba:	683a      	ldr	r2, [r7, #0]
 80094bc:	4907      	ldr	r1, [pc, #28]	; (80094dc <USBD_FS_ConfigStrDescriptor+0x34>)
 80094be:	4808      	ldr	r0, [pc, #32]	; (80094e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80094c0:	f7ff fded 	bl	800909e <USBD_GetString>
 80094c4:	e004      	b.n	80094d0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80094c6:	683a      	ldr	r2, [r7, #0]
 80094c8:	4904      	ldr	r1, [pc, #16]	; (80094dc <USBD_FS_ConfigStrDescriptor+0x34>)
 80094ca:	4805      	ldr	r0, [pc, #20]	; (80094e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80094cc:	f7ff fde7 	bl	800909e <USBD_GetString>
  }
  return USBD_StrDesc;
 80094d0:	4b02      	ldr	r3, [pc, #8]	; (80094dc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3708      	adds	r7, #8
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}
 80094da:	bf00      	nop
 80094dc:	20000d70 	.word	0x20000d70
 80094e0:	08009c08 	.word	0x08009c08

080094e4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b082      	sub	sp, #8
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	4603      	mov	r3, r0
 80094ec:	6039      	str	r1, [r7, #0]
 80094ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80094f0:	79fb      	ldrb	r3, [r7, #7]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d105      	bne.n	8009502 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80094f6:	683a      	ldr	r2, [r7, #0]
 80094f8:	4907      	ldr	r1, [pc, #28]	; (8009518 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80094fa:	4808      	ldr	r0, [pc, #32]	; (800951c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80094fc:	f7ff fdcf 	bl	800909e <USBD_GetString>
 8009500:	e004      	b.n	800950c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009502:	683a      	ldr	r2, [r7, #0]
 8009504:	4904      	ldr	r1, [pc, #16]	; (8009518 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009506:	4805      	ldr	r0, [pc, #20]	; (800951c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009508:	f7ff fdc9 	bl	800909e <USBD_GetString>
  }
  return USBD_StrDesc;
 800950c:	4b02      	ldr	r3, [pc, #8]	; (8009518 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800950e:	4618      	mov	r0, r3
 8009510:	3708      	adds	r7, #8
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
 8009516:	bf00      	nop
 8009518:	20000d70 	.word	0x20000d70
 800951c:	08009c14 	.word	0x08009c14

08009520 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b084      	sub	sp, #16
 8009524:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009526:	4b0f      	ldr	r3, [pc, #60]	; (8009564 <Get_SerialNum+0x44>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800952c:	4b0e      	ldr	r3, [pc, #56]	; (8009568 <Get_SerialNum+0x48>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009532:	4b0e      	ldr	r3, [pc, #56]	; (800956c <Get_SerialNum+0x4c>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009538:	68fa      	ldr	r2, [r7, #12]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	4413      	add	r3, r2
 800953e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d009      	beq.n	800955a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009546:	2208      	movs	r2, #8
 8009548:	4909      	ldr	r1, [pc, #36]	; (8009570 <Get_SerialNum+0x50>)
 800954a:	68f8      	ldr	r0, [r7, #12]
 800954c:	f000 f814 	bl	8009578 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009550:	2204      	movs	r2, #4
 8009552:	4908      	ldr	r1, [pc, #32]	; (8009574 <Get_SerialNum+0x54>)
 8009554:	68b8      	ldr	r0, [r7, #8]
 8009556:	f000 f80f 	bl	8009578 <IntToUnicode>
  }
}
 800955a:	bf00      	nop
 800955c:	3710      	adds	r7, #16
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}
 8009562:	bf00      	nop
 8009564:	1ffff7ac 	.word	0x1ffff7ac
 8009568:	1ffff7b0 	.word	0x1ffff7b0
 800956c:	1ffff7b4 	.word	0x1ffff7b4
 8009570:	20000162 	.word	0x20000162
 8009574:	20000172 	.word	0x20000172

08009578 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009578:	b480      	push	{r7}
 800957a:	b087      	sub	sp, #28
 800957c:	af00      	add	r7, sp, #0
 800957e:	60f8      	str	r0, [r7, #12]
 8009580:	60b9      	str	r1, [r7, #8]
 8009582:	4613      	mov	r3, r2
 8009584:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009586:	2300      	movs	r3, #0
 8009588:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800958a:	2300      	movs	r3, #0
 800958c:	75fb      	strb	r3, [r7, #23]
 800958e:	e027      	b.n	80095e0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	0f1b      	lsrs	r3, r3, #28
 8009594:	2b09      	cmp	r3, #9
 8009596:	d80b      	bhi.n	80095b0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	0f1b      	lsrs	r3, r3, #28
 800959c:	b2da      	uxtb	r2, r3
 800959e:	7dfb      	ldrb	r3, [r7, #23]
 80095a0:	005b      	lsls	r3, r3, #1
 80095a2:	4619      	mov	r1, r3
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	440b      	add	r3, r1
 80095a8:	3230      	adds	r2, #48	; 0x30
 80095aa:	b2d2      	uxtb	r2, r2
 80095ac:	701a      	strb	r2, [r3, #0]
 80095ae:	e00a      	b.n	80095c6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	0f1b      	lsrs	r3, r3, #28
 80095b4:	b2da      	uxtb	r2, r3
 80095b6:	7dfb      	ldrb	r3, [r7, #23]
 80095b8:	005b      	lsls	r3, r3, #1
 80095ba:	4619      	mov	r1, r3
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	440b      	add	r3, r1
 80095c0:	3237      	adds	r2, #55	; 0x37
 80095c2:	b2d2      	uxtb	r2, r2
 80095c4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	011b      	lsls	r3, r3, #4
 80095ca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80095cc:	7dfb      	ldrb	r3, [r7, #23]
 80095ce:	005b      	lsls	r3, r3, #1
 80095d0:	3301      	adds	r3, #1
 80095d2:	68ba      	ldr	r2, [r7, #8]
 80095d4:	4413      	add	r3, r2
 80095d6:	2200      	movs	r2, #0
 80095d8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80095da:	7dfb      	ldrb	r3, [r7, #23]
 80095dc:	3301      	adds	r3, #1
 80095de:	75fb      	strb	r3, [r7, #23]
 80095e0:	7dfa      	ldrb	r2, [r7, #23]
 80095e2:	79fb      	ldrb	r3, [r7, #7]
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d3d3      	bcc.n	8009590 <IntToUnicode+0x18>
  }
}
 80095e8:	bf00      	nop
 80095ea:	bf00      	nop
 80095ec:	371c      	adds	r7, #28
 80095ee:	46bd      	mov	sp, r7
 80095f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f4:	4770      	bx	lr
	...

080095f8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b084      	sub	sp, #16
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4a10      	ldr	r2, [pc, #64]	; (8009648 <HAL_PCD_MspInit+0x50>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d119      	bne.n	800963e <HAL_PCD_MspInit+0x46>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800960a:	4b10      	ldr	r3, [pc, #64]	; (800964c <HAL_PCD_MspInit+0x54>)
 800960c:	69db      	ldr	r3, [r3, #28]
 800960e:	4a0f      	ldr	r2, [pc, #60]	; (800964c <HAL_PCD_MspInit+0x54>)
 8009610:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009614:	61d3      	str	r3, [r2, #28]
 8009616:	4b0d      	ldr	r3, [pc, #52]	; (800964c <HAL_PCD_MspInit+0x54>)
 8009618:	69db      	ldr	r3, [r3, #28]
 800961a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800961e:	60fb      	str	r3, [r7, #12]
 8009620:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    __HAL_REMAPINTERRUPT_USB_ENABLE();
 8009622:	4b0b      	ldr	r3, [pc, #44]	; (8009650 <HAL_PCD_MspInit+0x58>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	4a0a      	ldr	r2, [pc, #40]	; (8009650 <HAL_PCD_MspInit+0x58>)
 8009628:	f043 0320 	orr.w	r3, r3, #32
 800962c:	6013      	str	r3, [r2, #0]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800962e:	2200      	movs	r2, #0
 8009630:	2100      	movs	r1, #0
 8009632:	204b      	movs	r0, #75	; 0x4b
 8009634:	f7f7 fa89 	bl	8000b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009638:	204b      	movs	r0, #75	; 0x4b
 800963a:	f7f7 faa2 	bl	8000b82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800963e:	bf00      	nop
 8009640:	3710      	adds	r7, #16
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}
 8009646:	bf00      	nop
 8009648:	40005c00 	.word	0x40005c00
 800964c:	40021000 	.word	0x40021000
 8009650:	40010000 	.word	0x40010000

08009654 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b082      	sub	sp, #8
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009668:	4619      	mov	r1, r3
 800966a:	4610      	mov	r0, r2
 800966c:	f7fe fde3 	bl	8008236 <USBD_LL_SetupStage>
}
 8009670:	bf00      	nop
 8009672:	3708      	adds	r7, #8
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	460b      	mov	r3, r1
 8009682:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800968a:	78fa      	ldrb	r2, [r7, #3]
 800968c:	6879      	ldr	r1, [r7, #4]
 800968e:	4613      	mov	r3, r2
 8009690:	009b      	lsls	r3, r3, #2
 8009692:	4413      	add	r3, r2
 8009694:	00db      	lsls	r3, r3, #3
 8009696:	440b      	add	r3, r1
 8009698:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800969c:	681a      	ldr	r2, [r3, #0]
 800969e:	78fb      	ldrb	r3, [r7, #3]
 80096a0:	4619      	mov	r1, r3
 80096a2:	f7fe fe15 	bl	80082d0 <USBD_LL_DataOutStage>
}
 80096a6:	bf00      	nop
 80096a8:	3708      	adds	r7, #8
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}

080096ae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096ae:	b580      	push	{r7, lr}
 80096b0:	b082      	sub	sp, #8
 80096b2:	af00      	add	r7, sp, #0
 80096b4:	6078      	str	r0, [r7, #4]
 80096b6:	460b      	mov	r3, r1
 80096b8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80096c0:	78fa      	ldrb	r2, [r7, #3]
 80096c2:	6879      	ldr	r1, [r7, #4]
 80096c4:	4613      	mov	r3, r2
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	4413      	add	r3, r2
 80096ca:	00db      	lsls	r3, r3, #3
 80096cc:	440b      	add	r3, r1
 80096ce:	333c      	adds	r3, #60	; 0x3c
 80096d0:	681a      	ldr	r2, [r3, #0]
 80096d2:	78fb      	ldrb	r3, [r7, #3]
 80096d4:	4619      	mov	r1, r3
 80096d6:	f7fe fe6c 	bl	80083b2 <USBD_LL_DataInStage>
}
 80096da:	bf00      	nop
 80096dc:	3708      	adds	r7, #8
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}

080096e2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096e2:	b580      	push	{r7, lr}
 80096e4:	b082      	sub	sp, #8
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80096f0:	4618      	mov	r0, r3
 80096f2:	f7fe ff7f 	bl	80085f4 <USBD_LL_SOF>
}
 80096f6:	bf00      	nop
 80096f8:	3708      	adds	r7, #8
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}

080096fe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096fe:	b580      	push	{r7, lr}
 8009700:	b084      	sub	sp, #16
 8009702:	af00      	add	r7, sp, #0
 8009704:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009706:	2301      	movs	r3, #1
 8009708:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	689b      	ldr	r3, [r3, #8]
 800970e:	2b02      	cmp	r3, #2
 8009710:	d001      	beq.n	8009716 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009712:	f7f6 ff6d 	bl	80005f0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800971c:	7bfa      	ldrb	r2, [r7, #15]
 800971e:	4611      	mov	r1, r2
 8009720:	4618      	mov	r0, r3
 8009722:	f7fe ff2c 	bl	800857e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800972c:	4618      	mov	r0, r3
 800972e:	f7fe fee5 	bl	80084fc <USBD_LL_Reset>
}
 8009732:	bf00      	nop
 8009734:	3710      	adds	r7, #16
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}
	...

0800973c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b082      	sub	sp, #8
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800974a:	4618      	mov	r0, r3
 800974c:	f7fe ff27 	bl	800859e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	699b      	ldr	r3, [r3, #24]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d005      	beq.n	8009764 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009758:	4b04      	ldr	r3, [pc, #16]	; (800976c <HAL_PCD_SuspendCallback+0x30>)
 800975a:	691b      	ldr	r3, [r3, #16]
 800975c:	4a03      	ldr	r2, [pc, #12]	; (800976c <HAL_PCD_SuspendCallback+0x30>)
 800975e:	f043 0306 	orr.w	r3, r3, #6
 8009762:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009764:	bf00      	nop
 8009766:	3708      	adds	r7, #8
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}
 800976c:	e000ed00 	.word	0xe000ed00

08009770 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b082      	sub	sp, #8
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800977e:	4618      	mov	r0, r3
 8009780:	f7fe ff22 	bl	80085c8 <USBD_LL_Resume>
}
 8009784:	bf00      	nop
 8009786:	3708      	adds	r7, #8
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}

0800978c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b082      	sub	sp, #8
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009794:	4a29      	ldr	r2, [pc, #164]	; (800983c <USBD_LL_Init+0xb0>)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	4a27      	ldr	r2, [pc, #156]	; (800983c <USBD_LL_Init+0xb0>)
 80097a0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80097a4:	4b25      	ldr	r3, [pc, #148]	; (800983c <USBD_LL_Init+0xb0>)
 80097a6:	4a26      	ldr	r2, [pc, #152]	; (8009840 <USBD_LL_Init+0xb4>)
 80097a8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80097aa:	4b24      	ldr	r3, [pc, #144]	; (800983c <USBD_LL_Init+0xb0>)
 80097ac:	2208      	movs	r2, #8
 80097ae:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80097b0:	4b22      	ldr	r3, [pc, #136]	; (800983c <USBD_LL_Init+0xb0>)
 80097b2:	2202      	movs	r2, #2
 80097b4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80097b6:	4b21      	ldr	r3, [pc, #132]	; (800983c <USBD_LL_Init+0xb0>)
 80097b8:	2202      	movs	r2, #2
 80097ba:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80097bc:	4b1f      	ldr	r3, [pc, #124]	; (800983c <USBD_LL_Init+0xb0>)
 80097be:	2200      	movs	r2, #0
 80097c0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80097c2:	4b1e      	ldr	r3, [pc, #120]	; (800983c <USBD_LL_Init+0xb0>)
 80097c4:	2200      	movs	r2, #0
 80097c6:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80097c8:	4b1c      	ldr	r3, [pc, #112]	; (800983c <USBD_LL_Init+0xb0>)
 80097ca:	2200      	movs	r2, #0
 80097cc:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80097ce:	481b      	ldr	r0, [pc, #108]	; (800983c <USBD_LL_Init+0xb0>)
 80097d0:	f7f7 fbae 	bl	8000f30 <HAL_PCD_Init>
 80097d4:	4603      	mov	r3, r0
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d001      	beq.n	80097de <USBD_LL_Init+0x52>
  {
    Error_Handler( );
 80097da:	f7f6 ff09 	bl	80005f0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80097e4:	2318      	movs	r3, #24
 80097e6:	2200      	movs	r2, #0
 80097e8:	2100      	movs	r1, #0
 80097ea:	f7f9 f821 	bl	8002830 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80097f4:	2358      	movs	r3, #88	; 0x58
 80097f6:	2200      	movs	r2, #0
 80097f8:	2180      	movs	r1, #128	; 0x80
 80097fa:	f7f9 f819 	bl	8002830 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009804:	23c0      	movs	r3, #192	; 0xc0
 8009806:	2200      	movs	r2, #0
 8009808:	2181      	movs	r1, #129	; 0x81
 800980a:	f7f9 f811 	bl	8002830 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009814:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009818:	2200      	movs	r2, #0
 800981a:	2101      	movs	r1, #1
 800981c:	f7f9 f808 	bl	8002830 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009826:	f44f 7380 	mov.w	r3, #256	; 0x100
 800982a:	2200      	movs	r2, #0
 800982c:	2182      	movs	r1, #130	; 0x82
 800982e:	f7f8 ffff 	bl	8002830 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009832:	2300      	movs	r3, #0
}
 8009834:	4618      	mov	r0, r3
 8009836:	3708      	adds	r7, #8
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}
 800983c:	20000f70 	.word	0x20000f70
 8009840:	40005c00 	.word	0x40005c00

08009844 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b084      	sub	sp, #16
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800984c:	2300      	movs	r3, #0
 800984e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009850:	2300      	movs	r3, #0
 8009852:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800985a:	4618      	mov	r0, r3
 800985c:	f7f7 fc3a 	bl	80010d4 <HAL_PCD_Start>
 8009860:	4603      	mov	r3, r0
 8009862:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009864:	7bfb      	ldrb	r3, [r7, #15]
 8009866:	4618      	mov	r0, r3
 8009868:	f000 f954 	bl	8009b14 <USBD_Get_USB_Status>
 800986c:	4603      	mov	r3, r0
 800986e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009870:	7bbb      	ldrb	r3, [r7, #14]
}
 8009872:	4618      	mov	r0, r3
 8009874:	3710      	adds	r7, #16
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}

0800987a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800987a:	b580      	push	{r7, lr}
 800987c:	b084      	sub	sp, #16
 800987e:	af00      	add	r7, sp, #0
 8009880:	6078      	str	r0, [r7, #4]
 8009882:	4608      	mov	r0, r1
 8009884:	4611      	mov	r1, r2
 8009886:	461a      	mov	r2, r3
 8009888:	4603      	mov	r3, r0
 800988a:	70fb      	strb	r3, [r7, #3]
 800988c:	460b      	mov	r3, r1
 800988e:	70bb      	strb	r3, [r7, #2]
 8009890:	4613      	mov	r3, r2
 8009892:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009894:	2300      	movs	r3, #0
 8009896:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009898:	2300      	movs	r3, #0
 800989a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80098a2:	78bb      	ldrb	r3, [r7, #2]
 80098a4:	883a      	ldrh	r2, [r7, #0]
 80098a6:	78f9      	ldrb	r1, [r7, #3]
 80098a8:	f7f7 fd33 	bl	8001312 <HAL_PCD_EP_Open>
 80098ac:	4603      	mov	r3, r0
 80098ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098b0:	7bfb      	ldrb	r3, [r7, #15]
 80098b2:	4618      	mov	r0, r3
 80098b4:	f000 f92e 	bl	8009b14 <USBD_Get_USB_Status>
 80098b8:	4603      	mov	r3, r0
 80098ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3710      	adds	r7, #16
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}

080098c6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098c6:	b580      	push	{r7, lr}
 80098c8:	b084      	sub	sp, #16
 80098ca:	af00      	add	r7, sp, #0
 80098cc:	6078      	str	r0, [r7, #4]
 80098ce:	460b      	mov	r3, r1
 80098d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098d2:	2300      	movs	r3, #0
 80098d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098d6:	2300      	movs	r3, #0
 80098d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80098e0:	78fa      	ldrb	r2, [r7, #3]
 80098e2:	4611      	mov	r1, r2
 80098e4:	4618      	mov	r0, r3
 80098e6:	f7f7 fd71 	bl	80013cc <HAL_PCD_EP_Close>
 80098ea:	4603      	mov	r3, r0
 80098ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098ee:	7bfb      	ldrb	r3, [r7, #15]
 80098f0:	4618      	mov	r0, r3
 80098f2:	f000 f90f 	bl	8009b14 <USBD_Get_USB_Status>
 80098f6:	4603      	mov	r3, r0
 80098f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	3710      	adds	r7, #16
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}

08009904 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b084      	sub	sp, #16
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	460b      	mov	r3, r1
 800990e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009910:	2300      	movs	r3, #0
 8009912:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009914:	2300      	movs	r3, #0
 8009916:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800991e:	78fa      	ldrb	r2, [r7, #3]
 8009920:	4611      	mov	r1, r2
 8009922:	4618      	mov	r0, r3
 8009924:	f7f7 fe1a 	bl	800155c <HAL_PCD_EP_SetStall>
 8009928:	4603      	mov	r3, r0
 800992a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800992c:	7bfb      	ldrb	r3, [r7, #15]
 800992e:	4618      	mov	r0, r3
 8009930:	f000 f8f0 	bl	8009b14 <USBD_Get_USB_Status>
 8009934:	4603      	mov	r3, r0
 8009936:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009938:	7bbb      	ldrb	r3, [r7, #14]
}
 800993a:	4618      	mov	r0, r3
 800993c:	3710      	adds	r7, #16
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}

08009942 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009942:	b580      	push	{r7, lr}
 8009944:	b084      	sub	sp, #16
 8009946:	af00      	add	r7, sp, #0
 8009948:	6078      	str	r0, [r7, #4]
 800994a:	460b      	mov	r3, r1
 800994c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800994e:	2300      	movs	r3, #0
 8009950:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009952:	2300      	movs	r3, #0
 8009954:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800995c:	78fa      	ldrb	r2, [r7, #3]
 800995e:	4611      	mov	r1, r2
 8009960:	4618      	mov	r0, r3
 8009962:	f7f7 fe4d 	bl	8001600 <HAL_PCD_EP_ClrStall>
 8009966:	4603      	mov	r3, r0
 8009968:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800996a:	7bfb      	ldrb	r3, [r7, #15]
 800996c:	4618      	mov	r0, r3
 800996e:	f000 f8d1 	bl	8009b14 <USBD_Get_USB_Status>
 8009972:	4603      	mov	r3, r0
 8009974:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009976:	7bbb      	ldrb	r3, [r7, #14]
}
 8009978:	4618      	mov	r0, r3
 800997a:	3710      	adds	r7, #16
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}

08009980 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009980:	b480      	push	{r7}
 8009982:	b085      	sub	sp, #20
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	460b      	mov	r3, r1
 800998a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009992:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009994:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009998:	2b00      	cmp	r3, #0
 800999a:	da0c      	bge.n	80099b6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800999c:	78fb      	ldrb	r3, [r7, #3]
 800999e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099a2:	68f9      	ldr	r1, [r7, #12]
 80099a4:	1c5a      	adds	r2, r3, #1
 80099a6:	4613      	mov	r3, r2
 80099a8:	009b      	lsls	r3, r3, #2
 80099aa:	4413      	add	r3, r2
 80099ac:	00db      	lsls	r3, r3, #3
 80099ae:	440b      	add	r3, r1
 80099b0:	3302      	adds	r3, #2
 80099b2:	781b      	ldrb	r3, [r3, #0]
 80099b4:	e00b      	b.n	80099ce <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80099b6:	78fb      	ldrb	r3, [r7, #3]
 80099b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80099bc:	68f9      	ldr	r1, [r7, #12]
 80099be:	4613      	mov	r3, r2
 80099c0:	009b      	lsls	r3, r3, #2
 80099c2:	4413      	add	r3, r2
 80099c4:	00db      	lsls	r3, r3, #3
 80099c6:	440b      	add	r3, r1
 80099c8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80099cc:	781b      	ldrb	r3, [r3, #0]
  }
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3714      	adds	r7, #20
 80099d2:	46bd      	mov	sp, r7
 80099d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d8:	4770      	bx	lr

080099da <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80099da:	b580      	push	{r7, lr}
 80099dc:	b084      	sub	sp, #16
 80099de:	af00      	add	r7, sp, #0
 80099e0:	6078      	str	r0, [r7, #4]
 80099e2:	460b      	mov	r3, r1
 80099e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099e6:	2300      	movs	r3, #0
 80099e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099ea:	2300      	movs	r3, #0
 80099ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80099f4:	78fa      	ldrb	r2, [r7, #3]
 80099f6:	4611      	mov	r1, r2
 80099f8:	4618      	mov	r0, r3
 80099fa:	f7f7 fc65 	bl	80012c8 <HAL_PCD_SetAddress>
 80099fe:	4603      	mov	r3, r0
 8009a00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a02:	7bfb      	ldrb	r3, [r7, #15]
 8009a04:	4618      	mov	r0, r3
 8009a06:	f000 f885 	bl	8009b14 <USBD_Get_USB_Status>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3710      	adds	r7, #16
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b086      	sub	sp, #24
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	60f8      	str	r0, [r7, #12]
 8009a20:	607a      	str	r2, [r7, #4]
 8009a22:	461a      	mov	r2, r3
 8009a24:	460b      	mov	r3, r1
 8009a26:	72fb      	strb	r3, [r7, #11]
 8009a28:	4613      	mov	r3, r2
 8009a2a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a30:	2300      	movs	r3, #0
 8009a32:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009a3a:	893b      	ldrh	r3, [r7, #8]
 8009a3c:	7af9      	ldrb	r1, [r7, #11]
 8009a3e:	687a      	ldr	r2, [r7, #4]
 8009a40:	f7f7 fd55 	bl	80014ee <HAL_PCD_EP_Transmit>
 8009a44:	4603      	mov	r3, r0
 8009a46:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a48:	7dfb      	ldrb	r3, [r7, #23]
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f000 f862 	bl	8009b14 <USBD_Get_USB_Status>
 8009a50:	4603      	mov	r3, r0
 8009a52:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009a54:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3718      	adds	r7, #24
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}

08009a5e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009a5e:	b580      	push	{r7, lr}
 8009a60:	b086      	sub	sp, #24
 8009a62:	af00      	add	r7, sp, #0
 8009a64:	60f8      	str	r0, [r7, #12]
 8009a66:	607a      	str	r2, [r7, #4]
 8009a68:	461a      	mov	r2, r3
 8009a6a:	460b      	mov	r3, r1
 8009a6c:	72fb      	strb	r3, [r7, #11]
 8009a6e:	4613      	mov	r3, r2
 8009a70:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a72:	2300      	movs	r3, #0
 8009a74:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a76:	2300      	movs	r3, #0
 8009a78:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009a80:	893b      	ldrh	r3, [r7, #8]
 8009a82:	7af9      	ldrb	r1, [r7, #11]
 8009a84:	687a      	ldr	r2, [r7, #4]
 8009a86:	f7f7 fce9 	bl	800145c <HAL_PCD_EP_Receive>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a8e:	7dfb      	ldrb	r3, [r7, #23]
 8009a90:	4618      	mov	r0, r3
 8009a92:	f000 f83f 	bl	8009b14 <USBD_Get_USB_Status>
 8009a96:	4603      	mov	r3, r0
 8009a98:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009a9a:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3718      	adds	r7, #24
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}

08009aa4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b082      	sub	sp, #8
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
 8009aac:	460b      	mov	r3, r1
 8009aae:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ab6:	78fa      	ldrb	r2, [r7, #3]
 8009ab8:	4611      	mov	r1, r2
 8009aba:	4618      	mov	r0, r3
 8009abc:	f7f7 fcff 	bl	80014be <HAL_PCD_EP_GetRxCount>
 8009ac0:	4603      	mov	r3, r0
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3708      	adds	r7, #8
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}
	...

08009acc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009acc:	b480      	push	{r7}
 8009ace:	b083      	sub	sp, #12
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009ad4:	4b03      	ldr	r3, [pc, #12]	; (8009ae4 <USBD_static_malloc+0x18>)
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	370c      	adds	r7, #12
 8009ada:	46bd      	mov	sp, r7
 8009adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae0:	4770      	bx	lr
 8009ae2:	bf00      	nop
 8009ae4:	2000125c 	.word	0x2000125c

08009ae8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b083      	sub	sp, #12
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]

}
 8009af0:	bf00      	nop
 8009af2:	370c      	adds	r7, #12
 8009af4:	46bd      	mov	sp, r7
 8009af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afa:	4770      	bx	lr

08009afc <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009afc:	b480      	push	{r7}
 8009afe:	b083      	sub	sp, #12
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	460b      	mov	r3, r1
 8009b06:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009b08:	bf00      	nop
 8009b0a:	370c      	adds	r7, #12
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr

08009b14 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b085      	sub	sp, #20
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009b22:	79fb      	ldrb	r3, [r7, #7]
 8009b24:	2b03      	cmp	r3, #3
 8009b26:	d817      	bhi.n	8009b58 <USBD_Get_USB_Status+0x44>
 8009b28:	a201      	add	r2, pc, #4	; (adr r2, 8009b30 <USBD_Get_USB_Status+0x1c>)
 8009b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b2e:	bf00      	nop
 8009b30:	08009b41 	.word	0x08009b41
 8009b34:	08009b47 	.word	0x08009b47
 8009b38:	08009b4d 	.word	0x08009b4d
 8009b3c:	08009b53 	.word	0x08009b53
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009b40:	2300      	movs	r3, #0
 8009b42:	73fb      	strb	r3, [r7, #15]
    break;
 8009b44:	e00b      	b.n	8009b5e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009b46:	2302      	movs	r3, #2
 8009b48:	73fb      	strb	r3, [r7, #15]
    break;
 8009b4a:	e008      	b.n	8009b5e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	73fb      	strb	r3, [r7, #15]
    break;
 8009b50:	e005      	b.n	8009b5e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009b52:	2302      	movs	r3, #2
 8009b54:	73fb      	strb	r3, [r7, #15]
    break;
 8009b56:	e002      	b.n	8009b5e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009b58:	2302      	movs	r3, #2
 8009b5a:	73fb      	strb	r3, [r7, #15]
    break;
 8009b5c:	bf00      	nop
  }
  return usb_status;
 8009b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3714      	adds	r7, #20
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr

08009b6c <__libc_init_array>:
 8009b6c:	b570      	push	{r4, r5, r6, lr}
 8009b6e:	4d0d      	ldr	r5, [pc, #52]	; (8009ba4 <__libc_init_array+0x38>)
 8009b70:	4c0d      	ldr	r4, [pc, #52]	; (8009ba8 <__libc_init_array+0x3c>)
 8009b72:	1b64      	subs	r4, r4, r5
 8009b74:	10a4      	asrs	r4, r4, #2
 8009b76:	2600      	movs	r6, #0
 8009b78:	42a6      	cmp	r6, r4
 8009b7a:	d109      	bne.n	8009b90 <__libc_init_array+0x24>
 8009b7c:	4d0b      	ldr	r5, [pc, #44]	; (8009bac <__libc_init_array+0x40>)
 8009b7e:	4c0c      	ldr	r4, [pc, #48]	; (8009bb0 <__libc_init_array+0x44>)
 8009b80:	f000 f820 	bl	8009bc4 <_init>
 8009b84:	1b64      	subs	r4, r4, r5
 8009b86:	10a4      	asrs	r4, r4, #2
 8009b88:	2600      	movs	r6, #0
 8009b8a:	42a6      	cmp	r6, r4
 8009b8c:	d105      	bne.n	8009b9a <__libc_init_array+0x2e>
 8009b8e:	bd70      	pop	{r4, r5, r6, pc}
 8009b90:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b94:	4798      	blx	r3
 8009b96:	3601      	adds	r6, #1
 8009b98:	e7ee      	b.n	8009b78 <__libc_init_array+0xc>
 8009b9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b9e:	4798      	blx	r3
 8009ba0:	3601      	adds	r6, #1
 8009ba2:	e7f2      	b.n	8009b8a <__libc_init_array+0x1e>
 8009ba4:	08009c5c 	.word	0x08009c5c
 8009ba8:	08009c5c 	.word	0x08009c5c
 8009bac:	08009c5c 	.word	0x08009c5c
 8009bb0:	08009c60 	.word	0x08009c60

08009bb4 <memset>:
 8009bb4:	4402      	add	r2, r0
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d100      	bne.n	8009bbe <memset+0xa>
 8009bbc:	4770      	bx	lr
 8009bbe:	f803 1b01 	strb.w	r1, [r3], #1
 8009bc2:	e7f9      	b.n	8009bb8 <memset+0x4>

08009bc4 <_init>:
 8009bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bc6:	bf00      	nop
 8009bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bca:	bc08      	pop	{r3}
 8009bcc:	469e      	mov	lr, r3
 8009bce:	4770      	bx	lr

08009bd0 <_fini>:
 8009bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bd2:	bf00      	nop
 8009bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bd6:	bc08      	pop	{r3}
 8009bd8:	469e      	mov	lr, r3
 8009bda:	4770      	bx	lr
