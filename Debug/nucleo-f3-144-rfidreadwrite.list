
nucleo-f3-144-rfidreadwrite.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a44  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08009bd8  08009bd8  00019bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c58  08009c58  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  08009c58  08009c58  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009c58  08009c58  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c58  08009c58  00019c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c5c  08009c5c  00019c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08009c60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002017c  2**0
                  CONTENTS
 10 .bss          00001300  2000017c  2000017c  0002017c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000147c  2000147c  0002017c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016234  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033f9  00000000  00000000  000363e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fa0  00000000  00000000  000397e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e48  00000000  00000000  0003a780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024206  00000000  00000000  0003b5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001682c  00000000  00000000  0005f7ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd15e  00000000  00000000  00075ffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00143158  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003f10  00000000  00000000  001431a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000017c 	.word	0x2000017c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08009bc0 	.word	0x08009bc0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000180 	.word	0x20000180
 80001d0:	08009bc0 	.word	0x08009bc0

080001d4 <RC522_SPI_read>:
#include "main.h"

extern hspi1;

uint8_t RC522_SPI_read(uint8_t addr, uint8_t* data)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b086      	sub	sp, #24
 80001d8:	af02      	add	r7, sp, #8
 80001da:	4603      	mov	r3, r0
 80001dc:	6039      	str	r1, [r7, #0]
 80001de:	71fb      	strb	r3, [r7, #7]
	uint8_t txBuf[2] = {{addr | 0x80}, 0x00}; /* Sec. 8.1.2.3
 80001e0:	79fb      	ldrb	r3, [r7, #7]
 80001e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80001e6:	b2db      	uxtb	r3, r3
 80001e8:	733b      	strb	r3, [r7, #12]
 80001ea:	2300      	movs	r3, #0
 80001ec:	737b      	strb	r3, [r7, #13]
											   * ----------
											   * 1XXX_XXXX
											   */
	uint8_t rxBuf[2];

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80001ee:	2201      	movs	r2, #1
 80001f0:	2101      	movs	r1, #1
 80001f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001f6:	f000 fe67 	bl	8000ec8 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(hspi1, txBuf, rxBuf, 2, HAL_MAX_DELAY)) == HAL_OK;
 80001fa:	4b11      	ldr	r3, [pc, #68]	; (8000240 <RC522_SPI_read+0x6c>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	4618      	mov	r0, r3
 8000200:	f107 0208 	add.w	r2, r7, #8
 8000204:	f107 010c 	add.w	r1, r7, #12
 8000208:	f04f 33ff 	mov.w	r3, #4294967295
 800020c:	9300      	str	r3, [sp, #0]
 800020e:	2302      	movs	r3, #2
 8000210:	f004 f9a9 	bl	8004566 <HAL_SPI_TransmitReceive>
 8000214:	4603      	mov	r3, r0
 8000216:	2b00      	cmp	r3, #0
 8000218:	bf0c      	ite	eq
 800021a:	2301      	moveq	r3, #1
 800021c:	2300      	movne	r3, #0
 800021e:	b2db      	uxtb	r3, r3
 8000220:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET); // after done reading we are going to pull the SS high
 8000222:	2200      	movs	r2, #0
 8000224:	2101      	movs	r1, #1
 8000226:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800022a:	f000 fe4d 	bl	8000ec8 <HAL_GPIO_WritePin>

	*data = rxBuf[1];
 800022e:	7a7a      	ldrb	r2, [r7, #9]
 8000230:	683b      	ldr	r3, [r7, #0]
 8000232:	701a      	strb	r2, [r3, #0]
	return status;
 8000234:	7bfb      	ldrb	r3, [r7, #15]
}
 8000236:	4618      	mov	r0, r3
 8000238:	3710      	adds	r7, #16
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}
 800023e:	bf00      	nop
 8000240:	200001b8 	.word	0x200001b8

08000244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b084      	sub	sp, #16
 8000248:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800024a:	f000 fb17 	bl	800087c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800024e:	f000 f81b 	bl	8000288 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000252:	f000 f915 	bl	8000480 <MX_GPIO_Init>
  MX_RTC_Init();
 8000256:	f000 f87f 	bl	8000358 <MX_RTC_Init>
  MX_USART3_UART_Init();
 800025a:	f000 f8e1 	bl	8000420 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 800025e:	f000 f8a1 	bl	80003a4 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000262:	f008 fff9 	bl	8009258 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_6); // Turns on Micro USB Port CN13 for Data Transmission
 8000266:	2140      	movs	r1, #64	; 0x40
 8000268:	4806      	ldr	r0, [pc, #24]	; (8000284 <main+0x40>)
 800026a:	f000 fe45 	bl	8000ef8 <HAL_GPIO_TogglePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  uint8_t data = 0;
 800026e:	2300      	movs	r3, #0
 8000270:	71fb      	strb	r3, [r7, #7]
	  RC522_SPI_read(0x37 << 2, &data);
 8000272:	1dfb      	adds	r3, r7, #7
 8000274:	4619      	mov	r1, r3
 8000276:	20dc      	movs	r0, #220	; 0xdc
 8000278:	f7ff ffac 	bl	80001d4 <RC522_SPI_read>

	  HAL_Delay(100);
 800027c:	2064      	movs	r0, #100	; 0x64
 800027e:	f000 fb63 	bl	8000948 <HAL_Delay>
  {
 8000282:	e7f4      	b.n	800026e <main+0x2a>
 8000284:	48001800 	.word	0x48001800

08000288 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b0a6      	sub	sp, #152	; 0x98
 800028c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000292:	2228      	movs	r2, #40	; 0x28
 8000294:	2100      	movs	r1, #0
 8000296:	4618      	mov	r0, r3
 8000298:	f009 fc8a 	bl	8009bb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800029c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002a0:	2200      	movs	r2, #0
 80002a2:	601a      	str	r2, [r3, #0]
 80002a4:	605a      	str	r2, [r3, #4]
 80002a6:	609a      	str	r2, [r3, #8]
 80002a8:	60da      	str	r2, [r3, #12]
 80002aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002ac:	1d3b      	adds	r3, r7, #4
 80002ae:	2258      	movs	r2, #88	; 0x58
 80002b0:	2100      	movs	r1, #0
 80002b2:	4618      	mov	r0, r3
 80002b4:	f009 fc7c 	bl	8009bb0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80002b8:	2309      	movs	r3, #9
 80002ba:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80002bc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80002c0:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c2:	2301      	movs	r3, #1
 80002c4:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80002c6:	2301      	movs	r3, #1
 80002c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002cc:	2302      	movs	r3, #2
 80002ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002da:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002e2:	2300      	movs	r3, #0
 80002e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002ec:	4618      	mov	r0, r3
 80002ee:	f002 fae1 	bl	80028b4 <HAL_RCC_OscConfig>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <SystemClock_Config+0x74>
  {
    Error_Handler();
 80002f8:	f000 f978 	bl	80005ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002fc:	230f      	movs	r3, #15
 80002fe:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000300:	2302      	movs	r3, #2
 8000302:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000304:	2300      	movs	r3, #0
 8000306:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000308:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800030c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800030e:	2300      	movs	r3, #0
 8000310:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000312:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000316:	2102      	movs	r1, #2
 8000318:	4618      	mov	r0, r3
 800031a:	f003 fb1f 	bl	800395c <HAL_RCC_ClockConfig>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000324:	f000 f962 	bl	80005ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART3
 8000328:	4b0a      	ldr	r3, [pc, #40]	; (8000354 <SystemClock_Config+0xcc>)
 800032a:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800032c:	2300      	movs	r3, #0
 800032e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000330:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000334:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000336:	2300      	movs	r3, #0
 8000338:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	4618      	mov	r0, r3
 800033e:	f003 fd43 	bl	8003dc8 <HAL_RCCEx_PeriphCLKConfig>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000348:	f000 f950 	bl	80005ec <Error_Handler>
  }
}
 800034c:	bf00      	nop
 800034e:	3798      	adds	r7, #152	; 0x98
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}
 8000354:	00030004 	.word	0x00030004

08000358 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800035c:	4b0f      	ldr	r3, [pc, #60]	; (800039c <MX_RTC_Init+0x44>)
 800035e:	4a10      	ldr	r2, [pc, #64]	; (80003a0 <MX_RTC_Init+0x48>)
 8000360:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000362:	4b0e      	ldr	r3, [pc, #56]	; (800039c <MX_RTC_Init+0x44>)
 8000364:	2200      	movs	r2, #0
 8000366:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000368:	4b0c      	ldr	r3, [pc, #48]	; (800039c <MX_RTC_Init+0x44>)
 800036a:	227f      	movs	r2, #127	; 0x7f
 800036c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800036e:	4b0b      	ldr	r3, [pc, #44]	; (800039c <MX_RTC_Init+0x44>)
 8000370:	22ff      	movs	r2, #255	; 0xff
 8000372:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000374:	4b09      	ldr	r3, [pc, #36]	; (800039c <MX_RTC_Init+0x44>)
 8000376:	2200      	movs	r2, #0
 8000378:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800037a:	4b08      	ldr	r3, [pc, #32]	; (800039c <MX_RTC_Init+0x44>)
 800037c:	2200      	movs	r2, #0
 800037e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000380:	4b06      	ldr	r3, [pc, #24]	; (800039c <MX_RTC_Init+0x44>)
 8000382:	2200      	movs	r2, #0
 8000384:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000386:	4805      	ldr	r0, [pc, #20]	; (800039c <MX_RTC_Init+0x44>)
 8000388:	f003 ff3c 	bl	8004204 <HAL_RTC_Init>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000392:	f000 f92b 	bl	80005ec <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000396:	bf00      	nop
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	20000198 	.word	0x20000198
 80003a0:	40002800 	.word	0x40002800

080003a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003a8:	4b1b      	ldr	r3, [pc, #108]	; (8000418 <MX_SPI1_Init+0x74>)
 80003aa:	4a1c      	ldr	r2, [pc, #112]	; (800041c <MX_SPI1_Init+0x78>)
 80003ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003ae:	4b1a      	ldr	r3, [pc, #104]	; (8000418 <MX_SPI1_Init+0x74>)
 80003b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80003b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003b6:	4b18      	ldr	r3, [pc, #96]	; (8000418 <MX_SPI1_Init+0x74>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80003bc:	4b16      	ldr	r3, [pc, #88]	; (8000418 <MX_SPI1_Init+0x74>)
 80003be:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80003c2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003c4:	4b14      	ldr	r3, [pc, #80]	; (8000418 <MX_SPI1_Init+0x74>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003ca:	4b13      	ldr	r3, [pc, #76]	; (8000418 <MX_SPI1_Init+0x74>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003d0:	4b11      	ldr	r3, [pc, #68]	; (8000418 <MX_SPI1_Init+0x74>)
 80003d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003d6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80003d8:	4b0f      	ldr	r3, [pc, #60]	; (8000418 <MX_SPI1_Init+0x74>)
 80003da:	2220      	movs	r2, #32
 80003dc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003de:	4b0e      	ldr	r3, [pc, #56]	; (8000418 <MX_SPI1_Init+0x74>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003e4:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <MX_SPI1_Init+0x74>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003ea:	4b0b      	ldr	r3, [pc, #44]	; (8000418 <MX_SPI1_Init+0x74>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80003f0:	4b09      	ldr	r3, [pc, #36]	; (8000418 <MX_SPI1_Init+0x74>)
 80003f2:	2207      	movs	r2, #7
 80003f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003f6:	4b08      	ldr	r3, [pc, #32]	; (8000418 <MX_SPI1_Init+0x74>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80003fc:	4b06      	ldr	r3, [pc, #24]	; (8000418 <MX_SPI1_Init+0x74>)
 80003fe:	2208      	movs	r2, #8
 8000400:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000402:	4805      	ldr	r0, [pc, #20]	; (8000418 <MX_SPI1_Init+0x74>)
 8000404:	f004 f804 	bl	8004410 <HAL_SPI_Init>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800040e:	f000 f8ed 	bl	80005ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000412:	bf00      	nop
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	200001b8 	.word	0x200001b8
 800041c:	40013000 	.word	0x40013000

08000420 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000424:	4b14      	ldr	r3, [pc, #80]	; (8000478 <MX_USART3_UART_Init+0x58>)
 8000426:	4a15      	ldr	r2, [pc, #84]	; (800047c <MX_USART3_UART_Init+0x5c>)
 8000428:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 800042a:	4b13      	ldr	r3, [pc, #76]	; (8000478 <MX_USART3_UART_Init+0x58>)
 800042c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000430:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000432:	4b11      	ldr	r3, [pc, #68]	; (8000478 <MX_USART3_UART_Init+0x58>)
 8000434:	2200      	movs	r2, #0
 8000436:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000438:	4b0f      	ldr	r3, [pc, #60]	; (8000478 <MX_USART3_UART_Init+0x58>)
 800043a:	2200      	movs	r2, #0
 800043c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800043e:	4b0e      	ldr	r3, [pc, #56]	; (8000478 <MX_USART3_UART_Init+0x58>)
 8000440:	2200      	movs	r2, #0
 8000442:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000444:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <MX_USART3_UART_Init+0x58>)
 8000446:	220c      	movs	r2, #12
 8000448:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800044a:	4b0b      	ldr	r3, [pc, #44]	; (8000478 <MX_USART3_UART_Init+0x58>)
 800044c:	2200      	movs	r2, #0
 800044e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000450:	4b09      	ldr	r3, [pc, #36]	; (8000478 <MX_USART3_UART_Init+0x58>)
 8000452:	2200      	movs	r2, #0
 8000454:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000456:	4b08      	ldr	r3, [pc, #32]	; (8000478 <MX_USART3_UART_Init+0x58>)
 8000458:	2200      	movs	r2, #0
 800045a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800045c:	4b06      	ldr	r3, [pc, #24]	; (8000478 <MX_USART3_UART_Init+0x58>)
 800045e:	2200      	movs	r2, #0
 8000460:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000462:	4805      	ldr	r0, [pc, #20]	; (8000478 <MX_USART3_UART_Init+0x58>)
 8000464:	f004 fc06 	bl	8004c74 <HAL_UART_Init>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800046e:	f000 f8bd 	bl	80005ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000472:	bf00      	nop
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	2000021c 	.word	0x2000021c
 800047c:	40004800 	.word	0x40004800

08000480 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b08c      	sub	sp, #48	; 0x30
 8000484:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000486:	f107 031c 	add.w	r3, r7, #28
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]
 800048e:	605a      	str	r2, [r3, #4]
 8000490:	609a      	str	r2, [r3, #8]
 8000492:	60da      	str	r2, [r3, #12]
 8000494:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000496:	4b51      	ldr	r3, [pc, #324]	; (80005dc <MX_GPIO_Init+0x15c>)
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	4a50      	ldr	r2, [pc, #320]	; (80005dc <MX_GPIO_Init+0x15c>)
 800049c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004a0:	6153      	str	r3, [r2, #20]
 80004a2:	4b4e      	ldr	r3, [pc, #312]	; (80005dc <MX_GPIO_Init+0x15c>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80004aa:	61bb      	str	r3, [r7, #24]
 80004ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004ae:	4b4b      	ldr	r3, [pc, #300]	; (80005dc <MX_GPIO_Init+0x15c>)
 80004b0:	695b      	ldr	r3, [r3, #20]
 80004b2:	4a4a      	ldr	r2, [pc, #296]	; (80005dc <MX_GPIO_Init+0x15c>)
 80004b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004b8:	6153      	str	r3, [r2, #20]
 80004ba:	4b48      	ldr	r3, [pc, #288]	; (80005dc <MX_GPIO_Init+0x15c>)
 80004bc:	695b      	ldr	r3, [r3, #20]
 80004be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004c2:	617b      	str	r3, [r7, #20]
 80004c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c6:	4b45      	ldr	r3, [pc, #276]	; (80005dc <MX_GPIO_Init+0x15c>)
 80004c8:	695b      	ldr	r3, [r3, #20]
 80004ca:	4a44      	ldr	r2, [pc, #272]	; (80005dc <MX_GPIO_Init+0x15c>)
 80004cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004d0:	6153      	str	r3, [r2, #20]
 80004d2:	4b42      	ldr	r3, [pc, #264]	; (80005dc <MX_GPIO_Init+0x15c>)
 80004d4:	695b      	ldr	r3, [r3, #20]
 80004d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004da:	613b      	str	r3, [r7, #16]
 80004dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004de:	4b3f      	ldr	r3, [pc, #252]	; (80005dc <MX_GPIO_Init+0x15c>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	4a3e      	ldr	r2, [pc, #248]	; (80005dc <MX_GPIO_Init+0x15c>)
 80004e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004e8:	6153      	str	r3, [r2, #20]
 80004ea:	4b3c      	ldr	r3, [pc, #240]	; (80005dc <MX_GPIO_Init+0x15c>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004f2:	60fb      	str	r3, [r7, #12]
 80004f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004f6:	4b39      	ldr	r3, [pc, #228]	; (80005dc <MX_GPIO_Init+0x15c>)
 80004f8:	695b      	ldr	r3, [r3, #20]
 80004fa:	4a38      	ldr	r2, [pc, #224]	; (80005dc <MX_GPIO_Init+0x15c>)
 80004fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000500:	6153      	str	r3, [r2, #20]
 8000502:	4b36      	ldr	r3, [pc, #216]	; (80005dc <MX_GPIO_Init+0x15c>)
 8000504:	695b      	ldr	r3, [r3, #20]
 8000506:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800050a:	60bb      	str	r3, [r7, #8]
 800050c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800050e:	4b33      	ldr	r3, [pc, #204]	; (80005dc <MX_GPIO_Init+0x15c>)
 8000510:	695b      	ldr	r3, [r3, #20]
 8000512:	4a32      	ldr	r2, [pc, #200]	; (80005dc <MX_GPIO_Init+0x15c>)
 8000514:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000518:	6153      	str	r3, [r2, #20]
 800051a:	4b30      	ldr	r3, [pc, #192]	; (80005dc <MX_GPIO_Init+0x15c>)
 800051c:	695b      	ldr	r3, [r3, #20]
 800051e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SP1_SS_RC552_GPIO_Port, SP1_SS_RC552_Pin, GPIO_PIN_RESET);
 8000526:	2200      	movs	r2, #0
 8000528:	2101      	movs	r1, #1
 800052a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800052e:	f000 fccb 	bl	8000ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000532:	2200      	movs	r2, #0
 8000534:	f244 0181 	movw	r1, #16513	; 0x4081
 8000538:	4829      	ldr	r0, [pc, #164]	; (80005e0 <MX_GPIO_Init+0x160>)
 800053a:	f000 fcc5 	bl	8000ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800053e:	2200      	movs	r2, #0
 8000540:	2140      	movs	r1, #64	; 0x40
 8000542:	4828      	ldr	r0, [pc, #160]	; (80005e4 <MX_GPIO_Init+0x164>)
 8000544:	f000 fcc0 	bl	8000ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000548:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800054c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800054e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000552:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000554:	2300      	movs	r3, #0
 8000556:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000558:	f107 031c 	add.w	r3, r7, #28
 800055c:	4619      	mov	r1, r3
 800055e:	4822      	ldr	r0, [pc, #136]	; (80005e8 <MX_GPIO_Init+0x168>)
 8000560:	f000 fb28 	bl	8000bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SP1_SS_RC552_Pin */
  GPIO_InitStruct.Pin = SP1_SS_RC552_Pin;
 8000564:	2301      	movs	r3, #1
 8000566:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000568:	2301      	movs	r3, #1
 800056a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056c:	2300      	movs	r3, #0
 800056e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000570:	2300      	movs	r3, #0
 8000572:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SP1_SS_RC552_GPIO_Port, &GPIO_InitStruct);
 8000574:	f107 031c 	add.w	r3, r7, #28
 8000578:	4619      	mov	r1, r3
 800057a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800057e:	f000 fb19 	bl	8000bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000582:	f244 0381 	movw	r3, #16513	; 0x4081
 8000586:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000588:	2301      	movs	r3, #1
 800058a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058c:	2300      	movs	r3, #0
 800058e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000590:	2300      	movs	r3, #0
 8000592:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000594:	f107 031c 	add.w	r3, r7, #28
 8000598:	4619      	mov	r1, r3
 800059a:	4811      	ldr	r0, [pc, #68]	; (80005e0 <MX_GPIO_Init+0x160>)
 800059c:	f000 fb0a 	bl	8000bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80005a0:	2340      	movs	r3, #64	; 0x40
 80005a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a4:	2301      	movs	r3, #1
 80005a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a8:	2300      	movs	r3, #0
 80005aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ac:	2300      	movs	r3, #0
 80005ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80005b0:	f107 031c 	add.w	r3, r7, #28
 80005b4:	4619      	mov	r1, r3
 80005b6:	480b      	ldr	r0, [pc, #44]	; (80005e4 <MX_GPIO_Init+0x164>)
 80005b8:	f000 fafc 	bl	8000bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80005bc:	2380      	movs	r3, #128	; 0x80
 80005be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005c0:	2300      	movs	r3, #0
 80005c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c4:	2300      	movs	r3, #0
 80005c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80005c8:	f107 031c 	add.w	r3, r7, #28
 80005cc:	4619      	mov	r1, r3
 80005ce:	4805      	ldr	r0, [pc, #20]	; (80005e4 <MX_GPIO_Init+0x164>)
 80005d0:	f000 faf0 	bl	8000bb4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005d4:	bf00      	nop
 80005d6:	3730      	adds	r7, #48	; 0x30
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40021000 	.word	0x40021000
 80005e0:	48000400 	.word	0x48000400
 80005e4:	48001800 	.word	0x48001800
 80005e8:	48000800 	.word	0x48000800

080005ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005f0:	b672      	cpsid	i
}
 80005f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <Error_Handler+0x8>
	...

080005f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005fe:	4b0f      	ldr	r3, [pc, #60]	; (800063c <HAL_MspInit+0x44>)
 8000600:	699b      	ldr	r3, [r3, #24]
 8000602:	4a0e      	ldr	r2, [pc, #56]	; (800063c <HAL_MspInit+0x44>)
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	6193      	str	r3, [r2, #24]
 800060a:	4b0c      	ldr	r3, [pc, #48]	; (800063c <HAL_MspInit+0x44>)
 800060c:	699b      	ldr	r3, [r3, #24]
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000616:	4b09      	ldr	r3, [pc, #36]	; (800063c <HAL_MspInit+0x44>)
 8000618:	69db      	ldr	r3, [r3, #28]
 800061a:	4a08      	ldr	r2, [pc, #32]	; (800063c <HAL_MspInit+0x44>)
 800061c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000620:	61d3      	str	r3, [r2, #28]
 8000622:	4b06      	ldr	r3, [pc, #24]	; (800063c <HAL_MspInit+0x44>)
 8000624:	69db      	ldr	r3, [r3, #28]
 8000626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062a:	603b      	str	r3, [r7, #0]
 800062c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800062e:	bf00      	nop
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	40021000 	.word	0x40021000

08000640 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a0d      	ldr	r2, [pc, #52]	; (8000684 <HAL_RTC_MspInit+0x44>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d111      	bne.n	8000676 <HAL_RTC_MspInit+0x36>
 8000652:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000656:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	fa93 f3a3 	rbit	r3, r3
 800065e:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000660:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000662:	fab3 f383 	clz	r3, r3
 8000666:	b2db      	uxtb	r3, r3
 8000668:	461a      	mov	r2, r3
 800066a:	4b07      	ldr	r3, [pc, #28]	; (8000688 <HAL_RTC_MspInit+0x48>)
 800066c:	4413      	add	r3, r2
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	461a      	mov	r2, r3
 8000672:	2301      	movs	r3, #1
 8000674:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000676:	bf00      	nop
 8000678:	3714      	adds	r7, #20
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	40002800 	.word	0x40002800
 8000688:	10908100 	.word	0x10908100

0800068c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08a      	sub	sp, #40	; 0x28
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000694:	f107 0314 	add.w	r3, r7, #20
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a17      	ldr	r2, [pc, #92]	; (8000708 <HAL_SPI_MspInit+0x7c>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d127      	bne.n	80006fe <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006ae:	4b17      	ldr	r3, [pc, #92]	; (800070c <HAL_SPI_MspInit+0x80>)
 80006b0:	699b      	ldr	r3, [r3, #24]
 80006b2:	4a16      	ldr	r2, [pc, #88]	; (800070c <HAL_SPI_MspInit+0x80>)
 80006b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006b8:	6193      	str	r3, [r2, #24]
 80006ba:	4b14      	ldr	r3, [pc, #80]	; (800070c <HAL_SPI_MspInit+0x80>)
 80006bc:	699b      	ldr	r3, [r3, #24]
 80006be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006c2:	613b      	str	r3, [r7, #16]
 80006c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <HAL_SPI_MspInit+0x80>)
 80006c8:	695b      	ldr	r3, [r3, #20]
 80006ca:	4a10      	ldr	r2, [pc, #64]	; (800070c <HAL_SPI_MspInit+0x80>)
 80006cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006d0:	6153      	str	r3, [r2, #20]
 80006d2:	4b0e      	ldr	r3, [pc, #56]	; (800070c <HAL_SPI_MspInit+0x80>)
 80006d4:	695b      	ldr	r3, [r3, #20]
 80006d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SP1_SCK_RC552_Pin|SP1_MISO_RC552_Pin|SP1_MOSI_RC552_Pin;
 80006de:	2338      	movs	r3, #56	; 0x38
 80006e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e2:	2302      	movs	r3, #2
 80006e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006ea:	2303      	movs	r3, #3
 80006ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80006ee:	2305      	movs	r3, #5
 80006f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f2:	f107 0314 	add.w	r3, r7, #20
 80006f6:	4619      	mov	r1, r3
 80006f8:	4805      	ldr	r0, [pc, #20]	; (8000710 <HAL_SPI_MspInit+0x84>)
 80006fa:	f000 fa5b 	bl	8000bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80006fe:	bf00      	nop
 8000700:	3728      	adds	r7, #40	; 0x28
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40013000 	.word	0x40013000
 800070c:	40021000 	.word	0x40021000
 8000710:	48000400 	.word	0x48000400

08000714 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08a      	sub	sp, #40	; 0x28
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071c:	f107 0314 	add.w	r3, r7, #20
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a17      	ldr	r2, [pc, #92]	; (8000790 <HAL_UART_MspInit+0x7c>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d128      	bne.n	8000788 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000736:	4b17      	ldr	r3, [pc, #92]	; (8000794 <HAL_UART_MspInit+0x80>)
 8000738:	69db      	ldr	r3, [r3, #28]
 800073a:	4a16      	ldr	r2, [pc, #88]	; (8000794 <HAL_UART_MspInit+0x80>)
 800073c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000740:	61d3      	str	r3, [r2, #28]
 8000742:	4b14      	ldr	r3, [pc, #80]	; (8000794 <HAL_UART_MspInit+0x80>)
 8000744:	69db      	ldr	r3, [r3, #28]
 8000746:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800074e:	4b11      	ldr	r3, [pc, #68]	; (8000794 <HAL_UART_MspInit+0x80>)
 8000750:	695b      	ldr	r3, [r3, #20]
 8000752:	4a10      	ldr	r2, [pc, #64]	; (8000794 <HAL_UART_MspInit+0x80>)
 8000754:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000758:	6153      	str	r3, [r2, #20]
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <HAL_UART_MspInit+0x80>)
 800075c:	695b      	ldr	r3, [r3, #20]
 800075e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000766:	f44f 7340 	mov.w	r3, #768	; 0x300
 800076a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076c:	2302      	movs	r3, #2
 800076e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000774:	2303      	movs	r3, #3
 8000776:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000778:	2307      	movs	r3, #7
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800077c:	f107 0314 	add.w	r3, r7, #20
 8000780:	4619      	mov	r1, r3
 8000782:	4805      	ldr	r0, [pc, #20]	; (8000798 <HAL_UART_MspInit+0x84>)
 8000784:	f000 fa16 	bl	8000bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000788:	bf00      	nop
 800078a:	3728      	adds	r7, #40	; 0x28
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40004800 	.word	0x40004800
 8000794:	40021000 	.word	0x40021000
 8000798:	48000c00 	.word	0x48000c00

0800079c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <NMI_Handler+0x4>

080007a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007a2:	b480      	push	{r7}
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007a6:	e7fe      	b.n	80007a6 <HardFault_Handler+0x4>

080007a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007ac:	e7fe      	b.n	80007ac <MemManage_Handler+0x4>

080007ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007b2:	e7fe      	b.n	80007b2 <BusFault_Handler+0x4>

080007b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <UsageFault_Handler+0x4>

080007ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr

080007d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr

080007e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007e8:	f000 f88e 	bl	8000908 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80007f4:	4802      	ldr	r0, [pc, #8]	; (8000800 <USB_LP_IRQHandler+0x10>)
 80007f6:	f000 fc91 	bl	800111c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000f70 	.word	0x20000f70

08000804 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <SystemInit+0x20>)
 800080a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800080e:	4a05      	ldr	r2, [pc, #20]	; (8000824 <SystemInit+0x20>)
 8000810:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000814:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	e000ed00 	.word	0xe000ed00

08000828 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000828:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000860 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800082c:	f7ff ffea 	bl	8000804 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000830:	480c      	ldr	r0, [pc, #48]	; (8000864 <LoopForever+0x6>)
  ldr r1, =_edata
 8000832:	490d      	ldr	r1, [pc, #52]	; (8000868 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000834:	4a0d      	ldr	r2, [pc, #52]	; (800086c <LoopForever+0xe>)
  movs r3, #0
 8000836:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000838:	e002      	b.n	8000840 <LoopCopyDataInit>

0800083a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800083a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800083c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800083e:	3304      	adds	r3, #4

08000840 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000840:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000842:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000844:	d3f9      	bcc.n	800083a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000846:	4a0a      	ldr	r2, [pc, #40]	; (8000870 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000848:	4c0a      	ldr	r4, [pc, #40]	; (8000874 <LoopForever+0x16>)
  movs r3, #0
 800084a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800084c:	e001      	b.n	8000852 <LoopFillZerobss>

0800084e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800084e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000850:	3204      	adds	r2, #4

08000852 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000852:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000854:	d3fb      	bcc.n	800084e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000856:	f009 f987 	bl	8009b68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800085a:	f7ff fcf3 	bl	8000244 <main>

0800085e <LoopForever>:

LoopForever:
    b LoopForever
 800085e:	e7fe      	b.n	800085e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000860:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000864:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000868:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 800086c:	08009c60 	.word	0x08009c60
  ldr r2, =_sbss
 8000870:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8000874:	2000147c 	.word	0x2000147c

08000878 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000878:	e7fe      	b.n	8000878 <ADC1_2_IRQHandler>
	...

0800087c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000880:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <HAL_Init+0x28>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a07      	ldr	r2, [pc, #28]	; (80008a4 <HAL_Init+0x28>)
 8000886:	f043 0310 	orr.w	r3, r3, #16
 800088a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800088c:	2003      	movs	r0, #3
 800088e:	f000 f94f 	bl	8000b30 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000892:	2000      	movs	r0, #0
 8000894:	f000 f808 	bl	80008a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000898:	f7ff feae 	bl	80005f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800089c:	2300      	movs	r3, #0
}
 800089e:	4618      	mov	r0, r3
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40022000 	.word	0x40022000

080008a8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <HAL_InitTick+0x54>)
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <HAL_InitTick+0x58>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	4619      	mov	r1, r3
 80008ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008be:	fbb3 f3f1 	udiv	r3, r3, r1
 80008c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 f967 	bl	8000b9a <HAL_SYSTICK_Config>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008d2:	2301      	movs	r3, #1
 80008d4:	e00e      	b.n	80008f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2b0f      	cmp	r3, #15
 80008da:	d80a      	bhi.n	80008f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008dc:	2200      	movs	r2, #0
 80008de:	6879      	ldr	r1, [r7, #4]
 80008e0:	f04f 30ff 	mov.w	r0, #4294967295
 80008e4:	f000 f92f 	bl	8000b46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008e8:	4a06      	ldr	r2, [pc, #24]	; (8000904 <HAL_InitTick+0x5c>)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80008ee:	2300      	movs	r3, #0
 80008f0:	e000      	b.n	80008f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008f2:	2301      	movs	r3, #1
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20000000 	.word	0x20000000
 8000900:	20000008 	.word	0x20000008
 8000904:	20000004 	.word	0x20000004

08000908 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <HAL_IncTick+0x20>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	461a      	mov	r2, r3
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <HAL_IncTick+0x24>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4413      	add	r3, r2
 8000918:	4a04      	ldr	r2, [pc, #16]	; (800092c <HAL_IncTick+0x24>)
 800091a:	6013      	str	r3, [r2, #0]
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	20000008 	.word	0x20000008
 800092c:	200002a4 	.word	0x200002a4

08000930 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  return uwTick;  
 8000934:	4b03      	ldr	r3, [pc, #12]	; (8000944 <HAL_GetTick+0x14>)
 8000936:	681b      	ldr	r3, [r3, #0]
}
 8000938:	4618      	mov	r0, r3
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	200002a4 	.word	0x200002a4

08000948 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000950:	f7ff ffee 	bl	8000930 <HAL_GetTick>
 8000954:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000960:	d005      	beq.n	800096e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000962:	4b0a      	ldr	r3, [pc, #40]	; (800098c <HAL_Delay+0x44>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	461a      	mov	r2, r3
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	4413      	add	r3, r2
 800096c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800096e:	bf00      	nop
 8000970:	f7ff ffde 	bl	8000930 <HAL_GetTick>
 8000974:	4602      	mov	r2, r0
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	1ad3      	subs	r3, r2, r3
 800097a:	68fa      	ldr	r2, [r7, #12]
 800097c:	429a      	cmp	r2, r3
 800097e:	d8f7      	bhi.n	8000970 <HAL_Delay+0x28>
  {
  }
}
 8000980:	bf00      	nop
 8000982:	bf00      	nop
 8000984:	3710      	adds	r7, #16
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000008 	.word	0x20000008

08000990 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000990:	b480      	push	{r7}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f003 0307 	and.w	r3, r3, #7
 800099e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009a0:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <__NVIC_SetPriorityGrouping+0x44>)
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009a6:	68ba      	ldr	r2, [r7, #8]
 80009a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009ac:	4013      	ands	r3, r2
 80009ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009c2:	4a04      	ldr	r2, [pc, #16]	; (80009d4 <__NVIC_SetPriorityGrouping+0x44>)
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	60d3      	str	r3, [r2, #12]
}
 80009c8:	bf00      	nop
 80009ca:	3714      	adds	r7, #20
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009dc:	4b04      	ldr	r3, [pc, #16]	; (80009f0 <__NVIC_GetPriorityGrouping+0x18>)
 80009de:	68db      	ldr	r3, [r3, #12]
 80009e0:	0a1b      	lsrs	r3, r3, #8
 80009e2:	f003 0307 	and.w	r3, r3, #7
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	db0b      	blt.n	8000a1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	f003 021f 	and.w	r2, r3, #31
 8000a0c:	4907      	ldr	r1, [pc, #28]	; (8000a2c <__NVIC_EnableIRQ+0x38>)
 8000a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a12:	095b      	lsrs	r3, r3, #5
 8000a14:	2001      	movs	r0, #1
 8000a16:	fa00 f202 	lsl.w	r2, r0, r2
 8000a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	e000e100 	.word	0xe000e100

08000a30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	6039      	str	r1, [r7, #0]
 8000a3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	db0a      	blt.n	8000a5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	b2da      	uxtb	r2, r3
 8000a48:	490c      	ldr	r1, [pc, #48]	; (8000a7c <__NVIC_SetPriority+0x4c>)
 8000a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4e:	0112      	lsls	r2, r2, #4
 8000a50:	b2d2      	uxtb	r2, r2
 8000a52:	440b      	add	r3, r1
 8000a54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a58:	e00a      	b.n	8000a70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	b2da      	uxtb	r2, r3
 8000a5e:	4908      	ldr	r1, [pc, #32]	; (8000a80 <__NVIC_SetPriority+0x50>)
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	f003 030f 	and.w	r3, r3, #15
 8000a66:	3b04      	subs	r3, #4
 8000a68:	0112      	lsls	r2, r2, #4
 8000a6a:	b2d2      	uxtb	r2, r2
 8000a6c:	440b      	add	r3, r1
 8000a6e:	761a      	strb	r2, [r3, #24]
}
 8000a70:	bf00      	nop
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	e000e100 	.word	0xe000e100
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b089      	sub	sp, #36	; 0x24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	60b9      	str	r1, [r7, #8]
 8000a8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	f003 0307 	and.w	r3, r3, #7
 8000a96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a98:	69fb      	ldr	r3, [r7, #28]
 8000a9a:	f1c3 0307 	rsb	r3, r3, #7
 8000a9e:	2b04      	cmp	r3, #4
 8000aa0:	bf28      	it	cs
 8000aa2:	2304      	movcs	r3, #4
 8000aa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	3304      	adds	r3, #4
 8000aaa:	2b06      	cmp	r3, #6
 8000aac:	d902      	bls.n	8000ab4 <NVIC_EncodePriority+0x30>
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	3b03      	subs	r3, #3
 8000ab2:	e000      	b.n	8000ab6 <NVIC_EncodePriority+0x32>
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8000abc:	69bb      	ldr	r3, [r7, #24]
 8000abe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac2:	43da      	mvns	r2, r3
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	401a      	ands	r2, r3
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000acc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad6:	43d9      	mvns	r1, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000adc:	4313      	orrs	r3, r2
         );
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3724      	adds	r7, #36	; 0x24
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
	...

08000aec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	3b01      	subs	r3, #1
 8000af8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000afc:	d301      	bcc.n	8000b02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000afe:	2301      	movs	r3, #1
 8000b00:	e00f      	b.n	8000b22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b02:	4a0a      	ldr	r2, [pc, #40]	; (8000b2c <SysTick_Config+0x40>)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	3b01      	subs	r3, #1
 8000b08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b0a:	210f      	movs	r1, #15
 8000b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b10:	f7ff ff8e 	bl	8000a30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b14:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <SysTick_Config+0x40>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b1a:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <SysTick_Config+0x40>)
 8000b1c:	2207      	movs	r2, #7
 8000b1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	e000e010 	.word	0xe000e010

08000b30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f7ff ff29 	bl	8000990 <__NVIC_SetPriorityGrouping>
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b086      	sub	sp, #24
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	60b9      	str	r1, [r7, #8]
 8000b50:	607a      	str	r2, [r7, #4]
 8000b52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b58:	f7ff ff3e 	bl	80009d8 <__NVIC_GetPriorityGrouping>
 8000b5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	68b9      	ldr	r1, [r7, #8]
 8000b62:	6978      	ldr	r0, [r7, #20]
 8000b64:	f7ff ff8e 	bl	8000a84 <NVIC_EncodePriority>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b6e:	4611      	mov	r1, r2
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff ff5d 	bl	8000a30 <__NVIC_SetPriority>
}
 8000b76:	bf00      	nop
 8000b78:	3718      	adds	r7, #24
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b082      	sub	sp, #8
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	4603      	mov	r3, r0
 8000b86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff ff31 	bl	80009f4 <__NVIC_EnableIRQ>
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b082      	sub	sp, #8
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f7ff ffa2 	bl	8000aec <SysTick_Config>
 8000ba8:	4603      	mov	r3, r0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
	...

08000bb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b087      	sub	sp, #28
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bc2:	e160      	b.n	8000e86 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	2101      	movs	r1, #1
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	f000 8152 	beq.w	8000e80 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	f003 0303 	and.w	r3, r3, #3
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d005      	beq.n	8000bf4 <HAL_GPIO_Init+0x40>
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	f003 0303 	and.w	r3, r3, #3
 8000bf0:	2b02      	cmp	r3, #2
 8000bf2:	d130      	bne.n	8000c56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	689b      	ldr	r3, [r3, #8]
 8000bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	2203      	movs	r2, #3
 8000c00:	fa02 f303 	lsl.w	r3, r2, r3
 8000c04:	43db      	mvns	r3, r3
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	4013      	ands	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	68da      	ldr	r2, [r3, #12]
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	693a      	ldr	r2, [r7, #16]
 8000c22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	43db      	mvns	r3, r3
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	4013      	ands	r3, r2
 8000c38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	091b      	lsrs	r3, r3, #4
 8000c40:	f003 0201 	and.w	r2, r3, #1
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	f003 0303 	and.w	r3, r3, #3
 8000c5e:	2b03      	cmp	r3, #3
 8000c60:	d017      	beq.n	8000c92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	68db      	ldr	r3, [r3, #12]
 8000c66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	2203      	movs	r2, #3
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	43db      	mvns	r3, r3
 8000c74:	693a      	ldr	r2, [r7, #16]
 8000c76:	4013      	ands	r3, r2
 8000c78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	689a      	ldr	r2, [r3, #8]
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	fa02 f303 	lsl.w	r3, r2, r3
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f003 0303 	and.w	r3, r3, #3
 8000c9a:	2b02      	cmp	r3, #2
 8000c9c:	d123      	bne.n	8000ce6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	08da      	lsrs	r2, r3, #3
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	3208      	adds	r2, #8
 8000ca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000caa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	f003 0307 	and.w	r3, r3, #7
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	220f      	movs	r2, #15
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	43db      	mvns	r3, r3
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	691a      	ldr	r2, [r3, #16]
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	f003 0307 	and.w	r3, r3, #7
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	08da      	lsrs	r2, r3, #3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3208      	adds	r2, #8
 8000ce0:	6939      	ldr	r1, [r7, #16]
 8000ce2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	2203      	movs	r2, #3
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	43db      	mvns	r3, r3
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f003 0203 	and.w	r2, r3, #3
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	f000 80ac 	beq.w	8000e80 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d28:	4b5e      	ldr	r3, [pc, #376]	; (8000ea4 <HAL_GPIO_Init+0x2f0>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	4a5d      	ldr	r2, [pc, #372]	; (8000ea4 <HAL_GPIO_Init+0x2f0>)
 8000d2e:	f043 0301 	orr.w	r3, r3, #1
 8000d32:	6193      	str	r3, [r2, #24]
 8000d34:	4b5b      	ldr	r3, [pc, #364]	; (8000ea4 <HAL_GPIO_Init+0x2f0>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	f003 0301 	and.w	r3, r3, #1
 8000d3c:	60bb      	str	r3, [r7, #8]
 8000d3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d40:	4a59      	ldr	r2, [pc, #356]	; (8000ea8 <HAL_GPIO_Init+0x2f4>)
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	089b      	lsrs	r3, r3, #2
 8000d46:	3302      	adds	r3, #2
 8000d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	f003 0303 	and.w	r3, r3, #3
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	220f      	movs	r2, #15
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	4013      	ands	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d6a:	d025      	beq.n	8000db8 <HAL_GPIO_Init+0x204>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	4a4f      	ldr	r2, [pc, #316]	; (8000eac <HAL_GPIO_Init+0x2f8>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d01f      	beq.n	8000db4 <HAL_GPIO_Init+0x200>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4a4e      	ldr	r2, [pc, #312]	; (8000eb0 <HAL_GPIO_Init+0x2fc>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d019      	beq.n	8000db0 <HAL_GPIO_Init+0x1fc>
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	4a4d      	ldr	r2, [pc, #308]	; (8000eb4 <HAL_GPIO_Init+0x300>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d013      	beq.n	8000dac <HAL_GPIO_Init+0x1f8>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4a4c      	ldr	r2, [pc, #304]	; (8000eb8 <HAL_GPIO_Init+0x304>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d00d      	beq.n	8000da8 <HAL_GPIO_Init+0x1f4>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4a4b      	ldr	r2, [pc, #300]	; (8000ebc <HAL_GPIO_Init+0x308>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d007      	beq.n	8000da4 <HAL_GPIO_Init+0x1f0>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4a4a      	ldr	r2, [pc, #296]	; (8000ec0 <HAL_GPIO_Init+0x30c>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d101      	bne.n	8000da0 <HAL_GPIO_Init+0x1ec>
 8000d9c:	2306      	movs	r3, #6
 8000d9e:	e00c      	b.n	8000dba <HAL_GPIO_Init+0x206>
 8000da0:	2307      	movs	r3, #7
 8000da2:	e00a      	b.n	8000dba <HAL_GPIO_Init+0x206>
 8000da4:	2305      	movs	r3, #5
 8000da6:	e008      	b.n	8000dba <HAL_GPIO_Init+0x206>
 8000da8:	2304      	movs	r3, #4
 8000daa:	e006      	b.n	8000dba <HAL_GPIO_Init+0x206>
 8000dac:	2303      	movs	r3, #3
 8000dae:	e004      	b.n	8000dba <HAL_GPIO_Init+0x206>
 8000db0:	2302      	movs	r3, #2
 8000db2:	e002      	b.n	8000dba <HAL_GPIO_Init+0x206>
 8000db4:	2301      	movs	r3, #1
 8000db6:	e000      	b.n	8000dba <HAL_GPIO_Init+0x206>
 8000db8:	2300      	movs	r3, #0
 8000dba:	697a      	ldr	r2, [r7, #20]
 8000dbc:	f002 0203 	and.w	r2, r2, #3
 8000dc0:	0092      	lsls	r2, r2, #2
 8000dc2:	4093      	lsls	r3, r2
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dca:	4937      	ldr	r1, [pc, #220]	; (8000ea8 <HAL_GPIO_Init+0x2f4>)
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	089b      	lsrs	r3, r3, #2
 8000dd0:	3302      	adds	r3, #2
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dd8:	4b3a      	ldr	r3, [pc, #232]	; (8000ec4 <HAL_GPIO_Init+0x310>)
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	43db      	mvns	r3, r3
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	4013      	ands	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d003      	beq.n	8000dfc <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000dfc:	4a31      	ldr	r2, [pc, #196]	; (8000ec4 <HAL_GPIO_Init+0x310>)
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e02:	4b30      	ldr	r3, [pc, #192]	; (8000ec4 <HAL_GPIO_Init+0x310>)
 8000e04:	68db      	ldr	r3, [r3, #12]
 8000e06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	43db      	mvns	r3, r3
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d003      	beq.n	8000e26 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e26:	4a27      	ldr	r2, [pc, #156]	; (8000ec4 <HAL_GPIO_Init+0x310>)
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e2c:	4b25      	ldr	r3, [pc, #148]	; (8000ec4 <HAL_GPIO_Init+0x310>)
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	43db      	mvns	r3, r3
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d003      	beq.n	8000e50 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e50:	4a1c      	ldr	r2, [pc, #112]	; (8000ec4 <HAL_GPIO_Init+0x310>)
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e56:	4b1b      	ldr	r3, [pc, #108]	; (8000ec4 <HAL_GPIO_Init+0x310>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	4013      	ands	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d003      	beq.n	8000e7a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e7a:	4a12      	ldr	r2, [pc, #72]	; (8000ec4 <HAL_GPIO_Init+0x310>)
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	3301      	adds	r3, #1
 8000e84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	f47f ae97 	bne.w	8000bc4 <HAL_GPIO_Init+0x10>
  }
}
 8000e96:	bf00      	nop
 8000e98:	bf00      	nop
 8000e9a:	371c      	adds	r7, #28
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	40010000 	.word	0x40010000
 8000eac:	48000400 	.word	0x48000400
 8000eb0:	48000800 	.word	0x48000800
 8000eb4:	48000c00 	.word	0x48000c00
 8000eb8:	48001000 	.word	0x48001000
 8000ebc:	48001400 	.word	0x48001400
 8000ec0:	48001800 	.word	0x48001800
 8000ec4:	40010400 	.word	0x40010400

08000ec8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	807b      	strh	r3, [r7, #2]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ed8:	787b      	ldrb	r3, [r7, #1]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d003      	beq.n	8000ee6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ede:	887a      	ldrh	r2, [r7, #2]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ee4:	e002      	b.n	8000eec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ee6:	887a      	ldrh	r2, [r7, #2]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	460b      	mov	r3, r1
 8000f02:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	695b      	ldr	r3, [r3, #20]
 8000f08:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f0a:	887a      	ldrh	r2, [r7, #2]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	041a      	lsls	r2, r3, #16
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	43d9      	mvns	r1, r3
 8000f16:	887b      	ldrh	r3, [r7, #2]
 8000f18:	400b      	ands	r3, r1
 8000f1a:	431a      	orrs	r2, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	619a      	str	r2, [r3, #24]
}
 8000f20:	bf00      	nop
 8000f22:	3714      	adds	r7, #20
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f2e:	b08b      	sub	sp, #44	; 0x2c
 8000f30:	af06      	add	r7, sp, #24
 8000f32:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d101      	bne.n	8000f3e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e0c4      	b.n	80010c8 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d106      	bne.n	8000f58 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f008 fb4e 	bl	80095f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2203      	movs	r2, #3
 8000f5c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f004 fad3 	bl	8005510 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	73fb      	strb	r3, [r7, #15]
 8000f6e:	e040      	b.n	8000ff2 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	1c5a      	adds	r2, r3, #1
 8000f76:	4613      	mov	r3, r2
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	4413      	add	r3, r2
 8000f7c:	00db      	lsls	r3, r3, #3
 8000f7e:	440b      	add	r3, r1
 8000f80:	3301      	adds	r3, #1
 8000f82:	2201      	movs	r2, #1
 8000f84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
 8000f88:	6879      	ldr	r1, [r7, #4]
 8000f8a:	1c5a      	adds	r2, r3, #1
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	4413      	add	r3, r2
 8000f92:	00db      	lsls	r3, r3, #3
 8000f94:	440b      	add	r3, r1
 8000f96:	7bfa      	ldrb	r2, [r7, #15]
 8000f98:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
 8000f9c:	6879      	ldr	r1, [r7, #4]
 8000f9e:	1c5a      	adds	r2, r3, #1
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	4413      	add	r3, r2
 8000fa6:	00db      	lsls	r3, r3, #3
 8000fa8:	440b      	add	r3, r1
 8000faa:	3303      	adds	r3, #3
 8000fac:	2200      	movs	r2, #0
 8000fae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000fb0:	7bfa      	ldrb	r2, [r7, #15]
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	4413      	add	r3, r2
 8000fba:	00db      	lsls	r3, r3, #3
 8000fbc:	440b      	add	r3, r1
 8000fbe:	3338      	adds	r3, #56	; 0x38
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000fc4:	7bfa      	ldrb	r2, [r7, #15]
 8000fc6:	6879      	ldr	r1, [r7, #4]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	4413      	add	r3, r2
 8000fce:	00db      	lsls	r3, r3, #3
 8000fd0:	440b      	add	r3, r1
 8000fd2:	333c      	adds	r3, #60	; 0x3c
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000fd8:	7bfa      	ldrb	r2, [r7, #15]
 8000fda:	6879      	ldr	r1, [r7, #4]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	4413      	add	r3, r2
 8000fe2:	00db      	lsls	r3, r3, #3
 8000fe4:	440b      	add	r3, r1
 8000fe6:	3340      	adds	r3, #64	; 0x40
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fec:	7bfb      	ldrb	r3, [r7, #15]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	73fb      	strb	r3, [r7, #15]
 8000ff2:	7bfa      	ldrb	r2, [r7, #15]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d3b9      	bcc.n	8000f70 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	73fb      	strb	r3, [r7, #15]
 8001000:	e044      	b.n	800108c <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001002:	7bfa      	ldrb	r2, [r7, #15]
 8001004:	6879      	ldr	r1, [r7, #4]
 8001006:	4613      	mov	r3, r2
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	4413      	add	r3, r2
 800100c:	00db      	lsls	r3, r3, #3
 800100e:	440b      	add	r3, r1
 8001010:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001018:	7bfa      	ldrb	r2, [r7, #15]
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	4613      	mov	r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	4413      	add	r3, r2
 8001022:	00db      	lsls	r3, r3, #3
 8001024:	440b      	add	r3, r1
 8001026:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800102a:	7bfa      	ldrb	r2, [r7, #15]
 800102c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800102e:	7bfa      	ldrb	r2, [r7, #15]
 8001030:	6879      	ldr	r1, [r7, #4]
 8001032:	4613      	mov	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	4413      	add	r3, r2
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	440b      	add	r3, r1
 800103c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001040:	2200      	movs	r2, #0
 8001042:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001044:	7bfa      	ldrb	r2, [r7, #15]
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	4613      	mov	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	4413      	add	r3, r2
 800104e:	00db      	lsls	r3, r3, #3
 8001050:	440b      	add	r3, r1
 8001052:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800105a:	7bfa      	ldrb	r2, [r7, #15]
 800105c:	6879      	ldr	r1, [r7, #4]
 800105e:	4613      	mov	r3, r2
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	4413      	add	r3, r2
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	440b      	add	r3, r1
 8001068:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001070:	7bfa      	ldrb	r2, [r7, #15]
 8001072:	6879      	ldr	r1, [r7, #4]
 8001074:	4613      	mov	r3, r2
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	4413      	add	r3, r2
 800107a:	00db      	lsls	r3, r3, #3
 800107c:	440b      	add	r3, r1
 800107e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001086:	7bfb      	ldrb	r3, [r7, #15]
 8001088:	3301      	adds	r3, #1
 800108a:	73fb      	strb	r3, [r7, #15]
 800108c:	7bfa      	ldrb	r2, [r7, #15]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	429a      	cmp	r2, r3
 8001094:	d3b5      	bcc.n	8001002 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	603b      	str	r3, [r7, #0]
 800109c:	687e      	ldr	r6, [r7, #4]
 800109e:	466d      	mov	r5, sp
 80010a0:	f106 0410 	add.w	r4, r6, #16
 80010a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010a8:	6823      	ldr	r3, [r4, #0]
 80010aa:	602b      	str	r3, [r5, #0]
 80010ac:	1d33      	adds	r3, r6, #4
 80010ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010b0:	6838      	ldr	r0, [r7, #0]
 80010b2:	f004 fa48 	bl	8005546 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2201      	movs	r2, #1
 80010c2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80010c6:	2300      	movs	r3, #0
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080010d0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d101      	bne.n	80010e6 <HAL_PCD_Start+0x16>
 80010e2:	2302      	movs	r3, #2
 80010e4:	e016      	b.n	8001114 <HAL_PCD_Start+0x44>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2201      	movs	r2, #1
 80010ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f004 f9f5 	bl	80054e2 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80010f8:	2101      	movs	r1, #1
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f008 fcfc 	bl	8009af8 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4618      	mov	r0, r3
 8001106:	f006 fcb4 	bl	8007a72 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2200      	movs	r2, #0
 800110e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001112:	2300      	movs	r3, #0
}
 8001114:	4618      	mov	r0, r3
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4618      	mov	r0, r3
 800112a:	f006 fcad 	bl	8007a88 <USB_ReadInterrupts>
 800112e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d003      	beq.n	8001142 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f000 fab2 	bl	80016a4 <PCD_EP_ISR_Handler>

    return;
 8001140:	e0bd      	b.n	80012be <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001148:	2b00      	cmp	r3, #0
 800114a:	d013      	beq.n	8001174 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001154:	b29a      	uxth	r2, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800115e:	b292      	uxth	r2, r2
 8001160:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f008 fac8 	bl	80096fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800116a:	2100      	movs	r1, #0
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f000 f8a9 	bl	80012c4 <HAL_PCD_SetAddress>

    return;
 8001172:	e0a4      	b.n	80012be <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d00c      	beq.n	8001198 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001186:	b29a      	uxth	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001190:	b292      	uxth	r2, r2
 8001192:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001196:	e092      	b.n	80012be <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d00c      	beq.n	80011bc <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011aa:	b29a      	uxth	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80011b4:	b292      	uxth	r2, r2
 80011b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80011ba:	e080      	b.n	80012be <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d027      	beq.n	8001216 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f022 0204 	bic.w	r2, r2, #4
 80011d8:	b292      	uxth	r2, r2
 80011da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f022 0208 	bic.w	r2, r2, #8
 80011f0:	b292      	uxth	r2, r2
 80011f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f008 fab8 	bl	800976c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001204:	b29a      	uxth	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800120e:	b292      	uxth	r2, r2
 8001210:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001214:	e053      	b.n	80012be <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800121c:	2b00      	cmp	r3, #0
 800121e:	d027      	beq.n	8001270 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001228:	b29a      	uxth	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f042 0208 	orr.w	r2, r2, #8
 8001232:	b292      	uxth	r2, r2
 8001234:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001240:	b29a      	uxth	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800124a:	b292      	uxth	r2, r2
 800124c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001258:	b29a      	uxth	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f042 0204 	orr.w	r2, r2, #4
 8001262:	b292      	uxth	r2, r2
 8001264:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f008 fa65 	bl	8009738 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800126e:	e026      	b.n	80012be <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001276:	2b00      	cmp	r3, #0
 8001278:	d00f      	beq.n	800129a <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001282:	b29a      	uxth	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800128c:	b292      	uxth	r2, r2
 800128e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f008 fa23 	bl	80096de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001298:	e011      	b.n	80012be <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d00c      	beq.n	80012be <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012ac:	b29a      	uxth	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012b6:	b292      	uxth	r2, r2
 80012b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80012bc:	bf00      	nop
  }
}
 80012be:	3710      	adds	r7, #16
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	460b      	mov	r3, r1
 80012ce:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d101      	bne.n	80012de <HAL_PCD_SetAddress+0x1a>
 80012da:	2302      	movs	r3, #2
 80012dc:	e013      	b.n	8001306 <HAL_PCD_SetAddress+0x42>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2201      	movs	r2, #1
 80012e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	78fa      	ldrb	r2, [r7, #3]
 80012ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	78fa      	ldrb	r2, [r7, #3]
 80012f4:	4611      	mov	r1, r2
 80012f6:	4618      	mov	r0, r3
 80012f8:	f006 fba7 	bl	8007a4a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b084      	sub	sp, #16
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
 8001316:	4608      	mov	r0, r1
 8001318:	4611      	mov	r1, r2
 800131a:	461a      	mov	r2, r3
 800131c:	4603      	mov	r3, r0
 800131e:	70fb      	strb	r3, [r7, #3]
 8001320:	460b      	mov	r3, r1
 8001322:	803b      	strh	r3, [r7, #0]
 8001324:	4613      	mov	r3, r2
 8001326:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001328:	2300      	movs	r3, #0
 800132a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800132c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001330:	2b00      	cmp	r3, #0
 8001332:	da0e      	bge.n	8001352 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001334:	78fb      	ldrb	r3, [r7, #3]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	1c5a      	adds	r2, r3, #1
 800133c:	4613      	mov	r3, r2
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	4413      	add	r3, r2
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	4413      	add	r3, r2
 8001348:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	2201      	movs	r2, #1
 800134e:	705a      	strb	r2, [r3, #1]
 8001350:	e00e      	b.n	8001370 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001352:	78fb      	ldrb	r3, [r7, #3]
 8001354:	f003 0207 	and.w	r2, r3, #7
 8001358:	4613      	mov	r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4413      	add	r3, r2
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	4413      	add	r3, r2
 8001368:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2200      	movs	r2, #0
 800136e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001370:	78fb      	ldrb	r3, [r7, #3]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	b2da      	uxtb	r2, r3
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800137c:	883a      	ldrh	r2, [r7, #0]
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	78ba      	ldrb	r2, [r7, #2]
 8001386:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001388:	78bb      	ldrb	r3, [r7, #2]
 800138a:	2b02      	cmp	r3, #2
 800138c:	d102      	bne.n	8001394 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2200      	movs	r2, #0
 8001392:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800139a:	2b01      	cmp	r3, #1
 800139c:	d101      	bne.n	80013a2 <HAL_PCD_EP_Open+0x94>
 800139e:	2302      	movs	r3, #2
 80013a0:	e00e      	b.n	80013c0 <HAL_PCD_EP_Open+0xb2>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2201      	movs	r2, #1
 80013a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	68f9      	ldr	r1, [r7, #12]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f004 f8e9 	bl	8005588 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80013be:	7afb      	ldrb	r3, [r7, #11]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	460b      	mov	r3, r1
 80013d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80013d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	da0e      	bge.n	80013fa <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013dc:	78fb      	ldrb	r3, [r7, #3]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	1c5a      	adds	r2, r3, #1
 80013e4:	4613      	mov	r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4413      	add	r3, r2
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	4413      	add	r3, r2
 80013f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2201      	movs	r2, #1
 80013f6:	705a      	strb	r2, [r3, #1]
 80013f8:	e00e      	b.n	8001418 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013fa:	78fb      	ldrb	r3, [r7, #3]
 80013fc:	f003 0207 	and.w	r2, r3, #7
 8001400:	4613      	mov	r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	4413      	add	r3, r2
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	4413      	add	r3, r2
 8001410:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2200      	movs	r2, #0
 8001416:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001418:	78fb      	ldrb	r3, [r7, #3]
 800141a:	f003 0307 	and.w	r3, r3, #7
 800141e:	b2da      	uxtb	r2, r3
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800142a:	2b01      	cmp	r3, #1
 800142c:	d101      	bne.n	8001432 <HAL_PCD_EP_Close+0x6a>
 800142e:	2302      	movs	r3, #2
 8001430:	e00e      	b.n	8001450 <HAL_PCD_EP_Close+0x88>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2201      	movs	r2, #1
 8001436:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	68f9      	ldr	r1, [r7, #12]
 8001440:	4618      	mov	r0, r3
 8001442:	f004 fc65 	bl	8005d10 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800144e:	2300      	movs	r3, #0
}
 8001450:	4618      	mov	r0, r3
 8001452:	3710      	adds	r7, #16
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	607a      	str	r2, [r7, #4]
 8001462:	603b      	str	r3, [r7, #0]
 8001464:	460b      	mov	r3, r1
 8001466:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001468:	7afb      	ldrb	r3, [r7, #11]
 800146a:	f003 0207 	and.w	r2, r3, #7
 800146e:	4613      	mov	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4413      	add	r3, r2
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800147a:	68fa      	ldr	r2, [r7, #12]
 800147c:	4413      	add	r3, r2
 800147e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	2200      	movs	r2, #0
 8001490:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	2200      	movs	r2, #0
 8001496:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001498:	7afb      	ldrb	r3, [r7, #11]
 800149a:	f003 0307 	and.w	r3, r3, #7
 800149e:	b2da      	uxtb	r2, r3
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	6979      	ldr	r1, [r7, #20]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f004 fe1d 	bl	80060ea <USB_EPStartXfer>

  return HAL_OK;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80014ba:	b480      	push	{r7}
 80014bc:	b083      	sub	sp, #12
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
 80014c2:	460b      	mov	r3, r1
 80014c4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80014c6:	78fb      	ldrb	r3, [r7, #3]
 80014c8:	f003 0207 	and.w	r2, r3, #7
 80014cc:	6879      	ldr	r1, [r7, #4]
 80014ce:	4613      	mov	r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4413      	add	r3, r2
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	440b      	add	r3, r1
 80014d8:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80014dc:	681b      	ldr	r3, [r3, #0]
}
 80014de:	4618      	mov	r0, r3
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b086      	sub	sp, #24
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	60f8      	str	r0, [r7, #12]
 80014f2:	607a      	str	r2, [r7, #4]
 80014f4:	603b      	str	r3, [r7, #0]
 80014f6:	460b      	mov	r3, r1
 80014f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014fa:	7afb      	ldrb	r3, [r7, #11]
 80014fc:	f003 0307 	and.w	r3, r3, #7
 8001500:	1c5a      	adds	r2, r3, #1
 8001502:	4613      	mov	r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	4413      	add	r3, r2
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	4413      	add	r3, r2
 800150e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	683a      	ldr	r2, [r7, #0]
 800151a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	2201      	movs	r2, #1
 8001520:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	683a      	ldr	r2, [r7, #0]
 8001528:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	2200      	movs	r2, #0
 800152e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	2201      	movs	r2, #1
 8001534:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001536:	7afb      	ldrb	r3, [r7, #11]
 8001538:	f003 0307 	and.w	r3, r3, #7
 800153c:	b2da      	uxtb	r2, r3
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	6979      	ldr	r1, [r7, #20]
 8001548:	4618      	mov	r0, r3
 800154a:	f004 fdce 	bl	80060ea <USB_EPStartXfer>

  return HAL_OK;
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	3718      	adds	r7, #24
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	460b      	mov	r3, r1
 8001562:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001564:	78fb      	ldrb	r3, [r7, #3]
 8001566:	f003 0207 	and.w	r2, r3, #7
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	429a      	cmp	r2, r3
 8001570:	d901      	bls.n	8001576 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e03e      	b.n	80015f4 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001576:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800157a:	2b00      	cmp	r3, #0
 800157c:	da0e      	bge.n	800159c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800157e:	78fb      	ldrb	r3, [r7, #3]
 8001580:	f003 0307 	and.w	r3, r3, #7
 8001584:	1c5a      	adds	r2, r3, #1
 8001586:	4613      	mov	r3, r2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	4413      	add	r3, r2
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	4413      	add	r3, r2
 8001592:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2201      	movs	r2, #1
 8001598:	705a      	strb	r2, [r3, #1]
 800159a:	e00c      	b.n	80015b6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800159c:	78fa      	ldrb	r2, [r7, #3]
 800159e:	4613      	mov	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	4413      	add	r3, r2
 80015ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2200      	movs	r2, #0
 80015b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2201      	movs	r2, #1
 80015ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015bc:	78fb      	ldrb	r3, [r7, #3]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	b2da      	uxtb	r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d101      	bne.n	80015d6 <HAL_PCD_EP_SetStall+0x7e>
 80015d2:	2302      	movs	r3, #2
 80015d4:	e00e      	b.n	80015f4 <HAL_PCD_EP_SetStall+0x9c>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2201      	movs	r2, #1
 80015da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	68f9      	ldr	r1, [r7, #12]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f006 f931 	bl	800784c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80015f2:	2300      	movs	r3, #0
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3710      	adds	r7, #16
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	460b      	mov	r3, r1
 8001606:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001608:	78fb      	ldrb	r3, [r7, #3]
 800160a:	f003 020f 	and.w	r2, r3, #15
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	429a      	cmp	r2, r3
 8001614:	d901      	bls.n	800161a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e040      	b.n	800169c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800161a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800161e:	2b00      	cmp	r3, #0
 8001620:	da0e      	bge.n	8001640 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001622:	78fb      	ldrb	r3, [r7, #3]
 8001624:	f003 0307 	and.w	r3, r3, #7
 8001628:	1c5a      	adds	r2, r3, #1
 800162a:	4613      	mov	r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	4413      	add	r3, r2
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	4413      	add	r3, r2
 8001636:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2201      	movs	r2, #1
 800163c:	705a      	strb	r2, [r3, #1]
 800163e:	e00e      	b.n	800165e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001640:	78fb      	ldrb	r3, [r7, #3]
 8001642:	f003 0207 	and.w	r2, r3, #7
 8001646:	4613      	mov	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	4413      	add	r3, r2
 8001656:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2200      	movs	r2, #0
 800165c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2200      	movs	r2, #0
 8001662:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001664:	78fb      	ldrb	r3, [r7, #3]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	b2da      	uxtb	r2, r3
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001676:	2b01      	cmp	r3, #1
 8001678:	d101      	bne.n	800167e <HAL_PCD_EP_ClrStall+0x82>
 800167a:	2302      	movs	r3, #2
 800167c:	e00e      	b.n	800169c <HAL_PCD_EP_ClrStall+0xa0>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2201      	movs	r2, #1
 8001682:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	68f9      	ldr	r1, [r7, #12]
 800168c:	4618      	mov	r0, r3
 800168e:	f006 f92e 	bl	80078ee <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800169a:	2300      	movs	r3, #0
}
 800169c:	4618      	mov	r0, r3
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b096      	sub	sp, #88	; 0x58
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80016ac:	e3b1      	b.n	8001e12 <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016b6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80016ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	f003 030f 	and.w	r3, r3, #15
 80016c4:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80016c8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f040 8173 	bne.w	80019b8 <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80016d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80016d6:	f003 0310 	and.w	r3, r3, #16
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d150      	bne.n	8001780 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	881b      	ldrh	r3, [r3, #0]
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80016ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016ee:	81fb      	strh	r3, [r7, #14]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	89fb      	ldrh	r3, [r7, #14]
 80016f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80016fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80016fe:	b29b      	uxth	r3, r3
 8001700:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	3328      	adds	r3, #40	; 0x28
 8001706:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001710:	b29b      	uxth	r3, r3
 8001712:	461a      	mov	r2, r3
 8001714:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	4413      	add	r3, r2
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	6812      	ldr	r2, [r2, #0]
 8001720:	4413      	add	r3, r2
 8001722:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001726:	881b      	ldrh	r3, [r3, #0]
 8001728:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800172c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800172e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001730:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001732:	695a      	ldr	r2, [r3, #20]
 8001734:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001736:	69db      	ldr	r3, [r3, #28]
 8001738:	441a      	add	r2, r3
 800173a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800173c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800173e:	2100      	movs	r1, #0
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f007 ffb2 	bl	80096aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2b00      	cmp	r3, #0
 8001750:	f000 835f 	beq.w	8001e12 <PCD_EP_ISR_Handler+0x76e>
 8001754:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	2b00      	cmp	r3, #0
 800175a:	f040 835a 	bne.w	8001e12 <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001764:	b2db      	uxtb	r3, r3
 8001766:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800176a:	b2da      	uxtb	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	b292      	uxth	r2, r2
 8001772:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800177e:	e348      	b.n	8001e12 <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001786:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	881b      	ldrh	r3, [r3, #0]
 800178e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001792:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001796:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800179a:	2b00      	cmp	r3, #0
 800179c:	d032      	beq.n	8001804 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	461a      	mov	r2, r3
 80017aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	4413      	add	r3, r2
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	6812      	ldr	r2, [r2, #0]
 80017b6:	4413      	add	r3, r2
 80017b8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80017bc:	881b      	ldrh	r3, [r3, #0]
 80017be:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80017c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017c4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6818      	ldr	r0, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80017d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017d2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80017d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017d6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80017d8:	b29b      	uxth	r3, r3
 80017da:	f006 f9a7 	bl	8007b2c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	881b      	ldrh	r3, [r3, #0]
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80017ea:	4013      	ands	r3, r2
 80017ec:	823b      	strh	r3, [r7, #16]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	8a3a      	ldrh	r2, [r7, #16]
 80017f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017f8:	b292      	uxth	r2, r2
 80017fa:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f007 ff27 	bl	8009650 <HAL_PCD_SetupStageCallback>
 8001802:	e306      	b.n	8001e12 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001804:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001808:	2b00      	cmp	r3, #0
 800180a:	f280 8302 	bge.w	8001e12 <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	881b      	ldrh	r3, [r3, #0]
 8001814:	b29a      	uxth	r2, r3
 8001816:	f640 738f 	movw	r3, #3983	; 0xf8f
 800181a:	4013      	ands	r3, r2
 800181c:	83fb      	strh	r3, [r7, #30]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	8bfa      	ldrh	r2, [r7, #30]
 8001824:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001828:	b292      	uxth	r2, r2
 800182a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001834:	b29b      	uxth	r3, r3
 8001836:	461a      	mov	r2, r3
 8001838:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	00db      	lsls	r3, r3, #3
 800183e:	4413      	add	r3, r2
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	6812      	ldr	r2, [r2, #0]
 8001844:	4413      	add	r3, r2
 8001846:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800184a:	881b      	ldrh	r3, [r3, #0]
 800184c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001850:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001852:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001854:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001856:	69db      	ldr	r3, [r3, #28]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d019      	beq.n	8001890 <PCD_EP_ISR_Handler+0x1ec>
 800185c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d015      	beq.n	8001890 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6818      	ldr	r0, [r3, #0]
 8001868:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800186a:	6959      	ldr	r1, [r3, #20]
 800186c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800186e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001870:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001872:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001874:	b29b      	uxth	r3, r3
 8001876:	f006 f959 	bl	8007b2c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800187a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800187c:	695a      	ldr	r2, [r3, #20]
 800187e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	441a      	add	r2, r3
 8001884:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001886:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001888:	2100      	movs	r1, #0
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f007 fef2 	bl	8009674 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	881b      	ldrh	r3, [r3, #0]
 8001896:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800189a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800189e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f040 82b5 	bne.w	8001e12 <PCD_EP_ISR_Handler+0x76e>
 80018a8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80018ac:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80018b0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80018b4:	f000 82ad 	beq.w	8001e12 <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	61bb      	str	r3, [r7, #24]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	461a      	mov	r2, r3
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	4413      	add	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80018d6:	617b      	str	r3, [r7, #20]
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	881b      	ldrh	r3, [r3, #0]
 80018dc:	b29b      	uxth	r3, r3
 80018de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	801a      	strh	r2, [r3, #0]
 80018e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	2b3e      	cmp	r3, #62	; 0x3e
 80018ee:	d91d      	bls.n	800192c <PCD_EP_ISR_Handler+0x288>
 80018f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	095b      	lsrs	r3, r3, #5
 80018f6:	647b      	str	r3, [r7, #68]	; 0x44
 80018f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018fa:	691b      	ldr	r3, [r3, #16]
 80018fc:	f003 031f 	and.w	r3, r3, #31
 8001900:	2b00      	cmp	r3, #0
 8001902:	d102      	bne.n	800190a <PCD_EP_ISR_Handler+0x266>
 8001904:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001906:	3b01      	subs	r3, #1
 8001908:	647b      	str	r3, [r7, #68]	; 0x44
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	881b      	ldrh	r3, [r3, #0]
 800190e:	b29a      	uxth	r2, r3
 8001910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001912:	b29b      	uxth	r3, r3
 8001914:	029b      	lsls	r3, r3, #10
 8001916:	b29b      	uxth	r3, r3
 8001918:	4313      	orrs	r3, r2
 800191a:	b29b      	uxth	r3, r3
 800191c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001920:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001924:	b29a      	uxth	r2, r3
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	801a      	strh	r2, [r3, #0]
 800192a:	e026      	b.n	800197a <PCD_EP_ISR_Handler+0x2d6>
 800192c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d10a      	bne.n	800194a <PCD_EP_ISR_Handler+0x2a6>
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	881b      	ldrh	r3, [r3, #0]
 8001938:	b29b      	uxth	r3, r3
 800193a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800193e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001942:	b29a      	uxth	r2, r3
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	801a      	strh	r2, [r3, #0]
 8001948:	e017      	b.n	800197a <PCD_EP_ISR_Handler+0x2d6>
 800194a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800194c:	691b      	ldr	r3, [r3, #16]
 800194e:	085b      	lsrs	r3, r3, #1
 8001950:	647b      	str	r3, [r7, #68]	; 0x44
 8001952:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	2b00      	cmp	r3, #0
 800195c:	d002      	beq.n	8001964 <PCD_EP_ISR_Handler+0x2c0>
 800195e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001960:	3301      	adds	r3, #1
 8001962:	647b      	str	r3, [r7, #68]	; 0x44
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	881b      	ldrh	r3, [r3, #0]
 8001968:	b29a      	uxth	r2, r3
 800196a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800196c:	b29b      	uxth	r3, r3
 800196e:	029b      	lsls	r3, r3, #10
 8001970:	b29b      	uxth	r3, r3
 8001972:	4313      	orrs	r3, r2
 8001974:	b29a      	uxth	r2, r3
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	881b      	ldrh	r3, [r3, #0]
 8001980:	b29b      	uxth	r3, r3
 8001982:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800198a:	827b      	strh	r3, [r7, #18]
 800198c:	8a7b      	ldrh	r3, [r7, #18]
 800198e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001992:	827b      	strh	r3, [r7, #18]
 8001994:	8a7b      	ldrh	r3, [r7, #18]
 8001996:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800199a:	827b      	strh	r3, [r7, #18]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	8a7b      	ldrh	r3, [r7, #18]
 80019a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80019a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80019aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	8013      	strh	r3, [r2, #0]
 80019b6:	e22c      	b.n	8001e12 <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	461a      	mov	r2, r3
 80019be:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	4413      	add	r3, r2
 80019c6:	881b      	ldrh	r3, [r3, #0]
 80019c8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80019cc:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	f280 80f6 	bge.w	8001bc2 <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	461a      	mov	r2, r3
 80019dc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	4413      	add	r3, r2
 80019e4:	881b      	ldrh	r3, [r3, #0]
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80019ec:	4013      	ands	r3, r2
 80019ee:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	461a      	mov	r2, r3
 80019f8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	4413      	add	r3, r2
 8001a00:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001a04:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a08:	b292      	uxth	r2, r2
 8001a0a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001a0c:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001a10:	4613      	mov	r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	4413      	add	r3, r2
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	4413      	add	r3, r2
 8001a20:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001a22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a24:	7b1b      	ldrb	r3, [r3, #12]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d123      	bne.n	8001a72 <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	461a      	mov	r2, r3
 8001a36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	4413      	add	r3, r2
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	6812      	ldr	r2, [r2, #0]
 8001a42:	4413      	add	r3, r2
 8001a44:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001a48:	881b      	ldrh	r3, [r3, #0]
 8001a4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a4e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001a52:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f000 808e 	beq.w	8001b78 <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6818      	ldr	r0, [r3, #0]
 8001a60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a62:	6959      	ldr	r1, [r3, #20]
 8001a64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a66:	88da      	ldrh	r2, [r3, #6]
 8001a68:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001a6c:	f006 f85e 	bl	8007b2c <USB_ReadPMA>
 8001a70:	e082      	b.n	8001b78 <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001a72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a74:	78db      	ldrb	r3, [r3, #3]
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d10a      	bne.n	8001a90 <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001a7a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001a7e:	461a      	mov	r2, r3
 8001a80:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f000 f9d3 	bl	8001e2e <HAL_PCD_EP_DB_Receive>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001a8e:	e073      	b.n	8001b78 <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	461a      	mov	r2, r3
 8001a96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4413      	add	r3, r2
 8001a9e:	881b      	ldrh	r3, [r3, #0]
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001aaa:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	441a      	add	r2, r3
 8001abc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001ac0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ac4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ac8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001acc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	461a      	mov	r2, r3
 8001ada:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	881b      	ldrh	r3, [r3, #0]
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d022      	beq.n	8001b34 <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	461a      	mov	r2, r3
 8001afa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	4413      	add	r3, r2
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	6812      	ldr	r2, [r2, #0]
 8001b06:	4413      	add	r3, r2
 8001b08:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001b0c:	881b      	ldrh	r3, [r3, #0]
 8001b0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b12:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001b16:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d02c      	beq.n	8001b78 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6818      	ldr	r0, [r3, #0]
 8001b22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b24:	6959      	ldr	r1, [r3, #20]
 8001b26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b28:	891a      	ldrh	r2, [r3, #8]
 8001b2a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b2e:	f005 fffd 	bl	8007b2c <USB_ReadPMA>
 8001b32:	e021      	b.n	8001b78 <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	461a      	mov	r2, r3
 8001b40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	4413      	add	r3, r2
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	6812      	ldr	r2, [r2, #0]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001b52:	881b      	ldrh	r3, [r3, #0]
 8001b54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b58:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001b5c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d009      	beq.n	8001b78 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6818      	ldr	r0, [r3, #0]
 8001b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b6a:	6959      	ldr	r1, [r3, #20]
 8001b6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b6e:	895a      	ldrh	r2, [r3, #10]
 8001b70:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b74:	f005 ffda 	bl	8007b2c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001b78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b7a:	69da      	ldr	r2, [r3, #28]
 8001b7c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b80:	441a      	add	r2, r3
 8001b82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b84:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b88:	695a      	ldr	r2, [r3, #20]
 8001b8a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b8e:	441a      	add	r2, r3
 8001b90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b92:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001b94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d005      	beq.n	8001ba8 <PCD_EP_ISR_Handler+0x504>
 8001b9c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001ba0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ba2:	691b      	ldr	r3, [r3, #16]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d206      	bcs.n	8001bb6 <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001ba8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	4619      	mov	r1, r3
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f007 fd60 	bl	8009674 <HAL_PCD_DataOutStageCallback>
 8001bb4:	e005      	b.n	8001bc2 <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f004 fa94 	bl	80060ea <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001bc2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f000 8121 	beq.w	8001e12 <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 8001bd0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001bd4:	1c5a      	adds	r2, r3, #1
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	4413      	add	r3, r2
 8001bdc:	00db      	lsls	r3, r3, #3
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	4413      	add	r3, r2
 8001be2:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	461a      	mov	r2, r3
 8001bea:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	4413      	add	r3, r2
 8001bf2:	881b      	ldrh	r3, [r3, #0]
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bfe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	461a      	mov	r2, r3
 8001c08:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	441a      	add	r2, r3
 8001c10:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001c14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001c20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c22:	78db      	ldrb	r3, [r3, #3]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	f040 80a2 	bne.w	8001d6e <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 8001c2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001c30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c32:	7b1b      	ldrb	r3, [r3, #12]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	f000 8093 	beq.w	8001d60 <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001c3a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d046      	beq.n	8001cd4 <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001c46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c48:	785b      	ldrb	r3, [r3, #1]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d126      	bne.n	8001c9c <PCD_EP_ISR_Handler+0x5f8>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	627b      	str	r3, [r7, #36]	; 0x24
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	461a      	mov	r2, r3
 8001c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c62:	4413      	add	r3, r2
 8001c64:	627b      	str	r3, [r7, #36]	; 0x24
 8001c66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	00da      	lsls	r2, r3, #3
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6e:	4413      	add	r3, r2
 8001c70:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001c74:	623b      	str	r3, [r7, #32]
 8001c76:	6a3b      	ldr	r3, [r7, #32]
 8001c78:	881b      	ldrh	r3, [r3, #0]
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	6a3b      	ldr	r3, [r7, #32]
 8001c84:	801a      	strh	r2, [r3, #0]
 8001c86:	6a3b      	ldr	r3, [r7, #32]
 8001c88:	881b      	ldrh	r3, [r3, #0]
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	6a3b      	ldr	r3, [r7, #32]
 8001c98:	801a      	strh	r2, [r3, #0]
 8001c9a:	e061      	b.n	8001d60 <PCD_EP_ISR_Handler+0x6bc>
 8001c9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c9e:	785b      	ldrb	r3, [r3, #1]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d15d      	bne.n	8001d60 <PCD_EP_ISR_Handler+0x6bc>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cb8:	4413      	add	r3, r2
 8001cba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	00da      	lsls	r2, r3, #3
 8001cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc4:	4413      	add	r3, r2
 8001cc6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001cca:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cce:	2200      	movs	r2, #0
 8001cd0:	801a      	strh	r2, [r3, #0]
 8001cd2:	e045      	b.n	8001d60 <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cdc:	785b      	ldrb	r3, [r3, #1]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d126      	bne.n	8001d30 <PCD_EP_ISR_Handler+0x68c>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	637b      	str	r3, [r7, #52]	; 0x34
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cf6:	4413      	add	r3, r2
 8001cf8:	637b      	str	r3, [r7, #52]	; 0x34
 8001cfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	00da      	lsls	r2, r3, #3
 8001d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d02:	4413      	add	r3, r2
 8001d04:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001d08:	633b      	str	r3, [r7, #48]	; 0x30
 8001d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d0c:	881b      	ldrh	r3, [r3, #0]
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d18:	801a      	strh	r2, [r3, #0]
 8001d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d1c:	881b      	ldrh	r3, [r3, #0]
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d2c:	801a      	strh	r2, [r3, #0]
 8001d2e:	e017      	b.n	8001d60 <PCD_EP_ISR_Handler+0x6bc>
 8001d30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d32:	785b      	ldrb	r3, [r3, #1]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d113      	bne.n	8001d60 <PCD_EP_ISR_Handler+0x6bc>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	461a      	mov	r2, r3
 8001d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d46:	4413      	add	r3, r2
 8001d48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	00da      	lsls	r2, r3, #3
 8001d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d52:	4413      	add	r3, r2
 8001d54:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001d58:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001d60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	4619      	mov	r1, r3
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f007 fc9f 	bl	80096aa <HAL_PCD_DataInStageCallback>
 8001d6c:	e051      	b.n	8001e12 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001d6e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d144      	bne.n	8001e04 <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	461a      	mov	r2, r3
 8001d86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	4413      	add	r3, r2
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	6812      	ldr	r2, [r2, #0]
 8001d92:	4413      	add	r3, r2
 8001d94:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d9e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8001da2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001da4:	699a      	ldr	r2, [r3, #24]
 8001da6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d907      	bls.n	8001dbe <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 8001dae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001db0:	699a      	ldr	r2, [r3, #24]
 8001db2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001db6:	1ad2      	subs	r2, r2, r3
 8001db8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dba:	619a      	str	r2, [r3, #24]
 8001dbc:	e002      	b.n	8001dc4 <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 8001dbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001dc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d106      	bne.n	8001dda <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001dcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f007 fc69 	bl	80096aa <HAL_PCD_DataInStageCallback>
 8001dd8:	e01b      	b.n	8001e12 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001dda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ddc:	695a      	ldr	r2, [r3, #20]
 8001dde:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001de2:	441a      	add	r2, r3
 8001de4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001de6:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001de8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dea:	69da      	ldr	r2, [r3, #28]
 8001dec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001df0:	441a      	add	r2, r3
 8001df2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001df4:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f004 f974 	bl	80060ea <USB_EPStartXfer>
 8001e02:	e006      	b.n	8001e12 <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001e04:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001e08:	461a      	mov	r2, r3
 8001e0a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 f917 	bl	8002040 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	b21b      	sxth	r3, r3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f6ff ac45 	blt.w	80016ae <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3758      	adds	r7, #88	; 0x58
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b088      	sub	sp, #32
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	60f8      	str	r0, [r7, #12]
 8001e36:	60b9      	str	r1, [r7, #8]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001e3c:	88fb      	ldrh	r3, [r7, #6]
 8001e3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d07c      	beq.n	8001f40 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	461a      	mov	r2, r3
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	4413      	add	r3, r2
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	6812      	ldr	r2, [r2, #0]
 8001e5e:	4413      	add	r3, r2
 8001e60:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001e64:	881b      	ldrh	r3, [r3, #0]
 8001e66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e6a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	699a      	ldr	r2, [r3, #24]
 8001e70:	8b7b      	ldrh	r3, [r7, #26]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d306      	bcc.n	8001e84 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	699a      	ldr	r2, [r3, #24]
 8001e7a:	8b7b      	ldrh	r3, [r7, #26]
 8001e7c:	1ad2      	subs	r2, r2, r3
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	619a      	str	r2, [r3, #24]
 8001e82:	e002      	b.n	8001e8a <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	2200      	movs	r2, #0
 8001e88:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d123      	bne.n	8001eda <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	461a      	mov	r2, r3
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	4413      	add	r3, r2
 8001ea0:	881b      	ldrh	r3, [r3, #0]
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ea8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eac:	833b      	strh	r3, [r7, #24]
 8001eae:	8b3b      	ldrh	r3, [r7, #24]
 8001eb0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001eb4:	833b      	strh	r3, [r7, #24]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	461a      	mov	r2, r3
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	441a      	add	r2, r3
 8001ec4:	8b3b      	ldrh	r3, [r7, #24]
 8001ec6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001eca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ece:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001eda:	88fb      	ldrh	r3, [r7, #6]
 8001edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d01f      	beq.n	8001f24 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	461a      	mov	r2, r3
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	4413      	add	r3, r2
 8001ef2:	881b      	ldrh	r3, [r3, #0]
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001efe:	82fb      	strh	r3, [r7, #22]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	461a      	mov	r2, r3
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	441a      	add	r2, r3
 8001f0e:	8afb      	ldrh	r3, [r7, #22]
 8001f10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f1c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001f24:	8b7b      	ldrh	r3, [r7, #26]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f000 8085 	beq.w	8002036 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6818      	ldr	r0, [r3, #0]
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	6959      	ldr	r1, [r3, #20]
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	891a      	ldrh	r2, [r3, #8]
 8001f38:	8b7b      	ldrh	r3, [r7, #26]
 8001f3a:	f005 fdf7 	bl	8007b2c <USB_ReadPMA>
 8001f3e:	e07a      	b.n	8002036 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	4413      	add	r3, r2
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	6812      	ldr	r2, [r2, #0]
 8001f58:	4413      	add	r3, r2
 8001f5a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001f5e:	881b      	ldrh	r3, [r3, #0]
 8001f60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f64:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	699a      	ldr	r2, [r3, #24]
 8001f6a:	8b7b      	ldrh	r3, [r7, #26]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d306      	bcc.n	8001f7e <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	699a      	ldr	r2, [r3, #24]
 8001f74:	8b7b      	ldrh	r3, [r7, #26]
 8001f76:	1ad2      	subs	r2, r2, r3
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	619a      	str	r2, [r3, #24]
 8001f7c:	e002      	b.n	8001f84 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	2200      	movs	r2, #0
 8001f82:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d123      	bne.n	8001fd4 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	461a      	mov	r2, r3
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4413      	add	r3, r2
 8001f9a:	881b      	ldrh	r3, [r3, #0]
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fa6:	83fb      	strh	r3, [r7, #30]
 8001fa8:	8bfb      	ldrh	r3, [r7, #30]
 8001faa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001fae:	83fb      	strh	r3, [r7, #30]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	441a      	add	r2, r3
 8001fbe:	8bfb      	ldrh	r3, [r7, #30]
 8001fc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001fd4:	88fb      	ldrh	r3, [r7, #6]
 8001fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d11f      	bne.n	800201e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4413      	add	r3, r2
 8001fec:	881b      	ldrh	r3, [r3, #0]
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ff8:	83bb      	strh	r3, [r7, #28]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	461a      	mov	r2, r3
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	441a      	add	r2, r3
 8002008:	8bbb      	ldrh	r3, [r7, #28]
 800200a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800200e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002012:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002016:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800201a:	b29b      	uxth	r3, r3
 800201c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800201e:	8b7b      	ldrh	r3, [r7, #26]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d008      	beq.n	8002036 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6818      	ldr	r0, [r3, #0]
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	6959      	ldr	r1, [r3, #20]
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	895a      	ldrh	r2, [r3, #10]
 8002030:	8b7b      	ldrh	r3, [r7, #26]
 8002032:	f005 fd7b 	bl	8007b2c <USB_ReadPMA>
    }
  }

  return count;
 8002036:	8b7b      	ldrh	r3, [r7, #26]
}
 8002038:	4618      	mov	r0, r3
 800203a:	3720      	adds	r7, #32
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b0a4      	sub	sp, #144	; 0x90
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	4613      	mov	r3, r2
 800204c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800204e:	88fb      	ldrh	r3, [r7, #6]
 8002050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002054:	2b00      	cmp	r3, #0
 8002056:	f000 81db 	beq.w	8002410 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002062:	b29b      	uxth	r3, r3
 8002064:	461a      	mov	r2, r3
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	4413      	add	r3, r2
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	6812      	ldr	r2, [r2, #0]
 8002072:	4413      	add	r3, r2
 8002074:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002078:	881b      	ldrh	r3, [r3, #0]
 800207a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800207e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	699a      	ldr	r2, [r3, #24]
 8002086:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800208a:	429a      	cmp	r2, r3
 800208c:	d907      	bls.n	800209e <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	699a      	ldr	r2, [r3, #24]
 8002092:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002096:	1ad2      	subs	r2, r2, r3
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	619a      	str	r2, [r3, #24]
 800209c:	e002      	b.n	80020a4 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	2200      	movs	r2, #0
 80020a2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f040 80b9 	bne.w	8002220 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	785b      	ldrb	r3, [r3, #1]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d126      	bne.n	8002104 <HAL_PCD_EP_DB_Transmit+0xc4>
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	461a      	mov	r2, r3
 80020c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ca:	4413      	add	r3, r2
 80020cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	00da      	lsls	r2, r3, #3
 80020d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020d6:	4413      	add	r3, r2
 80020d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80020dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80020de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020e0:	881b      	ldrh	r3, [r3, #0]
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ec:	801a      	strh	r2, [r3, #0]
 80020ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f0:	881b      	ldrh	r3, [r3, #0]
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002100:	801a      	strh	r2, [r3, #0]
 8002102:	e01a      	b.n	800213a <HAL_PCD_EP_DB_Transmit+0xfa>
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	785b      	ldrb	r3, [r3, #1]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d116      	bne.n	800213a <HAL_PCD_EP_DB_Transmit+0xfa>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	637b      	str	r3, [r7, #52]	; 0x34
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800211a:	b29b      	uxth	r3, r3
 800211c:	461a      	mov	r2, r3
 800211e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002120:	4413      	add	r3, r2
 8002122:	637b      	str	r3, [r7, #52]	; 0x34
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	00da      	lsls	r2, r3, #3
 800212a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800212c:	4413      	add	r3, r2
 800212e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002132:	633b      	str	r3, [r7, #48]	; 0x30
 8002134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002136:	2200      	movs	r2, #0
 8002138:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	627b      	str	r3, [r7, #36]	; 0x24
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	785b      	ldrb	r3, [r3, #1]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d126      	bne.n	8002196 <HAL_PCD_EP_DB_Transmit+0x156>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	61fb      	str	r3, [r7, #28]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002156:	b29b      	uxth	r3, r3
 8002158:	461a      	mov	r2, r3
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	4413      	add	r3, r2
 800215e:	61fb      	str	r3, [r7, #28]
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	00da      	lsls	r2, r3, #3
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	4413      	add	r3, r2
 800216a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800216e:	61bb      	str	r3, [r7, #24]
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	881b      	ldrh	r3, [r3, #0]
 8002174:	b29b      	uxth	r3, r3
 8002176:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800217a:	b29a      	uxth	r2, r3
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	801a      	strh	r2, [r3, #0]
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	881b      	ldrh	r3, [r3, #0]
 8002184:	b29b      	uxth	r3, r3
 8002186:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800218a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800218e:	b29a      	uxth	r2, r3
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	801a      	strh	r2, [r3, #0]
 8002194:	e017      	b.n	80021c6 <HAL_PCD_EP_DB_Transmit+0x186>
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	785b      	ldrb	r3, [r3, #1]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d113      	bne.n	80021c6 <HAL_PCD_EP_DB_Transmit+0x186>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	461a      	mov	r2, r3
 80021aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ac:	4413      	add	r3, r2
 80021ae:	627b      	str	r3, [r7, #36]	; 0x24
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	00da      	lsls	r2, r3, #3
 80021b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b8:	4413      	add	r3, r2
 80021ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80021be:	623b      	str	r3, [r7, #32]
 80021c0:	6a3b      	ldr	r3, [r7, #32]
 80021c2:	2200      	movs	r2, #0
 80021c4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	4619      	mov	r1, r3
 80021cc:	68f8      	ldr	r0, [r7, #12]
 80021ce:	f007 fa6c 	bl	80096aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80021d2:	88fb      	ldrh	r3, [r7, #6]
 80021d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f000 82fa 	beq.w	80027d2 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	461a      	mov	r2, r3
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4413      	add	r3, r2
 80021ec:	881b      	ldrh	r3, [r3, #0]
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021f8:	82fb      	strh	r3, [r7, #22]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	461a      	mov	r2, r3
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	441a      	add	r2, r3
 8002208:	8afb      	ldrh	r3, [r7, #22]
 800220a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800220e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002212:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002216:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800221a:	b29b      	uxth	r3, r3
 800221c:	8013      	strh	r3, [r2, #0]
 800221e:	e2d8      	b.n	80027d2 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002220:	88fb      	ldrh	r3, [r7, #6]
 8002222:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d021      	beq.n	800226e <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	461a      	mov	r2, r3
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	881b      	ldrh	r3, [r3, #0]
 800223a:	b29b      	uxth	r3, r3
 800223c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002240:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002244:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	461a      	mov	r2, r3
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	441a      	add	r2, r3
 8002256:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800225a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800225e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002262:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800226a:	b29b      	uxth	r3, r3
 800226c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002274:	2b01      	cmp	r3, #1
 8002276:	f040 82ac 	bne.w	80027d2 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	695a      	ldr	r2, [r3, #20]
 800227e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002282:	441a      	add	r2, r3
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	69da      	ldr	r2, [r3, #28]
 800228c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002290:	441a      	add	r2, r3
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	6a1a      	ldr	r2, [r3, #32]
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d30b      	bcc.n	80022ba <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	6a1a      	ldr	r2, [r3, #32]
 80022ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022b2:	1ad2      	subs	r2, r2, r3
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	621a      	str	r2, [r3, #32]
 80022b8:	e017      	b.n	80022ea <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	6a1b      	ldr	r3, [r3, #32]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d108      	bne.n	80022d4 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 80022c2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80022c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80022d2:	e00a      	b.n	80022ea <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	6a1b      	ldr	r3, [r3, #32]
 80022e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	2200      	movs	r2, #0
 80022e8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	785b      	ldrb	r3, [r3, #1]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d165      	bne.n	80023be <HAL_PCD_EP_DB_Transmit+0x37e>
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002300:	b29b      	uxth	r3, r3
 8002302:	461a      	mov	r2, r3
 8002304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002306:	4413      	add	r3, r2
 8002308:	63fb      	str	r3, [r7, #60]	; 0x3c
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	00da      	lsls	r2, r3, #3
 8002310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002312:	4413      	add	r3, r2
 8002314:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002318:	63bb      	str	r3, [r7, #56]	; 0x38
 800231a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800231c:	881b      	ldrh	r3, [r3, #0]
 800231e:	b29b      	uxth	r3, r3
 8002320:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002324:	b29a      	uxth	r2, r3
 8002326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002328:	801a      	strh	r2, [r3, #0]
 800232a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800232e:	2b3e      	cmp	r3, #62	; 0x3e
 8002330:	d91d      	bls.n	800236e <HAL_PCD_EP_DB_Transmit+0x32e>
 8002332:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002336:	095b      	lsrs	r3, r3, #5
 8002338:	64bb      	str	r3, [r7, #72]	; 0x48
 800233a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800233e:	f003 031f 	and.w	r3, r3, #31
 8002342:	2b00      	cmp	r3, #0
 8002344:	d102      	bne.n	800234c <HAL_PCD_EP_DB_Transmit+0x30c>
 8002346:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002348:	3b01      	subs	r3, #1
 800234a:	64bb      	str	r3, [r7, #72]	; 0x48
 800234c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800234e:	881b      	ldrh	r3, [r3, #0]
 8002350:	b29a      	uxth	r2, r3
 8002352:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002354:	b29b      	uxth	r3, r3
 8002356:	029b      	lsls	r3, r3, #10
 8002358:	b29b      	uxth	r3, r3
 800235a:	4313      	orrs	r3, r2
 800235c:	b29b      	uxth	r3, r3
 800235e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002362:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002366:	b29a      	uxth	r2, r3
 8002368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800236a:	801a      	strh	r2, [r3, #0]
 800236c:	e044      	b.n	80023f8 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800236e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10a      	bne.n	800238c <HAL_PCD_EP_DB_Transmit+0x34c>
 8002376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002378:	881b      	ldrh	r3, [r3, #0]
 800237a:	b29b      	uxth	r3, r3
 800237c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002380:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002384:	b29a      	uxth	r2, r3
 8002386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002388:	801a      	strh	r2, [r3, #0]
 800238a:	e035      	b.n	80023f8 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800238c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002390:	085b      	lsrs	r3, r3, #1
 8002392:	64bb      	str	r3, [r7, #72]	; 0x48
 8002394:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	2b00      	cmp	r3, #0
 800239e:	d002      	beq.n	80023a6 <HAL_PCD_EP_DB_Transmit+0x366>
 80023a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023a2:	3301      	adds	r3, #1
 80023a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80023a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023a8:	881b      	ldrh	r3, [r3, #0]
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	029b      	lsls	r3, r3, #10
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	4313      	orrs	r3, r2
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ba:	801a      	strh	r2, [r3, #0]
 80023bc:	e01c      	b.n	80023f8 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	785b      	ldrb	r3, [r3, #1]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d118      	bne.n	80023f8 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	647b      	str	r3, [r7, #68]	; 0x44
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	461a      	mov	r2, r3
 80023d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023da:	4413      	add	r3, r2
 80023dc:	647b      	str	r3, [r7, #68]	; 0x44
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	00da      	lsls	r2, r3, #3
 80023e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023e6:	4413      	add	r3, r2
 80023e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80023ec:	643b      	str	r3, [r7, #64]	; 0x40
 80023ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023f6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6818      	ldr	r0, [r3, #0]
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	6959      	ldr	r1, [r3, #20]
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	891a      	ldrh	r2, [r3, #8]
 8002404:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002408:	b29b      	uxth	r3, r3
 800240a:	f005 fb4d 	bl	8007aa8 <USB_WritePMA>
 800240e:	e1e0      	b.n	80027d2 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002418:	b29b      	uxth	r3, r3
 800241a:	461a      	mov	r2, r3
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	4413      	add	r3, r2
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	6812      	ldr	r2, [r2, #0]
 8002428:	4413      	add	r3, r2
 800242a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800242e:	881b      	ldrh	r3, [r3, #0]
 8002430:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002434:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	699a      	ldr	r2, [r3, #24]
 800243c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002440:	429a      	cmp	r2, r3
 8002442:	d307      	bcc.n	8002454 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	699a      	ldr	r2, [r3, #24]
 8002448:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800244c:	1ad2      	subs	r2, r2, r3
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	619a      	str	r2, [r3, #24]
 8002452:	e002      	b.n	800245a <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	2200      	movs	r2, #0
 8002458:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	2b00      	cmp	r3, #0
 8002460:	f040 80c0 	bne.w	80025e4 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	785b      	ldrb	r3, [r3, #1]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d126      	bne.n	80024ba <HAL_PCD_EP_DB_Transmit+0x47a>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800247a:	b29b      	uxth	r3, r3
 800247c:	461a      	mov	r2, r3
 800247e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002480:	4413      	add	r3, r2
 8002482:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	00da      	lsls	r2, r3, #3
 800248a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800248c:	4413      	add	r3, r2
 800248e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002492:	67bb      	str	r3, [r7, #120]	; 0x78
 8002494:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002496:	881b      	ldrh	r3, [r3, #0]
 8002498:	b29b      	uxth	r3, r3
 800249a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800249e:	b29a      	uxth	r2, r3
 80024a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024a2:	801a      	strh	r2, [r3, #0]
 80024a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024a6:	881b      	ldrh	r3, [r3, #0]
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024b6:	801a      	strh	r2, [r3, #0]
 80024b8:	e01a      	b.n	80024f0 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	785b      	ldrb	r3, [r3, #1]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d116      	bne.n	80024f0 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	667b      	str	r3, [r7, #100]	; 0x64
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	461a      	mov	r2, r3
 80024d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024d6:	4413      	add	r3, r2
 80024d8:	667b      	str	r3, [r7, #100]	; 0x64
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	00da      	lsls	r2, r3, #3
 80024e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024e2:	4413      	add	r3, r2
 80024e4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80024e8:	663b      	str	r3, [r7, #96]	; 0x60
 80024ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024ec:	2200      	movs	r2, #0
 80024ee:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	677b      	str	r3, [r7, #116]	; 0x74
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	785b      	ldrb	r3, [r3, #1]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d12b      	bne.n	8002556 <HAL_PCD_EP_DB_Transmit+0x516>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800250c:	b29b      	uxth	r3, r3
 800250e:	461a      	mov	r2, r3
 8002510:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002512:	4413      	add	r3, r2
 8002514:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	00da      	lsls	r2, r3, #3
 800251c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800251e:	4413      	add	r3, r2
 8002520:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002524:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002528:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800252c:	881b      	ldrh	r3, [r3, #0]
 800252e:	b29b      	uxth	r3, r3
 8002530:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002534:	b29a      	uxth	r2, r3
 8002536:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800253a:	801a      	strh	r2, [r3, #0]
 800253c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002540:	881b      	ldrh	r3, [r3, #0]
 8002542:	b29b      	uxth	r3, r3
 8002544:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002548:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800254c:	b29a      	uxth	r2, r3
 800254e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002552:	801a      	strh	r2, [r3, #0]
 8002554:	e017      	b.n	8002586 <HAL_PCD_EP_DB_Transmit+0x546>
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	785b      	ldrb	r3, [r3, #1]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d113      	bne.n	8002586 <HAL_PCD_EP_DB_Transmit+0x546>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002566:	b29b      	uxth	r3, r3
 8002568:	461a      	mov	r2, r3
 800256a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800256c:	4413      	add	r3, r2
 800256e:	677b      	str	r3, [r7, #116]	; 0x74
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	00da      	lsls	r2, r3, #3
 8002576:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002578:	4413      	add	r3, r2
 800257a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800257e:	673b      	str	r3, [r7, #112]	; 0x70
 8002580:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002582:	2200      	movs	r2, #0
 8002584:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	4619      	mov	r1, r3
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f007 f88c 	bl	80096aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002592:	88fb      	ldrh	r3, [r7, #6]
 8002594:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002598:	2b00      	cmp	r3, #0
 800259a:	f040 811a 	bne.w	80027d2 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	461a      	mov	r2, r3
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4413      	add	r3, r2
 80025ac:	881b      	ldrh	r3, [r3, #0]
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025b8:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	461a      	mov	r2, r3
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	441a      	add	r2, r3
 80025ca:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80025ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025de:	b29b      	uxth	r3, r3
 80025e0:	8013      	strh	r3, [r2, #0]
 80025e2:	e0f6      	b.n	80027d2 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80025e4:	88fb      	ldrh	r3, [r7, #6]
 80025e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d121      	bne.n	8002632 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	461a      	mov	r2, r3
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4413      	add	r3, r2
 80025fc:	881b      	ldrh	r3, [r3, #0]
 80025fe:	b29b      	uxth	r3, r3
 8002600:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002608:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	461a      	mov	r2, r3
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	441a      	add	r2, r3
 800261a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800261e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002622:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002626:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800262a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800262e:	b29b      	uxth	r3, r3
 8002630:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002638:	2b01      	cmp	r3, #1
 800263a:	f040 80ca 	bne.w	80027d2 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	695a      	ldr	r2, [r3, #20]
 8002642:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002646:	441a      	add	r2, r3
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	69da      	ldr	r2, [r3, #28]
 8002650:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002654:	441a      	add	r2, r3
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	6a1a      	ldr	r2, [r3, #32]
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	429a      	cmp	r2, r3
 8002664:	d30b      	bcc.n	800267e <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	6a1a      	ldr	r2, [r3, #32]
 8002672:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002676:	1ad2      	subs	r2, r2, r3
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	621a      	str	r2, [r3, #32]
 800267c:	e017      	b.n	80026ae <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d108      	bne.n	8002698 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8002686:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800268a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002696:	e00a      	b.n	80026ae <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	2200      	movs	r2, #0
 80026a4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	657b      	str	r3, [r7, #84]	; 0x54
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	785b      	ldrb	r3, [r3, #1]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d165      	bne.n	8002788 <HAL_PCD_EP_DB_Transmit+0x748>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	461a      	mov	r2, r3
 80026ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026d0:	4413      	add	r3, r2
 80026d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	00da      	lsls	r2, r3, #3
 80026da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026dc:	4413      	add	r3, r2
 80026de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80026e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80026e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026e6:	881b      	ldrh	r3, [r3, #0]
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026f2:	801a      	strh	r2, [r3, #0]
 80026f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026f8:	2b3e      	cmp	r3, #62	; 0x3e
 80026fa:	d91d      	bls.n	8002738 <HAL_PCD_EP_DB_Transmit+0x6f8>
 80026fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002700:	095b      	lsrs	r3, r3, #5
 8002702:	66bb      	str	r3, [r7, #104]	; 0x68
 8002704:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002708:	f003 031f 	and.w	r3, r3, #31
 800270c:	2b00      	cmp	r3, #0
 800270e:	d102      	bne.n	8002716 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002710:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002712:	3b01      	subs	r3, #1
 8002714:	66bb      	str	r3, [r7, #104]	; 0x68
 8002716:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002718:	881b      	ldrh	r3, [r3, #0]
 800271a:	b29a      	uxth	r2, r3
 800271c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800271e:	b29b      	uxth	r3, r3
 8002720:	029b      	lsls	r3, r3, #10
 8002722:	b29b      	uxth	r3, r3
 8002724:	4313      	orrs	r3, r2
 8002726:	b29b      	uxth	r3, r3
 8002728:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800272c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002730:	b29a      	uxth	r2, r3
 8002732:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002734:	801a      	strh	r2, [r3, #0]
 8002736:	e041      	b.n	80027bc <HAL_PCD_EP_DB_Transmit+0x77c>
 8002738:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800273c:	2b00      	cmp	r3, #0
 800273e:	d10a      	bne.n	8002756 <HAL_PCD_EP_DB_Transmit+0x716>
 8002740:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002742:	881b      	ldrh	r3, [r3, #0]
 8002744:	b29b      	uxth	r3, r3
 8002746:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800274a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800274e:	b29a      	uxth	r2, r3
 8002750:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002752:	801a      	strh	r2, [r3, #0]
 8002754:	e032      	b.n	80027bc <HAL_PCD_EP_DB_Transmit+0x77c>
 8002756:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800275a:	085b      	lsrs	r3, r3, #1
 800275c:	66bb      	str	r3, [r7, #104]	; 0x68
 800275e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b00      	cmp	r3, #0
 8002768:	d002      	beq.n	8002770 <HAL_PCD_EP_DB_Transmit+0x730>
 800276a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800276c:	3301      	adds	r3, #1
 800276e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002770:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002772:	881b      	ldrh	r3, [r3, #0]
 8002774:	b29a      	uxth	r2, r3
 8002776:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002778:	b29b      	uxth	r3, r3
 800277a:	029b      	lsls	r3, r3, #10
 800277c:	b29b      	uxth	r3, r3
 800277e:	4313      	orrs	r3, r2
 8002780:	b29a      	uxth	r2, r3
 8002782:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002784:	801a      	strh	r2, [r3, #0]
 8002786:	e019      	b.n	80027bc <HAL_PCD_EP_DB_Transmit+0x77c>
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	785b      	ldrb	r3, [r3, #1]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d115      	bne.n	80027bc <HAL_PCD_EP_DB_Transmit+0x77c>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002798:	b29b      	uxth	r3, r3
 800279a:	461a      	mov	r2, r3
 800279c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800279e:	4413      	add	r3, r2
 80027a0:	657b      	str	r3, [r7, #84]	; 0x54
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	00da      	lsls	r2, r3, #3
 80027a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027aa:	4413      	add	r3, r2
 80027ac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80027b0:	653b      	str	r3, [r7, #80]	; 0x50
 80027b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027ba:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6818      	ldr	r0, [r3, #0]
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	6959      	ldr	r1, [r3, #20]
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	895a      	ldrh	r2, [r3, #10]
 80027c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	f005 f96b 	bl	8007aa8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	461a      	mov	r2, r3
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	4413      	add	r3, r2
 80027e0:	881b      	ldrh	r3, [r3, #0]
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027ec:	82bb      	strh	r3, [r7, #20]
 80027ee:	8abb      	ldrh	r3, [r7, #20]
 80027f0:	f083 0310 	eor.w	r3, r3, #16
 80027f4:	82bb      	strh	r3, [r7, #20]
 80027f6:	8abb      	ldrh	r3, [r7, #20]
 80027f8:	f083 0320 	eor.w	r3, r3, #32
 80027fc:	82bb      	strh	r3, [r7, #20]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	461a      	mov	r2, r3
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	441a      	add	r2, r3
 800280c:	8abb      	ldrh	r3, [r7, #20]
 800280e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002812:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002816:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800281a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800281e:	b29b      	uxth	r3, r3
 8002820:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	3790      	adds	r7, #144	; 0x90
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800282c:	b480      	push	{r7}
 800282e:	b087      	sub	sp, #28
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	607b      	str	r3, [r7, #4]
 8002836:	460b      	mov	r3, r1
 8002838:	817b      	strh	r3, [r7, #10]
 800283a:	4613      	mov	r3, r2
 800283c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800283e:	897b      	ldrh	r3, [r7, #10]
 8002840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002844:	b29b      	uxth	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00b      	beq.n	8002862 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800284a:	897b      	ldrh	r3, [r7, #10]
 800284c:	f003 0307 	and.w	r3, r3, #7
 8002850:	1c5a      	adds	r2, r3, #1
 8002852:	4613      	mov	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4413      	add	r3, r2
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	4413      	add	r3, r2
 800285e:	617b      	str	r3, [r7, #20]
 8002860:	e009      	b.n	8002876 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002862:	897a      	ldrh	r2, [r7, #10]
 8002864:	4613      	mov	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4413      	add	r3, r2
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	4413      	add	r3, r2
 8002874:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002876:	893b      	ldrh	r3, [r7, #8]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d107      	bne.n	800288c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	2200      	movs	r2, #0
 8002880:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	b29a      	uxth	r2, r3
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	80da      	strh	r2, [r3, #6]
 800288a:	e00b      	b.n	80028a4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	2201      	movs	r2, #1
 8002890:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	b29a      	uxth	r2, r3
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	0c1b      	lsrs	r3, r3, #16
 800289e:	b29a      	uxth	r2, r3
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	371c      	adds	r7, #28
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
	...

080028b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028c0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80028c4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028ca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d102      	bne.n	80028da <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	f001 b83a 	b.w	800394e <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028de:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f000 816f 	beq.w	8002bce <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80028f0:	4bb5      	ldr	r3, [pc, #724]	; (8002bc8 <HAL_RCC_OscConfig+0x314>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f003 030c 	and.w	r3, r3, #12
 80028f8:	2b04      	cmp	r3, #4
 80028fa:	d00c      	beq.n	8002916 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028fc:	4bb2      	ldr	r3, [pc, #712]	; (8002bc8 <HAL_RCC_OscConfig+0x314>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f003 030c 	and.w	r3, r3, #12
 8002904:	2b08      	cmp	r3, #8
 8002906:	d15c      	bne.n	80029c2 <HAL_RCC_OscConfig+0x10e>
 8002908:	4baf      	ldr	r3, [pc, #700]	; (8002bc8 <HAL_RCC_OscConfig+0x314>)
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002914:	d155      	bne.n	80029c2 <HAL_RCC_OscConfig+0x10e>
 8002916:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800291a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002922:	fa93 f3a3 	rbit	r3, r3
 8002926:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  return result;
 800292a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800292e:	fab3 f383 	clz	r3, r3
 8002932:	b2db      	uxtb	r3, r3
 8002934:	095b      	lsrs	r3, r3, #5
 8002936:	b2db      	uxtb	r3, r3
 8002938:	f043 0301 	orr.w	r3, r3, #1
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b01      	cmp	r3, #1
 8002940:	d102      	bne.n	8002948 <HAL_RCC_OscConfig+0x94>
 8002942:	4ba1      	ldr	r3, [pc, #644]	; (8002bc8 <HAL_RCC_OscConfig+0x314>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	e015      	b.n	8002974 <HAL_RCC_OscConfig+0xc0>
 8002948:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800294c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002950:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002954:	fa93 f3a3 	rbit	r3, r3
 8002958:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800295c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002960:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002964:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002968:	fa93 f3a3 	rbit	r3, r3
 800296c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002970:	4b95      	ldr	r3, [pc, #596]	; (8002bc8 <HAL_RCC_OscConfig+0x314>)
 8002972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002974:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002978:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800297c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002980:	fa92 f2a2 	rbit	r2, r2
 8002984:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002988:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800298c:	fab2 f282 	clz	r2, r2
 8002990:	b2d2      	uxtb	r2, r2
 8002992:	f042 0220 	orr.w	r2, r2, #32
 8002996:	b2d2      	uxtb	r2, r2
 8002998:	f002 021f 	and.w	r2, r2, #31
 800299c:	2101      	movs	r1, #1
 800299e:	fa01 f202 	lsl.w	r2, r1, r2
 80029a2:	4013      	ands	r3, r2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f000 8111 	beq.w	8002bcc <HAL_RCC_OscConfig+0x318>
 80029aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029ae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f040 8108 	bne.w	8002bcc <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	f000 bfc6 	b.w	800394e <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029c6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029d2:	d106      	bne.n	80029e2 <HAL_RCC_OscConfig+0x12e>
 80029d4:	4b7c      	ldr	r3, [pc, #496]	; (8002bc8 <HAL_RCC_OscConfig+0x314>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a7b      	ldr	r2, [pc, #492]	; (8002bc8 <HAL_RCC_OscConfig+0x314>)
 80029da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029de:	6013      	str	r3, [r2, #0]
 80029e0:	e036      	b.n	8002a50 <HAL_RCC_OscConfig+0x19c>
 80029e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029e6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10c      	bne.n	8002a0c <HAL_RCC_OscConfig+0x158>
 80029f2:	4b75      	ldr	r3, [pc, #468]	; (8002bc8 <HAL_RCC_OscConfig+0x314>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a74      	ldr	r2, [pc, #464]	; (8002bc8 <HAL_RCC_OscConfig+0x314>)
 80029f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029fc:	6013      	str	r3, [r2, #0]
 80029fe:	4b72      	ldr	r3, [pc, #456]	; (8002bc8 <HAL_RCC_OscConfig+0x314>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a71      	ldr	r2, [pc, #452]	; (8002bc8 <HAL_RCC_OscConfig+0x314>)
 8002a04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a08:	6013      	str	r3, [r2, #0]
 8002a0a:	e021      	b.n	8002a50 <HAL_RCC_OscConfig+0x19c>
 8002a0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a10:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a1c:	d10c      	bne.n	8002a38 <HAL_RCC_OscConfig+0x184>
 8002a1e:	4b6a      	ldr	r3, [pc, #424]	; (8002bc8 <HAL_RCC_OscConfig+0x314>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a69      	ldr	r2, [pc, #420]	; (8002bc8 <HAL_RCC_OscConfig+0x314>)
 8002a24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a28:	6013      	str	r3, [r2, #0]
 8002a2a:	4b67      	ldr	r3, [pc, #412]	; (8002bc8 <HAL_RCC_OscConfig+0x314>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a66      	ldr	r2, [pc, #408]	; (8002bc8 <HAL_RCC_OscConfig+0x314>)
 8002a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a34:	6013      	str	r3, [r2, #0]
 8002a36:	e00b      	b.n	8002a50 <HAL_RCC_OscConfig+0x19c>
 8002a38:	4b63      	ldr	r3, [pc, #396]	; (8002bc8 <HAL_RCC_OscConfig+0x314>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a62      	ldr	r2, [pc, #392]	; (8002bc8 <HAL_RCC_OscConfig+0x314>)
 8002a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a42:	6013      	str	r3, [r2, #0]
 8002a44:	4b60      	ldr	r3, [pc, #384]	; (8002bc8 <HAL_RCC_OscConfig+0x314>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a5f      	ldr	r2, [pc, #380]	; (8002bc8 <HAL_RCC_OscConfig+0x314>)
 8002a4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a4e:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a54:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d059      	beq.n	8002b14 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a60:	f7fd ff66 	bl	8000930 <HAL_GetTick>
 8002a64:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a68:	e00a      	b.n	8002a80 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a6a:	f7fd ff61 	bl	8000930 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b64      	cmp	r3, #100	; 0x64
 8002a78:	d902      	bls.n	8002a80 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	f000 bf67 	b.w	800394e <HAL_RCC_OscConfig+0x109a>
 8002a80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a84:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a88:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002a8c:	fa93 f3a3 	rbit	r3, r3
 8002a90:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002a94:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a98:	fab3 f383 	clz	r3, r3
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	095b      	lsrs	r3, r3, #5
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	f043 0301 	orr.w	r3, r3, #1
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d102      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x1fe>
 8002aac:	4b46      	ldr	r3, [pc, #280]	; (8002bc8 <HAL_RCC_OscConfig+0x314>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	e015      	b.n	8002ade <HAL_RCC_OscConfig+0x22a>
 8002ab2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ab6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aba:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002abe:	fa93 f3a3 	rbit	r3, r3
 8002ac2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002ac6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002aca:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002ace:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002ad2:	fa93 f3a3 	rbit	r3, r3
 8002ad6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002ada:	4b3b      	ldr	r3, [pc, #236]	; (8002bc8 <HAL_RCC_OscConfig+0x314>)
 8002adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ade:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ae2:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002ae6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002aea:	fa92 f2a2 	rbit	r2, r2
 8002aee:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002af2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002af6:	fab2 f282 	clz	r2, r2
 8002afa:	b2d2      	uxtb	r2, r2
 8002afc:	f042 0220 	orr.w	r2, r2, #32
 8002b00:	b2d2      	uxtb	r2, r2
 8002b02:	f002 021f 	and.w	r2, r2, #31
 8002b06:	2101      	movs	r1, #1
 8002b08:	fa01 f202 	lsl.w	r2, r1, r2
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d0ab      	beq.n	8002a6a <HAL_RCC_OscConfig+0x1b6>
 8002b12:	e05c      	b.n	8002bce <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b14:	f7fd ff0c 	bl	8000930 <HAL_GetTick>
 8002b18:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b1c:	e00a      	b.n	8002b34 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b1e:	f7fd ff07 	bl	8000930 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b64      	cmp	r3, #100	; 0x64
 8002b2c:	d902      	bls.n	8002b34 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	f000 bf0d 	b.w	800394e <HAL_RCC_OscConfig+0x109a>
 8002b34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b38:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002b40:	fa93 f3a3 	rbit	r3, r3
 8002b44:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002b48:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b4c:	fab3 f383 	clz	r3, r3
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	095b      	lsrs	r3, r3, #5
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	f043 0301 	orr.w	r3, r3, #1
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d102      	bne.n	8002b66 <HAL_RCC_OscConfig+0x2b2>
 8002b60:	4b19      	ldr	r3, [pc, #100]	; (8002bc8 <HAL_RCC_OscConfig+0x314>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	e015      	b.n	8002b92 <HAL_RCC_OscConfig+0x2de>
 8002b66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b6a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002b72:	fa93 f3a3 	rbit	r3, r3
 8002b76:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002b7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b7e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002b82:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b86:	fa93 f3a3 	rbit	r3, r3
 8002b8a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002b8e:	4b0e      	ldr	r3, [pc, #56]	; (8002bc8 <HAL_RCC_OscConfig+0x314>)
 8002b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b96:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002b9a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002b9e:	fa92 f2a2 	rbit	r2, r2
 8002ba2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002ba6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002baa:	fab2 f282 	clz	r2, r2
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	f042 0220 	orr.w	r2, r2, #32
 8002bb4:	b2d2      	uxtb	r2, r2
 8002bb6:	f002 021f 	and.w	r2, r2, #31
 8002bba:	2101      	movs	r1, #1
 8002bbc:	fa01 f202 	lsl.w	r2, r1, r2
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1ab      	bne.n	8002b1e <HAL_RCC_OscConfig+0x26a>
 8002bc6:	e002      	b.n	8002bce <HAL_RCC_OscConfig+0x31a>
 8002bc8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bd2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f000 817f 	beq.w	8002ee2 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002be4:	4ba7      	ldr	r3, [pc, #668]	; (8002e84 <HAL_RCC_OscConfig+0x5d0>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f003 030c 	and.w	r3, r3, #12
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d00c      	beq.n	8002c0a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002bf0:	4ba4      	ldr	r3, [pc, #656]	; (8002e84 <HAL_RCC_OscConfig+0x5d0>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f003 030c 	and.w	r3, r3, #12
 8002bf8:	2b08      	cmp	r3, #8
 8002bfa:	d173      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x430>
 8002bfc:	4ba1      	ldr	r3, [pc, #644]	; (8002e84 <HAL_RCC_OscConfig+0x5d0>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002c04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c08:	d16c      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x430>
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c10:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002c14:	fa93 f3a3 	rbit	r3, r3
 8002c18:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002c1c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c20:	fab3 f383 	clz	r3, r3
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	095b      	lsrs	r3, r3, #5
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	f043 0301 	orr.w	r3, r3, #1
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d102      	bne.n	8002c3a <HAL_RCC_OscConfig+0x386>
 8002c34:	4b93      	ldr	r3, [pc, #588]	; (8002e84 <HAL_RCC_OscConfig+0x5d0>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	e013      	b.n	8002c62 <HAL_RCC_OscConfig+0x3ae>
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c40:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002c44:	fa93 f3a3 	rbit	r3, r3
 8002c48:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002c52:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002c56:	fa93 f3a3 	rbit	r3, r3
 8002c5a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002c5e:	4b89      	ldr	r3, [pc, #548]	; (8002e84 <HAL_RCC_OscConfig+0x5d0>)
 8002c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c62:	2202      	movs	r2, #2
 8002c64:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002c68:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002c6c:	fa92 f2a2 	rbit	r2, r2
 8002c70:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002c74:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002c78:	fab2 f282 	clz	r2, r2
 8002c7c:	b2d2      	uxtb	r2, r2
 8002c7e:	f042 0220 	orr.w	r2, r2, #32
 8002c82:	b2d2      	uxtb	r2, r2
 8002c84:	f002 021f 	and.w	r2, r2, #31
 8002c88:	2101      	movs	r1, #1
 8002c8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c8e:	4013      	ands	r3, r2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00a      	beq.n	8002caa <HAL_RCC_OscConfig+0x3f6>
 8002c94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c98:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d002      	beq.n	8002caa <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	f000 be52 	b.w	800394e <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002caa:	4b76      	ldr	r3, [pc, #472]	; (8002e84 <HAL_RCC_OscConfig+0x5d0>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cb6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	21f8      	movs	r1, #248	; 0xf8
 8002cc0:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc4:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002cc8:	fa91 f1a1 	rbit	r1, r1
 8002ccc:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002cd0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002cd4:	fab1 f181 	clz	r1, r1
 8002cd8:	b2c9      	uxtb	r1, r1
 8002cda:	408b      	lsls	r3, r1
 8002cdc:	4969      	ldr	r1, [pc, #420]	; (8002e84 <HAL_RCC_OscConfig+0x5d0>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ce2:	e0fe      	b.n	8002ee2 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ce4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ce8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f000 8088 	beq.w	8002e06 <HAL_RCC_OscConfig+0x552>
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002d00:	fa93 f3a3 	rbit	r3, r3
 8002d04:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002d08:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d0c:	fab3 f383 	clz	r3, r3
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d16:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	2301      	movs	r3, #1
 8002d20:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d22:	f7fd fe05 	bl	8000930 <HAL_GetTick>
 8002d26:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d2a:	e00a      	b.n	8002d42 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d2c:	f7fd fe00 	bl	8000930 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d902      	bls.n	8002d42 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	f000 be06 	b.w	800394e <HAL_RCC_OscConfig+0x109a>
 8002d42:	2302      	movs	r3, #2
 8002d44:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d48:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002d4c:	fa93 f3a3 	rbit	r3, r3
 8002d50:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002d54:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d58:	fab3 f383 	clz	r3, r3
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	095b      	lsrs	r3, r3, #5
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	f043 0301 	orr.w	r3, r3, #1
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d102      	bne.n	8002d72 <HAL_RCC_OscConfig+0x4be>
 8002d6c:	4b45      	ldr	r3, [pc, #276]	; (8002e84 <HAL_RCC_OscConfig+0x5d0>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	e013      	b.n	8002d9a <HAL_RCC_OscConfig+0x4e6>
 8002d72:	2302      	movs	r3, #2
 8002d74:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d78:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002d7c:	fa93 f3a3 	rbit	r3, r3
 8002d80:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002d84:	2302      	movs	r3, #2
 8002d86:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002d8a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002d8e:	fa93 f3a3 	rbit	r3, r3
 8002d92:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002d96:	4b3b      	ldr	r3, [pc, #236]	; (8002e84 <HAL_RCC_OscConfig+0x5d0>)
 8002d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002da0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002da4:	fa92 f2a2 	rbit	r2, r2
 8002da8:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002dac:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002db0:	fab2 f282 	clz	r2, r2
 8002db4:	b2d2      	uxtb	r2, r2
 8002db6:	f042 0220 	orr.w	r2, r2, #32
 8002dba:	b2d2      	uxtb	r2, r2
 8002dbc:	f002 021f 	and.w	r2, r2, #31
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	fa01 f202 	lsl.w	r2, r1, r2
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0af      	beq.n	8002d2c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dcc:	4b2d      	ldr	r3, [pc, #180]	; (8002e84 <HAL_RCC_OscConfig+0x5d0>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dd8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	21f8      	movs	r1, #248	; 0xf8
 8002de2:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de6:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002dea:	fa91 f1a1 	rbit	r1, r1
 8002dee:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002df2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002df6:	fab1 f181 	clz	r1, r1
 8002dfa:	b2c9      	uxtb	r1, r1
 8002dfc:	408b      	lsls	r3, r1
 8002dfe:	4921      	ldr	r1, [pc, #132]	; (8002e84 <HAL_RCC_OscConfig+0x5d0>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	600b      	str	r3, [r1, #0]
 8002e04:	e06d      	b.n	8002ee2 <HAL_RCC_OscConfig+0x62e>
 8002e06:	2301      	movs	r3, #1
 8002e08:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002e10:	fa93 f3a3 	rbit	r3, r3
 8002e14:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002e18:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e1c:	fab3 f383 	clz	r3, r3
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e26:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	2300      	movs	r3, #0
 8002e30:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e32:	f7fd fd7d 	bl	8000930 <HAL_GetTick>
 8002e36:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e3a:	e00a      	b.n	8002e52 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e3c:	f7fd fd78 	bl	8000930 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d902      	bls.n	8002e52 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	f000 bd7e 	b.w	800394e <HAL_RCC_OscConfig+0x109a>
 8002e52:	2302      	movs	r3, #2
 8002e54:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e58:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002e5c:	fa93 f3a3 	rbit	r3, r3
 8002e60:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002e64:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e68:	fab3 f383 	clz	r3, r3
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	095b      	lsrs	r3, r3, #5
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	f043 0301 	orr.w	r3, r3, #1
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d105      	bne.n	8002e88 <HAL_RCC_OscConfig+0x5d4>
 8002e7c:	4b01      	ldr	r3, [pc, #4]	; (8002e84 <HAL_RCC_OscConfig+0x5d0>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	e016      	b.n	8002eb0 <HAL_RCC_OscConfig+0x5fc>
 8002e82:	bf00      	nop
 8002e84:	40021000 	.word	0x40021000
 8002e88:	2302      	movs	r3, #2
 8002e8a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002e92:	fa93 f3a3 	rbit	r3, r3
 8002e96:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002ea0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002ea4:	fa93 f3a3 	rbit	r3, r3
 8002ea8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002eac:	4bbf      	ldr	r3, [pc, #764]	; (80031ac <HAL_RCC_OscConfig+0x8f8>)
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb0:	2202      	movs	r2, #2
 8002eb2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002eb6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002eba:	fa92 f2a2 	rbit	r2, r2
 8002ebe:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002ec2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002ec6:	fab2 f282 	clz	r2, r2
 8002eca:	b2d2      	uxtb	r2, r2
 8002ecc:	f042 0220 	orr.w	r2, r2, #32
 8002ed0:	b2d2      	uxtb	r2, r2
 8002ed2:	f002 021f 	and.w	r2, r2, #31
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	fa01 f202 	lsl.w	r2, r1, r2
 8002edc:	4013      	ands	r3, r2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1ac      	bne.n	8002e3c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ee2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ee6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0308 	and.w	r3, r3, #8
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f000 8113 	beq.w	800311e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ef8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002efc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	695b      	ldr	r3, [r3, #20]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d07c      	beq.n	8003002 <HAL_RCC_OscConfig+0x74e>
 8002f08:	2301      	movs	r3, #1
 8002f0a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f12:	fa93 f3a3 	rbit	r3, r3
 8002f16:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002f1a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f1e:	fab3 f383 	clz	r3, r3
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	461a      	mov	r2, r3
 8002f26:	4ba2      	ldr	r3, [pc, #648]	; (80031b0 <HAL_RCC_OscConfig+0x8fc>)
 8002f28:	4413      	add	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	2301      	movs	r3, #1
 8002f30:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f32:	f7fd fcfd 	bl	8000930 <HAL_GetTick>
 8002f36:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f3a:	e00a      	b.n	8002f52 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f3c:	f7fd fcf8 	bl	8000930 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d902      	bls.n	8002f52 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	f000 bcfe 	b.w	800394e <HAL_RCC_OscConfig+0x109a>
 8002f52:	2302      	movs	r3, #2
 8002f54:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f5c:	fa93 f2a3 	rbit	r2, r3
 8002f60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f64:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002f68:	601a      	str	r2, [r3, #0]
 8002f6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002f72:	2202      	movs	r2, #2
 8002f74:	601a      	str	r2, [r3, #0]
 8002f76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	fa93 f2a3 	rbit	r2, r3
 8002f84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002f8c:	601a      	str	r2, [r3, #0]
 8002f8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f92:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002f96:	2202      	movs	r2, #2
 8002f98:	601a      	str	r2, [r3, #0]
 8002f9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f9e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	fa93 f2a3 	rbit	r2, r3
 8002fa8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fac:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002fb0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fb2:	4b7e      	ldr	r3, [pc, #504]	; (80031ac <HAL_RCC_OscConfig+0x8f8>)
 8002fb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fba:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002fbe:	2102      	movs	r1, #2
 8002fc0:	6019      	str	r1, [r3, #0]
 8002fc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fc6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	fa93 f1a3 	rbit	r1, r3
 8002fd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fd4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002fd8:	6019      	str	r1, [r3, #0]
  return result;
 8002fda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fde:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	fab3 f383 	clz	r3, r3
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	f003 031f 	and.w	r3, r3, #31
 8002ff4:	2101      	movs	r1, #1
 8002ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d09d      	beq.n	8002f3c <HAL_RCC_OscConfig+0x688>
 8003000:	e08d      	b.n	800311e <HAL_RCC_OscConfig+0x86a>
 8003002:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003006:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800300a:	2201      	movs	r2, #1
 800300c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003012:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	fa93 f2a3 	rbit	r2, r3
 800301c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003020:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003024:	601a      	str	r2, [r3, #0]
  return result;
 8003026:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800302a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800302e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003030:	fab3 f383 	clz	r3, r3
 8003034:	b2db      	uxtb	r3, r3
 8003036:	461a      	mov	r2, r3
 8003038:	4b5d      	ldr	r3, [pc, #372]	; (80031b0 <HAL_RCC_OscConfig+0x8fc>)
 800303a:	4413      	add	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	461a      	mov	r2, r3
 8003040:	2300      	movs	r3, #0
 8003042:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003044:	f7fd fc74 	bl	8000930 <HAL_GetTick>
 8003048:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800304c:	e00a      	b.n	8003064 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800304e:	f7fd fc6f 	bl	8000930 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d902      	bls.n	8003064 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	f000 bc75 	b.w	800394e <HAL_RCC_OscConfig+0x109a>
 8003064:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003068:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800306c:	2202      	movs	r2, #2
 800306e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003070:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003074:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	fa93 f2a3 	rbit	r2, r3
 800307e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003082:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003086:	601a      	str	r2, [r3, #0]
 8003088:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800308c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003090:	2202      	movs	r2, #2
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003098:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	fa93 f2a3 	rbit	r2, r3
 80030a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030b0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80030b4:	2202      	movs	r2, #2
 80030b6:	601a      	str	r2, [r3, #0]
 80030b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030bc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	fa93 f2a3 	rbit	r2, r3
 80030c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030ca:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80030ce:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030d0:	4b36      	ldr	r3, [pc, #216]	; (80031ac <HAL_RCC_OscConfig+0x8f8>)
 80030d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030d8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80030dc:	2102      	movs	r1, #2
 80030de:	6019      	str	r1, [r3, #0]
 80030e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030e4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	fa93 f1a3 	rbit	r1, r3
 80030ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030f2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80030f6:	6019      	str	r1, [r3, #0]
  return result;
 80030f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030fc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	fab3 f383 	clz	r3, r3
 8003106:	b2db      	uxtb	r3, r3
 8003108:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800310c:	b2db      	uxtb	r3, r3
 800310e:	f003 031f 	and.w	r3, r3, #31
 8003112:	2101      	movs	r1, #1
 8003114:	fa01 f303 	lsl.w	r3, r1, r3
 8003118:	4013      	ands	r3, r2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d197      	bne.n	800304e <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800311e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003122:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0304 	and.w	r3, r3, #4
 800312e:	2b00      	cmp	r3, #0
 8003130:	f000 81a5 	beq.w	800347e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003134:	2300      	movs	r3, #0
 8003136:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800313a:	4b1c      	ldr	r3, [pc, #112]	; (80031ac <HAL_RCC_OscConfig+0x8f8>)
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d116      	bne.n	8003174 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003146:	4b19      	ldr	r3, [pc, #100]	; (80031ac <HAL_RCC_OscConfig+0x8f8>)
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	4a18      	ldr	r2, [pc, #96]	; (80031ac <HAL_RCC_OscConfig+0x8f8>)
 800314c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003150:	61d3      	str	r3, [r2, #28]
 8003152:	4b16      	ldr	r3, [pc, #88]	; (80031ac <HAL_RCC_OscConfig+0x8f8>)
 8003154:	69db      	ldr	r3, [r3, #28]
 8003156:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800315a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800315e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003168:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800316c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800316e:	2301      	movs	r3, #1
 8003170:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003174:	4b0f      	ldr	r3, [pc, #60]	; (80031b4 <HAL_RCC_OscConfig+0x900>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317c:	2b00      	cmp	r3, #0
 800317e:	d121      	bne.n	80031c4 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003180:	4b0c      	ldr	r3, [pc, #48]	; (80031b4 <HAL_RCC_OscConfig+0x900>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a0b      	ldr	r2, [pc, #44]	; (80031b4 <HAL_RCC_OscConfig+0x900>)
 8003186:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800318a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800318c:	f7fd fbd0 	bl	8000930 <HAL_GetTick>
 8003190:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003194:	e010      	b.n	80031b8 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003196:	f7fd fbcb 	bl	8000930 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b64      	cmp	r3, #100	; 0x64
 80031a4:	d908      	bls.n	80031b8 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e3d1      	b.n	800394e <HAL_RCC_OscConfig+0x109a>
 80031aa:	bf00      	nop
 80031ac:	40021000 	.word	0x40021000
 80031b0:	10908120 	.word	0x10908120
 80031b4:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031b8:	4b8d      	ldr	r3, [pc, #564]	; (80033f0 <HAL_RCC_OscConfig+0xb3c>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d0e8      	beq.n	8003196 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031c8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d106      	bne.n	80031e2 <HAL_RCC_OscConfig+0x92e>
 80031d4:	4b87      	ldr	r3, [pc, #540]	; (80033f4 <HAL_RCC_OscConfig+0xb40>)
 80031d6:	6a1b      	ldr	r3, [r3, #32]
 80031d8:	4a86      	ldr	r2, [pc, #536]	; (80033f4 <HAL_RCC_OscConfig+0xb40>)
 80031da:	f043 0301 	orr.w	r3, r3, #1
 80031de:	6213      	str	r3, [r2, #32]
 80031e0:	e035      	b.n	800324e <HAL_RCC_OscConfig+0x99a>
 80031e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031e6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10c      	bne.n	800320c <HAL_RCC_OscConfig+0x958>
 80031f2:	4b80      	ldr	r3, [pc, #512]	; (80033f4 <HAL_RCC_OscConfig+0xb40>)
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	4a7f      	ldr	r2, [pc, #508]	; (80033f4 <HAL_RCC_OscConfig+0xb40>)
 80031f8:	f023 0301 	bic.w	r3, r3, #1
 80031fc:	6213      	str	r3, [r2, #32]
 80031fe:	4b7d      	ldr	r3, [pc, #500]	; (80033f4 <HAL_RCC_OscConfig+0xb40>)
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	4a7c      	ldr	r2, [pc, #496]	; (80033f4 <HAL_RCC_OscConfig+0xb40>)
 8003204:	f023 0304 	bic.w	r3, r3, #4
 8003208:	6213      	str	r3, [r2, #32]
 800320a:	e020      	b.n	800324e <HAL_RCC_OscConfig+0x99a>
 800320c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003210:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	2b05      	cmp	r3, #5
 800321a:	d10c      	bne.n	8003236 <HAL_RCC_OscConfig+0x982>
 800321c:	4b75      	ldr	r3, [pc, #468]	; (80033f4 <HAL_RCC_OscConfig+0xb40>)
 800321e:	6a1b      	ldr	r3, [r3, #32]
 8003220:	4a74      	ldr	r2, [pc, #464]	; (80033f4 <HAL_RCC_OscConfig+0xb40>)
 8003222:	f043 0304 	orr.w	r3, r3, #4
 8003226:	6213      	str	r3, [r2, #32]
 8003228:	4b72      	ldr	r3, [pc, #456]	; (80033f4 <HAL_RCC_OscConfig+0xb40>)
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	4a71      	ldr	r2, [pc, #452]	; (80033f4 <HAL_RCC_OscConfig+0xb40>)
 800322e:	f043 0301 	orr.w	r3, r3, #1
 8003232:	6213      	str	r3, [r2, #32]
 8003234:	e00b      	b.n	800324e <HAL_RCC_OscConfig+0x99a>
 8003236:	4b6f      	ldr	r3, [pc, #444]	; (80033f4 <HAL_RCC_OscConfig+0xb40>)
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	4a6e      	ldr	r2, [pc, #440]	; (80033f4 <HAL_RCC_OscConfig+0xb40>)
 800323c:	f023 0301 	bic.w	r3, r3, #1
 8003240:	6213      	str	r3, [r2, #32]
 8003242:	4b6c      	ldr	r3, [pc, #432]	; (80033f4 <HAL_RCC_OscConfig+0xb40>)
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	4a6b      	ldr	r2, [pc, #428]	; (80033f4 <HAL_RCC_OscConfig+0xb40>)
 8003248:	f023 0304 	bic.w	r3, r3, #4
 800324c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800324e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003252:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 8081 	beq.w	8003362 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003260:	f7fd fb66 	bl	8000930 <HAL_GetTick>
 8003264:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003268:	e00b      	b.n	8003282 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800326a:	f7fd fb61 	bl	8000930 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	f241 3288 	movw	r2, #5000	; 0x1388
 800327a:	4293      	cmp	r3, r2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e365      	b.n	800394e <HAL_RCC_OscConfig+0x109a>
 8003282:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003286:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800328a:	2202      	movs	r2, #2
 800328c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003292:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	fa93 f2a3 	rbit	r2, r3
 800329c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032a0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032aa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80032ae:	2202      	movs	r2, #2
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032b6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	fa93 f2a3 	rbit	r2, r3
 80032c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032c4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80032c8:	601a      	str	r2, [r3, #0]
  return result;
 80032ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032ce:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80032d2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d4:	fab3 f383 	clz	r3, r3
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	095b      	lsrs	r3, r3, #5
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	f043 0302 	orr.w	r3, r3, #2
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d102      	bne.n	80032ee <HAL_RCC_OscConfig+0xa3a>
 80032e8:	4b42      	ldr	r3, [pc, #264]	; (80033f4 <HAL_RCC_OscConfig+0xb40>)
 80032ea:	6a1b      	ldr	r3, [r3, #32]
 80032ec:	e013      	b.n	8003316 <HAL_RCC_OscConfig+0xa62>
 80032ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032f2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80032f6:	2202      	movs	r2, #2
 80032f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032fe:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	fa93 f2a3 	rbit	r2, r3
 8003308:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800330c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	4b38      	ldr	r3, [pc, #224]	; (80033f4 <HAL_RCC_OscConfig+0xb40>)
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003316:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800331a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800331e:	2102      	movs	r1, #2
 8003320:	6011      	str	r1, [r2, #0]
 8003322:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003326:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800332a:	6812      	ldr	r2, [r2, #0]
 800332c:	fa92 f1a2 	rbit	r1, r2
 8003330:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003334:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003338:	6011      	str	r1, [r2, #0]
  return result;
 800333a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800333e:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003342:	6812      	ldr	r2, [r2, #0]
 8003344:	fab2 f282 	clz	r2, r2
 8003348:	b2d2      	uxtb	r2, r2
 800334a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800334e:	b2d2      	uxtb	r2, r2
 8003350:	f002 021f 	and.w	r2, r2, #31
 8003354:	2101      	movs	r1, #1
 8003356:	fa01 f202 	lsl.w	r2, r1, r2
 800335a:	4013      	ands	r3, r2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d084      	beq.n	800326a <HAL_RCC_OscConfig+0x9b6>
 8003360:	e083      	b.n	800346a <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003362:	f7fd fae5 	bl	8000930 <HAL_GetTick>
 8003366:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800336a:	e00b      	b.n	8003384 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800336c:	f7fd fae0 	bl	8000930 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	f241 3288 	movw	r2, #5000	; 0x1388
 800337c:	4293      	cmp	r3, r2
 800337e:	d901      	bls.n	8003384 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e2e4      	b.n	800394e <HAL_RCC_OscConfig+0x109a>
 8003384:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003388:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800338c:	2202      	movs	r2, #2
 800338e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003390:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003394:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	fa93 f2a3 	rbit	r2, r3
 800339e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033a2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80033a6:	601a      	str	r2, [r3, #0]
 80033a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033ac:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80033b0:	2202      	movs	r2, #2
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033b8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	fa93 f2a3 	rbit	r2, r3
 80033c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033c6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80033ca:	601a      	str	r2, [r3, #0]
  return result;
 80033cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033d0:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80033d4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033d6:	fab3 f383 	clz	r3, r3
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	095b      	lsrs	r3, r3, #5
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	f043 0302 	orr.w	r3, r3, #2
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d106      	bne.n	80033f8 <HAL_RCC_OscConfig+0xb44>
 80033ea:	4b02      	ldr	r3, [pc, #8]	; (80033f4 <HAL_RCC_OscConfig+0xb40>)
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	e017      	b.n	8003420 <HAL_RCC_OscConfig+0xb6c>
 80033f0:	40007000 	.word	0x40007000
 80033f4:	40021000 	.word	0x40021000
 80033f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033fc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003400:	2202      	movs	r2, #2
 8003402:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003404:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003408:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	fa93 f2a3 	rbit	r2, r3
 8003412:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003416:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800341a:	601a      	str	r2, [r3, #0]
 800341c:	4bb3      	ldr	r3, [pc, #716]	; (80036ec <HAL_RCC_OscConfig+0xe38>)
 800341e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003420:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003424:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003428:	2102      	movs	r1, #2
 800342a:	6011      	str	r1, [r2, #0]
 800342c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003430:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003434:	6812      	ldr	r2, [r2, #0]
 8003436:	fa92 f1a2 	rbit	r1, r2
 800343a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800343e:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003442:	6011      	str	r1, [r2, #0]
  return result;
 8003444:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003448:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800344c:	6812      	ldr	r2, [r2, #0]
 800344e:	fab2 f282 	clz	r2, r2
 8003452:	b2d2      	uxtb	r2, r2
 8003454:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003458:	b2d2      	uxtb	r2, r2
 800345a:	f002 021f 	and.w	r2, r2, #31
 800345e:	2101      	movs	r1, #1
 8003460:	fa01 f202 	lsl.w	r2, r1, r2
 8003464:	4013      	ands	r3, r2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d180      	bne.n	800336c <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800346a:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800346e:	2b01      	cmp	r3, #1
 8003470:	d105      	bne.n	800347e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003472:	4b9e      	ldr	r3, [pc, #632]	; (80036ec <HAL_RCC_OscConfig+0xe38>)
 8003474:	69db      	ldr	r3, [r3, #28]
 8003476:	4a9d      	ldr	r2, [pc, #628]	; (80036ec <HAL_RCC_OscConfig+0xe38>)
 8003478:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800347c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800347e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003482:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	2b00      	cmp	r3, #0
 800348c:	f000 825e 	beq.w	800394c <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003490:	4b96      	ldr	r3, [pc, #600]	; (80036ec <HAL_RCC_OscConfig+0xe38>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f003 030c 	and.w	r3, r3, #12
 8003498:	2b08      	cmp	r3, #8
 800349a:	f000 821f 	beq.w	80038dc <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800349e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034a2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	f040 8170 	bne.w	8003790 <HAL_RCC_OscConfig+0xedc>
 80034b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034b4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80034b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80034bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034c2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	fa93 f2a3 	rbit	r2, r3
 80034cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034d0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80034d4:	601a      	str	r2, [r3, #0]
  return result;
 80034d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034da:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80034de:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034e0:	fab3 f383 	clz	r3, r3
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034ea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	461a      	mov	r2, r3
 80034f2:	2300      	movs	r3, #0
 80034f4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f6:	f7fd fa1b 	bl	8000930 <HAL_GetTick>
 80034fa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034fe:	e009      	b.n	8003514 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003500:	f7fd fa16 	bl	8000930 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d901      	bls.n	8003514 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e21c      	b.n	800394e <HAL_RCC_OscConfig+0x109a>
 8003514:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003518:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800351c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003520:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003522:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003526:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	fa93 f2a3 	rbit	r2, r3
 8003530:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003534:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003538:	601a      	str	r2, [r3, #0]
  return result;
 800353a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800353e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003542:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003544:	fab3 f383 	clz	r3, r3
 8003548:	b2db      	uxtb	r3, r3
 800354a:	095b      	lsrs	r3, r3, #5
 800354c:	b2db      	uxtb	r3, r3
 800354e:	f043 0301 	orr.w	r3, r3, #1
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2b01      	cmp	r3, #1
 8003556:	d102      	bne.n	800355e <HAL_RCC_OscConfig+0xcaa>
 8003558:	4b64      	ldr	r3, [pc, #400]	; (80036ec <HAL_RCC_OscConfig+0xe38>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	e027      	b.n	80035ae <HAL_RCC_OscConfig+0xcfa>
 800355e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003562:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003566:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800356a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003570:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	fa93 f2a3 	rbit	r2, r3
 800357a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800357e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003588:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800358c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003590:	601a      	str	r2, [r3, #0]
 8003592:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003596:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	fa93 f2a3 	rbit	r2, r3
 80035a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035a4:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80035a8:	601a      	str	r2, [r3, #0]
 80035aa:	4b50      	ldr	r3, [pc, #320]	; (80036ec <HAL_RCC_OscConfig+0xe38>)
 80035ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ae:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80035b2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80035b6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80035ba:	6011      	str	r1, [r2, #0]
 80035bc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80035c0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80035c4:	6812      	ldr	r2, [r2, #0]
 80035c6:	fa92 f1a2 	rbit	r1, r2
 80035ca:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80035ce:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80035d2:	6011      	str	r1, [r2, #0]
  return result;
 80035d4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80035d8:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80035dc:	6812      	ldr	r2, [r2, #0]
 80035de:	fab2 f282 	clz	r2, r2
 80035e2:	b2d2      	uxtb	r2, r2
 80035e4:	f042 0220 	orr.w	r2, r2, #32
 80035e8:	b2d2      	uxtb	r2, r2
 80035ea:	f002 021f 	and.w	r2, r2, #31
 80035ee:	2101      	movs	r1, #1
 80035f0:	fa01 f202 	lsl.w	r2, r1, r2
 80035f4:	4013      	ands	r3, r2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d182      	bne.n	8003500 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035fa:	4b3c      	ldr	r3, [pc, #240]	; (80036ec <HAL_RCC_OscConfig+0xe38>)
 80035fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fe:	f023 020f 	bic.w	r2, r3, #15
 8003602:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003606:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360e:	4937      	ldr	r1, [pc, #220]	; (80036ec <HAL_RCC_OscConfig+0xe38>)
 8003610:	4313      	orrs	r3, r2
 8003612:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003614:	4b35      	ldr	r3, [pc, #212]	; (80036ec <HAL_RCC_OscConfig+0xe38>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800361c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003620:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6a19      	ldr	r1, [r3, #32]
 8003628:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800362c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	69db      	ldr	r3, [r3, #28]
 8003634:	430b      	orrs	r3, r1
 8003636:	492d      	ldr	r1, [pc, #180]	; (80036ec <HAL_RCC_OscConfig+0xe38>)
 8003638:	4313      	orrs	r3, r2
 800363a:	604b      	str	r3, [r1, #4]
 800363c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003640:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003644:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003648:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800364a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800364e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	fa93 f2a3 	rbit	r2, r3
 8003658:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800365c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003660:	601a      	str	r2, [r3, #0]
  return result;
 8003662:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003666:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800366a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800366c:	fab3 f383 	clz	r3, r3
 8003670:	b2db      	uxtb	r3, r3
 8003672:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003676:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	461a      	mov	r2, r3
 800367e:	2301      	movs	r3, #1
 8003680:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003682:	f7fd f955 	bl	8000930 <HAL_GetTick>
 8003686:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800368a:	e009      	b.n	80036a0 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800368c:	f7fd f950 	bl	8000930 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e156      	b.n	800394e <HAL_RCC_OscConfig+0x109a>
 80036a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036a4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80036a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036b2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	fa93 f2a3 	rbit	r2, r3
 80036bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036c0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80036c4:	601a      	str	r2, [r3, #0]
  return result;
 80036c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036ca:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80036ce:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036d0:	fab3 f383 	clz	r3, r3
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	095b      	lsrs	r3, r3, #5
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	f043 0301 	orr.w	r3, r3, #1
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d105      	bne.n	80036f0 <HAL_RCC_OscConfig+0xe3c>
 80036e4:	4b01      	ldr	r3, [pc, #4]	; (80036ec <HAL_RCC_OscConfig+0xe38>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	e02a      	b.n	8003740 <HAL_RCC_OscConfig+0xe8c>
 80036ea:	bf00      	nop
 80036ec:	40021000 	.word	0x40021000
 80036f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036f4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80036f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003702:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	fa93 f2a3 	rbit	r2, r3
 800370c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003710:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003714:	601a      	str	r2, [r3, #0]
 8003716:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800371a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800371e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003728:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	fa93 f2a3 	rbit	r2, r3
 8003732:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003736:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800373a:	601a      	str	r2, [r3, #0]
 800373c:	4b86      	ldr	r3, [pc, #536]	; (8003958 <HAL_RCC_OscConfig+0x10a4>)
 800373e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003740:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003744:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003748:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800374c:	6011      	str	r1, [r2, #0]
 800374e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003752:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003756:	6812      	ldr	r2, [r2, #0]
 8003758:	fa92 f1a2 	rbit	r1, r2
 800375c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003760:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003764:	6011      	str	r1, [r2, #0]
  return result;
 8003766:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800376a:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800376e:	6812      	ldr	r2, [r2, #0]
 8003770:	fab2 f282 	clz	r2, r2
 8003774:	b2d2      	uxtb	r2, r2
 8003776:	f042 0220 	orr.w	r2, r2, #32
 800377a:	b2d2      	uxtb	r2, r2
 800377c:	f002 021f 	and.w	r2, r2, #31
 8003780:	2101      	movs	r1, #1
 8003782:	fa01 f202 	lsl.w	r2, r1, r2
 8003786:	4013      	ands	r3, r2
 8003788:	2b00      	cmp	r3, #0
 800378a:	f43f af7f 	beq.w	800368c <HAL_RCC_OscConfig+0xdd8>
 800378e:	e0dd      	b.n	800394c <HAL_RCC_OscConfig+0x1098>
 8003790:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003794:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003798:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800379c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037a2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	fa93 f2a3 	rbit	r2, r3
 80037ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037b0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80037b4:	601a      	str	r2, [r3, #0]
  return result;
 80037b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037ba:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80037be:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037c0:	fab3 f383 	clz	r3, r3
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80037ca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	461a      	mov	r2, r3
 80037d2:	2300      	movs	r3, #0
 80037d4:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d6:	f7fd f8ab 	bl	8000930 <HAL_GetTick>
 80037da:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037de:	e009      	b.n	80037f4 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037e0:	f7fd f8a6 	bl	8000930 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e0ac      	b.n	800394e <HAL_RCC_OscConfig+0x109a>
 80037f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037f8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80037fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003800:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003802:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003806:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	fa93 f2a3 	rbit	r2, r3
 8003810:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003814:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003818:	601a      	str	r2, [r3, #0]
  return result;
 800381a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800381e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003822:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003824:	fab3 f383 	clz	r3, r3
 8003828:	b2db      	uxtb	r3, r3
 800382a:	095b      	lsrs	r3, r3, #5
 800382c:	b2db      	uxtb	r3, r3
 800382e:	f043 0301 	orr.w	r3, r3, #1
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b01      	cmp	r3, #1
 8003836:	d102      	bne.n	800383e <HAL_RCC_OscConfig+0xf8a>
 8003838:	4b47      	ldr	r3, [pc, #284]	; (8003958 <HAL_RCC_OscConfig+0x10a4>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	e027      	b.n	800388e <HAL_RCC_OscConfig+0xfda>
 800383e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003842:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003846:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800384a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003850:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	fa93 f2a3 	rbit	r2, r3
 800385a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800385e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003862:	601a      	str	r2, [r3, #0]
 8003864:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003868:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800386c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003870:	601a      	str	r2, [r3, #0]
 8003872:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003876:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	fa93 f2a3 	rbit	r2, r3
 8003880:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003884:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8003888:	601a      	str	r2, [r3, #0]
 800388a:	4b33      	ldr	r3, [pc, #204]	; (8003958 <HAL_RCC_OscConfig+0x10a4>)
 800388c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003892:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003896:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800389a:	6011      	str	r1, [r2, #0]
 800389c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80038a0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80038a4:	6812      	ldr	r2, [r2, #0]
 80038a6:	fa92 f1a2 	rbit	r1, r2
 80038aa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80038ae:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80038b2:	6011      	str	r1, [r2, #0]
  return result;
 80038b4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80038b8:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80038bc:	6812      	ldr	r2, [r2, #0]
 80038be:	fab2 f282 	clz	r2, r2
 80038c2:	b2d2      	uxtb	r2, r2
 80038c4:	f042 0220 	orr.w	r2, r2, #32
 80038c8:	b2d2      	uxtb	r2, r2
 80038ca:	f002 021f 	and.w	r2, r2, #31
 80038ce:	2101      	movs	r1, #1
 80038d0:	fa01 f202 	lsl.w	r2, r1, r2
 80038d4:	4013      	ands	r3, r2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d182      	bne.n	80037e0 <HAL_RCC_OscConfig+0xf2c>
 80038da:	e037      	b.n	800394c <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038e0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d101      	bne.n	80038f0 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e02e      	b.n	800394e <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80038f0:	4b19      	ldr	r3, [pc, #100]	; (8003958 <HAL_RCC_OscConfig+0x10a4>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80038f8:	4b17      	ldr	r3, [pc, #92]	; (8003958 <HAL_RCC_OscConfig+0x10a4>)
 80038fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fc:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003900:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003904:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003908:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800390c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	69db      	ldr	r3, [r3, #28]
 8003914:	429a      	cmp	r2, r3
 8003916:	d117      	bne.n	8003948 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003918:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800391c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003920:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003924:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800392c:	429a      	cmp	r2, r3
 800392e:	d10b      	bne.n	8003948 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003930:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003934:	f003 020f 	and.w	r2, r3, #15
 8003938:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800393c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003944:	429a      	cmp	r2, r3
 8003946:	d001      	beq.n	800394c <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e000      	b.n	800394e <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40021000 	.word	0x40021000

0800395c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b09e      	sub	sp, #120	; 0x78
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003966:	2300      	movs	r3, #0
 8003968:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d101      	bne.n	8003974 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e162      	b.n	8003c3a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003974:	4b90      	ldr	r3, [pc, #576]	; (8003bb8 <HAL_RCC_ClockConfig+0x25c>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	429a      	cmp	r2, r3
 8003980:	d910      	bls.n	80039a4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003982:	4b8d      	ldr	r3, [pc, #564]	; (8003bb8 <HAL_RCC_ClockConfig+0x25c>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f023 0207 	bic.w	r2, r3, #7
 800398a:	498b      	ldr	r1, [pc, #556]	; (8003bb8 <HAL_RCC_ClockConfig+0x25c>)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	4313      	orrs	r3, r2
 8003990:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003992:	4b89      	ldr	r3, [pc, #548]	; (8003bb8 <HAL_RCC_ClockConfig+0x25c>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0307 	and.w	r3, r3, #7
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	429a      	cmp	r2, r3
 800399e:	d001      	beq.n	80039a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e14a      	b.n	8003c3a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d008      	beq.n	80039c2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039b0:	4b82      	ldr	r3, [pc, #520]	; (8003bbc <HAL_RCC_ClockConfig+0x260>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	497f      	ldr	r1, [pc, #508]	; (8003bbc <HAL_RCC_ClockConfig+0x260>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f000 80dc 	beq.w	8003b88 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d13c      	bne.n	8003a52 <HAL_RCC_ClockConfig+0xf6>
 80039d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039dc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039e0:	fa93 f3a3 	rbit	r3, r3
 80039e4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80039e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039e8:	fab3 f383 	clz	r3, r3
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	095b      	lsrs	r3, r3, #5
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	f043 0301 	orr.w	r3, r3, #1
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d102      	bne.n	8003a02 <HAL_RCC_ClockConfig+0xa6>
 80039fc:	4b6f      	ldr	r3, [pc, #444]	; (8003bbc <HAL_RCC_ClockConfig+0x260>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	e00f      	b.n	8003a22 <HAL_RCC_ClockConfig+0xc6>
 8003a02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a06:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a0a:	fa93 f3a3 	rbit	r3, r3
 8003a0e:	667b      	str	r3, [r7, #100]	; 0x64
 8003a10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a14:	663b      	str	r3, [r7, #96]	; 0x60
 8003a16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a18:	fa93 f3a3 	rbit	r3, r3
 8003a1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a1e:	4b67      	ldr	r3, [pc, #412]	; (8003bbc <HAL_RCC_ClockConfig+0x260>)
 8003a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a22:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a26:	65ba      	str	r2, [r7, #88]	; 0x58
 8003a28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a2a:	fa92 f2a2 	rbit	r2, r2
 8003a2e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003a30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003a32:	fab2 f282 	clz	r2, r2
 8003a36:	b2d2      	uxtb	r2, r2
 8003a38:	f042 0220 	orr.w	r2, r2, #32
 8003a3c:	b2d2      	uxtb	r2, r2
 8003a3e:	f002 021f 	and.w	r2, r2, #31
 8003a42:	2101      	movs	r1, #1
 8003a44:	fa01 f202 	lsl.w	r2, r1, r2
 8003a48:	4013      	ands	r3, r2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d17b      	bne.n	8003b46 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e0f3      	b.n	8003c3a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d13c      	bne.n	8003ad4 <HAL_RCC_ClockConfig+0x178>
 8003a5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a5e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a62:	fa93 f3a3 	rbit	r3, r3
 8003a66:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003a68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a6a:	fab3 f383 	clz	r3, r3
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	095b      	lsrs	r3, r3, #5
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	f043 0301 	orr.w	r3, r3, #1
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d102      	bne.n	8003a84 <HAL_RCC_ClockConfig+0x128>
 8003a7e:	4b4f      	ldr	r3, [pc, #316]	; (8003bbc <HAL_RCC_ClockConfig+0x260>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	e00f      	b.n	8003aa4 <HAL_RCC_ClockConfig+0x148>
 8003a84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a88:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a8c:	fa93 f3a3 	rbit	r3, r3
 8003a90:	647b      	str	r3, [r7, #68]	; 0x44
 8003a92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a96:	643b      	str	r3, [r7, #64]	; 0x40
 8003a98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a9a:	fa93 f3a3 	rbit	r3, r3
 8003a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003aa0:	4b46      	ldr	r3, [pc, #280]	; (8003bbc <HAL_RCC_ClockConfig+0x260>)
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003aa8:	63ba      	str	r2, [r7, #56]	; 0x38
 8003aaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003aac:	fa92 f2a2 	rbit	r2, r2
 8003ab0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003ab2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ab4:	fab2 f282 	clz	r2, r2
 8003ab8:	b2d2      	uxtb	r2, r2
 8003aba:	f042 0220 	orr.w	r2, r2, #32
 8003abe:	b2d2      	uxtb	r2, r2
 8003ac0:	f002 021f 	and.w	r2, r2, #31
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	fa01 f202 	lsl.w	r2, r1, r2
 8003aca:	4013      	ands	r3, r2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d13a      	bne.n	8003b46 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e0b2      	b.n	8003c3a <HAL_RCC_ClockConfig+0x2de>
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ada:	fa93 f3a3 	rbit	r3, r3
 8003ade:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae2:	fab3 f383 	clz	r3, r3
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	095b      	lsrs	r3, r3, #5
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	f043 0301 	orr.w	r3, r3, #1
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d102      	bne.n	8003afc <HAL_RCC_ClockConfig+0x1a0>
 8003af6:	4b31      	ldr	r3, [pc, #196]	; (8003bbc <HAL_RCC_ClockConfig+0x260>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	e00d      	b.n	8003b18 <HAL_RCC_ClockConfig+0x1bc>
 8003afc:	2302      	movs	r3, #2
 8003afe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b02:	fa93 f3a3 	rbit	r3, r3
 8003b06:	627b      	str	r3, [r7, #36]	; 0x24
 8003b08:	2302      	movs	r3, #2
 8003b0a:	623b      	str	r3, [r7, #32]
 8003b0c:	6a3b      	ldr	r3, [r7, #32]
 8003b0e:	fa93 f3a3 	rbit	r3, r3
 8003b12:	61fb      	str	r3, [r7, #28]
 8003b14:	4b29      	ldr	r3, [pc, #164]	; (8003bbc <HAL_RCC_ClockConfig+0x260>)
 8003b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b18:	2202      	movs	r2, #2
 8003b1a:	61ba      	str	r2, [r7, #24]
 8003b1c:	69ba      	ldr	r2, [r7, #24]
 8003b1e:	fa92 f2a2 	rbit	r2, r2
 8003b22:	617a      	str	r2, [r7, #20]
  return result;
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	fab2 f282 	clz	r2, r2
 8003b2a:	b2d2      	uxtb	r2, r2
 8003b2c:	f042 0220 	orr.w	r2, r2, #32
 8003b30:	b2d2      	uxtb	r2, r2
 8003b32:	f002 021f 	and.w	r2, r2, #31
 8003b36:	2101      	movs	r1, #1
 8003b38:	fa01 f202 	lsl.w	r2, r1, r2
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e079      	b.n	8003c3a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b46:	4b1d      	ldr	r3, [pc, #116]	; (8003bbc <HAL_RCC_ClockConfig+0x260>)
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f023 0203 	bic.w	r2, r3, #3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	491a      	ldr	r1, [pc, #104]	; (8003bbc <HAL_RCC_ClockConfig+0x260>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b58:	f7fc feea 	bl	8000930 <HAL_GetTick>
 8003b5c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b5e:	e00a      	b.n	8003b76 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b60:	f7fc fee6 	bl	8000930 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e061      	b.n	8003c3a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b76:	4b11      	ldr	r3, [pc, #68]	; (8003bbc <HAL_RCC_ClockConfig+0x260>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f003 020c 	and.w	r2, r3, #12
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d1eb      	bne.n	8003b60 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b88:	4b0b      	ldr	r3, [pc, #44]	; (8003bb8 <HAL_RCC_ClockConfig+0x25c>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0307 	and.w	r3, r3, #7
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d214      	bcs.n	8003bc0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b96:	4b08      	ldr	r3, [pc, #32]	; (8003bb8 <HAL_RCC_ClockConfig+0x25c>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f023 0207 	bic.w	r2, r3, #7
 8003b9e:	4906      	ldr	r1, [pc, #24]	; (8003bb8 <HAL_RCC_ClockConfig+0x25c>)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ba6:	4b04      	ldr	r3, [pc, #16]	; (8003bb8 <HAL_RCC_ClockConfig+0x25c>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0307 	and.w	r3, r3, #7
 8003bae:	683a      	ldr	r2, [r7, #0]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d005      	beq.n	8003bc0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e040      	b.n	8003c3a <HAL_RCC_ClockConfig+0x2de>
 8003bb8:	40022000 	.word	0x40022000
 8003bbc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0304 	and.w	r3, r3, #4
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d008      	beq.n	8003bde <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bcc:	4b1d      	ldr	r3, [pc, #116]	; (8003c44 <HAL_RCC_ClockConfig+0x2e8>)
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	491a      	ldr	r1, [pc, #104]	; (8003c44 <HAL_RCC_ClockConfig+0x2e8>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0308 	and.w	r3, r3, #8
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d009      	beq.n	8003bfe <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bea:	4b16      	ldr	r3, [pc, #88]	; (8003c44 <HAL_RCC_ClockConfig+0x2e8>)
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	4912      	ldr	r1, [pc, #72]	; (8003c44 <HAL_RCC_ClockConfig+0x2e8>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003bfe:	f000 f829 	bl	8003c54 <HAL_RCC_GetSysClockFreq>
 8003c02:	4601      	mov	r1, r0
 8003c04:	4b0f      	ldr	r3, [pc, #60]	; (8003c44 <HAL_RCC_ClockConfig+0x2e8>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c0c:	22f0      	movs	r2, #240	; 0xf0
 8003c0e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	fa92 f2a2 	rbit	r2, r2
 8003c16:	60fa      	str	r2, [r7, #12]
  return result;
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	fab2 f282 	clz	r2, r2
 8003c1e:	b2d2      	uxtb	r2, r2
 8003c20:	40d3      	lsrs	r3, r2
 8003c22:	4a09      	ldr	r2, [pc, #36]	; (8003c48 <HAL_RCC_ClockConfig+0x2ec>)
 8003c24:	5cd3      	ldrb	r3, [r2, r3]
 8003c26:	fa21 f303 	lsr.w	r3, r1, r3
 8003c2a:	4a08      	ldr	r2, [pc, #32]	; (8003c4c <HAL_RCC_ClockConfig+0x2f0>)
 8003c2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003c2e:	4b08      	ldr	r3, [pc, #32]	; (8003c50 <HAL_RCC_ClockConfig+0x2f4>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7fc fe38 	bl	80008a8 <HAL_InitTick>
  
  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3778      	adds	r7, #120	; 0x78
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	40021000 	.word	0x40021000
 8003c48:	08009c20 	.word	0x08009c20
 8003c4c:	20000000 	.word	0x20000000
 8003c50:	20000004 	.word	0x20000004

08003c54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b08b      	sub	sp, #44	; 0x2c
 8003c58:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	61fb      	str	r3, [r7, #28]
 8003c5e:	2300      	movs	r3, #0
 8003c60:	61bb      	str	r3, [r7, #24]
 8003c62:	2300      	movs	r3, #0
 8003c64:	627b      	str	r3, [r7, #36]	; 0x24
 8003c66:	2300      	movs	r3, #0
 8003c68:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003c6e:	4b2a      	ldr	r3, [pc, #168]	; (8003d18 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	f003 030c 	and.w	r3, r3, #12
 8003c7a:	2b04      	cmp	r3, #4
 8003c7c:	d002      	beq.n	8003c84 <HAL_RCC_GetSysClockFreq+0x30>
 8003c7e:	2b08      	cmp	r3, #8
 8003c80:	d003      	beq.n	8003c8a <HAL_RCC_GetSysClockFreq+0x36>
 8003c82:	e03f      	b.n	8003d04 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c84:	4b25      	ldr	r3, [pc, #148]	; (8003d1c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003c86:	623b      	str	r3, [r7, #32]
      break;
 8003c88:	e03f      	b.n	8003d0a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003c90:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003c94:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	fa92 f2a2 	rbit	r2, r2
 8003c9c:	607a      	str	r2, [r7, #4]
  return result;
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	fab2 f282 	clz	r2, r2
 8003ca4:	b2d2      	uxtb	r2, r2
 8003ca6:	40d3      	lsrs	r3, r2
 8003ca8:	4a1d      	ldr	r2, [pc, #116]	; (8003d20 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003caa:	5cd3      	ldrb	r3, [r2, r3]
 8003cac:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003cae:	4b1a      	ldr	r3, [pc, #104]	; (8003d18 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb2:	f003 030f 	and.w	r3, r3, #15
 8003cb6:	220f      	movs	r2, #15
 8003cb8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cba:	693a      	ldr	r2, [r7, #16]
 8003cbc:	fa92 f2a2 	rbit	r2, r2
 8003cc0:	60fa      	str	r2, [r7, #12]
  return result;
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	fab2 f282 	clz	r2, r2
 8003cc8:	b2d2      	uxtb	r2, r2
 8003cca:	40d3      	lsrs	r3, r2
 8003ccc:	4a15      	ldr	r2, [pc, #84]	; (8003d24 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003cce:	5cd3      	ldrb	r3, [r2, r3]
 8003cd0:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d008      	beq.n	8003cee <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003cdc:	4a0f      	ldr	r2, [pc, #60]	; (8003d1c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	fb02 f303 	mul.w	r3, r2, r3
 8003cea:	627b      	str	r3, [r7, #36]	; 0x24
 8003cec:	e007      	b.n	8003cfe <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003cee:	4a0b      	ldr	r2, [pc, #44]	; (8003d1c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	fb02 f303 	mul.w	r3, r2, r3
 8003cfc:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d00:	623b      	str	r3, [r7, #32]
      break;
 8003d02:	e002      	b.n	8003d0a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d04:	4b05      	ldr	r3, [pc, #20]	; (8003d1c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003d06:	623b      	str	r3, [r7, #32]
      break;
 8003d08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d0a:	6a3b      	ldr	r3, [r7, #32]
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	372c      	adds	r7, #44	; 0x2c
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	40021000 	.word	0x40021000
 8003d1c:	007a1200 	.word	0x007a1200
 8003d20:	08009c38 	.word	0x08009c38
 8003d24:	08009c48 	.word	0x08009c48

08003d28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d2c:	4b03      	ldr	r3, [pc, #12]	; (8003d3c <HAL_RCC_GetHCLKFreq+0x14>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	20000000 	.word	0x20000000

08003d40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003d46:	f7ff ffef 	bl	8003d28 <HAL_RCC_GetHCLKFreq>
 8003d4a:	4601      	mov	r1, r0
 8003d4c:	4b0b      	ldr	r3, [pc, #44]	; (8003d7c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d54:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003d58:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	fa92 f2a2 	rbit	r2, r2
 8003d60:	603a      	str	r2, [r7, #0]
  return result;
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	fab2 f282 	clz	r2, r2
 8003d68:	b2d2      	uxtb	r2, r2
 8003d6a:	40d3      	lsrs	r3, r2
 8003d6c:	4a04      	ldr	r2, [pc, #16]	; (8003d80 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003d6e:	5cd3      	ldrb	r3, [r2, r3]
 8003d70:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003d74:	4618      	mov	r0, r3
 8003d76:	3708      	adds	r7, #8
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	40021000 	.word	0x40021000
 8003d80:	08009c30 	.word	0x08009c30

08003d84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003d8a:	f7ff ffcd 	bl	8003d28 <HAL_RCC_GetHCLKFreq>
 8003d8e:	4601      	mov	r1, r0
 8003d90:	4b0b      	ldr	r3, [pc, #44]	; (8003dc0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003d98:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003d9c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	fa92 f2a2 	rbit	r2, r2
 8003da4:	603a      	str	r2, [r7, #0]
  return result;
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	fab2 f282 	clz	r2, r2
 8003dac:	b2d2      	uxtb	r2, r2
 8003dae:	40d3      	lsrs	r3, r2
 8003db0:	4a04      	ldr	r2, [pc, #16]	; (8003dc4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003db2:	5cd3      	ldrb	r3, [r2, r3]
 8003db4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003db8:	4618      	mov	r0, r3
 8003dba:	3708      	adds	r7, #8
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	40021000 	.word	0x40021000
 8003dc4:	08009c30 	.word	0x08009c30

08003dc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b092      	sub	sp, #72	; 0x48
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f000 80d4 	beq.w	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dec:	4b4e      	ldr	r3, [pc, #312]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dee:	69db      	ldr	r3, [r3, #28]
 8003df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d10e      	bne.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003df8:	4b4b      	ldr	r3, [pc, #300]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dfa:	69db      	ldr	r3, [r3, #28]
 8003dfc:	4a4a      	ldr	r2, [pc, #296]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e02:	61d3      	str	r3, [r2, #28]
 8003e04:	4b48      	ldr	r3, [pc, #288]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e06:	69db      	ldr	r3, [r3, #28]
 8003e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e0c:	60bb      	str	r3, [r7, #8]
 8003e0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e10:	2301      	movs	r3, #1
 8003e12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e16:	4b45      	ldr	r3, [pc, #276]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d118      	bne.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e22:	4b42      	ldr	r3, [pc, #264]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a41      	ldr	r2, [pc, #260]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e2c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e2e:	f7fc fd7f 	bl	8000930 <HAL_GetTick>
 8003e32:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e34:	e008      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e36:	f7fc fd7b 	bl	8000930 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b64      	cmp	r3, #100	; 0x64
 8003e42:	d901      	bls.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e1d6      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e48:	4b38      	ldr	r3, [pc, #224]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d0f0      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e54:	4b34      	ldr	r3, [pc, #208]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e56:	6a1b      	ldr	r3, [r3, #32]
 8003e58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f000 8084 	beq.w	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d07c      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e74:	4b2c      	ldr	r3, [pc, #176]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e76:	6a1b      	ldr	r3, [r3, #32]
 8003e78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e82:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e86:	fa93 f3a3 	rbit	r3, r3
 8003e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e8e:	fab3 f383 	clz	r3, r3
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	461a      	mov	r2, r3
 8003e96:	4b26      	ldr	r3, [pc, #152]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e98:	4413      	add	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	6013      	str	r3, [r2, #0]
 8003ea2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ea6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eaa:	fa93 f3a3 	rbit	r3, r3
 8003eae:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003eb2:	fab3 f383 	clz	r3, r3
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	461a      	mov	r2, r3
 8003eba:	4b1d      	ldr	r3, [pc, #116]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ebc:	4413      	add	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003ec6:	4a18      	ldr	r2, [pc, #96]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eca:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d04b      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed6:	f7fc fd2b 	bl	8000930 <HAL_GetTick>
 8003eda:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003edc:	e00a      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ede:	f7fc fd27 	bl	8000930 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d901      	bls.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e180      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efa:	fa93 f3a3 	rbit	r3, r3
 8003efe:	627b      	str	r3, [r7, #36]	; 0x24
 8003f00:	2302      	movs	r3, #2
 8003f02:	623b      	str	r3, [r7, #32]
 8003f04:	6a3b      	ldr	r3, [r7, #32]
 8003f06:	fa93 f3a3 	rbit	r3, r3
 8003f0a:	61fb      	str	r3, [r7, #28]
  return result;
 8003f0c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f0e:	fab3 f383 	clz	r3, r3
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	095b      	lsrs	r3, r3, #5
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	f043 0302 	orr.w	r3, r3, #2
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d108      	bne.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003f22:	4b01      	ldr	r3, [pc, #4]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	e00d      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003f28:	40021000 	.word	0x40021000
 8003f2c:	40007000 	.word	0x40007000
 8003f30:	10908100 	.word	0x10908100
 8003f34:	2302      	movs	r3, #2
 8003f36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	fa93 f3a3 	rbit	r3, r3
 8003f3e:	617b      	str	r3, [r7, #20]
 8003f40:	4b9a      	ldr	r3, [pc, #616]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f44:	2202      	movs	r2, #2
 8003f46:	613a      	str	r2, [r7, #16]
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	fa92 f2a2 	rbit	r2, r2
 8003f4e:	60fa      	str	r2, [r7, #12]
  return result;
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	fab2 f282 	clz	r2, r2
 8003f56:	b2d2      	uxtb	r2, r2
 8003f58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f5c:	b2d2      	uxtb	r2, r2
 8003f5e:	f002 021f 	and.w	r2, r2, #31
 8003f62:	2101      	movs	r1, #1
 8003f64:	fa01 f202 	lsl.w	r2, r1, r2
 8003f68:	4013      	ands	r3, r2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d0b7      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003f6e:	4b8f      	ldr	r3, [pc, #572]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	498c      	ldr	r1, [pc, #560]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f80:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d105      	bne.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f88:	4b88      	ldr	r3, [pc, #544]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f8a:	69db      	ldr	r3, [r3, #28]
 8003f8c:	4a87      	ldr	r2, [pc, #540]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f92:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d008      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fa0:	4b82      	ldr	r3, [pc, #520]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa4:	f023 0203 	bic.w	r2, r3, #3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	497f      	ldr	r1, [pc, #508]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0302 	and.w	r3, r3, #2
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d008      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fbe:	4b7b      	ldr	r3, [pc, #492]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	4978      	ldr	r1, [pc, #480]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0304 	and.w	r3, r3, #4
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d008      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fdc:	4b73      	ldr	r3, [pc, #460]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	4970      	ldr	r1, [pc, #448]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0320 	and.w	r3, r3, #32
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d008      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ffa:	4b6c      	ldr	r3, [pc, #432]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffe:	f023 0210 	bic.w	r2, r3, #16
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	69db      	ldr	r3, [r3, #28]
 8004006:	4969      	ldr	r1, [pc, #420]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004008:	4313      	orrs	r3, r2
 800400a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d008      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004018:	4b64      	ldr	r3, [pc, #400]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004024:	4961      	ldr	r1, [pc, #388]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004026:	4313      	orrs	r3, r2
 8004028:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004032:	2b00      	cmp	r3, #0
 8004034:	d008      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004036:	4b5d      	ldr	r3, [pc, #372]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403a:	f023 0220 	bic.w	r2, r3, #32
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	495a      	ldr	r1, [pc, #360]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004044:	4313      	orrs	r3, r2
 8004046:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d008      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004054:	4b55      	ldr	r3, [pc, #340]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004058:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004060:	4952      	ldr	r1, [pc, #328]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004062:	4313      	orrs	r3, r2
 8004064:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0308 	and.w	r3, r3, #8
 800406e:	2b00      	cmp	r3, #0
 8004070:	d008      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004072:	4b4e      	ldr	r3, [pc, #312]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004076:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	494b      	ldr	r1, [pc, #300]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004080:	4313      	orrs	r3, r2
 8004082:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0310 	and.w	r3, r3, #16
 800408c:	2b00      	cmp	r3, #0
 800408e:	d008      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004090:	4b46      	ldr	r3, [pc, #280]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004094:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	4943      	ldr	r1, [pc, #268]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d008      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80040ae:	4b3f      	ldr	r3, [pc, #252]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ba:	493c      	ldr	r1, [pc, #240]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d008      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80040cc:	4b37      	ldr	r3, [pc, #220]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d8:	4934      	ldr	r1, [pc, #208]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d008      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80040ea:	4b30      	ldr	r3, [pc, #192]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ee:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f6:	492d      	ldr	r1, [pc, #180]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d008      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004108:	4b28      	ldr	r3, [pc, #160]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800410a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004114:	4925      	ldr	r1, [pc, #148]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004116:	4313      	orrs	r3, r2
 8004118:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d008      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004126:	4b21      	ldr	r3, [pc, #132]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004132:	491e      	ldr	r1, [pc, #120]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004134:	4313      	orrs	r3, r2
 8004136:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d008      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004144:	4b19      	ldr	r3, [pc, #100]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004148:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004150:	4916      	ldr	r1, [pc, #88]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004152:	4313      	orrs	r3, r2
 8004154:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d008      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004162:	4b12      	ldr	r3, [pc, #72]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004166:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800416e:	490f      	ldr	r1, [pc, #60]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004170:	4313      	orrs	r3, r2
 8004172:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d008      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004180:	4b0a      	ldr	r3, [pc, #40]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004184:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800418c:	4907      	ldr	r1, [pc, #28]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800418e:	4313      	orrs	r3, r2
 8004190:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00c      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800419e:	4b03      	ldr	r3, [pc, #12]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	e002      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80041aa:	bf00      	nop
 80041ac:	40021000 	.word	0x40021000
 80041b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041b2:	4913      	ldr	r1, [pc, #76]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d008      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80041c4:	4b0e      	ldr	r3, [pc, #56]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80041c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041d0:	490b      	ldr	r1, [pc, #44]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d008      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80041e2:	4b07      	ldr	r3, [pc, #28]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80041e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ee:	4904      	ldr	r1, [pc, #16]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3748      	adds	r7, #72	; 0x48
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	40021000 	.word	0x40021000

08004204 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d101      	bne.n	800421a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e073      	b.n	8004302 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	7f5b      	ldrb	r3, [r3, #29]
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b00      	cmp	r3, #0
 8004222:	d105      	bne.n	8004230 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f7fc fa08 	bl	8000640 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2202      	movs	r2, #2
 8004234:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	f003 0310 	and.w	r3, r3, #16
 8004240:	2b10      	cmp	r3, #16
 8004242:	d055      	beq.n	80042f0 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	22ca      	movs	r2, #202	; 0xca
 800424a:	625a      	str	r2, [r3, #36]	; 0x24
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2253      	movs	r2, #83	; 0x53
 8004252:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 f87f 	bl	8004358 <RTC_EnterInitMode>
 800425a:	4603      	mov	r3, r0
 800425c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800425e:	7bfb      	ldrb	r3, [r7, #15]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d12c      	bne.n	80042be <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	6812      	ldr	r2, [r2, #0]
 800426e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004272:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004276:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	6899      	ldr	r1, [r3, #8]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685a      	ldr	r2, [r3, #4]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	431a      	orrs	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	431a      	orrs	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	430a      	orrs	r2, r1
 8004294:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	68d2      	ldr	r2, [r2, #12]
 800429e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6919      	ldr	r1, [r3, #16]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	041a      	lsls	r2, r3, #16
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	430a      	orrs	r2, r1
 80042b2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 f886 	bl	80043c6 <RTC_ExitInitMode>
 80042ba:	4603      	mov	r3, r0
 80042bc:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80042be:	7bfb      	ldrb	r3, [r7, #15]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d110      	bne.n	80042e6 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80042d2:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	699a      	ldr	r2, [r3, #24]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	430a      	orrs	r2, r1
 80042e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	22ff      	movs	r2, #255	; 0xff
 80042ec:	625a      	str	r2, [r3, #36]	; 0x24
 80042ee:	e001      	b.n	80042f4 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80042f0:	2300      	movs	r3, #0
 80042f2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80042f4:	7bfb      	ldrb	r3, [r7, #15]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d102      	bne.n	8004300 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2201      	movs	r2, #1
 80042fe:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8004300:	7bfb      	ldrb	r3, [r7, #15]
}
 8004302:	4618      	mov	r0, r3
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
	...

0800430c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004314:	2300      	movs	r3, #0
 8004316:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a0d      	ldr	r2, [pc, #52]	; (8004354 <HAL_RTC_WaitForSynchro+0x48>)
 800431e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004320:	f7fc fb06 	bl	8000930 <HAL_GetTick>
 8004324:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004326:	e009      	b.n	800433c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004328:	f7fc fb02 	bl	8000930 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004336:	d901      	bls.n	800433c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e007      	b.n	800434c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	f003 0320 	and.w	r3, r3, #32
 8004346:	2b00      	cmp	r3, #0
 8004348:	d0ee      	beq.n	8004328 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	0001ff5f 	.word	0x0001ff5f

08004358 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004360:	2300      	movs	r3, #0
 8004362:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004364:	2300      	movs	r3, #0
 8004366:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004372:	2b00      	cmp	r3, #0
 8004374:	d122      	bne.n	80043bc <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68da      	ldr	r2, [r3, #12]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004384:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004386:	f7fc fad3 	bl	8000930 <HAL_GetTick>
 800438a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800438c:	e00c      	b.n	80043a8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800438e:	f7fc facf 	bl	8000930 <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800439c:	d904      	bls.n	80043a8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2204      	movs	r2, #4
 80043a2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d102      	bne.n	80043bc <RTC_EnterInitMode+0x64>
 80043b6:	7bfb      	ldrb	r3, [r7, #15]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d1e8      	bne.n	800438e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80043bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3710      	adds	r7, #16
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b084      	sub	sp, #16
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043ce:	2300      	movs	r3, #0
 80043d0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68da      	ldr	r2, [r3, #12]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043e0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f003 0320 	and.w	r3, r3, #32
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10a      	bne.n	8004406 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f7ff ff8b 	bl	800430c <HAL_RTC_WaitForSynchro>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d004      	beq.n	8004406 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2204      	movs	r2, #4
 8004400:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004406:	7bfb      	ldrb	r3, [r7, #15]
}
 8004408:	4618      	mov	r0, r3
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d101      	bne.n	8004422 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e09d      	b.n	800455e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004426:	2b00      	cmp	r3, #0
 8004428:	d108      	bne.n	800443c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004432:	d009      	beq.n	8004448 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	61da      	str	r2, [r3, #28]
 800443a:	e005      	b.n	8004448 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d106      	bne.n	8004468 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f7fc f912 	bl	800068c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2202      	movs	r2, #2
 800446c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800447e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004488:	d902      	bls.n	8004490 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800448a:	2300      	movs	r3, #0
 800448c:	60fb      	str	r3, [r7, #12]
 800448e:	e002      	b.n	8004496 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004490:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004494:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800449e:	d007      	beq.n	80044b0 <HAL_SPI_Init+0xa0>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80044a8:	d002      	beq.n	80044b0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80044c0:	431a      	orrs	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	431a      	orrs	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	695b      	ldr	r3, [r3, #20]
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	431a      	orrs	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044de:	431a      	orrs	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	69db      	ldr	r3, [r3, #28]
 80044e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044e8:	431a      	orrs	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a1b      	ldr	r3, [r3, #32]
 80044ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044f2:	ea42 0103 	orr.w	r1, r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	430a      	orrs	r2, r1
 8004504:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	0c1b      	lsrs	r3, r3, #16
 800450c:	f003 0204 	and.w	r2, r3, #4
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004514:	f003 0310 	and.w	r3, r3, #16
 8004518:	431a      	orrs	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800451e:	f003 0308 	and.w	r3, r3, #8
 8004522:	431a      	orrs	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800452c:	ea42 0103 	orr.w	r1, r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	430a      	orrs	r2, r1
 800453c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	69da      	ldr	r2, [r3, #28]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800454c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b08a      	sub	sp, #40	; 0x28
 800456a:	af00      	add	r7, sp, #0
 800456c:	60f8      	str	r0, [r7, #12]
 800456e:	60b9      	str	r1, [r7, #8]
 8004570:	607a      	str	r2, [r7, #4]
 8004572:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004574:	2301      	movs	r3, #1
 8004576:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004578:	2300      	movs	r3, #0
 800457a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004584:	2b01      	cmp	r3, #1
 8004586:	d101      	bne.n	800458c <HAL_SPI_TransmitReceive+0x26>
 8004588:	2302      	movs	r3, #2
 800458a:	e20a      	b.n	80049a2 <HAL_SPI_TransmitReceive+0x43c>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004594:	f7fc f9cc 	bl	8000930 <HAL_GetTick>
 8004598:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80045a0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80045a8:	887b      	ldrh	r3, [r7, #2]
 80045aa:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80045ac:	887b      	ldrh	r3, [r7, #2]
 80045ae:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80045b0:	7efb      	ldrb	r3, [r7, #27]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d00e      	beq.n	80045d4 <HAL_SPI_TransmitReceive+0x6e>
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045bc:	d106      	bne.n	80045cc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d102      	bne.n	80045cc <HAL_SPI_TransmitReceive+0x66>
 80045c6:	7efb      	ldrb	r3, [r7, #27]
 80045c8:	2b04      	cmp	r3, #4
 80045ca:	d003      	beq.n	80045d4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80045cc:	2302      	movs	r3, #2
 80045ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80045d2:	e1e0      	b.n	8004996 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d005      	beq.n	80045e6 <HAL_SPI_TransmitReceive+0x80>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d002      	beq.n	80045e6 <HAL_SPI_TransmitReceive+0x80>
 80045e0:	887b      	ldrh	r3, [r7, #2]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d103      	bne.n	80045ee <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80045ec:	e1d3      	b.n	8004996 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b04      	cmp	r3, #4
 80045f8:	d003      	beq.n	8004602 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2205      	movs	r2, #5
 80045fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	887a      	ldrh	r2, [r7, #2]
 8004612:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	887a      	ldrh	r2, [r7, #2]
 800461a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	887a      	ldrh	r2, [r7, #2]
 8004628:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	887a      	ldrh	r2, [r7, #2]
 800462e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2200      	movs	r2, #0
 8004634:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004644:	d802      	bhi.n	800464c <HAL_SPI_TransmitReceive+0xe6>
 8004646:	8a3b      	ldrh	r3, [r7, #16]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d908      	bls.n	800465e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	685a      	ldr	r2, [r3, #4]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800465a:	605a      	str	r2, [r3, #4]
 800465c:	e007      	b.n	800466e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	685a      	ldr	r2, [r3, #4]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800466c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004678:	2b40      	cmp	r3, #64	; 0x40
 800467a:	d007      	beq.n	800468c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800468a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004694:	f240 8081 	bls.w	800479a <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d002      	beq.n	80046a6 <HAL_SPI_TransmitReceive+0x140>
 80046a0:	8a7b      	ldrh	r3, [r7, #18]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d16d      	bne.n	8004782 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046aa:	881a      	ldrh	r2, [r3, #0]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b6:	1c9a      	adds	r2, r3, #2
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	3b01      	subs	r3, #1
 80046c4:	b29a      	uxth	r2, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046ca:	e05a      	b.n	8004782 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d11b      	bne.n	8004712 <HAL_SPI_TransmitReceive+0x1ac>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046de:	b29b      	uxth	r3, r3
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d016      	beq.n	8004712 <HAL_SPI_TransmitReceive+0x1ac>
 80046e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d113      	bne.n	8004712 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ee:	881a      	ldrh	r2, [r3, #0]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fa:	1c9a      	adds	r2, r3, #2
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004704:	b29b      	uxth	r3, r3
 8004706:	3b01      	subs	r3, #1
 8004708:	b29a      	uxth	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800470e:	2300      	movs	r3, #0
 8004710:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f003 0301 	and.w	r3, r3, #1
 800471c:	2b01      	cmp	r3, #1
 800471e:	d11c      	bne.n	800475a <HAL_SPI_TransmitReceive+0x1f4>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004726:	b29b      	uxth	r3, r3
 8004728:	2b00      	cmp	r3, #0
 800472a:	d016      	beq.n	800475a <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68da      	ldr	r2, [r3, #12]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004736:	b292      	uxth	r2, r2
 8004738:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473e:	1c9a      	adds	r2, r3, #2
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800474a:	b29b      	uxth	r3, r3
 800474c:	3b01      	subs	r3, #1
 800474e:	b29a      	uxth	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004756:	2301      	movs	r3, #1
 8004758:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800475a:	f7fc f8e9 	bl	8000930 <HAL_GetTick>
 800475e:	4602      	mov	r2, r0
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004766:	429a      	cmp	r2, r3
 8004768:	d80b      	bhi.n	8004782 <HAL_SPI_TransmitReceive+0x21c>
 800476a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004770:	d007      	beq.n	8004782 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004780:	e109      	b.n	8004996 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004786:	b29b      	uxth	r3, r3
 8004788:	2b00      	cmp	r3, #0
 800478a:	d19f      	bne.n	80046cc <HAL_SPI_TransmitReceive+0x166>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004792:	b29b      	uxth	r3, r3
 8004794:	2b00      	cmp	r3, #0
 8004796:	d199      	bne.n	80046cc <HAL_SPI_TransmitReceive+0x166>
 8004798:	e0e3      	b.n	8004962 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d003      	beq.n	80047aa <HAL_SPI_TransmitReceive+0x244>
 80047a2:	8a7b      	ldrh	r3, [r7, #18]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	f040 80cf 	bne.w	8004948 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d912      	bls.n	80047da <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b8:	881a      	ldrh	r2, [r3, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c4:	1c9a      	adds	r2, r3, #2
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	3b02      	subs	r3, #2
 80047d2:	b29a      	uxth	r2, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80047d8:	e0b6      	b.n	8004948 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	330c      	adds	r3, #12
 80047e4:	7812      	ldrb	r2, [r2, #0]
 80047e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ec:	1c5a      	adds	r2, r3, #1
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	3b01      	subs	r3, #1
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004800:	e0a2      	b.n	8004948 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f003 0302 	and.w	r3, r3, #2
 800480c:	2b02      	cmp	r3, #2
 800480e:	d134      	bne.n	800487a <HAL_SPI_TransmitReceive+0x314>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004814:	b29b      	uxth	r3, r3
 8004816:	2b00      	cmp	r3, #0
 8004818:	d02f      	beq.n	800487a <HAL_SPI_TransmitReceive+0x314>
 800481a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481c:	2b01      	cmp	r3, #1
 800481e:	d12c      	bne.n	800487a <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004824:	b29b      	uxth	r3, r3
 8004826:	2b01      	cmp	r3, #1
 8004828:	d912      	bls.n	8004850 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482e:	881a      	ldrh	r2, [r3, #0]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483a:	1c9a      	adds	r2, r3, #2
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004844:	b29b      	uxth	r3, r3
 8004846:	3b02      	subs	r3, #2
 8004848:	b29a      	uxth	r2, r3
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800484e:	e012      	b.n	8004876 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	330c      	adds	r3, #12
 800485a:	7812      	ldrb	r2, [r2, #0]
 800485c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004862:	1c5a      	adds	r2, r3, #1
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800486c:	b29b      	uxth	r3, r3
 800486e:	3b01      	subs	r3, #1
 8004870:	b29a      	uxth	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004876:	2300      	movs	r3, #0
 8004878:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f003 0301 	and.w	r3, r3, #1
 8004884:	2b01      	cmp	r3, #1
 8004886:	d148      	bne.n	800491a <HAL_SPI_TransmitReceive+0x3b4>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800488e:	b29b      	uxth	r3, r3
 8004890:	2b00      	cmp	r3, #0
 8004892:	d042      	beq.n	800491a <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800489a:	b29b      	uxth	r3, r3
 800489c:	2b01      	cmp	r3, #1
 800489e:	d923      	bls.n	80048e8 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68da      	ldr	r2, [r3, #12]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048aa:	b292      	uxth	r2, r2
 80048ac:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	1c9a      	adds	r2, r3, #2
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048be:	b29b      	uxth	r3, r3
 80048c0:	3b02      	subs	r3, #2
 80048c2:	b29a      	uxth	r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d81f      	bhi.n	8004916 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	685a      	ldr	r2, [r3, #4]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80048e4:	605a      	str	r2, [r3, #4]
 80048e6:	e016      	b.n	8004916 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f103 020c 	add.w	r2, r3, #12
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f4:	7812      	ldrb	r2, [r2, #0]
 80048f6:	b2d2      	uxtb	r2, r2
 80048f8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fe:	1c5a      	adds	r2, r3, #1
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800490a:	b29b      	uxth	r3, r3
 800490c:	3b01      	subs	r3, #1
 800490e:	b29a      	uxth	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004916:	2301      	movs	r3, #1
 8004918:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800491a:	f7fc f809 	bl	8000930 <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004926:	429a      	cmp	r2, r3
 8004928:	d803      	bhi.n	8004932 <HAL_SPI_TransmitReceive+0x3cc>
 800492a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004930:	d102      	bne.n	8004938 <HAL_SPI_TransmitReceive+0x3d2>
 8004932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004934:	2b00      	cmp	r3, #0
 8004936:	d107      	bne.n	8004948 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2201      	movs	r2, #1
 8004942:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004946:	e026      	b.n	8004996 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800494c:	b29b      	uxth	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	f47f af57 	bne.w	8004802 <HAL_SPI_TransmitReceive+0x29c>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800495a:	b29b      	uxth	r3, r3
 800495c:	2b00      	cmp	r3, #0
 800495e:	f47f af50 	bne.w	8004802 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004962:	69fa      	ldr	r2, [r7, #28]
 8004964:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f000 f93e 	bl	8004be8 <SPI_EndRxTxTransaction>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d005      	beq.n	800497e <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2220      	movs	r2, #32
 800497c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004982:	2b00      	cmp	r3, #0
 8004984:	d003      	beq.n	800498e <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800498c:	e003      	b.n	8004996 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800499e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3728      	adds	r7, #40	; 0x28
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
	...

080049ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b088      	sub	sp, #32
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	603b      	str	r3, [r7, #0]
 80049b8:	4613      	mov	r3, r2
 80049ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80049bc:	f7fb ffb8 	bl	8000930 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c4:	1a9b      	subs	r3, r3, r2
 80049c6:	683a      	ldr	r2, [r7, #0]
 80049c8:	4413      	add	r3, r2
 80049ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80049cc:	f7fb ffb0 	bl	8000930 <HAL_GetTick>
 80049d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80049d2:	4b39      	ldr	r3, [pc, #228]	; (8004ab8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	015b      	lsls	r3, r3, #5
 80049d8:	0d1b      	lsrs	r3, r3, #20
 80049da:	69fa      	ldr	r2, [r7, #28]
 80049dc:	fb02 f303 	mul.w	r3, r2, r3
 80049e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049e2:	e054      	b.n	8004a8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ea:	d050      	beq.n	8004a8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80049ec:	f7fb ffa0 	bl	8000930 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	69fa      	ldr	r2, [r7, #28]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d902      	bls.n	8004a02 <SPI_WaitFlagStateUntilTimeout+0x56>
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d13d      	bne.n	8004a7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	685a      	ldr	r2, [r3, #4]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a1a:	d111      	bne.n	8004a40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a24:	d004      	beq.n	8004a30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a2e:	d107      	bne.n	8004a40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a48:	d10f      	bne.n	8004a6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a58:	601a      	str	r2, [r3, #0]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e017      	b.n	8004aae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d101      	bne.n	8004a88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004a84:	2300      	movs	r3, #0
 8004a86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	689a      	ldr	r2, [r3, #8]
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	4013      	ands	r3, r2
 8004a98:	68ba      	ldr	r2, [r7, #8]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	bf0c      	ite	eq
 8004a9e:	2301      	moveq	r3, #1
 8004aa0:	2300      	movne	r3, #0
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	79fb      	ldrb	r3, [r7, #7]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d19b      	bne.n	80049e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3720      	adds	r7, #32
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	20000000 	.word	0x20000000

08004abc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b08a      	sub	sp, #40	; 0x28
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
 8004ac8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004aca:	2300      	movs	r3, #0
 8004acc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004ace:	f7fb ff2f 	bl	8000930 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad6:	1a9b      	subs	r3, r3, r2
 8004ad8:	683a      	ldr	r2, [r7, #0]
 8004ada:	4413      	add	r3, r2
 8004adc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004ade:	f7fb ff27 	bl	8000930 <HAL_GetTick>
 8004ae2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	330c      	adds	r3, #12
 8004aea:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004aec:	4b3d      	ldr	r3, [pc, #244]	; (8004be4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	4613      	mov	r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	4413      	add	r3, r2
 8004af6:	00da      	lsls	r2, r3, #3
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	0d1b      	lsrs	r3, r3, #20
 8004afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004afe:	fb02 f303 	mul.w	r3, r2, r3
 8004b02:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004b04:	e060      	b.n	8004bc8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004b0c:	d107      	bne.n	8004b1e <SPI_WaitFifoStateUntilTimeout+0x62>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d104      	bne.n	8004b1e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004b1c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b24:	d050      	beq.n	8004bc8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b26:	f7fb ff03 	bl	8000930 <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	6a3b      	ldr	r3, [r7, #32]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d902      	bls.n	8004b3c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d13d      	bne.n	8004bb8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685a      	ldr	r2, [r3, #4]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b4a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b54:	d111      	bne.n	8004b7a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b5e:	d004      	beq.n	8004b6a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b68:	d107      	bne.n	8004b7a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b78:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b82:	d10f      	bne.n	8004ba4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b92:	601a      	str	r2, [r3, #0]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ba2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e010      	b.n	8004bda <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d101      	bne.n	8004bc2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	689a      	ldr	r2, [r3, #8]
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d196      	bne.n	8004b06 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3728      	adds	r7, #40	; 0x28
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	20000000 	.word	0x20000000

08004be8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af02      	add	r7, sp, #8
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	9300      	str	r3, [sp, #0]
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004c00:	68f8      	ldr	r0, [r7, #12]
 8004c02:	f7ff ff5b 	bl	8004abc <SPI_WaitFifoStateUntilTimeout>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d007      	beq.n	8004c1c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c10:	f043 0220 	orr.w	r2, r3, #32
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e027      	b.n	8004c6c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	9300      	str	r3, [sp, #0]
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	2200      	movs	r2, #0
 8004c24:	2180      	movs	r1, #128	; 0x80
 8004c26:	68f8      	ldr	r0, [r7, #12]
 8004c28:	f7ff fec0 	bl	80049ac <SPI_WaitFlagStateUntilTimeout>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d007      	beq.n	8004c42 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c36:	f043 0220 	orr.w	r2, r3, #32
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e014      	b.n	8004c6c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004c4e:	68f8      	ldr	r0, [r7, #12]
 8004c50:	f7ff ff34 	bl	8004abc <SPI_WaitFifoStateUntilTimeout>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d007      	beq.n	8004c6a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c5e:	f043 0220 	orr.w	r2, r3, #32
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e000      	b.n	8004c6c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3710      	adds	r7, #16
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e040      	b.n	8004d08 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d106      	bne.n	8004c9c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f7fb fd3c 	bl	8000714 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2224      	movs	r2, #36	; 0x24
 8004ca0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f022 0201 	bic.w	r2, r2, #1
 8004cb0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 f82c 	bl	8004d10 <UART_SetConfig>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d101      	bne.n	8004cc2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e022      	b.n	8004d08 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d002      	beq.n	8004cd0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 f9f4 	bl	80050b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	685a      	ldr	r2, [r3, #4]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cde:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689a      	ldr	r2, [r3, #8]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f042 0201 	orr.w	r2, r2, #1
 8004cfe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 fa7b 	bl	80051fc <UART_CheckIdleState>
 8004d06:	4603      	mov	r3, r0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3708      	adds	r7, #8
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b088      	sub	sp, #32
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	689a      	ldr	r2, [r3, #8]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	431a      	orrs	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	431a      	orrs	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	69db      	ldr	r3, [r3, #28]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	4b92      	ldr	r3, [pc, #584]	; (8004f84 <UART_SetConfig+0x274>)
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	6812      	ldr	r2, [r2, #0]
 8004d42:	6979      	ldr	r1, [r7, #20]
 8004d44:	430b      	orrs	r3, r1
 8004d46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	68da      	ldr	r2, [r3, #12]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a1b      	ldr	r3, [r3, #32]
 8004d68:	697a      	ldr	r2, [r7, #20]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	697a      	ldr	r2, [r7, #20]
 8004d7e:	430a      	orrs	r2, r1
 8004d80:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a80      	ldr	r2, [pc, #512]	; (8004f88 <UART_SetConfig+0x278>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d120      	bne.n	8004dce <UART_SetConfig+0xbe>
 8004d8c:	4b7f      	ldr	r3, [pc, #508]	; (8004f8c <UART_SetConfig+0x27c>)
 8004d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d90:	f003 0303 	and.w	r3, r3, #3
 8004d94:	2b03      	cmp	r3, #3
 8004d96:	d817      	bhi.n	8004dc8 <UART_SetConfig+0xb8>
 8004d98:	a201      	add	r2, pc, #4	; (adr r2, 8004da0 <UART_SetConfig+0x90>)
 8004d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d9e:	bf00      	nop
 8004da0:	08004db1 	.word	0x08004db1
 8004da4:	08004dbd 	.word	0x08004dbd
 8004da8:	08004dc3 	.word	0x08004dc3
 8004dac:	08004db7 	.word	0x08004db7
 8004db0:	2301      	movs	r3, #1
 8004db2:	77fb      	strb	r3, [r7, #31]
 8004db4:	e0b5      	b.n	8004f22 <UART_SetConfig+0x212>
 8004db6:	2302      	movs	r3, #2
 8004db8:	77fb      	strb	r3, [r7, #31]
 8004dba:	e0b2      	b.n	8004f22 <UART_SetConfig+0x212>
 8004dbc:	2304      	movs	r3, #4
 8004dbe:	77fb      	strb	r3, [r7, #31]
 8004dc0:	e0af      	b.n	8004f22 <UART_SetConfig+0x212>
 8004dc2:	2308      	movs	r3, #8
 8004dc4:	77fb      	strb	r3, [r7, #31]
 8004dc6:	e0ac      	b.n	8004f22 <UART_SetConfig+0x212>
 8004dc8:	2310      	movs	r3, #16
 8004dca:	77fb      	strb	r3, [r7, #31]
 8004dcc:	e0a9      	b.n	8004f22 <UART_SetConfig+0x212>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a6f      	ldr	r2, [pc, #444]	; (8004f90 <UART_SetConfig+0x280>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d124      	bne.n	8004e22 <UART_SetConfig+0x112>
 8004dd8:	4b6c      	ldr	r3, [pc, #432]	; (8004f8c <UART_SetConfig+0x27c>)
 8004dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ddc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004de0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004de4:	d011      	beq.n	8004e0a <UART_SetConfig+0xfa>
 8004de6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004dea:	d817      	bhi.n	8004e1c <UART_SetConfig+0x10c>
 8004dec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004df0:	d011      	beq.n	8004e16 <UART_SetConfig+0x106>
 8004df2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004df6:	d811      	bhi.n	8004e1c <UART_SetConfig+0x10c>
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d003      	beq.n	8004e04 <UART_SetConfig+0xf4>
 8004dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e00:	d006      	beq.n	8004e10 <UART_SetConfig+0x100>
 8004e02:	e00b      	b.n	8004e1c <UART_SetConfig+0x10c>
 8004e04:	2300      	movs	r3, #0
 8004e06:	77fb      	strb	r3, [r7, #31]
 8004e08:	e08b      	b.n	8004f22 <UART_SetConfig+0x212>
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	77fb      	strb	r3, [r7, #31]
 8004e0e:	e088      	b.n	8004f22 <UART_SetConfig+0x212>
 8004e10:	2304      	movs	r3, #4
 8004e12:	77fb      	strb	r3, [r7, #31]
 8004e14:	e085      	b.n	8004f22 <UART_SetConfig+0x212>
 8004e16:	2308      	movs	r3, #8
 8004e18:	77fb      	strb	r3, [r7, #31]
 8004e1a:	e082      	b.n	8004f22 <UART_SetConfig+0x212>
 8004e1c:	2310      	movs	r3, #16
 8004e1e:	77fb      	strb	r3, [r7, #31]
 8004e20:	e07f      	b.n	8004f22 <UART_SetConfig+0x212>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a5b      	ldr	r2, [pc, #364]	; (8004f94 <UART_SetConfig+0x284>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d124      	bne.n	8004e76 <UART_SetConfig+0x166>
 8004e2c:	4b57      	ldr	r3, [pc, #348]	; (8004f8c <UART_SetConfig+0x27c>)
 8004e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e30:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004e34:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004e38:	d011      	beq.n	8004e5e <UART_SetConfig+0x14e>
 8004e3a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004e3e:	d817      	bhi.n	8004e70 <UART_SetConfig+0x160>
 8004e40:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004e44:	d011      	beq.n	8004e6a <UART_SetConfig+0x15a>
 8004e46:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004e4a:	d811      	bhi.n	8004e70 <UART_SetConfig+0x160>
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d003      	beq.n	8004e58 <UART_SetConfig+0x148>
 8004e50:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e54:	d006      	beq.n	8004e64 <UART_SetConfig+0x154>
 8004e56:	e00b      	b.n	8004e70 <UART_SetConfig+0x160>
 8004e58:	2300      	movs	r3, #0
 8004e5a:	77fb      	strb	r3, [r7, #31]
 8004e5c:	e061      	b.n	8004f22 <UART_SetConfig+0x212>
 8004e5e:	2302      	movs	r3, #2
 8004e60:	77fb      	strb	r3, [r7, #31]
 8004e62:	e05e      	b.n	8004f22 <UART_SetConfig+0x212>
 8004e64:	2304      	movs	r3, #4
 8004e66:	77fb      	strb	r3, [r7, #31]
 8004e68:	e05b      	b.n	8004f22 <UART_SetConfig+0x212>
 8004e6a:	2308      	movs	r3, #8
 8004e6c:	77fb      	strb	r3, [r7, #31]
 8004e6e:	e058      	b.n	8004f22 <UART_SetConfig+0x212>
 8004e70:	2310      	movs	r3, #16
 8004e72:	77fb      	strb	r3, [r7, #31]
 8004e74:	e055      	b.n	8004f22 <UART_SetConfig+0x212>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a47      	ldr	r2, [pc, #284]	; (8004f98 <UART_SetConfig+0x288>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d124      	bne.n	8004eca <UART_SetConfig+0x1ba>
 8004e80:	4b42      	ldr	r3, [pc, #264]	; (8004f8c <UART_SetConfig+0x27c>)
 8004e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e84:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004e88:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e8c:	d011      	beq.n	8004eb2 <UART_SetConfig+0x1a2>
 8004e8e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e92:	d817      	bhi.n	8004ec4 <UART_SetConfig+0x1b4>
 8004e94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e98:	d011      	beq.n	8004ebe <UART_SetConfig+0x1ae>
 8004e9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e9e:	d811      	bhi.n	8004ec4 <UART_SetConfig+0x1b4>
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d003      	beq.n	8004eac <UART_SetConfig+0x19c>
 8004ea4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ea8:	d006      	beq.n	8004eb8 <UART_SetConfig+0x1a8>
 8004eaa:	e00b      	b.n	8004ec4 <UART_SetConfig+0x1b4>
 8004eac:	2300      	movs	r3, #0
 8004eae:	77fb      	strb	r3, [r7, #31]
 8004eb0:	e037      	b.n	8004f22 <UART_SetConfig+0x212>
 8004eb2:	2302      	movs	r3, #2
 8004eb4:	77fb      	strb	r3, [r7, #31]
 8004eb6:	e034      	b.n	8004f22 <UART_SetConfig+0x212>
 8004eb8:	2304      	movs	r3, #4
 8004eba:	77fb      	strb	r3, [r7, #31]
 8004ebc:	e031      	b.n	8004f22 <UART_SetConfig+0x212>
 8004ebe:	2308      	movs	r3, #8
 8004ec0:	77fb      	strb	r3, [r7, #31]
 8004ec2:	e02e      	b.n	8004f22 <UART_SetConfig+0x212>
 8004ec4:	2310      	movs	r3, #16
 8004ec6:	77fb      	strb	r3, [r7, #31]
 8004ec8:	e02b      	b.n	8004f22 <UART_SetConfig+0x212>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a33      	ldr	r2, [pc, #204]	; (8004f9c <UART_SetConfig+0x28c>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d124      	bne.n	8004f1e <UART_SetConfig+0x20e>
 8004ed4:	4b2d      	ldr	r3, [pc, #180]	; (8004f8c <UART_SetConfig+0x27c>)
 8004ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004edc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004ee0:	d011      	beq.n	8004f06 <UART_SetConfig+0x1f6>
 8004ee2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004ee6:	d817      	bhi.n	8004f18 <UART_SetConfig+0x208>
 8004ee8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004eec:	d011      	beq.n	8004f12 <UART_SetConfig+0x202>
 8004eee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ef2:	d811      	bhi.n	8004f18 <UART_SetConfig+0x208>
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d003      	beq.n	8004f00 <UART_SetConfig+0x1f0>
 8004ef8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004efc:	d006      	beq.n	8004f0c <UART_SetConfig+0x1fc>
 8004efe:	e00b      	b.n	8004f18 <UART_SetConfig+0x208>
 8004f00:	2300      	movs	r3, #0
 8004f02:	77fb      	strb	r3, [r7, #31]
 8004f04:	e00d      	b.n	8004f22 <UART_SetConfig+0x212>
 8004f06:	2302      	movs	r3, #2
 8004f08:	77fb      	strb	r3, [r7, #31]
 8004f0a:	e00a      	b.n	8004f22 <UART_SetConfig+0x212>
 8004f0c:	2304      	movs	r3, #4
 8004f0e:	77fb      	strb	r3, [r7, #31]
 8004f10:	e007      	b.n	8004f22 <UART_SetConfig+0x212>
 8004f12:	2308      	movs	r3, #8
 8004f14:	77fb      	strb	r3, [r7, #31]
 8004f16:	e004      	b.n	8004f22 <UART_SetConfig+0x212>
 8004f18:	2310      	movs	r3, #16
 8004f1a:	77fb      	strb	r3, [r7, #31]
 8004f1c:	e001      	b.n	8004f22 <UART_SetConfig+0x212>
 8004f1e:	2310      	movs	r3, #16
 8004f20:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	69db      	ldr	r3, [r3, #28]
 8004f26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f2a:	d16b      	bne.n	8005004 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8004f2c:	7ffb      	ldrb	r3, [r7, #31]
 8004f2e:	2b08      	cmp	r3, #8
 8004f30:	d838      	bhi.n	8004fa4 <UART_SetConfig+0x294>
 8004f32:	a201      	add	r2, pc, #4	; (adr r2, 8004f38 <UART_SetConfig+0x228>)
 8004f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f38:	08004f5d 	.word	0x08004f5d
 8004f3c:	08004f65 	.word	0x08004f65
 8004f40:	08004f6d 	.word	0x08004f6d
 8004f44:	08004fa5 	.word	0x08004fa5
 8004f48:	08004f73 	.word	0x08004f73
 8004f4c:	08004fa5 	.word	0x08004fa5
 8004f50:	08004fa5 	.word	0x08004fa5
 8004f54:	08004fa5 	.word	0x08004fa5
 8004f58:	08004f7b 	.word	0x08004f7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f5c:	f7fe fef0 	bl	8003d40 <HAL_RCC_GetPCLK1Freq>
 8004f60:	61b8      	str	r0, [r7, #24]
        break;
 8004f62:	e024      	b.n	8004fae <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f64:	f7fe ff0e 	bl	8003d84 <HAL_RCC_GetPCLK2Freq>
 8004f68:	61b8      	str	r0, [r7, #24]
        break;
 8004f6a:	e020      	b.n	8004fae <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f6c:	4b0c      	ldr	r3, [pc, #48]	; (8004fa0 <UART_SetConfig+0x290>)
 8004f6e:	61bb      	str	r3, [r7, #24]
        break;
 8004f70:	e01d      	b.n	8004fae <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f72:	f7fe fe6f 	bl	8003c54 <HAL_RCC_GetSysClockFreq>
 8004f76:	61b8      	str	r0, [r7, #24]
        break;
 8004f78:	e019      	b.n	8004fae <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f7e:	61bb      	str	r3, [r7, #24]
        break;
 8004f80:	e015      	b.n	8004fae <UART_SetConfig+0x29e>
 8004f82:	bf00      	nop
 8004f84:	efff69f3 	.word	0xefff69f3
 8004f88:	40013800 	.word	0x40013800
 8004f8c:	40021000 	.word	0x40021000
 8004f90:	40004400 	.word	0x40004400
 8004f94:	40004800 	.word	0x40004800
 8004f98:	40004c00 	.word	0x40004c00
 8004f9c:	40005000 	.word	0x40005000
 8004fa0:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	77bb      	strb	r3, [r7, #30]
        break;
 8004fac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d073      	beq.n	800509c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	005a      	lsls	r2, r3, #1
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	085b      	lsrs	r3, r3, #1
 8004fbe:	441a      	add	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	2b0f      	cmp	r3, #15
 8004fce:	d916      	bls.n	8004ffe <UART_SetConfig+0x2ee>
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fd6:	d212      	bcs.n	8004ffe <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	f023 030f 	bic.w	r3, r3, #15
 8004fe0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	085b      	lsrs	r3, r3, #1
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	f003 0307 	and.w	r3, r3, #7
 8004fec:	b29a      	uxth	r2, r3
 8004fee:	89fb      	ldrh	r3, [r7, #14]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	89fa      	ldrh	r2, [r7, #14]
 8004ffa:	60da      	str	r2, [r3, #12]
 8004ffc:	e04e      	b.n	800509c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	77bb      	strb	r3, [r7, #30]
 8005002:	e04b      	b.n	800509c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005004:	7ffb      	ldrb	r3, [r7, #31]
 8005006:	2b08      	cmp	r3, #8
 8005008:	d827      	bhi.n	800505a <UART_SetConfig+0x34a>
 800500a:	a201      	add	r2, pc, #4	; (adr r2, 8005010 <UART_SetConfig+0x300>)
 800500c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005010:	08005035 	.word	0x08005035
 8005014:	0800503d 	.word	0x0800503d
 8005018:	08005045 	.word	0x08005045
 800501c:	0800505b 	.word	0x0800505b
 8005020:	0800504b 	.word	0x0800504b
 8005024:	0800505b 	.word	0x0800505b
 8005028:	0800505b 	.word	0x0800505b
 800502c:	0800505b 	.word	0x0800505b
 8005030:	08005053 	.word	0x08005053
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005034:	f7fe fe84 	bl	8003d40 <HAL_RCC_GetPCLK1Freq>
 8005038:	61b8      	str	r0, [r7, #24]
        break;
 800503a:	e013      	b.n	8005064 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800503c:	f7fe fea2 	bl	8003d84 <HAL_RCC_GetPCLK2Freq>
 8005040:	61b8      	str	r0, [r7, #24]
        break;
 8005042:	e00f      	b.n	8005064 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005044:	4b1b      	ldr	r3, [pc, #108]	; (80050b4 <UART_SetConfig+0x3a4>)
 8005046:	61bb      	str	r3, [r7, #24]
        break;
 8005048:	e00c      	b.n	8005064 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800504a:	f7fe fe03 	bl	8003c54 <HAL_RCC_GetSysClockFreq>
 800504e:	61b8      	str	r0, [r7, #24]
        break;
 8005050:	e008      	b.n	8005064 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005052:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005056:	61bb      	str	r3, [r7, #24]
        break;
 8005058:	e004      	b.n	8005064 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800505a:	2300      	movs	r3, #0
 800505c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	77bb      	strb	r3, [r7, #30]
        break;
 8005062:	bf00      	nop
    }

    if (pclk != 0U)
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d018      	beq.n	800509c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	085a      	lsrs	r2, r3, #1
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	441a      	add	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	fbb2 f3f3 	udiv	r3, r2, r3
 800507c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	2b0f      	cmp	r3, #15
 8005082:	d909      	bls.n	8005098 <UART_SetConfig+0x388>
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800508a:	d205      	bcs.n	8005098 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	b29a      	uxth	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	60da      	str	r2, [r3, #12]
 8005096:	e001      	b.n	800509c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80050a8:	7fbb      	ldrb	r3, [r7, #30]
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3720      	adds	r7, #32
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	007a1200 	.word	0x007a1200

080050b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c4:	f003 0301 	and.w	r3, r3, #1
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00a      	beq.n	80050e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	430a      	orrs	r2, r1
 80050e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e6:	f003 0302 	and.w	r3, r3, #2
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00a      	beq.n	8005104 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	430a      	orrs	r2, r1
 8005102:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005108:	f003 0304 	and.w	r3, r3, #4
 800510c:	2b00      	cmp	r3, #0
 800510e:	d00a      	beq.n	8005126 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	430a      	orrs	r2, r1
 8005124:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512a:	f003 0308 	and.w	r3, r3, #8
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00a      	beq.n	8005148 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	430a      	orrs	r2, r1
 8005146:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514c:	f003 0310 	and.w	r3, r3, #16
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00a      	beq.n	800516a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	430a      	orrs	r2, r1
 8005168:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516e:	f003 0320 	and.w	r3, r3, #32
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00a      	beq.n	800518c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	430a      	orrs	r2, r1
 800518a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005194:	2b00      	cmp	r3, #0
 8005196:	d01a      	beq.n	80051ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	430a      	orrs	r2, r1
 80051ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051b6:	d10a      	bne.n	80051ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	430a      	orrs	r2, r1
 80051cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00a      	beq.n	80051f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	430a      	orrs	r2, r1
 80051ee:	605a      	str	r2, [r3, #4]
  }
}
 80051f0:	bf00      	nop
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b098      	sub	sp, #96	; 0x60
 8005200:	af02      	add	r7, sp, #8
 8005202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800520c:	f7fb fb90 	bl	8000930 <HAL_GetTick>
 8005210:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0308 	and.w	r3, r3, #8
 800521c:	2b08      	cmp	r3, #8
 800521e:	d12e      	bne.n	800527e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005220:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005224:	9300      	str	r3, [sp, #0]
 8005226:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005228:	2200      	movs	r2, #0
 800522a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f88c 	bl	800534c <UART_WaitOnFlagUntilTimeout>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d021      	beq.n	800527e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005242:	e853 3f00 	ldrex	r3, [r3]
 8005246:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800524a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800524e:	653b      	str	r3, [r7, #80]	; 0x50
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	461a      	mov	r2, r3
 8005256:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005258:	647b      	str	r3, [r7, #68]	; 0x44
 800525a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800525e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005260:	e841 2300 	strex	r3, r2, [r1]
 8005264:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1e6      	bne.n	800523a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2220      	movs	r2, #32
 8005270:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e062      	b.n	8005344 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0304 	and.w	r3, r3, #4
 8005288:	2b04      	cmp	r3, #4
 800528a:	d149      	bne.n	8005320 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800528c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005290:	9300      	str	r3, [sp, #0]
 8005292:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005294:	2200      	movs	r2, #0
 8005296:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 f856 	bl	800534c <UART_WaitOnFlagUntilTimeout>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d03c      	beq.n	8005320 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ae:	e853 3f00 	ldrex	r3, [r3]
 80052b2:	623b      	str	r3, [r7, #32]
   return(result);
 80052b4:	6a3b      	ldr	r3, [r7, #32]
 80052b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	461a      	mov	r2, r3
 80052c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052c4:	633b      	str	r3, [r7, #48]	; 0x30
 80052c6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052cc:	e841 2300 	strex	r3, r2, [r1]
 80052d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80052d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1e6      	bne.n	80052a6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	3308      	adds	r3, #8
 80052de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	e853 3f00 	ldrex	r3, [r3]
 80052e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f023 0301 	bic.w	r3, r3, #1
 80052ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	3308      	adds	r3, #8
 80052f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052f8:	61fa      	str	r2, [r7, #28]
 80052fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fc:	69b9      	ldr	r1, [r7, #24]
 80052fe:	69fa      	ldr	r2, [r7, #28]
 8005300:	e841 2300 	strex	r3, r2, [r1]
 8005304:	617b      	str	r3, [r7, #20]
   return(result);
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d1e5      	bne.n	80052d8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2220      	movs	r2, #32
 8005310:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e011      	b.n	8005344 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2220      	movs	r2, #32
 8005324:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2220      	movs	r2, #32
 800532a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3758      	adds	r7, #88	; 0x58
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	603b      	str	r3, [r7, #0]
 8005358:	4613      	mov	r3, r2
 800535a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800535c:	e049      	b.n	80053f2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005364:	d045      	beq.n	80053f2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005366:	f7fb fae3 	bl	8000930 <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	69ba      	ldr	r2, [r7, #24]
 8005372:	429a      	cmp	r2, r3
 8005374:	d302      	bcc.n	800537c <UART_WaitOnFlagUntilTimeout+0x30>
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d101      	bne.n	8005380 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e048      	b.n	8005412 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0304 	and.w	r3, r3, #4
 800538a:	2b00      	cmp	r3, #0
 800538c:	d031      	beq.n	80053f2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	69db      	ldr	r3, [r3, #28]
 8005394:	f003 0308 	and.w	r3, r3, #8
 8005398:	2b08      	cmp	r3, #8
 800539a:	d110      	bne.n	80053be <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2208      	movs	r2, #8
 80053a2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f000 f838 	bl	800541a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2208      	movs	r2, #8
 80053ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e029      	b.n	8005412 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	69db      	ldr	r3, [r3, #28]
 80053c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053cc:	d111      	bne.n	80053f2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053d8:	68f8      	ldr	r0, [r7, #12]
 80053da:	f000 f81e 	bl	800541a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2220      	movs	r2, #32
 80053e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e00f      	b.n	8005412 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	69da      	ldr	r2, [r3, #28]
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	4013      	ands	r3, r2
 80053fc:	68ba      	ldr	r2, [r7, #8]
 80053fe:	429a      	cmp	r2, r3
 8005400:	bf0c      	ite	eq
 8005402:	2301      	moveq	r3, #1
 8005404:	2300      	movne	r3, #0
 8005406:	b2db      	uxtb	r3, r3
 8005408:	461a      	mov	r2, r3
 800540a:	79fb      	ldrb	r3, [r7, #7]
 800540c:	429a      	cmp	r2, r3
 800540e:	d0a6      	beq.n	800535e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}

0800541a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800541a:	b480      	push	{r7}
 800541c:	b095      	sub	sp, #84	; 0x54
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800542a:	e853 3f00 	ldrex	r3, [r3]
 800542e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005432:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005436:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	461a      	mov	r2, r3
 800543e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005440:	643b      	str	r3, [r7, #64]	; 0x40
 8005442:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005444:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005446:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005448:	e841 2300 	strex	r3, r2, [r1]
 800544c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800544e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005450:	2b00      	cmp	r3, #0
 8005452:	d1e6      	bne.n	8005422 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	3308      	adds	r3, #8
 800545a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545c:	6a3b      	ldr	r3, [r7, #32]
 800545e:	e853 3f00 	ldrex	r3, [r3]
 8005462:	61fb      	str	r3, [r7, #28]
   return(result);
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	f023 0301 	bic.w	r3, r3, #1
 800546a:	64bb      	str	r3, [r7, #72]	; 0x48
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	3308      	adds	r3, #8
 8005472:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005474:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005476:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005478:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800547a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800547c:	e841 2300 	strex	r3, r2, [r1]
 8005480:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005484:	2b00      	cmp	r3, #0
 8005486:	d1e5      	bne.n	8005454 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800548c:	2b01      	cmp	r3, #1
 800548e:	d118      	bne.n	80054c2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	e853 3f00 	ldrex	r3, [r3]
 800549c:	60bb      	str	r3, [r7, #8]
   return(result);
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	f023 0310 	bic.w	r3, r3, #16
 80054a4:	647b      	str	r3, [r7, #68]	; 0x44
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	461a      	mov	r2, r3
 80054ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054ae:	61bb      	str	r3, [r7, #24]
 80054b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b2:	6979      	ldr	r1, [r7, #20]
 80054b4:	69ba      	ldr	r2, [r7, #24]
 80054b6:	e841 2300 	strex	r3, r2, [r1]
 80054ba:	613b      	str	r3, [r7, #16]
   return(result);
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1e6      	bne.n	8005490 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2220      	movs	r2, #32
 80054c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80054d6:	bf00      	nop
 80054d8:	3754      	adds	r7, #84	; 0x54
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr

080054e2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80054e2:	b480      	push	{r7}
 80054e4:	b085      	sub	sp, #20
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80054f2:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80054f6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	b29a      	uxth	r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3714      	adds	r7, #20
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005518:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800551c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005524:	b29a      	uxth	r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	b29b      	uxth	r3, r3
 800552a:	43db      	mvns	r3, r3
 800552c:	b29b      	uxth	r3, r3
 800552e:	4013      	ands	r3, r2
 8005530:	b29a      	uxth	r2, r3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3714      	adds	r7, #20
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr

08005546 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005546:	b084      	sub	sp, #16
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	f107 0014 	add.w	r0, r7, #20
 8005554:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	370c      	adds	r7, #12
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	b004      	add	sp, #16
 8005586:	4770      	bx	lr

08005588 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005588:	b480      	push	{r7}
 800558a:	b09d      	sub	sp, #116	; 0x74
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005592:	2300      	movs	r3, #0
 8005594:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	4413      	add	r3, r2
 80055a2:	881b      	ldrh	r3, [r3, #0]
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80055aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ae:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	78db      	ldrb	r3, [r3, #3]
 80055b6:	2b03      	cmp	r3, #3
 80055b8:	d81f      	bhi.n	80055fa <USB_ActivateEndpoint+0x72>
 80055ba:	a201      	add	r2, pc, #4	; (adr r2, 80055c0 <USB_ActivateEndpoint+0x38>)
 80055bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c0:	080055d1 	.word	0x080055d1
 80055c4:	080055ed 	.word	0x080055ed
 80055c8:	08005603 	.word	0x08005603
 80055cc:	080055df 	.word	0x080055df
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80055d0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80055d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80055d8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80055dc:	e012      	b.n	8005604 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80055de:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80055e2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80055e6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80055ea:	e00b      	b.n	8005604 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80055ec:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80055f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80055f4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80055f8:	e004      	b.n	8005604 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005600:	e000      	b.n	8005604 <USB_ActivateEndpoint+0x7c>
      break;
 8005602:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	441a      	add	r2, r3
 800560e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005612:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005616:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800561a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800561e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005622:	b29b      	uxth	r3, r3
 8005624:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	4413      	add	r3, r2
 8005630:	881b      	ldrh	r3, [r3, #0]
 8005632:	b29b      	uxth	r3, r3
 8005634:	b21b      	sxth	r3, r3
 8005636:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800563a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800563e:	b21a      	sxth	r2, r3
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	b21b      	sxth	r3, r3
 8005646:	4313      	orrs	r3, r2
 8005648:	b21b      	sxth	r3, r3
 800564a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	441a      	add	r2, r3
 8005658:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800565c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005660:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005664:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800566c:	b29b      	uxth	r3, r3
 800566e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	7b1b      	ldrb	r3, [r3, #12]
 8005674:	2b00      	cmp	r3, #0
 8005676:	f040 8178 	bne.w	800596a <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	785b      	ldrb	r3, [r3, #1]
 800567e:	2b00      	cmp	r3, #0
 8005680:	f000 8084 	beq.w	800578c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	61bb      	str	r3, [r7, #24]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800568e:	b29b      	uxth	r3, r3
 8005690:	461a      	mov	r2, r3
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	4413      	add	r3, r2
 8005696:	61bb      	str	r3, [r7, #24]
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	00da      	lsls	r2, r3, #3
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	4413      	add	r3, r2
 80056a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056a6:	617b      	str	r3, [r7, #20]
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	88db      	ldrh	r3, [r3, #6]
 80056ac:	085b      	lsrs	r3, r3, #1
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	005b      	lsls	r3, r3, #1
 80056b2:	b29a      	uxth	r2, r3
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	4413      	add	r3, r2
 80056c2:	881b      	ldrh	r3, [r3, #0]
 80056c4:	827b      	strh	r3, [r7, #18]
 80056c6:	8a7b      	ldrh	r3, [r7, #18]
 80056c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d01b      	beq.n	8005708 <USB_ActivateEndpoint+0x180>
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	4413      	add	r3, r2
 80056da:	881b      	ldrh	r3, [r3, #0]
 80056dc:	b29b      	uxth	r3, r3
 80056de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056e6:	823b      	strh	r3, [r7, #16]
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	441a      	add	r2, r3
 80056f2:	8a3b      	ldrh	r3, [r7, #16]
 80056f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005700:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005704:	b29b      	uxth	r3, r3
 8005706:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	78db      	ldrb	r3, [r3, #3]
 800570c:	2b01      	cmp	r3, #1
 800570e:	d020      	beq.n	8005752 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	4413      	add	r3, r2
 800571a:	881b      	ldrh	r3, [r3, #0]
 800571c:	b29b      	uxth	r3, r3
 800571e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005722:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005726:	81bb      	strh	r3, [r7, #12]
 8005728:	89bb      	ldrh	r3, [r7, #12]
 800572a:	f083 0320 	eor.w	r3, r3, #32
 800572e:	81bb      	strh	r3, [r7, #12]
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	441a      	add	r2, r3
 800573a:	89bb      	ldrh	r3, [r7, #12]
 800573c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005740:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005744:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800574c:	b29b      	uxth	r3, r3
 800574e:	8013      	strh	r3, [r2, #0]
 8005750:	e2d5      	b.n	8005cfe <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	4413      	add	r3, r2
 800575c:	881b      	ldrh	r3, [r3, #0]
 800575e:	b29b      	uxth	r3, r3
 8005760:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005764:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005768:	81fb      	strh	r3, [r7, #14]
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	441a      	add	r2, r3
 8005774:	89fb      	ldrh	r3, [r7, #14]
 8005776:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800577a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800577e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005786:	b29b      	uxth	r3, r3
 8005788:	8013      	strh	r3, [r2, #0]
 800578a:	e2b8      	b.n	8005cfe <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	633b      	str	r3, [r7, #48]	; 0x30
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005796:	b29b      	uxth	r3, r3
 8005798:	461a      	mov	r2, r3
 800579a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579c:	4413      	add	r3, r2
 800579e:	633b      	str	r3, [r7, #48]	; 0x30
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	00da      	lsls	r2, r3, #3
 80057a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a8:	4413      	add	r3, r2
 80057aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80057ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	88db      	ldrh	r3, [r3, #6]
 80057b4:	085b      	lsrs	r3, r3, #1
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	005b      	lsls	r3, r3, #1
 80057ba:	b29a      	uxth	r2, r3
 80057bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057be:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	461a      	mov	r2, r3
 80057ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d0:	4413      	add	r3, r2
 80057d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	00da      	lsls	r2, r3, #3
 80057da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057dc:	4413      	add	r3, r2
 80057de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80057e2:	627b      	str	r3, [r7, #36]	; 0x24
 80057e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e6:	881b      	ldrh	r3, [r3, #0]
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f2:	801a      	strh	r2, [r3, #0]
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	2b3e      	cmp	r3, #62	; 0x3e
 80057fa:	d91d      	bls.n	8005838 <USB_ActivateEndpoint+0x2b0>
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	095b      	lsrs	r3, r3, #5
 8005802:	66bb      	str	r3, [r7, #104]	; 0x68
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	f003 031f 	and.w	r3, r3, #31
 800580c:	2b00      	cmp	r3, #0
 800580e:	d102      	bne.n	8005816 <USB_ActivateEndpoint+0x28e>
 8005810:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005812:	3b01      	subs	r3, #1
 8005814:	66bb      	str	r3, [r7, #104]	; 0x68
 8005816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005818:	881b      	ldrh	r3, [r3, #0]
 800581a:	b29a      	uxth	r2, r3
 800581c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800581e:	b29b      	uxth	r3, r3
 8005820:	029b      	lsls	r3, r3, #10
 8005822:	b29b      	uxth	r3, r3
 8005824:	4313      	orrs	r3, r2
 8005826:	b29b      	uxth	r3, r3
 8005828:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800582c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005830:	b29a      	uxth	r2, r3
 8005832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005834:	801a      	strh	r2, [r3, #0]
 8005836:	e026      	b.n	8005886 <USB_ActivateEndpoint+0x2fe>
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d10a      	bne.n	8005856 <USB_ActivateEndpoint+0x2ce>
 8005840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005842:	881b      	ldrh	r3, [r3, #0]
 8005844:	b29b      	uxth	r3, r3
 8005846:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800584a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800584e:	b29a      	uxth	r2, r3
 8005850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005852:	801a      	strh	r2, [r3, #0]
 8005854:	e017      	b.n	8005886 <USB_ActivateEndpoint+0x2fe>
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	085b      	lsrs	r3, r3, #1
 800585c:	66bb      	str	r3, [r7, #104]	; 0x68
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	f003 0301 	and.w	r3, r3, #1
 8005866:	2b00      	cmp	r3, #0
 8005868:	d002      	beq.n	8005870 <USB_ActivateEndpoint+0x2e8>
 800586a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800586c:	3301      	adds	r3, #1
 800586e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005872:	881b      	ldrh	r3, [r3, #0]
 8005874:	b29a      	uxth	r2, r3
 8005876:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005878:	b29b      	uxth	r3, r3
 800587a:	029b      	lsls	r3, r3, #10
 800587c:	b29b      	uxth	r3, r3
 800587e:	4313      	orrs	r3, r2
 8005880:	b29a      	uxth	r2, r3
 8005882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005884:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	4413      	add	r3, r2
 8005890:	881b      	ldrh	r3, [r3, #0]
 8005892:	847b      	strh	r3, [r7, #34]	; 0x22
 8005894:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005896:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d01b      	beq.n	80058d6 <USB_ActivateEndpoint+0x34e>
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	4413      	add	r3, r2
 80058a8:	881b      	ldrh	r3, [r3, #0]
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b4:	843b      	strh	r3, [r7, #32]
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	441a      	add	r2, r3
 80058c0:	8c3b      	ldrh	r3, [r7, #32]
 80058c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80058ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d124      	bne.n	8005928 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	4413      	add	r3, r2
 80058e8:	881b      	ldrh	r3, [r3, #0]
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058f4:	83bb      	strh	r3, [r7, #28]
 80058f6:	8bbb      	ldrh	r3, [r7, #28]
 80058f8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80058fc:	83bb      	strh	r3, [r7, #28]
 80058fe:	8bbb      	ldrh	r3, [r7, #28]
 8005900:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005904:	83bb      	strh	r3, [r7, #28]
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	441a      	add	r2, r3
 8005910:	8bbb      	ldrh	r3, [r7, #28]
 8005912:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005916:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800591a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800591e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005922:	b29b      	uxth	r3, r3
 8005924:	8013      	strh	r3, [r2, #0]
 8005926:	e1ea      	b.n	8005cfe <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	4413      	add	r3, r2
 8005932:	881b      	ldrh	r3, [r3, #0]
 8005934:	b29b      	uxth	r3, r3
 8005936:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800593a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800593e:	83fb      	strh	r3, [r7, #30]
 8005940:	8bfb      	ldrh	r3, [r7, #30]
 8005942:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005946:	83fb      	strh	r3, [r7, #30]
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	441a      	add	r2, r3
 8005952:	8bfb      	ldrh	r3, [r7, #30]
 8005954:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005958:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800595c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005964:	b29b      	uxth	r3, r3
 8005966:	8013      	strh	r3, [r2, #0]
 8005968:	e1c9      	b.n	8005cfe <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	78db      	ldrb	r3, [r3, #3]
 800596e:	2b02      	cmp	r3, #2
 8005970:	d11e      	bne.n	80059b0 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	4413      	add	r3, r2
 800597c:	881b      	ldrh	r3, [r3, #0]
 800597e:	b29b      	uxth	r3, r3
 8005980:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005984:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005988:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	441a      	add	r2, r3
 8005996:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800599a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800599e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059a2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80059a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	8013      	strh	r3, [r2, #0]
 80059ae:	e01d      	b.n	80059ec <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	4413      	add	r3, r2
 80059ba:	881b      	ldrh	r3, [r3, #0]
 80059bc:	b29b      	uxth	r3, r3
 80059be:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80059c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059c6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	441a      	add	r2, r3
 80059d4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80059d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	461a      	mov	r2, r3
 80059fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059fc:	4413      	add	r3, r2
 80059fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	00da      	lsls	r2, r3, #3
 8005a06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a08:	4413      	add	r3, r2
 8005a0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a0e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	891b      	ldrh	r3, [r3, #8]
 8005a14:	085b      	lsrs	r3, r3, #1
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	005b      	lsls	r3, r3, #1
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a1e:	801a      	strh	r2, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	657b      	str	r3, [r7, #84]	; 0x54
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a30:	4413      	add	r3, r2
 8005a32:	657b      	str	r3, [r7, #84]	; 0x54
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	00da      	lsls	r2, r3, #3
 8005a3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a3c:	4413      	add	r3, r2
 8005a3e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a42:	653b      	str	r3, [r7, #80]	; 0x50
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	895b      	ldrh	r3, [r3, #10]
 8005a48:	085b      	lsrs	r3, r3, #1
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	005b      	lsls	r3, r3, #1
 8005a4e:	b29a      	uxth	r2, r3
 8005a50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a52:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	785b      	ldrb	r3, [r3, #1]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f040 8093 	bne.w	8005b84 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	4413      	add	r3, r2
 8005a68:	881b      	ldrh	r3, [r3, #0]
 8005a6a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005a6e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005a72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d01b      	beq.n	8005ab2 <USB_ActivateEndpoint+0x52a>
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	4413      	add	r3, r2
 8005a84:	881b      	ldrh	r3, [r3, #0]
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a90:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	441a      	add	r2, r3
 8005a9c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005a9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005aa6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005aaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	4413      	add	r3, r2
 8005abc:	881b      	ldrh	r3, [r3, #0]
 8005abe:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005ac0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d01b      	beq.n	8005b02 <USB_ActivateEndpoint+0x57a>
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	4413      	add	r3, r2
 8005ad4:	881b      	ldrh	r3, [r3, #0]
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005adc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ae0:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	441a      	add	r2, r3
 8005aec:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005aee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005af2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005af6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005afa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	4413      	add	r3, r2
 8005b0c:	881b      	ldrh	r3, [r3, #0]
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b18:	873b      	strh	r3, [r7, #56]	; 0x38
 8005b1a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005b1c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005b20:	873b      	strh	r3, [r7, #56]	; 0x38
 8005b22:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005b24:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005b28:	873b      	strh	r3, [r7, #56]	; 0x38
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	441a      	add	r2, r3
 8005b34:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005b36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	4413      	add	r3, r2
 8005b54:	881b      	ldrh	r3, [r3, #0]
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b60:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	441a      	add	r2, r3
 8005b6c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005b6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	8013      	strh	r3, [r2, #0]
 8005b82:	e0bc      	b.n	8005cfe <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	4413      	add	r3, r2
 8005b8e:	881b      	ldrh	r3, [r3, #0]
 8005b90:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005b94:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d01d      	beq.n	8005bdc <USB_ActivateEndpoint+0x654>
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	4413      	add	r3, r2
 8005baa:	881b      	ldrh	r3, [r3, #0]
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	441a      	add	r2, r3
 8005bc4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005bc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	4413      	add	r3, r2
 8005be6:	881b      	ldrh	r3, [r3, #0]
 8005be8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005bec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d01d      	beq.n	8005c34 <USB_ActivateEndpoint+0x6ac>
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	4413      	add	r3, r2
 8005c02:	881b      	ldrh	r3, [r3, #0]
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c0e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	441a      	add	r2, r3
 8005c1c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005c20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	78db      	ldrb	r3, [r3, #3]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d024      	beq.n	8005c86 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	4413      	add	r3, r2
 8005c46:	881b      	ldrh	r3, [r3, #0]
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c52:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005c56:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005c5a:	f083 0320 	eor.w	r3, r3, #32
 8005c5e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	441a      	add	r2, r3
 8005c6c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005c70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	8013      	strh	r3, [r2, #0]
 8005c84:	e01d      	b.n	8005cc2 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	4413      	add	r3, r2
 8005c90:	881b      	ldrh	r3, [r3, #0]
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c9c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	441a      	add	r2, r3
 8005caa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005cae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	4413      	add	r3, r2
 8005ccc:	881b      	ldrh	r3, [r3, #0]
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cd8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	441a      	add	r2, r3
 8005ce6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005cea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005cfe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3774      	adds	r7, #116	; 0x74
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop

08005d10 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b08d      	sub	sp, #52	; 0x34
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	7b1b      	ldrb	r3, [r3, #12]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	f040 808e 	bne.w	8005e40 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	785b      	ldrb	r3, [r3, #1]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d044      	beq.n	8005db6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	4413      	add	r3, r2
 8005d36:	881b      	ldrh	r3, [r3, #0]
 8005d38:	81bb      	strh	r3, [r7, #12]
 8005d3a:	89bb      	ldrh	r3, [r7, #12]
 8005d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d01b      	beq.n	8005d7c <USB_DeactivateEndpoint+0x6c>
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	4413      	add	r3, r2
 8005d4e:	881b      	ldrh	r3, [r3, #0]
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d5a:	817b      	strh	r3, [r7, #10]
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	441a      	add	r2, r3
 8005d66:	897b      	ldrh	r3, [r7, #10]
 8005d68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d74:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	4413      	add	r3, r2
 8005d86:	881b      	ldrh	r3, [r3, #0]
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d92:	813b      	strh	r3, [r7, #8]
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	441a      	add	r2, r3
 8005d9e:	893b      	ldrh	r3, [r7, #8]
 8005da0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005da4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005da8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	8013      	strh	r3, [r2, #0]
 8005db4:	e192      	b.n	80060dc <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	4413      	add	r3, r2
 8005dc0:	881b      	ldrh	r3, [r3, #0]
 8005dc2:	827b      	strh	r3, [r7, #18]
 8005dc4:	8a7b      	ldrh	r3, [r7, #18]
 8005dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d01b      	beq.n	8005e06 <USB_DeactivateEndpoint+0xf6>
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	4413      	add	r3, r2
 8005dd8:	881b      	ldrh	r3, [r3, #0]
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005de4:	823b      	strh	r3, [r7, #16]
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	441a      	add	r2, r3
 8005df0:	8a3b      	ldrh	r3, [r7, #16]
 8005df2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005df6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dfa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005dfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	4413      	add	r3, r2
 8005e10:	881b      	ldrh	r3, [r3, #0]
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e1c:	81fb      	strh	r3, [r7, #14]
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	441a      	add	r2, r3
 8005e28:	89fb      	ldrh	r3, [r7, #14]
 8005e2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	8013      	strh	r3, [r2, #0]
 8005e3e:	e14d      	b.n	80060dc <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	785b      	ldrb	r3, [r3, #1]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f040 80a5 	bne.w	8005f94 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	4413      	add	r3, r2
 8005e54:	881b      	ldrh	r3, [r3, #0]
 8005e56:	843b      	strh	r3, [r7, #32]
 8005e58:	8c3b      	ldrh	r3, [r7, #32]
 8005e5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d01b      	beq.n	8005e9a <USB_DeactivateEndpoint+0x18a>
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	4413      	add	r3, r2
 8005e6c:	881b      	ldrh	r3, [r3, #0]
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e78:	83fb      	strh	r3, [r7, #30]
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	441a      	add	r2, r3
 8005e84:	8bfb      	ldrh	r3, [r7, #30]
 8005e86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	4413      	add	r3, r2
 8005ea4:	881b      	ldrh	r3, [r3, #0]
 8005ea6:	83bb      	strh	r3, [r7, #28]
 8005ea8:	8bbb      	ldrh	r3, [r7, #28]
 8005eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d01b      	beq.n	8005eea <USB_DeactivateEndpoint+0x1da>
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	4413      	add	r3, r2
 8005ebc:	881b      	ldrh	r3, [r3, #0]
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ec4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ec8:	837b      	strh	r3, [r7, #26]
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	441a      	add	r2, r3
 8005ed4:	8b7b      	ldrh	r3, [r7, #26]
 8005ed6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ede:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ee2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	4413      	add	r3, r2
 8005ef4:	881b      	ldrh	r3, [r3, #0]
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005efc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f00:	833b      	strh	r3, [r7, #24]
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	441a      	add	r2, r3
 8005f0c:	8b3b      	ldrh	r3, [r7, #24]
 8005f0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f1a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	4413      	add	r3, r2
 8005f2c:	881b      	ldrh	r3, [r3, #0]
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f38:	82fb      	strh	r3, [r7, #22]
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	441a      	add	r2, r3
 8005f44:	8afb      	ldrh	r3, [r7, #22]
 8005f46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	4413      	add	r3, r2
 8005f64:	881b      	ldrh	r3, [r3, #0]
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f70:	82bb      	strh	r3, [r7, #20]
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	441a      	add	r2, r3
 8005f7c:	8abb      	ldrh	r3, [r7, #20]
 8005f7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	8013      	strh	r3, [r2, #0]
 8005f92:	e0a3      	b.n	80060dc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	4413      	add	r3, r2
 8005f9e:	881b      	ldrh	r3, [r3, #0]
 8005fa0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005fa2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005fa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d01b      	beq.n	8005fe4 <USB_DeactivateEndpoint+0x2d4>
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	4413      	add	r3, r2
 8005fb6:	881b      	ldrh	r3, [r3, #0]
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fc2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	441a      	add	r2, r3
 8005fce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005fd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	4413      	add	r3, r2
 8005fee:	881b      	ldrh	r3, [r3, #0]
 8005ff0:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005ff2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d01b      	beq.n	8006034 <USB_DeactivateEndpoint+0x324>
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	4413      	add	r3, r2
 8006006:	881b      	ldrh	r3, [r3, #0]
 8006008:	b29b      	uxth	r3, r3
 800600a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800600e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006012:	853b      	strh	r3, [r7, #40]	; 0x28
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	441a      	add	r2, r3
 800601e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006020:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006024:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006028:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800602c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006030:	b29b      	uxth	r3, r3
 8006032:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	4413      	add	r3, r2
 800603e:	881b      	ldrh	r3, [r3, #0]
 8006040:	b29b      	uxth	r3, r3
 8006042:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800604a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	441a      	add	r2, r3
 8006056:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006058:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800605c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006060:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006068:	b29b      	uxth	r3, r3
 800606a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	4413      	add	r3, r2
 8006076:	881b      	ldrh	r3, [r3, #0]
 8006078:	b29b      	uxth	r3, r3
 800607a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800607e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006082:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	441a      	add	r2, r3
 800608e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006090:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006094:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006098:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800609c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	4413      	add	r3, r2
 80060ae:	881b      	ldrh	r3, [r3, #0]
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ba:	847b      	strh	r3, [r7, #34]	; 0x22
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	441a      	add	r2, r3
 80060c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80060c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060d8:	b29b      	uxth	r3, r3
 80060da:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3734      	adds	r7, #52	; 0x34
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr

080060ea <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b0c2      	sub	sp, #264	; 0x108
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060f8:	6018      	str	r0, [r3, #0]
 80060fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006102:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006108:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	785b      	ldrb	r3, [r3, #1]
 8006110:	2b01      	cmp	r3, #1
 8006112:	f040 86b7 	bne.w	8006e84 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006116:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800611a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	699a      	ldr	r2, [r3, #24]
 8006122:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006126:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	429a      	cmp	r2, r3
 8006130:	d908      	bls.n	8006144 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006132:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006136:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006142:	e007      	b.n	8006154 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006144:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006148:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	699b      	ldr	r3, [r3, #24]
 8006150:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006154:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006158:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	7b1b      	ldrb	r3, [r3, #12]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d13a      	bne.n	80061da <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006164:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006168:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	6959      	ldr	r1, [r3, #20]
 8006170:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006174:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	88da      	ldrh	r2, [r3, #6]
 800617c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006180:	b29b      	uxth	r3, r3
 8006182:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006186:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800618a:	6800      	ldr	r0, [r0, #0]
 800618c:	f001 fc8c 	bl	8007aa8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006190:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006194:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	613b      	str	r3, [r7, #16]
 800619c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	461a      	mov	r2, r3
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	4413      	add	r3, r2
 80061b2:	613b      	str	r3, [r7, #16]
 80061b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	00da      	lsls	r2, r3, #3
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	4413      	add	r3, r2
 80061c6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80061ca:	60fb      	str	r3, [r7, #12]
 80061cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061d0:	b29a      	uxth	r2, r3
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	801a      	strh	r2, [r3, #0]
 80061d6:	f000 be1f 	b.w	8006e18 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80061da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	78db      	ldrb	r3, [r3, #3]
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	f040 8462 	bne.w	8006ab0 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80061ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	6a1a      	ldr	r2, [r3, #32]
 80061f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	429a      	cmp	r2, r3
 8006206:	f240 83df 	bls.w	80069c8 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800620a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800620e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006218:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	4413      	add	r3, r2
 8006224:	881b      	ldrh	r3, [r3, #0]
 8006226:	b29b      	uxth	r3, r3
 8006228:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800622c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006230:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006234:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006238:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006242:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	441a      	add	r2, r3
 800624e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006252:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006256:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800625a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800625e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006262:	b29b      	uxth	r3, r3
 8006264:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006266:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800626a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	6a1a      	ldr	r2, [r3, #32]
 8006272:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006276:	1ad2      	subs	r2, r2, r3
 8006278:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800627c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006284:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006288:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006292:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	4413      	add	r3, r2
 800629e:	881b      	ldrh	r3, [r3, #0]
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	f000 81c7 	beq.w	800663a <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80062ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	633b      	str	r3, [r7, #48]	; 0x30
 80062b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	785b      	ldrb	r3, [r3, #1]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d177      	bne.n	80063b8 <USB_EPStartXfer+0x2ce>
 80062c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80062d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	461a      	mov	r2, r3
 80062e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e8:	4413      	add	r3, r2
 80062ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80062ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	00da      	lsls	r2, r3, #3
 80062fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fc:	4413      	add	r3, r2
 80062fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006302:	627b      	str	r3, [r7, #36]	; 0x24
 8006304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006306:	881b      	ldrh	r3, [r3, #0]
 8006308:	b29b      	uxth	r3, r3
 800630a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800630e:	b29a      	uxth	r2, r3
 8006310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006312:	801a      	strh	r2, [r3, #0]
 8006314:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006318:	2b3e      	cmp	r3, #62	; 0x3e
 800631a:	d921      	bls.n	8006360 <USB_EPStartXfer+0x276>
 800631c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006320:	095b      	lsrs	r3, r3, #5
 8006322:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006326:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800632a:	f003 031f 	and.w	r3, r3, #31
 800632e:	2b00      	cmp	r3, #0
 8006330:	d104      	bne.n	800633c <USB_EPStartXfer+0x252>
 8006332:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006336:	3b01      	subs	r3, #1
 8006338:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800633c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633e:	881b      	ldrh	r3, [r3, #0]
 8006340:	b29a      	uxth	r2, r3
 8006342:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006346:	b29b      	uxth	r3, r3
 8006348:	029b      	lsls	r3, r3, #10
 800634a:	b29b      	uxth	r3, r3
 800634c:	4313      	orrs	r3, r2
 800634e:	b29b      	uxth	r3, r3
 8006350:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006354:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006358:	b29a      	uxth	r2, r3
 800635a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635c:	801a      	strh	r2, [r3, #0]
 800635e:	e050      	b.n	8006402 <USB_EPStartXfer+0x318>
 8006360:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006364:	2b00      	cmp	r3, #0
 8006366:	d10a      	bne.n	800637e <USB_EPStartXfer+0x294>
 8006368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636a:	881b      	ldrh	r3, [r3, #0]
 800636c:	b29b      	uxth	r3, r3
 800636e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006372:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006376:	b29a      	uxth	r2, r3
 8006378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637a:	801a      	strh	r2, [r3, #0]
 800637c:	e041      	b.n	8006402 <USB_EPStartXfer+0x318>
 800637e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006382:	085b      	lsrs	r3, r3, #1
 8006384:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006388:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800638c:	f003 0301 	and.w	r3, r3, #1
 8006390:	2b00      	cmp	r3, #0
 8006392:	d004      	beq.n	800639e <USB_EPStartXfer+0x2b4>
 8006394:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006398:	3301      	adds	r3, #1
 800639a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800639e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a0:	881b      	ldrh	r3, [r3, #0]
 80063a2:	b29a      	uxth	r2, r3
 80063a4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	029b      	lsls	r3, r3, #10
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	4313      	orrs	r3, r2
 80063b0:	b29a      	uxth	r2, r3
 80063b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b4:	801a      	strh	r2, [r3, #0]
 80063b6:	e024      	b.n	8006402 <USB_EPStartXfer+0x318>
 80063b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	785b      	ldrb	r3, [r3, #1]
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d11c      	bne.n	8006402 <USB_EPStartXfer+0x318>
 80063c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	461a      	mov	r2, r3
 80063da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063dc:	4413      	add	r3, r2
 80063de:	633b      	str	r3, [r7, #48]	; 0x30
 80063e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	00da      	lsls	r2, r3, #3
 80063ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f0:	4413      	add	r3, r2
 80063f2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80063f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063fc:	b29a      	uxth	r2, r3
 80063fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006400:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006402:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006406:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	895b      	ldrh	r3, [r3, #10]
 800640e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006412:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006416:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	6959      	ldr	r1, [r3, #20]
 800641e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006422:	b29b      	uxth	r3, r3
 8006424:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006428:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800642c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006430:	6800      	ldr	r0, [r0, #0]
 8006432:	f001 fb39 	bl	8007aa8 <USB_WritePMA>
            ep->xfer_buff += len;
 8006436:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800643a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	695a      	ldr	r2, [r3, #20]
 8006442:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006446:	441a      	add	r2, r3
 8006448:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800644c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006454:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006458:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	6a1a      	ldr	r2, [r3, #32]
 8006460:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006464:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	429a      	cmp	r2, r3
 800646e:	d90f      	bls.n	8006490 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006470:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006474:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	6a1a      	ldr	r2, [r3, #32]
 800647c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006480:	1ad2      	subs	r2, r2, r3
 8006482:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006486:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	621a      	str	r2, [r3, #32]
 800648e:	e00e      	b.n	80064ae <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006494:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	6a1b      	ldr	r3, [r3, #32]
 800649c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80064a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2200      	movs	r2, #0
 80064ac:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80064ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	785b      	ldrb	r3, [r3, #1]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d177      	bne.n	80065ae <USB_EPStartXfer+0x4c4>
 80064be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	61bb      	str	r3, [r7, #24]
 80064ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064d8:	b29b      	uxth	r3, r3
 80064da:	461a      	mov	r2, r3
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	4413      	add	r3, r2
 80064e0:	61bb      	str	r3, [r7, #24]
 80064e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	00da      	lsls	r2, r3, #3
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	4413      	add	r3, r2
 80064f4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80064f8:	617b      	str	r3, [r7, #20]
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	881b      	ldrh	r3, [r3, #0]
 80064fe:	b29b      	uxth	r3, r3
 8006500:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006504:	b29a      	uxth	r2, r3
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	801a      	strh	r2, [r3, #0]
 800650a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800650e:	2b3e      	cmp	r3, #62	; 0x3e
 8006510:	d921      	bls.n	8006556 <USB_EPStartXfer+0x46c>
 8006512:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006516:	095b      	lsrs	r3, r3, #5
 8006518:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800651c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006520:	f003 031f 	and.w	r3, r3, #31
 8006524:	2b00      	cmp	r3, #0
 8006526:	d104      	bne.n	8006532 <USB_EPStartXfer+0x448>
 8006528:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800652c:	3b01      	subs	r3, #1
 800652e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	881b      	ldrh	r3, [r3, #0]
 8006536:	b29a      	uxth	r2, r3
 8006538:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800653c:	b29b      	uxth	r3, r3
 800653e:	029b      	lsls	r3, r3, #10
 8006540:	b29b      	uxth	r3, r3
 8006542:	4313      	orrs	r3, r2
 8006544:	b29b      	uxth	r3, r3
 8006546:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800654a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800654e:	b29a      	uxth	r2, r3
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	801a      	strh	r2, [r3, #0]
 8006554:	e056      	b.n	8006604 <USB_EPStartXfer+0x51a>
 8006556:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800655a:	2b00      	cmp	r3, #0
 800655c:	d10a      	bne.n	8006574 <USB_EPStartXfer+0x48a>
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	881b      	ldrh	r3, [r3, #0]
 8006562:	b29b      	uxth	r3, r3
 8006564:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006568:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800656c:	b29a      	uxth	r2, r3
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	801a      	strh	r2, [r3, #0]
 8006572:	e047      	b.n	8006604 <USB_EPStartXfer+0x51a>
 8006574:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006578:	085b      	lsrs	r3, r3, #1
 800657a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800657e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006582:	f003 0301 	and.w	r3, r3, #1
 8006586:	2b00      	cmp	r3, #0
 8006588:	d004      	beq.n	8006594 <USB_EPStartXfer+0x4aa>
 800658a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800658e:	3301      	adds	r3, #1
 8006590:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	881b      	ldrh	r3, [r3, #0]
 8006598:	b29a      	uxth	r2, r3
 800659a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800659e:	b29b      	uxth	r3, r3
 80065a0:	029b      	lsls	r3, r3, #10
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	4313      	orrs	r3, r2
 80065a6:	b29a      	uxth	r2, r3
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	801a      	strh	r2, [r3, #0]
 80065ac:	e02a      	b.n	8006604 <USB_EPStartXfer+0x51a>
 80065ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	785b      	ldrb	r3, [r3, #1]
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d122      	bne.n	8006604 <USB_EPStartXfer+0x51a>
 80065be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	623b      	str	r3, [r7, #32]
 80065ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065d8:	b29b      	uxth	r3, r3
 80065da:	461a      	mov	r2, r3
 80065dc:	6a3b      	ldr	r3, [r7, #32]
 80065de:	4413      	add	r3, r2
 80065e0:	623b      	str	r3, [r7, #32]
 80065e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	00da      	lsls	r2, r3, #3
 80065f0:	6a3b      	ldr	r3, [r7, #32]
 80065f2:	4413      	add	r3, r2
 80065f4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80065f8:	61fb      	str	r3, [r7, #28]
 80065fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065fe:	b29a      	uxth	r2, r3
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006604:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006608:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	891b      	ldrh	r3, [r3, #8]
 8006610:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006614:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006618:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	6959      	ldr	r1, [r3, #20]
 8006620:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006624:	b29b      	uxth	r3, r3
 8006626:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800662a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800662e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006632:	6800      	ldr	r0, [r0, #0]
 8006634:	f001 fa38 	bl	8007aa8 <USB_WritePMA>
 8006638:	e3ee      	b.n	8006e18 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800663a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800663e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	785b      	ldrb	r3, [r3, #1]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d177      	bne.n	800673a <USB_EPStartXfer+0x650>
 800664a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800664e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	64bb      	str	r3, [r7, #72]	; 0x48
 8006656:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800665a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006664:	b29b      	uxth	r3, r3
 8006666:	461a      	mov	r2, r3
 8006668:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800666a:	4413      	add	r3, r2
 800666c:	64bb      	str	r3, [r7, #72]	; 0x48
 800666e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006672:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	00da      	lsls	r2, r3, #3
 800667c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800667e:	4413      	add	r3, r2
 8006680:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006684:	647b      	str	r3, [r7, #68]	; 0x44
 8006686:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006688:	881b      	ldrh	r3, [r3, #0]
 800668a:	b29b      	uxth	r3, r3
 800668c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006690:	b29a      	uxth	r2, r3
 8006692:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006694:	801a      	strh	r2, [r3, #0]
 8006696:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800669a:	2b3e      	cmp	r3, #62	; 0x3e
 800669c:	d921      	bls.n	80066e2 <USB_EPStartXfer+0x5f8>
 800669e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066a2:	095b      	lsrs	r3, r3, #5
 80066a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80066a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066ac:	f003 031f 	and.w	r3, r3, #31
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d104      	bne.n	80066be <USB_EPStartXfer+0x5d4>
 80066b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80066b8:	3b01      	subs	r3, #1
 80066ba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80066be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066c0:	881b      	ldrh	r3, [r3, #0]
 80066c2:	b29a      	uxth	r2, r3
 80066c4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	029b      	lsls	r3, r3, #10
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	4313      	orrs	r3, r2
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066da:	b29a      	uxth	r2, r3
 80066dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066de:	801a      	strh	r2, [r3, #0]
 80066e0:	e056      	b.n	8006790 <USB_EPStartXfer+0x6a6>
 80066e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d10a      	bne.n	8006700 <USB_EPStartXfer+0x616>
 80066ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066ec:	881b      	ldrh	r3, [r3, #0]
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066fc:	801a      	strh	r2, [r3, #0]
 80066fe:	e047      	b.n	8006790 <USB_EPStartXfer+0x6a6>
 8006700:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006704:	085b      	lsrs	r3, r3, #1
 8006706:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800670a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800670e:	f003 0301 	and.w	r3, r3, #1
 8006712:	2b00      	cmp	r3, #0
 8006714:	d004      	beq.n	8006720 <USB_EPStartXfer+0x636>
 8006716:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800671a:	3301      	adds	r3, #1
 800671c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006720:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006722:	881b      	ldrh	r3, [r3, #0]
 8006724:	b29a      	uxth	r2, r3
 8006726:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800672a:	b29b      	uxth	r3, r3
 800672c:	029b      	lsls	r3, r3, #10
 800672e:	b29b      	uxth	r3, r3
 8006730:	4313      	orrs	r3, r2
 8006732:	b29a      	uxth	r2, r3
 8006734:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006736:	801a      	strh	r2, [r3, #0]
 8006738:	e02a      	b.n	8006790 <USB_EPStartXfer+0x6a6>
 800673a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800673e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	785b      	ldrb	r3, [r3, #1]
 8006746:	2b01      	cmp	r3, #1
 8006748:	d122      	bne.n	8006790 <USB_EPStartXfer+0x6a6>
 800674a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800674e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	653b      	str	r3, [r7, #80]	; 0x50
 8006756:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800675a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006764:	b29b      	uxth	r3, r3
 8006766:	461a      	mov	r2, r3
 8006768:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800676a:	4413      	add	r3, r2
 800676c:	653b      	str	r3, [r7, #80]	; 0x50
 800676e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006772:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	00da      	lsls	r2, r3, #3
 800677c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800677e:	4413      	add	r3, r2
 8006780:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006784:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006786:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800678a:	b29a      	uxth	r2, r3
 800678c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800678e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006790:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006794:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	891b      	ldrh	r3, [r3, #8]
 800679c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	6959      	ldr	r1, [r3, #20]
 80067ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80067b6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80067ba:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80067be:	6800      	ldr	r0, [r0, #0]
 80067c0:	f001 f972 	bl	8007aa8 <USB_WritePMA>
            ep->xfer_buff += len;
 80067c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	695a      	ldr	r2, [r3, #20]
 80067d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067d4:	441a      	add	r2, r3
 80067d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80067e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	6a1a      	ldr	r2, [r3, #32]
 80067ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d90f      	bls.n	800681e <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80067fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006802:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	6a1a      	ldr	r2, [r3, #32]
 800680a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800680e:	1ad2      	subs	r2, r2, r3
 8006810:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006814:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	621a      	str	r2, [r3, #32]
 800681c:	e00e      	b.n	800683c <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800681e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006822:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	6a1b      	ldr	r3, [r3, #32]
 800682a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800682e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006832:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	2200      	movs	r2, #0
 800683a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800683c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006840:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	643b      	str	r3, [r7, #64]	; 0x40
 8006848:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800684c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	785b      	ldrb	r3, [r3, #1]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d177      	bne.n	8006948 <USB_EPStartXfer+0x85e>
 8006858:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800685c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	63bb      	str	r3, [r7, #56]	; 0x38
 8006864:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006868:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006872:	b29b      	uxth	r3, r3
 8006874:	461a      	mov	r2, r3
 8006876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006878:	4413      	add	r3, r2
 800687a:	63bb      	str	r3, [r7, #56]	; 0x38
 800687c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006880:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	00da      	lsls	r2, r3, #3
 800688a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800688c:	4413      	add	r3, r2
 800688e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006892:	637b      	str	r3, [r7, #52]	; 0x34
 8006894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006896:	881b      	ldrh	r3, [r3, #0]
 8006898:	b29b      	uxth	r3, r3
 800689a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800689e:	b29a      	uxth	r2, r3
 80068a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068a2:	801a      	strh	r2, [r3, #0]
 80068a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068a8:	2b3e      	cmp	r3, #62	; 0x3e
 80068aa:	d921      	bls.n	80068f0 <USB_EPStartXfer+0x806>
 80068ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068b0:	095b      	lsrs	r3, r3, #5
 80068b2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80068b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068ba:	f003 031f 	and.w	r3, r3, #31
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d104      	bne.n	80068cc <USB_EPStartXfer+0x7e2>
 80068c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068c6:	3b01      	subs	r3, #1
 80068c8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80068cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ce:	881b      	ldrh	r3, [r3, #0]
 80068d0:	b29a      	uxth	r2, r3
 80068d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	029b      	lsls	r3, r3, #10
 80068da:	b29b      	uxth	r3, r3
 80068dc:	4313      	orrs	r3, r2
 80068de:	b29b      	uxth	r3, r3
 80068e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068e8:	b29a      	uxth	r2, r3
 80068ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ec:	801a      	strh	r2, [r3, #0]
 80068ee:	e050      	b.n	8006992 <USB_EPStartXfer+0x8a8>
 80068f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d10a      	bne.n	800690e <USB_EPStartXfer+0x824>
 80068f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068fa:	881b      	ldrh	r3, [r3, #0]
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006902:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006906:	b29a      	uxth	r2, r3
 8006908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800690a:	801a      	strh	r2, [r3, #0]
 800690c:	e041      	b.n	8006992 <USB_EPStartXfer+0x8a8>
 800690e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006912:	085b      	lsrs	r3, r3, #1
 8006914:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006918:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800691c:	f003 0301 	and.w	r3, r3, #1
 8006920:	2b00      	cmp	r3, #0
 8006922:	d004      	beq.n	800692e <USB_EPStartXfer+0x844>
 8006924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006928:	3301      	adds	r3, #1
 800692a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800692e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006930:	881b      	ldrh	r3, [r3, #0]
 8006932:	b29a      	uxth	r2, r3
 8006934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006938:	b29b      	uxth	r3, r3
 800693a:	029b      	lsls	r3, r3, #10
 800693c:	b29b      	uxth	r3, r3
 800693e:	4313      	orrs	r3, r2
 8006940:	b29a      	uxth	r2, r3
 8006942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006944:	801a      	strh	r2, [r3, #0]
 8006946:	e024      	b.n	8006992 <USB_EPStartXfer+0x8a8>
 8006948:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800694c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	785b      	ldrb	r3, [r3, #1]
 8006954:	2b01      	cmp	r3, #1
 8006956:	d11c      	bne.n	8006992 <USB_EPStartXfer+0x8a8>
 8006958:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800695c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006966:	b29b      	uxth	r3, r3
 8006968:	461a      	mov	r2, r3
 800696a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800696c:	4413      	add	r3, r2
 800696e:	643b      	str	r3, [r7, #64]	; 0x40
 8006970:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006974:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	00da      	lsls	r2, r3, #3
 800697e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006980:	4413      	add	r3, r2
 8006982:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006986:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006988:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800698c:	b29a      	uxth	r2, r3
 800698e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006990:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006992:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006996:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	895b      	ldrh	r3, [r3, #10]
 800699e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	6959      	ldr	r1, [r3, #20]
 80069ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80069b8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80069bc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80069c0:	6800      	ldr	r0, [r0, #0]
 80069c2:	f001 f871 	bl	8007aa8 <USB_WritePMA>
 80069c6:	e227      	b.n	8006e18 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80069c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	6a1b      	ldr	r3, [r3, #32]
 80069d4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80069d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	4413      	add	r3, r2
 80069f2:	881b      	ldrh	r3, [r3, #0]
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80069fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069fe:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006a02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	441a      	add	r2, r3
 8006a1c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006a20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006a34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	461a      	mov	r2, r3
 8006a52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a54:	4413      	add	r3, r2
 8006a56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	00da      	lsls	r2, r3, #3
 8006a66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a68:	4413      	add	r3, r2
 8006a6a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a6e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a74:	b29a      	uxth	r2, r3
 8006a76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a78:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006a7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	891b      	ldrh	r3, [r3, #8]
 8006a86:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	6959      	ldr	r1, [r3, #20]
 8006a96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006aa0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006aa4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006aa8:	6800      	ldr	r0, [r0, #0]
 8006aaa:	f000 fffd 	bl	8007aa8 <USB_WritePMA>
 8006aae:	e1b3      	b.n	8006e18 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ab4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	6a1a      	ldr	r2, [r3, #32]
 8006abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ac0:	1ad2      	subs	r2, r2, r3
 8006ac2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ac6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006ace:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ad2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006adc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	4413      	add	r3, r2
 8006ae8:	881b      	ldrh	r3, [r3, #0]
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f000 80c6 	beq.w	8006c82 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006af6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006afa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	673b      	str	r3, [r7, #112]	; 0x70
 8006b02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	785b      	ldrb	r3, [r3, #1]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d177      	bne.n	8006c02 <USB_EPStartXfer+0xb18>
 8006b12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	461a      	mov	r2, r3
 8006b30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b32:	4413      	add	r3, r2
 8006b34:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	00da      	lsls	r2, r3, #3
 8006b44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b46:	4413      	add	r3, r2
 8006b48:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b4c:	667b      	str	r3, [r7, #100]	; 0x64
 8006b4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b50:	881b      	ldrh	r3, [r3, #0]
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b58:	b29a      	uxth	r2, r3
 8006b5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b5c:	801a      	strh	r2, [r3, #0]
 8006b5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b62:	2b3e      	cmp	r3, #62	; 0x3e
 8006b64:	d921      	bls.n	8006baa <USB_EPStartXfer+0xac0>
 8006b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b6a:	095b      	lsrs	r3, r3, #5
 8006b6c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006b70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b74:	f003 031f 	and.w	r3, r3, #31
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d104      	bne.n	8006b86 <USB_EPStartXfer+0xa9c>
 8006b7c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006b80:	3b01      	subs	r3, #1
 8006b82:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006b86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b88:	881b      	ldrh	r3, [r3, #0]
 8006b8a:	b29a      	uxth	r2, r3
 8006b8c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	029b      	lsls	r3, r3, #10
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	4313      	orrs	r3, r2
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ba2:	b29a      	uxth	r2, r3
 8006ba4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ba6:	801a      	strh	r2, [r3, #0]
 8006ba8:	e050      	b.n	8006c4c <USB_EPStartXfer+0xb62>
 8006baa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d10a      	bne.n	8006bc8 <USB_EPStartXfer+0xade>
 8006bb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bb4:	881b      	ldrh	r3, [r3, #0]
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bc0:	b29a      	uxth	r2, r3
 8006bc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bc4:	801a      	strh	r2, [r3, #0]
 8006bc6:	e041      	b.n	8006c4c <USB_EPStartXfer+0xb62>
 8006bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bcc:	085b      	lsrs	r3, r3, #1
 8006bce:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006bd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bd6:	f003 0301 	and.w	r3, r3, #1
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d004      	beq.n	8006be8 <USB_EPStartXfer+0xafe>
 8006bde:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006be2:	3301      	adds	r3, #1
 8006be4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006be8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bea:	881b      	ldrh	r3, [r3, #0]
 8006bec:	b29a      	uxth	r2, r3
 8006bee:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	029b      	lsls	r3, r3, #10
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bfe:	801a      	strh	r2, [r3, #0]
 8006c00:	e024      	b.n	8006c4c <USB_EPStartXfer+0xb62>
 8006c02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	785b      	ldrb	r3, [r3, #1]
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d11c      	bne.n	8006c4c <USB_EPStartXfer+0xb62>
 8006c12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	461a      	mov	r2, r3
 8006c24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c26:	4413      	add	r3, r2
 8006c28:	673b      	str	r3, [r7, #112]	; 0x70
 8006c2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	00da      	lsls	r2, r3, #3
 8006c38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c3a:	4413      	add	r3, r2
 8006c3c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c40:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c4a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006c4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	895b      	ldrh	r3, [r3, #10]
 8006c58:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	6959      	ldr	r1, [r3, #20]
 8006c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006c72:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006c76:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006c7a:	6800      	ldr	r0, [r0, #0]
 8006c7c:	f000 ff14 	bl	8007aa8 <USB_WritePMA>
 8006c80:	e0ca      	b.n	8006e18 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006c82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	785b      	ldrb	r3, [r3, #1]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d177      	bne.n	8006d82 <USB_EPStartXfer+0xc98>
 8006c92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006c9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ca2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	461a      	mov	r2, r3
 8006cb0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006cb2:	4413      	add	r3, r2
 8006cb4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006cb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	00da      	lsls	r2, r3, #3
 8006cc4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006cc6:	4413      	add	r3, r2
 8006cc8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006ccc:	67bb      	str	r3, [r7, #120]	; 0x78
 8006cce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cd0:	881b      	ldrh	r3, [r3, #0]
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006cd8:	b29a      	uxth	r2, r3
 8006cda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cdc:	801a      	strh	r2, [r3, #0]
 8006cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ce2:	2b3e      	cmp	r3, #62	; 0x3e
 8006ce4:	d921      	bls.n	8006d2a <USB_EPStartXfer+0xc40>
 8006ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cea:	095b      	lsrs	r3, r3, #5
 8006cec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cf4:	f003 031f 	and.w	r3, r3, #31
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d104      	bne.n	8006d06 <USB_EPStartXfer+0xc1c>
 8006cfc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006d00:	3b01      	subs	r3, #1
 8006d02:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006d06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d08:	881b      	ldrh	r3, [r3, #0]
 8006d0a:	b29a      	uxth	r2, r3
 8006d0c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	029b      	lsls	r3, r3, #10
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	4313      	orrs	r3, r2
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d22:	b29a      	uxth	r2, r3
 8006d24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d26:	801a      	strh	r2, [r3, #0]
 8006d28:	e05c      	b.n	8006de4 <USB_EPStartXfer+0xcfa>
 8006d2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d10a      	bne.n	8006d48 <USB_EPStartXfer+0xc5e>
 8006d32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d34:	881b      	ldrh	r3, [r3, #0]
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d40:	b29a      	uxth	r2, r3
 8006d42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d44:	801a      	strh	r2, [r3, #0]
 8006d46:	e04d      	b.n	8006de4 <USB_EPStartXfer+0xcfa>
 8006d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d4c:	085b      	lsrs	r3, r3, #1
 8006d4e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d56:	f003 0301 	and.w	r3, r3, #1
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d004      	beq.n	8006d68 <USB_EPStartXfer+0xc7e>
 8006d5e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006d62:	3301      	adds	r3, #1
 8006d64:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006d68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d6a:	881b      	ldrh	r3, [r3, #0]
 8006d6c:	b29a      	uxth	r2, r3
 8006d6e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	029b      	lsls	r3, r3, #10
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	b29a      	uxth	r2, r3
 8006d7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d7e:	801a      	strh	r2, [r3, #0]
 8006d80:	e030      	b.n	8006de4 <USB_EPStartXfer+0xcfa>
 8006d82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	785b      	ldrb	r3, [r3, #1]
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d128      	bne.n	8006de4 <USB_EPStartXfer+0xcfa>
 8006d92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006da0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006da4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	461a      	mov	r2, r3
 8006db2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006db6:	4413      	add	r3, r2
 8006db8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006dbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	00da      	lsls	r2, r3, #3
 8006dca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006dce:	4413      	add	r3, r2
 8006dd0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006dd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ddc:	b29a      	uxth	r2, r3
 8006dde:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006de2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006de4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006de8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	891b      	ldrh	r3, [r3, #8]
 8006df0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006df4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006df8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	6959      	ldr	r1, [r3, #20]
 8006e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006e0a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006e0e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006e12:	6800      	ldr	r0, [r0, #0]
 8006e14:	f000 fe48 	bl	8007aa8 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006e18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	4413      	add	r3, r2
 8006e32:	881b      	ldrh	r3, [r3, #0]
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e3e:	817b      	strh	r3, [r7, #10]
 8006e40:	897b      	ldrh	r3, [r7, #10]
 8006e42:	f083 0310 	eor.w	r3, r3, #16
 8006e46:	817b      	strh	r3, [r7, #10]
 8006e48:	897b      	ldrh	r3, [r7, #10]
 8006e4a:	f083 0320 	eor.w	r3, r3, #32
 8006e4e:	817b      	strh	r3, [r7, #10]
 8006e50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	441a      	add	r2, r3
 8006e6a:	897b      	ldrh	r3, [r7, #10]
 8006e6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	8013      	strh	r3, [r2, #0]
 8006e80:	f000 bcde 	b.w	8007840 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006e84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	7b1b      	ldrb	r3, [r3, #12]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	f040 80bb 	bne.w	800700c <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006e96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	699a      	ldr	r2, [r3, #24]
 8006ea2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ea6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d917      	bls.n	8006ee2 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006eb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	691b      	ldr	r3, [r3, #16]
 8006ebe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8006ec2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ec6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	699a      	ldr	r2, [r3, #24]
 8006ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ed2:	1ad2      	subs	r2, r2, r3
 8006ed4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ed8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	619a      	str	r2, [r3, #24]
 8006ee0:	e00e      	b.n	8006f00 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006ee2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ee6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	699b      	ldr	r3, [r3, #24]
 8006eee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8006ef2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ef6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2200      	movs	r2, #0
 8006efe:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006f00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	461a      	mov	r2, r3
 8006f20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f24:	4413      	add	r3, r2
 8006f26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	00da      	lsls	r2, r3, #3
 8006f38:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f3c:	4413      	add	r3, r2
 8006f3e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006f46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f4a:	881b      	ldrh	r3, [r3, #0]
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f52:	b29a      	uxth	r2, r3
 8006f54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f58:	801a      	strh	r2, [r3, #0]
 8006f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f5e:	2b3e      	cmp	r3, #62	; 0x3e
 8006f60:	d924      	bls.n	8006fac <USB_EPStartXfer+0xec2>
 8006f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f66:	095b      	lsrs	r3, r3, #5
 8006f68:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f70:	f003 031f 	and.w	r3, r3, #31
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d104      	bne.n	8006f82 <USB_EPStartXfer+0xe98>
 8006f78:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006f7c:	3b01      	subs	r3, #1
 8006f7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f86:	881b      	ldrh	r3, [r3, #0]
 8006f88:	b29a      	uxth	r2, r3
 8006f8a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	029b      	lsls	r3, r3, #10
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	4313      	orrs	r3, r2
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fa0:	b29a      	uxth	r2, r3
 8006fa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fa6:	801a      	strh	r2, [r3, #0]
 8006fa8:	f000 bc10 	b.w	80077cc <USB_EPStartXfer+0x16e2>
 8006fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d10c      	bne.n	8006fce <USB_EPStartXfer+0xee4>
 8006fb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fb8:	881b      	ldrh	r3, [r3, #0]
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fc4:	b29a      	uxth	r2, r3
 8006fc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fca:	801a      	strh	r2, [r3, #0]
 8006fcc:	e3fe      	b.n	80077cc <USB_EPStartXfer+0x16e2>
 8006fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fd2:	085b      	lsrs	r3, r3, #1
 8006fd4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fdc:	f003 0301 	and.w	r3, r3, #1
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d004      	beq.n	8006fee <USB_EPStartXfer+0xf04>
 8006fe4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fe8:	3301      	adds	r3, #1
 8006fea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006fee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ff2:	881b      	ldrh	r3, [r3, #0]
 8006ff4:	b29a      	uxth	r2, r3
 8006ff6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	029b      	lsls	r3, r3, #10
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	4313      	orrs	r3, r2
 8007002:	b29a      	uxth	r2, r3
 8007004:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007008:	801a      	strh	r2, [r3, #0]
 800700a:	e3df      	b.n	80077cc <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800700c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007010:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	78db      	ldrb	r3, [r3, #3]
 8007018:	2b02      	cmp	r3, #2
 800701a:	f040 8218 	bne.w	800744e <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800701e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007022:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	785b      	ldrb	r3, [r3, #1]
 800702a:	2b00      	cmp	r3, #0
 800702c:	f040 809d 	bne.w	800716a <USB_EPStartXfer+0x1080>
 8007030:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007034:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800703e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007042:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800704c:	b29b      	uxth	r3, r3
 800704e:	461a      	mov	r2, r3
 8007050:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007054:	4413      	add	r3, r2
 8007056:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800705a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800705e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	00da      	lsls	r2, r3, #3
 8007068:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800706c:	4413      	add	r3, r2
 800706e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007072:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007076:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800707a:	881b      	ldrh	r3, [r3, #0]
 800707c:	b29b      	uxth	r3, r3
 800707e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007082:	b29a      	uxth	r2, r3
 8007084:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007088:	801a      	strh	r2, [r3, #0]
 800708a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800708e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	2b3e      	cmp	r3, #62	; 0x3e
 8007098:	d92b      	bls.n	80070f2 <USB_EPStartXfer+0x1008>
 800709a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800709e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	691b      	ldr	r3, [r3, #16]
 80070a6:	095b      	lsrs	r3, r3, #5
 80070a8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80070ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	691b      	ldr	r3, [r3, #16]
 80070b8:	f003 031f 	and.w	r3, r3, #31
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d104      	bne.n	80070ca <USB_EPStartXfer+0xfe0>
 80070c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070c4:	3b01      	subs	r3, #1
 80070c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80070ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80070ce:	881b      	ldrh	r3, [r3, #0]
 80070d0:	b29a      	uxth	r2, r3
 80070d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	029b      	lsls	r3, r3, #10
 80070da:	b29b      	uxth	r3, r3
 80070dc:	4313      	orrs	r3, r2
 80070de:	b29b      	uxth	r3, r3
 80070e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070e8:	b29a      	uxth	r2, r3
 80070ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80070ee:	801a      	strh	r2, [r3, #0]
 80070f0:	e070      	b.n	80071d4 <USB_EPStartXfer+0x10ea>
 80070f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d10c      	bne.n	800711c <USB_EPStartXfer+0x1032>
 8007102:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007106:	881b      	ldrh	r3, [r3, #0]
 8007108:	b29b      	uxth	r3, r3
 800710a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800710e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007112:	b29a      	uxth	r2, r3
 8007114:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007118:	801a      	strh	r2, [r3, #0]
 800711a:	e05b      	b.n	80071d4 <USB_EPStartXfer+0x10ea>
 800711c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007120:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	085b      	lsrs	r3, r3, #1
 800712a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800712e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007132:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	f003 0301 	and.w	r3, r3, #1
 800713e:	2b00      	cmp	r3, #0
 8007140:	d004      	beq.n	800714c <USB_EPStartXfer+0x1062>
 8007142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007146:	3301      	adds	r3, #1
 8007148:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800714c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007150:	881b      	ldrh	r3, [r3, #0]
 8007152:	b29a      	uxth	r2, r3
 8007154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007158:	b29b      	uxth	r3, r3
 800715a:	029b      	lsls	r3, r3, #10
 800715c:	b29b      	uxth	r3, r3
 800715e:	4313      	orrs	r3, r2
 8007160:	b29a      	uxth	r2, r3
 8007162:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007166:	801a      	strh	r2, [r3, #0]
 8007168:	e034      	b.n	80071d4 <USB_EPStartXfer+0x10ea>
 800716a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800716e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	785b      	ldrb	r3, [r3, #1]
 8007176:	2b01      	cmp	r3, #1
 8007178:	d12c      	bne.n	80071d4 <USB_EPStartXfer+0x10ea>
 800717a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800717e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007188:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800718c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007196:	b29b      	uxth	r3, r3
 8007198:	461a      	mov	r2, r3
 800719a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800719e:	4413      	add	r3, r2
 80071a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80071a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	00da      	lsls	r2, r3, #3
 80071b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80071b6:	4413      	add	r3, r2
 80071b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80071bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80071c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	b29a      	uxth	r2, r3
 80071ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80071d2:	801a      	strh	r2, [r3, #0]
 80071d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80071e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	785b      	ldrb	r3, [r3, #1]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	f040 809d 	bne.w	800732e <USB_EPStartXfer+0x1244>
 80071f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007202:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007206:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007210:	b29b      	uxth	r3, r3
 8007212:	461a      	mov	r2, r3
 8007214:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007218:	4413      	add	r3, r2
 800721a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800721e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007222:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	00da      	lsls	r2, r3, #3
 800722c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007230:	4413      	add	r3, r2
 8007232:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007236:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800723a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800723e:	881b      	ldrh	r3, [r3, #0]
 8007240:	b29b      	uxth	r3, r3
 8007242:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007246:	b29a      	uxth	r2, r3
 8007248:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800724c:	801a      	strh	r2, [r3, #0]
 800724e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007252:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	2b3e      	cmp	r3, #62	; 0x3e
 800725c:	d92b      	bls.n	80072b6 <USB_EPStartXfer+0x11cc>
 800725e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007262:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	095b      	lsrs	r3, r3, #5
 800726c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007270:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007274:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	691b      	ldr	r3, [r3, #16]
 800727c:	f003 031f 	and.w	r3, r3, #31
 8007280:	2b00      	cmp	r3, #0
 8007282:	d104      	bne.n	800728e <USB_EPStartXfer+0x11a4>
 8007284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007288:	3b01      	subs	r3, #1
 800728a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800728e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007292:	881b      	ldrh	r3, [r3, #0]
 8007294:	b29a      	uxth	r2, r3
 8007296:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800729a:	b29b      	uxth	r3, r3
 800729c:	029b      	lsls	r3, r3, #10
 800729e:	b29b      	uxth	r3, r3
 80072a0:	4313      	orrs	r3, r2
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072ac:	b29a      	uxth	r2, r3
 80072ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072b2:	801a      	strh	r2, [r3, #0]
 80072b4:	e069      	b.n	800738a <USB_EPStartXfer+0x12a0>
 80072b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	691b      	ldr	r3, [r3, #16]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d10c      	bne.n	80072e0 <USB_EPStartXfer+0x11f6>
 80072c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072ca:	881b      	ldrh	r3, [r3, #0]
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072d6:	b29a      	uxth	r2, r3
 80072d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072dc:	801a      	strh	r2, [r3, #0]
 80072de:	e054      	b.n	800738a <USB_EPStartXfer+0x12a0>
 80072e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	085b      	lsrs	r3, r3, #1
 80072ee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80072f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	691b      	ldr	r3, [r3, #16]
 80072fe:	f003 0301 	and.w	r3, r3, #1
 8007302:	2b00      	cmp	r3, #0
 8007304:	d004      	beq.n	8007310 <USB_EPStartXfer+0x1226>
 8007306:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800730a:	3301      	adds	r3, #1
 800730c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007310:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007314:	881b      	ldrh	r3, [r3, #0]
 8007316:	b29a      	uxth	r2, r3
 8007318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800731c:	b29b      	uxth	r3, r3
 800731e:	029b      	lsls	r3, r3, #10
 8007320:	b29b      	uxth	r3, r3
 8007322:	4313      	orrs	r3, r2
 8007324:	b29a      	uxth	r2, r3
 8007326:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800732a:	801a      	strh	r2, [r3, #0]
 800732c:	e02d      	b.n	800738a <USB_EPStartXfer+0x12a0>
 800732e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007332:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	785b      	ldrb	r3, [r3, #1]
 800733a:	2b01      	cmp	r3, #1
 800733c:	d125      	bne.n	800738a <USB_EPStartXfer+0x12a0>
 800733e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007342:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800734c:	b29b      	uxth	r3, r3
 800734e:	461a      	mov	r2, r3
 8007350:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007354:	4413      	add	r3, r2
 8007356:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800735a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800735e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	00da      	lsls	r2, r3, #3
 8007368:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800736c:	4413      	add	r3, r2
 800736e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007372:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007376:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800737a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	b29a      	uxth	r2, r3
 8007384:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007388:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800738a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800738e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	69db      	ldr	r3, [r3, #28]
 8007396:	2b00      	cmp	r3, #0
 8007398:	f000 8218 	beq.w	80077cc <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800739c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	4413      	add	r3, r2
 80073b6:	881b      	ldrh	r3, [r3, #0]
 80073b8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80073bc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80073c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d005      	beq.n	80073d4 <USB_EPStartXfer+0x12ea>
 80073c8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80073cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d10d      	bne.n	80073f0 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80073d4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80073d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80073dc:	2b00      	cmp	r3, #0
 80073de:	f040 81f5 	bne.w	80077cc <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80073e2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80073e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	f040 81ee 	bne.w	80077cc <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80073f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	4413      	add	r3, r2
 800740a:	881b      	ldrh	r3, [r3, #0]
 800740c:	b29b      	uxth	r3, r3
 800740e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007416:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800741a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800741e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007428:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	441a      	add	r2, r3
 8007434:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8007438:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800743c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007440:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007444:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007448:	b29b      	uxth	r3, r3
 800744a:	8013      	strh	r3, [r2, #0]
 800744c:	e1be      	b.n	80077cc <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800744e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007452:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	78db      	ldrb	r3, [r3, #3]
 800745a:	2b01      	cmp	r3, #1
 800745c:	f040 81b4 	bne.w	80077c8 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007460:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007464:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	699a      	ldr	r2, [r3, #24]
 800746c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007470:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	691b      	ldr	r3, [r3, #16]
 8007478:	429a      	cmp	r2, r3
 800747a:	d917      	bls.n	80074ac <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800747c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007480:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800748c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007490:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	699a      	ldr	r2, [r3, #24]
 8007498:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800749c:	1ad2      	subs	r2, r2, r3
 800749e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	619a      	str	r2, [r3, #24]
 80074aa:	e00e      	b.n	80074ca <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80074ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	699b      	ldr	r3, [r3, #24]
 80074b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80074bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	2200      	movs	r2, #0
 80074c8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80074ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	785b      	ldrb	r3, [r3, #1]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	f040 8085 	bne.w	80075e6 <USB_EPStartXfer+0x14fc>
 80074dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80074ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	461a      	mov	r2, r3
 80074fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007500:	4413      	add	r3, r2
 8007502:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007506:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800750a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	00da      	lsls	r2, r3, #3
 8007514:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007518:	4413      	add	r3, r2
 800751a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800751e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007522:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007526:	881b      	ldrh	r3, [r3, #0]
 8007528:	b29b      	uxth	r3, r3
 800752a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800752e:	b29a      	uxth	r2, r3
 8007530:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007534:	801a      	strh	r2, [r3, #0]
 8007536:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800753a:	2b3e      	cmp	r3, #62	; 0x3e
 800753c:	d923      	bls.n	8007586 <USB_EPStartXfer+0x149c>
 800753e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007542:	095b      	lsrs	r3, r3, #5
 8007544:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007548:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800754c:	f003 031f 	and.w	r3, r3, #31
 8007550:	2b00      	cmp	r3, #0
 8007552:	d104      	bne.n	800755e <USB_EPStartXfer+0x1474>
 8007554:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007558:	3b01      	subs	r3, #1
 800755a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800755e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007562:	881b      	ldrh	r3, [r3, #0]
 8007564:	b29a      	uxth	r2, r3
 8007566:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800756a:	b29b      	uxth	r3, r3
 800756c:	029b      	lsls	r3, r3, #10
 800756e:	b29b      	uxth	r3, r3
 8007570:	4313      	orrs	r3, r2
 8007572:	b29b      	uxth	r3, r3
 8007574:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007578:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800757c:	b29a      	uxth	r2, r3
 800757e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007582:	801a      	strh	r2, [r3, #0]
 8007584:	e060      	b.n	8007648 <USB_EPStartXfer+0x155e>
 8007586:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800758a:	2b00      	cmp	r3, #0
 800758c:	d10c      	bne.n	80075a8 <USB_EPStartXfer+0x14be>
 800758e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007592:	881b      	ldrh	r3, [r3, #0]
 8007594:	b29b      	uxth	r3, r3
 8007596:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800759a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800759e:	b29a      	uxth	r2, r3
 80075a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80075a4:	801a      	strh	r2, [r3, #0]
 80075a6:	e04f      	b.n	8007648 <USB_EPStartXfer+0x155e>
 80075a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075ac:	085b      	lsrs	r3, r3, #1
 80075ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80075b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075b6:	f003 0301 	and.w	r3, r3, #1
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d004      	beq.n	80075c8 <USB_EPStartXfer+0x14de>
 80075be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075c2:	3301      	adds	r3, #1
 80075c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80075c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80075cc:	881b      	ldrh	r3, [r3, #0]
 80075ce:	b29a      	uxth	r2, r3
 80075d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	029b      	lsls	r3, r3, #10
 80075d8:	b29b      	uxth	r3, r3
 80075da:	4313      	orrs	r3, r2
 80075dc:	b29a      	uxth	r2, r3
 80075de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80075e2:	801a      	strh	r2, [r3, #0]
 80075e4:	e030      	b.n	8007648 <USB_EPStartXfer+0x155e>
 80075e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	785b      	ldrb	r3, [r3, #1]
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d128      	bne.n	8007648 <USB_EPStartXfer+0x155e>
 80075f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007604:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007608:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007612:	b29b      	uxth	r3, r3
 8007614:	461a      	mov	r2, r3
 8007616:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800761a:	4413      	add	r3, r2
 800761c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007620:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007624:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	00da      	lsls	r2, r3, #3
 800762e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007632:	4413      	add	r3, r2
 8007634:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007638:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800763c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007640:	b29a      	uxth	r2, r3
 8007642:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007646:	801a      	strh	r2, [r3, #0]
 8007648:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800764c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007656:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800765a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	785b      	ldrb	r3, [r3, #1]
 8007662:	2b00      	cmp	r3, #0
 8007664:	f040 8085 	bne.w	8007772 <USB_EPStartXfer+0x1688>
 8007668:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800766c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007676:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800767a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007684:	b29b      	uxth	r3, r3
 8007686:	461a      	mov	r2, r3
 8007688:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800768c:	4413      	add	r3, r2
 800768e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007692:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007696:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	00da      	lsls	r2, r3, #3
 80076a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80076a4:	4413      	add	r3, r2
 80076a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80076aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80076ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80076b2:	881b      	ldrh	r3, [r3, #0]
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80076ba:	b29a      	uxth	r2, r3
 80076bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80076c0:	801a      	strh	r2, [r3, #0]
 80076c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076c6:	2b3e      	cmp	r3, #62	; 0x3e
 80076c8:	d923      	bls.n	8007712 <USB_EPStartXfer+0x1628>
 80076ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076ce:	095b      	lsrs	r3, r3, #5
 80076d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80076d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076d8:	f003 031f 	and.w	r3, r3, #31
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d104      	bne.n	80076ea <USB_EPStartXfer+0x1600>
 80076e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076e4:	3b01      	subs	r3, #1
 80076e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80076ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80076ee:	881b      	ldrh	r3, [r3, #0]
 80076f0:	b29a      	uxth	r2, r3
 80076f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	029b      	lsls	r3, r3, #10
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	4313      	orrs	r3, r2
 80076fe:	b29b      	uxth	r3, r3
 8007700:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007704:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007708:	b29a      	uxth	r2, r3
 800770a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800770e:	801a      	strh	r2, [r3, #0]
 8007710:	e05c      	b.n	80077cc <USB_EPStartXfer+0x16e2>
 8007712:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007716:	2b00      	cmp	r3, #0
 8007718:	d10c      	bne.n	8007734 <USB_EPStartXfer+0x164a>
 800771a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800771e:	881b      	ldrh	r3, [r3, #0]
 8007720:	b29b      	uxth	r3, r3
 8007722:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007726:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800772a:	b29a      	uxth	r2, r3
 800772c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007730:	801a      	strh	r2, [r3, #0]
 8007732:	e04b      	b.n	80077cc <USB_EPStartXfer+0x16e2>
 8007734:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007738:	085b      	lsrs	r3, r3, #1
 800773a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800773e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007742:	f003 0301 	and.w	r3, r3, #1
 8007746:	2b00      	cmp	r3, #0
 8007748:	d004      	beq.n	8007754 <USB_EPStartXfer+0x166a>
 800774a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800774e:	3301      	adds	r3, #1
 8007750:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007754:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007758:	881b      	ldrh	r3, [r3, #0]
 800775a:	b29a      	uxth	r2, r3
 800775c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007760:	b29b      	uxth	r3, r3
 8007762:	029b      	lsls	r3, r3, #10
 8007764:	b29b      	uxth	r3, r3
 8007766:	4313      	orrs	r3, r2
 8007768:	b29a      	uxth	r2, r3
 800776a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800776e:	801a      	strh	r2, [r3, #0]
 8007770:	e02c      	b.n	80077cc <USB_EPStartXfer+0x16e2>
 8007772:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007776:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	785b      	ldrb	r3, [r3, #1]
 800777e:	2b01      	cmp	r3, #1
 8007780:	d124      	bne.n	80077cc <USB_EPStartXfer+0x16e2>
 8007782:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007786:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007790:	b29b      	uxth	r3, r3
 8007792:	461a      	mov	r2, r3
 8007794:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007798:	4413      	add	r3, r2
 800779a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800779e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	00da      	lsls	r2, r3, #3
 80077ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80077b0:	4413      	add	r3, r2
 80077b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80077b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80077ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077be:	b29a      	uxth	r2, r3
 80077c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80077c4:	801a      	strh	r2, [r3, #0]
 80077c6:	e001      	b.n	80077cc <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	e03a      	b.n	8007842 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80077cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	4413      	add	r3, r2
 80077e6:	881b      	ldrh	r3, [r3, #0]
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077f2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80077f6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80077fa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80077fe:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007802:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007806:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800780a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800780e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007812:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800781c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	441a      	add	r2, r3
 8007828:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800782c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007830:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007834:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800783c:	b29b      	uxth	r3, r3
 800783e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007840:	2300      	movs	r3, #0
}
 8007842:	4618      	mov	r0, r3
 8007844:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800784c:	b480      	push	{r7}
 800784e:	b085      	sub	sp, #20
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	785b      	ldrb	r3, [r3, #1]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d020      	beq.n	80078a0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	4413      	add	r3, r2
 8007868:	881b      	ldrh	r3, [r3, #0]
 800786a:	b29b      	uxth	r3, r3
 800786c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007870:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007874:	81bb      	strh	r3, [r7, #12]
 8007876:	89bb      	ldrh	r3, [r7, #12]
 8007878:	f083 0310 	eor.w	r3, r3, #16
 800787c:	81bb      	strh	r3, [r7, #12]
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	009b      	lsls	r3, r3, #2
 8007886:	441a      	add	r2, r3
 8007888:	89bb      	ldrh	r3, [r7, #12]
 800788a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800788e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007892:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007896:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800789a:	b29b      	uxth	r3, r3
 800789c:	8013      	strh	r3, [r2, #0]
 800789e:	e01f      	b.n	80078e0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80078a0:	687a      	ldr	r2, [r7, #4]
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	009b      	lsls	r3, r3, #2
 80078a8:	4413      	add	r3, r2
 80078aa:	881b      	ldrh	r3, [r3, #0]
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078b6:	81fb      	strh	r3, [r7, #14]
 80078b8:	89fb      	ldrh	r3, [r7, #14]
 80078ba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80078be:	81fb      	strh	r3, [r7, #14]
 80078c0:	687a      	ldr	r2, [r7, #4]
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	009b      	lsls	r3, r3, #2
 80078c8:	441a      	add	r2, r3
 80078ca:	89fb      	ldrh	r3, [r7, #14]
 80078cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078dc:	b29b      	uxth	r3, r3
 80078de:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80078e0:	2300      	movs	r3, #0
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3714      	adds	r7, #20
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr

080078ee <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80078ee:	b480      	push	{r7}
 80078f0:	b087      	sub	sp, #28
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
 80078f6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	7b1b      	ldrb	r3, [r3, #12]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	f040 809d 	bne.w	8007a3c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	785b      	ldrb	r3, [r3, #1]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d04c      	beq.n	80079a4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	009b      	lsls	r3, r3, #2
 8007912:	4413      	add	r3, r2
 8007914:	881b      	ldrh	r3, [r3, #0]
 8007916:	823b      	strh	r3, [r7, #16]
 8007918:	8a3b      	ldrh	r3, [r7, #16]
 800791a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800791e:	2b00      	cmp	r3, #0
 8007920:	d01b      	beq.n	800795a <USB_EPClearStall+0x6c>
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	4413      	add	r3, r2
 800792c:	881b      	ldrh	r3, [r3, #0]
 800792e:	b29b      	uxth	r3, r3
 8007930:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007934:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007938:	81fb      	strh	r3, [r7, #14]
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	441a      	add	r2, r3
 8007944:	89fb      	ldrh	r3, [r7, #14]
 8007946:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800794a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800794e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007952:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007956:	b29b      	uxth	r3, r3
 8007958:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	78db      	ldrb	r3, [r3, #3]
 800795e:	2b01      	cmp	r3, #1
 8007960:	d06c      	beq.n	8007a3c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	4413      	add	r3, r2
 800796c:	881b      	ldrh	r3, [r3, #0]
 800796e:	b29b      	uxth	r3, r3
 8007970:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007974:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007978:	81bb      	strh	r3, [r7, #12]
 800797a:	89bb      	ldrh	r3, [r7, #12]
 800797c:	f083 0320 	eor.w	r3, r3, #32
 8007980:	81bb      	strh	r3, [r7, #12]
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	781b      	ldrb	r3, [r3, #0]
 8007988:	009b      	lsls	r3, r3, #2
 800798a:	441a      	add	r2, r3
 800798c:	89bb      	ldrh	r3, [r7, #12]
 800798e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007992:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007996:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800799a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800799e:	b29b      	uxth	r3, r3
 80079a0:	8013      	strh	r3, [r2, #0]
 80079a2:	e04b      	b.n	8007a3c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	4413      	add	r3, r2
 80079ae:	881b      	ldrh	r3, [r3, #0]
 80079b0:	82fb      	strh	r3, [r7, #22]
 80079b2:	8afb      	ldrh	r3, [r7, #22]
 80079b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d01b      	beq.n	80079f4 <USB_EPClearStall+0x106>
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	4413      	add	r3, r2
 80079c6:	881b      	ldrh	r3, [r3, #0]
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079d2:	82bb      	strh	r3, [r7, #20]
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	009b      	lsls	r3, r3, #2
 80079dc:	441a      	add	r2, r3
 80079de:	8abb      	ldrh	r3, [r7, #20]
 80079e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80079ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	009b      	lsls	r3, r3, #2
 80079fc:	4413      	add	r3, r2
 80079fe:	881b      	ldrh	r3, [r3, #0]
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a0a:	827b      	strh	r3, [r7, #18]
 8007a0c:	8a7b      	ldrh	r3, [r7, #18]
 8007a0e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007a12:	827b      	strh	r3, [r7, #18]
 8007a14:	8a7b      	ldrh	r3, [r7, #18]
 8007a16:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007a1a:	827b      	strh	r3, [r7, #18]
 8007a1c:	687a      	ldr	r2, [r7, #4]
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	441a      	add	r2, r3
 8007a26:	8a7b      	ldrh	r3, [r7, #18]
 8007a28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007a3c:	2300      	movs	r3, #0
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	371c      	adds	r7, #28
 8007a42:	46bd      	mov	sp, r7
 8007a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a48:	4770      	bx	lr

08007a4a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007a4a:	b480      	push	{r7}
 8007a4c:	b083      	sub	sp, #12
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
 8007a52:	460b      	mov	r3, r1
 8007a54:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007a56:	78fb      	ldrb	r3, [r7, #3]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d103      	bne.n	8007a64 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2280      	movs	r2, #128	; 0x80
 8007a60:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007a64:	2300      	movs	r3, #0
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	370c      	adds	r7, #12
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr

08007a72 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007a72:	b480      	push	{r7}
 8007a74:	b083      	sub	sp, #12
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007a7a:	2300      	movs	r3, #0
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	370c      	adds	r7, #12
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b085      	sub	sp, #20
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3714      	adds	r7, #20
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr

08007aa8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b08b      	sub	sp, #44	; 0x2c
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	60f8      	str	r0, [r7, #12]
 8007ab0:	60b9      	str	r1, [r7, #8]
 8007ab2:	4611      	mov	r1, r2
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	460b      	mov	r3, r1
 8007ab8:	80fb      	strh	r3, [r7, #6]
 8007aba:	4613      	mov	r3, r2
 8007abc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007abe:	88bb      	ldrh	r3, [r7, #4]
 8007ac0:	3301      	adds	r3, #1
 8007ac2:	085b      	lsrs	r3, r3, #1
 8007ac4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007ace:	88fa      	ldrh	r2, [r7, #6]
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	4413      	add	r3, r2
 8007ad4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ad8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007ada:	69bb      	ldr	r3, [r7, #24]
 8007adc:	627b      	str	r3, [r7, #36]	; 0x24
 8007ade:	e01b      	b.n	8007b18 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007ae6:	69fb      	ldr	r3, [r7, #28]
 8007ae8:	3301      	adds	r3, #1
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	021b      	lsls	r3, r3, #8
 8007aee:	b21a      	sxth	r2, r3
 8007af0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007af4:	4313      	orrs	r3, r2
 8007af6:	b21b      	sxth	r3, r3
 8007af8:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007afa:	6a3b      	ldr	r3, [r7, #32]
 8007afc:	8a7a      	ldrh	r2, [r7, #18]
 8007afe:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007b00:	6a3b      	ldr	r3, [r7, #32]
 8007b02:	3302      	adds	r3, #2
 8007b04:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8007b06:	69fb      	ldr	r3, [r7, #28]
 8007b08:	3301      	adds	r3, #1
 8007b0a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007b0c:	69fb      	ldr	r3, [r7, #28]
 8007b0e:	3301      	adds	r3, #1
 8007b10:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b14:	3b01      	subs	r3, #1
 8007b16:	627b      	str	r3, [r7, #36]	; 0x24
 8007b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d1e0      	bne.n	8007ae0 <USB_WritePMA+0x38>
  }
}
 8007b1e:	bf00      	nop
 8007b20:	bf00      	nop
 8007b22:	372c      	adds	r7, #44	; 0x2c
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr

08007b2c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b08b      	sub	sp, #44	; 0x2c
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	60b9      	str	r1, [r7, #8]
 8007b36:	4611      	mov	r1, r2
 8007b38:	461a      	mov	r2, r3
 8007b3a:	460b      	mov	r3, r1
 8007b3c:	80fb      	strh	r3, [r7, #6]
 8007b3e:	4613      	mov	r3, r2
 8007b40:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007b42:	88bb      	ldrh	r3, [r7, #4]
 8007b44:	085b      	lsrs	r3, r3, #1
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007b52:	88fa      	ldrh	r2, [r7, #6]
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	4413      	add	r3, r2
 8007b58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b5c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007b5e:	69bb      	ldr	r3, [r7, #24]
 8007b60:	627b      	str	r3, [r7, #36]	; 0x24
 8007b62:	e018      	b.n	8007b96 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007b64:	6a3b      	ldr	r3, [r7, #32]
 8007b66:	881b      	ldrh	r3, [r3, #0]
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007b6c:	6a3b      	ldr	r3, [r7, #32]
 8007b6e:	3302      	adds	r3, #2
 8007b70:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	b2da      	uxtb	r2, r3
 8007b76:	69fb      	ldr	r3, [r7, #28]
 8007b78:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007b7a:	69fb      	ldr	r3, [r7, #28]
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	0a1b      	lsrs	r3, r3, #8
 8007b84:	b2da      	uxtb	r2, r3
 8007b86:	69fb      	ldr	r3, [r7, #28]
 8007b88:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007b8a:	69fb      	ldr	r3, [r7, #28]
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b92:	3b01      	subs	r3, #1
 8007b94:	627b      	str	r3, [r7, #36]	; 0x24
 8007b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d1e3      	bne.n	8007b64 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007b9c:	88bb      	ldrh	r3, [r7, #4]
 8007b9e:	f003 0301 	and.w	r3, r3, #1
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d007      	beq.n	8007bb8 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8007ba8:	6a3b      	ldr	r3, [r7, #32]
 8007baa:	881b      	ldrh	r3, [r3, #0]
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	b2da      	uxtb	r2, r3
 8007bb4:	69fb      	ldr	r3, [r7, #28]
 8007bb6:	701a      	strb	r2, [r3, #0]
  }
}
 8007bb8:	bf00      	nop
 8007bba:	372c      	adds	r7, #44	; 0x2c
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	460b      	mov	r3, r1
 8007bce:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	7c1b      	ldrb	r3, [r3, #16]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d115      	bne.n	8007c08 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007bdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007be0:	2202      	movs	r2, #2
 8007be2:	2181      	movs	r1, #129	; 0x81
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f001 fe46 	bl	8009876 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2201      	movs	r2, #1
 8007bee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007bf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bf4:	2202      	movs	r2, #2
 8007bf6:	2101      	movs	r1, #1
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f001 fe3c 	bl	8009876 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2201      	movs	r2, #1
 8007c02:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007c06:	e012      	b.n	8007c2e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007c08:	2340      	movs	r3, #64	; 0x40
 8007c0a:	2202      	movs	r2, #2
 8007c0c:	2181      	movs	r1, #129	; 0x81
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f001 fe31 	bl	8009876 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2201      	movs	r2, #1
 8007c18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007c1a:	2340      	movs	r3, #64	; 0x40
 8007c1c:	2202      	movs	r2, #2
 8007c1e:	2101      	movs	r1, #1
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f001 fe28 	bl	8009876 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2201      	movs	r2, #1
 8007c2a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007c2e:	2308      	movs	r3, #8
 8007c30:	2203      	movs	r2, #3
 8007c32:	2182      	movs	r1, #130	; 0x82
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f001 fe1e 	bl	8009876 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007c40:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007c44:	f001 ff40 	bl	8009ac8 <USBD_static_malloc>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d102      	bne.n	8007c60 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	73fb      	strb	r3, [r7, #15]
 8007c5e:	e026      	b.n	8007cae <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c66:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	2200      	movs	r2, #0
 8007c76:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	7c1b      	ldrb	r3, [r3, #16]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d109      	bne.n	8007c9e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c94:	2101      	movs	r1, #1
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f001 fedf 	bl	8009a5a <USBD_LL_PrepareReceive>
 8007c9c:	e007      	b.n	8007cae <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ca4:	2340      	movs	r3, #64	; 0x40
 8007ca6:	2101      	movs	r1, #1
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f001 fed6 	bl	8009a5a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3710      	adds	r7, #16
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007cc8:	2181      	movs	r1, #129	; 0x81
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f001 fdf9 	bl	80098c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007cd6:	2101      	movs	r1, #1
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f001 fdf2 	bl	80098c2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007ce6:	2182      	movs	r1, #130	; 0x82
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f001 fdea 	bl	80098c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d00e      	beq.n	8007d1c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f001 fee8 	bl	8009ae4 <USBD_static_free>
    pdev->pClassData = NULL;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3710      	adds	r7, #16
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}

08007d26 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007d26:	b580      	push	{r7, lr}
 8007d28:	b086      	sub	sp, #24
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
 8007d2e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d36:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007d40:	2300      	movs	r3, #0
 8007d42:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d039      	beq.n	8007dc4 <USBD_CDC_Setup+0x9e>
 8007d50:	2b20      	cmp	r3, #32
 8007d52:	d17f      	bne.n	8007e54 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	88db      	ldrh	r3, [r3, #6]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d029      	beq.n	8007db0 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	b25b      	sxtb	r3, r3
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	da11      	bge.n	8007d8a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	683a      	ldr	r2, [r7, #0]
 8007d70:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007d72:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007d74:	683a      	ldr	r2, [r7, #0]
 8007d76:	88d2      	ldrh	r2, [r2, #6]
 8007d78:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007d7a:	6939      	ldr	r1, [r7, #16]
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	88db      	ldrh	r3, [r3, #6]
 8007d80:	461a      	mov	r2, r3
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f001 f9e3 	bl	800914e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007d88:	e06b      	b.n	8007e62 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	785a      	ldrb	r2, [r3, #1]
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	88db      	ldrh	r3, [r3, #6]
 8007d98:	b2da      	uxtb	r2, r3
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007da0:	6939      	ldr	r1, [r7, #16]
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	88db      	ldrh	r3, [r3, #6]
 8007da6:	461a      	mov	r2, r3
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f001 f9fe 	bl	80091aa <USBD_CtlPrepareRx>
      break;
 8007dae:	e058      	b.n	8007e62 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007db6:	689b      	ldr	r3, [r3, #8]
 8007db8:	683a      	ldr	r2, [r7, #0]
 8007dba:	7850      	ldrb	r0, [r2, #1]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	6839      	ldr	r1, [r7, #0]
 8007dc0:	4798      	blx	r3
      break;
 8007dc2:	e04e      	b.n	8007e62 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	785b      	ldrb	r3, [r3, #1]
 8007dc8:	2b0b      	cmp	r3, #11
 8007dca:	d02e      	beq.n	8007e2a <USBD_CDC_Setup+0x104>
 8007dcc:	2b0b      	cmp	r3, #11
 8007dce:	dc38      	bgt.n	8007e42 <USBD_CDC_Setup+0x11c>
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d002      	beq.n	8007dda <USBD_CDC_Setup+0xb4>
 8007dd4:	2b0a      	cmp	r3, #10
 8007dd6:	d014      	beq.n	8007e02 <USBD_CDC_Setup+0xdc>
 8007dd8:	e033      	b.n	8007e42 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007de0:	2b03      	cmp	r3, #3
 8007de2:	d107      	bne.n	8007df4 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007de4:	f107 030c 	add.w	r3, r7, #12
 8007de8:	2202      	movs	r2, #2
 8007dea:	4619      	mov	r1, r3
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f001 f9ae 	bl	800914e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007df2:	e02e      	b.n	8007e52 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007df4:	6839      	ldr	r1, [r7, #0]
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f001 f93e 	bl	8009078 <USBD_CtlError>
            ret = USBD_FAIL;
 8007dfc:	2302      	movs	r3, #2
 8007dfe:	75fb      	strb	r3, [r7, #23]
          break;
 8007e00:	e027      	b.n	8007e52 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e08:	2b03      	cmp	r3, #3
 8007e0a:	d107      	bne.n	8007e1c <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007e0c:	f107 030f 	add.w	r3, r7, #15
 8007e10:	2201      	movs	r2, #1
 8007e12:	4619      	mov	r1, r3
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f001 f99a 	bl	800914e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e1a:	e01a      	b.n	8007e52 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007e1c:	6839      	ldr	r1, [r7, #0]
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f001 f92a 	bl	8009078 <USBD_CtlError>
            ret = USBD_FAIL;
 8007e24:	2302      	movs	r3, #2
 8007e26:	75fb      	strb	r3, [r7, #23]
          break;
 8007e28:	e013      	b.n	8007e52 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e30:	2b03      	cmp	r3, #3
 8007e32:	d00d      	beq.n	8007e50 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007e34:	6839      	ldr	r1, [r7, #0]
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f001 f91e 	bl	8009078 <USBD_CtlError>
            ret = USBD_FAIL;
 8007e3c:	2302      	movs	r3, #2
 8007e3e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007e40:	e006      	b.n	8007e50 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007e42:	6839      	ldr	r1, [r7, #0]
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f001 f917 	bl	8009078 <USBD_CtlError>
          ret = USBD_FAIL;
 8007e4a:	2302      	movs	r3, #2
 8007e4c:	75fb      	strb	r3, [r7, #23]
          break;
 8007e4e:	e000      	b.n	8007e52 <USBD_CDC_Setup+0x12c>
          break;
 8007e50:	bf00      	nop
      }
      break;
 8007e52:	e006      	b.n	8007e62 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007e54:	6839      	ldr	r1, [r7, #0]
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f001 f90e 	bl	8009078 <USBD_CtlError>
      ret = USBD_FAIL;
 8007e5c:	2302      	movs	r3, #2
 8007e5e:	75fb      	strb	r3, [r7, #23]
      break;
 8007e60:	bf00      	nop
  }

  return ret;
 8007e62:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3718      	adds	r7, #24
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	460b      	mov	r3, r1
 8007e76:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e7e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e86:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d03a      	beq.n	8007f08 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007e92:	78fa      	ldrb	r2, [r7, #3]
 8007e94:	6879      	ldr	r1, [r7, #4]
 8007e96:	4613      	mov	r3, r2
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	4413      	add	r3, r2
 8007e9c:	009b      	lsls	r3, r3, #2
 8007e9e:	440b      	add	r3, r1
 8007ea0:	331c      	adds	r3, #28
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d029      	beq.n	8007efc <USBD_CDC_DataIn+0x90>
 8007ea8:	78fa      	ldrb	r2, [r7, #3]
 8007eaa:	6879      	ldr	r1, [r7, #4]
 8007eac:	4613      	mov	r3, r2
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	4413      	add	r3, r2
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	440b      	add	r3, r1
 8007eb6:	331c      	adds	r3, #28
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	78f9      	ldrb	r1, [r7, #3]
 8007ebc:	68b8      	ldr	r0, [r7, #8]
 8007ebe:	460b      	mov	r3, r1
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	440b      	add	r3, r1
 8007ec4:	00db      	lsls	r3, r3, #3
 8007ec6:	4403      	add	r3, r0
 8007ec8:	3338      	adds	r3, #56	; 0x38
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	fbb2 f1f3 	udiv	r1, r2, r3
 8007ed0:	fb01 f303 	mul.w	r3, r1, r3
 8007ed4:	1ad3      	subs	r3, r2, r3
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d110      	bne.n	8007efc <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007eda:	78fa      	ldrb	r2, [r7, #3]
 8007edc:	6879      	ldr	r1, [r7, #4]
 8007ede:	4613      	mov	r3, r2
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	4413      	add	r3, r2
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	440b      	add	r3, r1
 8007ee8:	331c      	adds	r3, #28
 8007eea:	2200      	movs	r2, #0
 8007eec:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007eee:	78f9      	ldrb	r1, [r7, #3]
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f001 fd8d 	bl	8009a14 <USBD_LL_Transmit>
 8007efa:	e003      	b.n	8007f04 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2200      	movs	r2, #0
 8007f00:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007f04:	2300      	movs	r3, #0
 8007f06:	e000      	b.n	8007f0a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007f08:	2302      	movs	r3, #2
  }
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3710      	adds	r7, #16
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}

08007f12 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f12:	b580      	push	{r7, lr}
 8007f14:	b084      	sub	sp, #16
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
 8007f1a:	460b      	mov	r3, r1
 8007f1c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f24:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007f26:	78fb      	ldrb	r3, [r7, #3]
 8007f28:	4619      	mov	r1, r3
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f001 fdb8 	bl	8009aa0 <USBD_LL_GetRxDataSize>
 8007f30:	4602      	mov	r2, r0
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d00d      	beq.n	8007f5e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f48:	68db      	ldr	r3, [r3, #12]
 8007f4a:	68fa      	ldr	r2, [r7, #12]
 8007f4c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007f50:	68fa      	ldr	r2, [r7, #12]
 8007f52:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007f56:	4611      	mov	r1, r2
 8007f58:	4798      	blx	r3

    return USBD_OK;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	e000      	b.n	8007f60 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007f5e:	2302      	movs	r3, #2
  }
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3710      	adds	r7, #16
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f76:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d015      	beq.n	8007fae <USBD_CDC_EP0_RxReady+0x46>
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007f88:	2bff      	cmp	r3, #255	; 0xff
 8007f8a:	d010      	beq.n	8007fae <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	68fa      	ldr	r2, [r7, #12]
 8007f96:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007f9a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007f9c:	68fa      	ldr	r2, [r7, #12]
 8007f9e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007fa2:	b292      	uxth	r2, r2
 8007fa4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	22ff      	movs	r2, #255	; 0xff
 8007faa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007fae:	2300      	movs	r3, #0
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3710      	adds	r7, #16
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b083      	sub	sp, #12
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2243      	movs	r2, #67	; 0x43
 8007fc4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007fc6:	4b03      	ldr	r3, [pc, #12]	; (8007fd4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	370c      	adds	r7, #12
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr
 8007fd4:	20000094 	.word	0x20000094

08007fd8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2243      	movs	r2, #67	; 0x43
 8007fe4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007fe6:	4b03      	ldr	r3, [pc, #12]	; (8007ff4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	370c      	adds	r7, #12
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr
 8007ff4:	20000050 	.word	0x20000050

08007ff8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b083      	sub	sp, #12
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2243      	movs	r2, #67	; 0x43
 8008004:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008006:	4b03      	ldr	r3, [pc, #12]	; (8008014 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008008:	4618      	mov	r0, r3
 800800a:	370c      	adds	r7, #12
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr
 8008014:	200000d8 	.word	0x200000d8

08008018 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008018:	b480      	push	{r7}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	220a      	movs	r2, #10
 8008024:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008026:	4b03      	ldr	r3, [pc, #12]	; (8008034 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008028:	4618      	mov	r0, r3
 800802a:	370c      	adds	r7, #12
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr
 8008034:	2000000c 	.word	0x2000000c

08008038 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008038:	b480      	push	{r7}
 800803a:	b085      	sub	sp, #20
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008042:	2302      	movs	r3, #2
 8008044:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d005      	beq.n	8008058 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	683a      	ldr	r2, [r7, #0]
 8008050:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008054:	2300      	movs	r3, #0
 8008056:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008058:	7bfb      	ldrb	r3, [r7, #15]
}
 800805a:	4618      	mov	r0, r3
 800805c:	3714      	adds	r7, #20
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr

08008066 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008066:	b480      	push	{r7}
 8008068:	b087      	sub	sp, #28
 800806a:	af00      	add	r7, sp, #0
 800806c:	60f8      	str	r0, [r7, #12]
 800806e:	60b9      	str	r1, [r7, #8]
 8008070:	4613      	mov	r3, r2
 8008072:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800807a:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	68ba      	ldr	r2, [r7, #8]
 8008080:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008084:	88fa      	ldrh	r2, [r7, #6]
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800808c:	2300      	movs	r3, #0
}
 800808e:	4618      	mov	r0, r3
 8008090:	371c      	adds	r7, #28
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr

0800809a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800809a:	b480      	push	{r7}
 800809c:	b085      	sub	sp, #20
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
 80080a2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080aa:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	683a      	ldr	r2, [r7, #0]
 80080b0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80080b4:	2300      	movs	r3, #0
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3714      	adds	r7, #20
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr

080080c2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80080c2:	b580      	push	{r7, lr}
 80080c4:	b084      	sub	sp, #16
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080d0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d017      	beq.n	800810c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	7c1b      	ldrb	r3, [r3, #16]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d109      	bne.n	80080f8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80080ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080ee:	2101      	movs	r1, #1
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f001 fcb2 	bl	8009a5a <USBD_LL_PrepareReceive>
 80080f6:	e007      	b.n	8008108 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80080fe:	2340      	movs	r3, #64	; 0x40
 8008100:	2101      	movs	r1, #1
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f001 fca9 	bl	8009a5a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008108:	2300      	movs	r3, #0
 800810a:	e000      	b.n	800810e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800810c:	2302      	movs	r3, #2
  }
}
 800810e:	4618      	mov	r0, r3
 8008110:	3710      	adds	r7, #16
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}

08008116 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008116:	b580      	push	{r7, lr}
 8008118:	b084      	sub	sp, #16
 800811a:	af00      	add	r7, sp, #0
 800811c:	60f8      	str	r0, [r7, #12]
 800811e:	60b9      	str	r1, [r7, #8]
 8008120:	4613      	mov	r3, r2
 8008122:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d101      	bne.n	800812e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800812a:	2302      	movs	r3, #2
 800812c:	e01a      	b.n	8008164 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008134:	2b00      	cmp	r3, #0
 8008136:	d003      	beq.n	8008140 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2200      	movs	r2, #0
 800813c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d003      	beq.n	800814e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	68ba      	ldr	r2, [r7, #8]
 800814a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2201      	movs	r2, #1
 8008152:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	79fa      	ldrb	r2, [r7, #7]
 800815a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800815c:	68f8      	ldr	r0, [r7, #12]
 800815e:	f001 fb13 	bl	8009788 <USBD_LL_Init>

  return USBD_OK;
 8008162:	2300      	movs	r3, #0
}
 8008164:	4618      	mov	r0, r3
 8008166:	3710      	adds	r7, #16
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800816c:	b480      	push	{r7}
 800816e:	b085      	sub	sp, #20
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008176:	2300      	movs	r3, #0
 8008178:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d006      	beq.n	800818e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	683a      	ldr	r2, [r7, #0]
 8008184:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008188:	2300      	movs	r3, #0
 800818a:	73fb      	strb	r3, [r7, #15]
 800818c:	e001      	b.n	8008192 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800818e:	2302      	movs	r3, #2
 8008190:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008192:	7bfb      	ldrb	r3, [r7, #15]
}
 8008194:	4618      	mov	r0, r3
 8008196:	3714      	adds	r7, #20
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr

080081a0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f001 fb49 	bl	8009840 <USBD_LL_Start>

  return USBD_OK;
 80081ae:	2300      	movs	r3, #0
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3708      	adds	r7, #8
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b083      	sub	sp, #12
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80081c0:	2300      	movs	r3, #0
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	370c      	adds	r7, #12
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr

080081ce <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80081ce:	b580      	push	{r7, lr}
 80081d0:	b084      	sub	sp, #16
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
 80081d6:	460b      	mov	r3, r1
 80081d8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80081da:	2302      	movs	r3, #2
 80081dc:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d00c      	beq.n	8008202 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	78fa      	ldrb	r2, [r7, #3]
 80081f2:	4611      	mov	r1, r2
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	4798      	blx	r3
 80081f8:	4603      	mov	r3, r0
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d101      	bne.n	8008202 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80081fe:	2300      	movs	r3, #0
 8008200:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008202:	7bfb      	ldrb	r3, [r7, #15]
}
 8008204:	4618      	mov	r0, r3
 8008206:	3710      	adds	r7, #16
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b082      	sub	sp, #8
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	460b      	mov	r3, r1
 8008216:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	78fa      	ldrb	r2, [r7, #3]
 8008222:	4611      	mov	r1, r2
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	4798      	blx	r3

  return USBD_OK;
 8008228:	2300      	movs	r3, #0
}
 800822a:	4618      	mov	r0, r3
 800822c:	3708      	adds	r7, #8
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}

08008232 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008232:	b580      	push	{r7, lr}
 8008234:	b082      	sub	sp, #8
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
 800823a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008242:	6839      	ldr	r1, [r7, #0]
 8008244:	4618      	mov	r0, r3
 8008246:	f000 feda 	bl	8008ffe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2201      	movs	r2, #1
 800824e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008258:	461a      	mov	r2, r3
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008266:	f003 031f 	and.w	r3, r3, #31
 800826a:	2b02      	cmp	r3, #2
 800826c:	d016      	beq.n	800829c <USBD_LL_SetupStage+0x6a>
 800826e:	2b02      	cmp	r3, #2
 8008270:	d81c      	bhi.n	80082ac <USBD_LL_SetupStage+0x7a>
 8008272:	2b00      	cmp	r3, #0
 8008274:	d002      	beq.n	800827c <USBD_LL_SetupStage+0x4a>
 8008276:	2b01      	cmp	r3, #1
 8008278:	d008      	beq.n	800828c <USBD_LL_SetupStage+0x5a>
 800827a:	e017      	b.n	80082ac <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008282:	4619      	mov	r1, r3
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 f9cd 	bl	8008624 <USBD_StdDevReq>
      break;
 800828a:	e01a      	b.n	80082c2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008292:	4619      	mov	r1, r3
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 fa2f 	bl	80086f8 <USBD_StdItfReq>
      break;
 800829a:	e012      	b.n	80082c2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80082a2:	4619      	mov	r1, r3
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 fa6f 	bl	8008788 <USBD_StdEPReq>
      break;
 80082aa:	e00a      	b.n	80082c2 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80082b2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80082b6:	b2db      	uxtb	r3, r3
 80082b8:	4619      	mov	r1, r3
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f001 fb20 	bl	8009900 <USBD_LL_StallEP>
      break;
 80082c0:	bf00      	nop
  }

  return USBD_OK;
 80082c2:	2300      	movs	r3, #0
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3708      	adds	r7, #8
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b086      	sub	sp, #24
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	60f8      	str	r0, [r7, #12]
 80082d4:	460b      	mov	r3, r1
 80082d6:	607a      	str	r2, [r7, #4]
 80082d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80082da:	7afb      	ldrb	r3, [r7, #11]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d14b      	bne.n	8008378 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80082e6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80082ee:	2b03      	cmp	r3, #3
 80082f0:	d134      	bne.n	800835c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	68da      	ldr	r2, [r3, #12]
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	691b      	ldr	r3, [r3, #16]
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d919      	bls.n	8008332 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	68da      	ldr	r2, [r3, #12]
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	691b      	ldr	r3, [r3, #16]
 8008306:	1ad2      	subs	r2, r2, r3
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	68da      	ldr	r2, [r3, #12]
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008314:	429a      	cmp	r2, r3
 8008316:	d203      	bcs.n	8008320 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800831c:	b29b      	uxth	r3, r3
 800831e:	e002      	b.n	8008326 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008324:	b29b      	uxth	r3, r3
 8008326:	461a      	mov	r2, r3
 8008328:	6879      	ldr	r1, [r7, #4]
 800832a:	68f8      	ldr	r0, [r7, #12]
 800832c:	f000 ff5b 	bl	80091e6 <USBD_CtlContinueRx>
 8008330:	e038      	b.n	80083a4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008338:	691b      	ldr	r3, [r3, #16]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d00a      	beq.n	8008354 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008344:	2b03      	cmp	r3, #3
 8008346:	d105      	bne.n	8008354 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800834e:	691b      	ldr	r3, [r3, #16]
 8008350:	68f8      	ldr	r0, [r7, #12]
 8008352:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008354:	68f8      	ldr	r0, [r7, #12]
 8008356:	f000 ff58 	bl	800920a <USBD_CtlSendStatus>
 800835a:	e023      	b.n	80083a4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008362:	2b05      	cmp	r3, #5
 8008364:	d11e      	bne.n	80083a4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2200      	movs	r2, #0
 800836a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800836e:	2100      	movs	r1, #0
 8008370:	68f8      	ldr	r0, [r7, #12]
 8008372:	f001 fac5 	bl	8009900 <USBD_LL_StallEP>
 8008376:	e015      	b.n	80083a4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800837e:	699b      	ldr	r3, [r3, #24]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d00d      	beq.n	80083a0 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800838a:	2b03      	cmp	r3, #3
 800838c:	d108      	bne.n	80083a0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008394:	699b      	ldr	r3, [r3, #24]
 8008396:	7afa      	ldrb	r2, [r7, #11]
 8008398:	4611      	mov	r1, r2
 800839a:	68f8      	ldr	r0, [r7, #12]
 800839c:	4798      	blx	r3
 800839e:	e001      	b.n	80083a4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80083a0:	2302      	movs	r3, #2
 80083a2:	e000      	b.n	80083a6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80083a4:	2300      	movs	r3, #0
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3718      	adds	r7, #24
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}

080083ae <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80083ae:	b580      	push	{r7, lr}
 80083b0:	b086      	sub	sp, #24
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	60f8      	str	r0, [r7, #12]
 80083b6:	460b      	mov	r3, r1
 80083b8:	607a      	str	r2, [r7, #4]
 80083ba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80083bc:	7afb      	ldrb	r3, [r7, #11]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d17f      	bne.n	80084c2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	3314      	adds	r3, #20
 80083c6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80083ce:	2b02      	cmp	r3, #2
 80083d0:	d15c      	bne.n	800848c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	68da      	ldr	r2, [r3, #12]
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	691b      	ldr	r3, [r3, #16]
 80083da:	429a      	cmp	r2, r3
 80083dc:	d915      	bls.n	800840a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	68da      	ldr	r2, [r3, #12]
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	691b      	ldr	r3, [r3, #16]
 80083e6:	1ad2      	subs	r2, r2, r3
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	68db      	ldr	r3, [r3, #12]
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	461a      	mov	r2, r3
 80083f4:	6879      	ldr	r1, [r7, #4]
 80083f6:	68f8      	ldr	r0, [r7, #12]
 80083f8:	f000 fec5 	bl	8009186 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80083fc:	2300      	movs	r3, #0
 80083fe:	2200      	movs	r2, #0
 8008400:	2100      	movs	r1, #0
 8008402:	68f8      	ldr	r0, [r7, #12]
 8008404:	f001 fb29 	bl	8009a5a <USBD_LL_PrepareReceive>
 8008408:	e04e      	b.n	80084a8 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	689b      	ldr	r3, [r3, #8]
 800840e:	697a      	ldr	r2, [r7, #20]
 8008410:	6912      	ldr	r2, [r2, #16]
 8008412:	fbb3 f1f2 	udiv	r1, r3, r2
 8008416:	fb01 f202 	mul.w	r2, r1, r2
 800841a:	1a9b      	subs	r3, r3, r2
 800841c:	2b00      	cmp	r3, #0
 800841e:	d11c      	bne.n	800845a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	689a      	ldr	r2, [r3, #8]
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008428:	429a      	cmp	r2, r3
 800842a:	d316      	bcc.n	800845a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	689a      	ldr	r2, [r3, #8]
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008436:	429a      	cmp	r2, r3
 8008438:	d20f      	bcs.n	800845a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800843a:	2200      	movs	r2, #0
 800843c:	2100      	movs	r1, #0
 800843e:	68f8      	ldr	r0, [r7, #12]
 8008440:	f000 fea1 	bl	8009186 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2200      	movs	r2, #0
 8008448:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800844c:	2300      	movs	r3, #0
 800844e:	2200      	movs	r2, #0
 8008450:	2100      	movs	r1, #0
 8008452:	68f8      	ldr	r0, [r7, #12]
 8008454:	f001 fb01 	bl	8009a5a <USBD_LL_PrepareReceive>
 8008458:	e026      	b.n	80084a8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008460:	68db      	ldr	r3, [r3, #12]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d00a      	beq.n	800847c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800846c:	2b03      	cmp	r3, #3
 800846e:	d105      	bne.n	800847c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	68f8      	ldr	r0, [r7, #12]
 800847a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800847c:	2180      	movs	r1, #128	; 0x80
 800847e:	68f8      	ldr	r0, [r7, #12]
 8008480:	f001 fa3e 	bl	8009900 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008484:	68f8      	ldr	r0, [r7, #12]
 8008486:	f000 fed3 	bl	8009230 <USBD_CtlReceiveStatus>
 800848a:	e00d      	b.n	80084a8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008492:	2b04      	cmp	r3, #4
 8008494:	d004      	beq.n	80084a0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800849c:	2b00      	cmp	r3, #0
 800849e:	d103      	bne.n	80084a8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80084a0:	2180      	movs	r1, #128	; 0x80
 80084a2:	68f8      	ldr	r0, [r7, #12]
 80084a4:	f001 fa2c 	bl	8009900 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80084ae:	2b01      	cmp	r3, #1
 80084b0:	d11d      	bne.n	80084ee <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80084b2:	68f8      	ldr	r0, [r7, #12]
 80084b4:	f7ff fe80 	bl	80081b8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2200      	movs	r2, #0
 80084bc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80084c0:	e015      	b.n	80084ee <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084c8:	695b      	ldr	r3, [r3, #20]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d00d      	beq.n	80084ea <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80084d4:	2b03      	cmp	r3, #3
 80084d6:	d108      	bne.n	80084ea <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084de:	695b      	ldr	r3, [r3, #20]
 80084e0:	7afa      	ldrb	r2, [r7, #11]
 80084e2:	4611      	mov	r1, r2
 80084e4:	68f8      	ldr	r0, [r7, #12]
 80084e6:	4798      	blx	r3
 80084e8:	e001      	b.n	80084ee <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80084ea:	2302      	movs	r3, #2
 80084ec:	e000      	b.n	80084f0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80084ee:	2300      	movs	r3, #0
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3718      	adds	r7, #24
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}

080084f8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b082      	sub	sp, #8
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008500:	2340      	movs	r3, #64	; 0x40
 8008502:	2200      	movs	r2, #0
 8008504:	2100      	movs	r1, #0
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f001 f9b5 	bl	8009876 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2201      	movs	r2, #1
 8008510:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2240      	movs	r2, #64	; 0x40
 8008518:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800851c:	2340      	movs	r3, #64	; 0x40
 800851e:	2200      	movs	r2, #0
 8008520:	2180      	movs	r1, #128	; 0x80
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f001 f9a7 	bl	8009876 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2201      	movs	r2, #1
 800852c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2240      	movs	r2, #64	; 0x40
 8008532:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2201      	movs	r2, #1
 8008538:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2200      	movs	r2, #0
 8008540:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008558:	2b00      	cmp	r3, #0
 800855a:	d009      	beq.n	8008570 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	6852      	ldr	r2, [r2, #4]
 8008568:	b2d2      	uxtb	r2, r2
 800856a:	4611      	mov	r1, r2
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	4798      	blx	r3
  }

  return USBD_OK;
 8008570:	2300      	movs	r3, #0
}
 8008572:	4618      	mov	r0, r3
 8008574:	3708      	adds	r7, #8
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}

0800857a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800857a:	b480      	push	{r7}
 800857c:	b083      	sub	sp, #12
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
 8008582:	460b      	mov	r3, r1
 8008584:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	78fa      	ldrb	r2, [r7, #3]
 800858a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800858c:	2300      	movs	r3, #0
}
 800858e:	4618      	mov	r0, r3
 8008590:	370c      	adds	r7, #12
 8008592:	46bd      	mov	sp, r7
 8008594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008598:	4770      	bx	lr

0800859a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800859a:	b480      	push	{r7}
 800859c:	b083      	sub	sp, #12
 800859e:	af00      	add	r7, sp, #0
 80085a0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2204      	movs	r2, #4
 80085b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80085b6:	2300      	movs	r3, #0
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	370c      	adds	r7, #12
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr

080085c4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085d2:	2b04      	cmp	r3, #4
 80085d4:	d105      	bne.n	80085e2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80085e2:	2300      	movs	r3, #0
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085fe:	2b03      	cmp	r3, #3
 8008600:	d10b      	bne.n	800861a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008608:	69db      	ldr	r3, [r3, #28]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d005      	beq.n	800861a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008614:	69db      	ldr	r3, [r3, #28]
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800861a:	2300      	movs	r3, #0
}
 800861c:	4618      	mov	r0, r3
 800861e:	3708      	adds	r7, #8
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b084      	sub	sp, #16
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800862e:	2300      	movs	r3, #0
 8008630:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	781b      	ldrb	r3, [r3, #0]
 8008636:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800863a:	2b40      	cmp	r3, #64	; 0x40
 800863c:	d005      	beq.n	800864a <USBD_StdDevReq+0x26>
 800863e:	2b40      	cmp	r3, #64	; 0x40
 8008640:	d84f      	bhi.n	80086e2 <USBD_StdDevReq+0xbe>
 8008642:	2b00      	cmp	r3, #0
 8008644:	d009      	beq.n	800865a <USBD_StdDevReq+0x36>
 8008646:	2b20      	cmp	r3, #32
 8008648:	d14b      	bne.n	80086e2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	6839      	ldr	r1, [r7, #0]
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	4798      	blx	r3
      break;
 8008658:	e048      	b.n	80086ec <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	785b      	ldrb	r3, [r3, #1]
 800865e:	2b09      	cmp	r3, #9
 8008660:	d839      	bhi.n	80086d6 <USBD_StdDevReq+0xb2>
 8008662:	a201      	add	r2, pc, #4	; (adr r2, 8008668 <USBD_StdDevReq+0x44>)
 8008664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008668:	080086b9 	.word	0x080086b9
 800866c:	080086cd 	.word	0x080086cd
 8008670:	080086d7 	.word	0x080086d7
 8008674:	080086c3 	.word	0x080086c3
 8008678:	080086d7 	.word	0x080086d7
 800867c:	0800869b 	.word	0x0800869b
 8008680:	08008691 	.word	0x08008691
 8008684:	080086d7 	.word	0x080086d7
 8008688:	080086af 	.word	0x080086af
 800868c:	080086a5 	.word	0x080086a5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008690:	6839      	ldr	r1, [r7, #0]
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 f9dc 	bl	8008a50 <USBD_GetDescriptor>
          break;
 8008698:	e022      	b.n	80086e0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800869a:	6839      	ldr	r1, [r7, #0]
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f000 fb3f 	bl	8008d20 <USBD_SetAddress>
          break;
 80086a2:	e01d      	b.n	80086e0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80086a4:	6839      	ldr	r1, [r7, #0]
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 fb7e 	bl	8008da8 <USBD_SetConfig>
          break;
 80086ac:	e018      	b.n	80086e0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80086ae:	6839      	ldr	r1, [r7, #0]
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 fc07 	bl	8008ec4 <USBD_GetConfig>
          break;
 80086b6:	e013      	b.n	80086e0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80086b8:	6839      	ldr	r1, [r7, #0]
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 fc37 	bl	8008f2e <USBD_GetStatus>
          break;
 80086c0:	e00e      	b.n	80086e0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80086c2:	6839      	ldr	r1, [r7, #0]
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f000 fc65 	bl	8008f94 <USBD_SetFeature>
          break;
 80086ca:	e009      	b.n	80086e0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80086cc:	6839      	ldr	r1, [r7, #0]
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 fc74 	bl	8008fbc <USBD_ClrFeature>
          break;
 80086d4:	e004      	b.n	80086e0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80086d6:	6839      	ldr	r1, [r7, #0]
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f000 fccd 	bl	8009078 <USBD_CtlError>
          break;
 80086de:	bf00      	nop
      }
      break;
 80086e0:	e004      	b.n	80086ec <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80086e2:	6839      	ldr	r1, [r7, #0]
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f000 fcc7 	bl	8009078 <USBD_CtlError>
      break;
 80086ea:	bf00      	nop
  }

  return ret;
 80086ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3710      	adds	r7, #16
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
 80086f6:	bf00      	nop

080086f8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008702:	2300      	movs	r3, #0
 8008704:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	781b      	ldrb	r3, [r3, #0]
 800870a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800870e:	2b40      	cmp	r3, #64	; 0x40
 8008710:	d005      	beq.n	800871e <USBD_StdItfReq+0x26>
 8008712:	2b40      	cmp	r3, #64	; 0x40
 8008714:	d82e      	bhi.n	8008774 <USBD_StdItfReq+0x7c>
 8008716:	2b00      	cmp	r3, #0
 8008718:	d001      	beq.n	800871e <USBD_StdItfReq+0x26>
 800871a:	2b20      	cmp	r3, #32
 800871c:	d12a      	bne.n	8008774 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008724:	3b01      	subs	r3, #1
 8008726:	2b02      	cmp	r3, #2
 8008728:	d81d      	bhi.n	8008766 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	889b      	ldrh	r3, [r3, #4]
 800872e:	b2db      	uxtb	r3, r3
 8008730:	2b01      	cmp	r3, #1
 8008732:	d813      	bhi.n	800875c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800873a:	689b      	ldr	r3, [r3, #8]
 800873c:	6839      	ldr	r1, [r7, #0]
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	4798      	blx	r3
 8008742:	4603      	mov	r3, r0
 8008744:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	88db      	ldrh	r3, [r3, #6]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d110      	bne.n	8008770 <USBD_StdItfReq+0x78>
 800874e:	7bfb      	ldrb	r3, [r7, #15]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d10d      	bne.n	8008770 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 fd58 	bl	800920a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800875a:	e009      	b.n	8008770 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800875c:	6839      	ldr	r1, [r7, #0]
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f000 fc8a 	bl	8009078 <USBD_CtlError>
          break;
 8008764:	e004      	b.n	8008770 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008766:	6839      	ldr	r1, [r7, #0]
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f000 fc85 	bl	8009078 <USBD_CtlError>
          break;
 800876e:	e000      	b.n	8008772 <USBD_StdItfReq+0x7a>
          break;
 8008770:	bf00      	nop
      }
      break;
 8008772:	e004      	b.n	800877e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008774:	6839      	ldr	r1, [r7, #0]
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 fc7e 	bl	8009078 <USBD_CtlError>
      break;
 800877c:	bf00      	nop
  }

  return USBD_OK;
 800877e:	2300      	movs	r3, #0
}
 8008780:	4618      	mov	r0, r3
 8008782:	3710      	adds	r7, #16
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008792:	2300      	movs	r3, #0
 8008794:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	889b      	ldrh	r3, [r3, #4]
 800879a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	781b      	ldrb	r3, [r3, #0]
 80087a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087a4:	2b40      	cmp	r3, #64	; 0x40
 80087a6:	d007      	beq.n	80087b8 <USBD_StdEPReq+0x30>
 80087a8:	2b40      	cmp	r3, #64	; 0x40
 80087aa:	f200 8146 	bhi.w	8008a3a <USBD_StdEPReq+0x2b2>
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d00a      	beq.n	80087c8 <USBD_StdEPReq+0x40>
 80087b2:	2b20      	cmp	r3, #32
 80087b4:	f040 8141 	bne.w	8008a3a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087be:	689b      	ldr	r3, [r3, #8]
 80087c0:	6839      	ldr	r1, [r7, #0]
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	4798      	blx	r3
      break;
 80087c6:	e13d      	b.n	8008a44 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	781b      	ldrb	r3, [r3, #0]
 80087cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087d0:	2b20      	cmp	r3, #32
 80087d2:	d10a      	bne.n	80087ea <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087da:	689b      	ldr	r3, [r3, #8]
 80087dc:	6839      	ldr	r1, [r7, #0]
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	4798      	blx	r3
 80087e2:	4603      	mov	r3, r0
 80087e4:	73fb      	strb	r3, [r7, #15]

        return ret;
 80087e6:	7bfb      	ldrb	r3, [r7, #15]
 80087e8:	e12d      	b.n	8008a46 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	785b      	ldrb	r3, [r3, #1]
 80087ee:	2b03      	cmp	r3, #3
 80087f0:	d007      	beq.n	8008802 <USBD_StdEPReq+0x7a>
 80087f2:	2b03      	cmp	r3, #3
 80087f4:	f300 811b 	bgt.w	8008a2e <USBD_StdEPReq+0x2a6>
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d072      	beq.n	80088e2 <USBD_StdEPReq+0x15a>
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d03a      	beq.n	8008876 <USBD_StdEPReq+0xee>
 8008800:	e115      	b.n	8008a2e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008808:	2b02      	cmp	r3, #2
 800880a:	d002      	beq.n	8008812 <USBD_StdEPReq+0x8a>
 800880c:	2b03      	cmp	r3, #3
 800880e:	d015      	beq.n	800883c <USBD_StdEPReq+0xb4>
 8008810:	e02b      	b.n	800886a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008812:	7bbb      	ldrb	r3, [r7, #14]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d00c      	beq.n	8008832 <USBD_StdEPReq+0xaa>
 8008818:	7bbb      	ldrb	r3, [r7, #14]
 800881a:	2b80      	cmp	r3, #128	; 0x80
 800881c:	d009      	beq.n	8008832 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800881e:	7bbb      	ldrb	r3, [r7, #14]
 8008820:	4619      	mov	r1, r3
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f001 f86c 	bl	8009900 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008828:	2180      	movs	r1, #128	; 0x80
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f001 f868 	bl	8009900 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008830:	e020      	b.n	8008874 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008832:	6839      	ldr	r1, [r7, #0]
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f000 fc1f 	bl	8009078 <USBD_CtlError>
              break;
 800883a:	e01b      	b.n	8008874 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	885b      	ldrh	r3, [r3, #2]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d10e      	bne.n	8008862 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008844:	7bbb      	ldrb	r3, [r7, #14]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d00b      	beq.n	8008862 <USBD_StdEPReq+0xda>
 800884a:	7bbb      	ldrb	r3, [r7, #14]
 800884c:	2b80      	cmp	r3, #128	; 0x80
 800884e:	d008      	beq.n	8008862 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	88db      	ldrh	r3, [r3, #6]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d104      	bne.n	8008862 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008858:	7bbb      	ldrb	r3, [r7, #14]
 800885a:	4619      	mov	r1, r3
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f001 f84f 	bl	8009900 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 fcd1 	bl	800920a <USBD_CtlSendStatus>

              break;
 8008868:	e004      	b.n	8008874 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800886a:	6839      	ldr	r1, [r7, #0]
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 fc03 	bl	8009078 <USBD_CtlError>
              break;
 8008872:	bf00      	nop
          }
          break;
 8008874:	e0e0      	b.n	8008a38 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800887c:	2b02      	cmp	r3, #2
 800887e:	d002      	beq.n	8008886 <USBD_StdEPReq+0xfe>
 8008880:	2b03      	cmp	r3, #3
 8008882:	d015      	beq.n	80088b0 <USBD_StdEPReq+0x128>
 8008884:	e026      	b.n	80088d4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008886:	7bbb      	ldrb	r3, [r7, #14]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d00c      	beq.n	80088a6 <USBD_StdEPReq+0x11e>
 800888c:	7bbb      	ldrb	r3, [r7, #14]
 800888e:	2b80      	cmp	r3, #128	; 0x80
 8008890:	d009      	beq.n	80088a6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008892:	7bbb      	ldrb	r3, [r7, #14]
 8008894:	4619      	mov	r1, r3
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f001 f832 	bl	8009900 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800889c:	2180      	movs	r1, #128	; 0x80
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f001 f82e 	bl	8009900 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80088a4:	e01c      	b.n	80088e0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80088a6:	6839      	ldr	r1, [r7, #0]
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f000 fbe5 	bl	8009078 <USBD_CtlError>
              break;
 80088ae:	e017      	b.n	80088e0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	885b      	ldrh	r3, [r3, #2]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d112      	bne.n	80088de <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80088b8:	7bbb      	ldrb	r3, [r7, #14]
 80088ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d004      	beq.n	80088cc <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80088c2:	7bbb      	ldrb	r3, [r7, #14]
 80088c4:	4619      	mov	r1, r3
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f001 f839 	bl	800993e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 fc9c 	bl	800920a <USBD_CtlSendStatus>
              }
              break;
 80088d2:	e004      	b.n	80088de <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80088d4:	6839      	ldr	r1, [r7, #0]
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 fbce 	bl	8009078 <USBD_CtlError>
              break;
 80088dc:	e000      	b.n	80088e0 <USBD_StdEPReq+0x158>
              break;
 80088de:	bf00      	nop
          }
          break;
 80088e0:	e0aa      	b.n	8008a38 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088e8:	2b02      	cmp	r3, #2
 80088ea:	d002      	beq.n	80088f2 <USBD_StdEPReq+0x16a>
 80088ec:	2b03      	cmp	r3, #3
 80088ee:	d032      	beq.n	8008956 <USBD_StdEPReq+0x1ce>
 80088f0:	e097      	b.n	8008a22 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80088f2:	7bbb      	ldrb	r3, [r7, #14]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d007      	beq.n	8008908 <USBD_StdEPReq+0x180>
 80088f8:	7bbb      	ldrb	r3, [r7, #14]
 80088fa:	2b80      	cmp	r3, #128	; 0x80
 80088fc:	d004      	beq.n	8008908 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80088fe:	6839      	ldr	r1, [r7, #0]
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f000 fbb9 	bl	8009078 <USBD_CtlError>
                break;
 8008906:	e091      	b.n	8008a2c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008908:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800890c:	2b00      	cmp	r3, #0
 800890e:	da0b      	bge.n	8008928 <USBD_StdEPReq+0x1a0>
 8008910:	7bbb      	ldrb	r3, [r7, #14]
 8008912:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008916:	4613      	mov	r3, r2
 8008918:	009b      	lsls	r3, r3, #2
 800891a:	4413      	add	r3, r2
 800891c:	009b      	lsls	r3, r3, #2
 800891e:	3310      	adds	r3, #16
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	4413      	add	r3, r2
 8008924:	3304      	adds	r3, #4
 8008926:	e00b      	b.n	8008940 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008928:	7bbb      	ldrb	r3, [r7, #14]
 800892a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800892e:	4613      	mov	r3, r2
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	4413      	add	r3, r2
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800893a:	687a      	ldr	r2, [r7, #4]
 800893c:	4413      	add	r3, r2
 800893e:	3304      	adds	r3, #4
 8008940:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	2200      	movs	r2, #0
 8008946:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	2202      	movs	r2, #2
 800894c:	4619      	mov	r1, r3
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 fbfd 	bl	800914e <USBD_CtlSendData>
              break;
 8008954:	e06a      	b.n	8008a2c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008956:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800895a:	2b00      	cmp	r3, #0
 800895c:	da11      	bge.n	8008982 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800895e:	7bbb      	ldrb	r3, [r7, #14]
 8008960:	f003 020f 	and.w	r2, r3, #15
 8008964:	6879      	ldr	r1, [r7, #4]
 8008966:	4613      	mov	r3, r2
 8008968:	009b      	lsls	r3, r3, #2
 800896a:	4413      	add	r3, r2
 800896c:	009b      	lsls	r3, r3, #2
 800896e:	440b      	add	r3, r1
 8008970:	3318      	adds	r3, #24
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d117      	bne.n	80089a8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008978:	6839      	ldr	r1, [r7, #0]
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 fb7c 	bl	8009078 <USBD_CtlError>
                  break;
 8008980:	e054      	b.n	8008a2c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008982:	7bbb      	ldrb	r3, [r7, #14]
 8008984:	f003 020f 	and.w	r2, r3, #15
 8008988:	6879      	ldr	r1, [r7, #4]
 800898a:	4613      	mov	r3, r2
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	4413      	add	r3, r2
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	440b      	add	r3, r1
 8008994:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d104      	bne.n	80089a8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800899e:	6839      	ldr	r1, [r7, #0]
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f000 fb69 	bl	8009078 <USBD_CtlError>
                  break;
 80089a6:	e041      	b.n	8008a2c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	da0b      	bge.n	80089c8 <USBD_StdEPReq+0x240>
 80089b0:	7bbb      	ldrb	r3, [r7, #14]
 80089b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80089b6:	4613      	mov	r3, r2
 80089b8:	009b      	lsls	r3, r3, #2
 80089ba:	4413      	add	r3, r2
 80089bc:	009b      	lsls	r3, r3, #2
 80089be:	3310      	adds	r3, #16
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	4413      	add	r3, r2
 80089c4:	3304      	adds	r3, #4
 80089c6:	e00b      	b.n	80089e0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80089c8:	7bbb      	ldrb	r3, [r7, #14]
 80089ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089ce:	4613      	mov	r3, r2
 80089d0:	009b      	lsls	r3, r3, #2
 80089d2:	4413      	add	r3, r2
 80089d4:	009b      	lsls	r3, r3, #2
 80089d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80089da:	687a      	ldr	r2, [r7, #4]
 80089dc:	4413      	add	r3, r2
 80089de:	3304      	adds	r3, #4
 80089e0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80089e2:	7bbb      	ldrb	r3, [r7, #14]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d002      	beq.n	80089ee <USBD_StdEPReq+0x266>
 80089e8:	7bbb      	ldrb	r3, [r7, #14]
 80089ea:	2b80      	cmp	r3, #128	; 0x80
 80089ec:	d103      	bne.n	80089f6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	2200      	movs	r2, #0
 80089f2:	601a      	str	r2, [r3, #0]
 80089f4:	e00e      	b.n	8008a14 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80089f6:	7bbb      	ldrb	r3, [r7, #14]
 80089f8:	4619      	mov	r1, r3
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 ffbe 	bl	800997c <USBD_LL_IsStallEP>
 8008a00:	4603      	mov	r3, r0
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d003      	beq.n	8008a0e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	2201      	movs	r2, #1
 8008a0a:	601a      	str	r2, [r3, #0]
 8008a0c:	e002      	b.n	8008a14 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	2200      	movs	r2, #0
 8008a12:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	2202      	movs	r2, #2
 8008a18:	4619      	mov	r1, r3
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 fb97 	bl	800914e <USBD_CtlSendData>
              break;
 8008a20:	e004      	b.n	8008a2c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008a22:	6839      	ldr	r1, [r7, #0]
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f000 fb27 	bl	8009078 <USBD_CtlError>
              break;
 8008a2a:	bf00      	nop
          }
          break;
 8008a2c:	e004      	b.n	8008a38 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008a2e:	6839      	ldr	r1, [r7, #0]
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 fb21 	bl	8009078 <USBD_CtlError>
          break;
 8008a36:	bf00      	nop
      }
      break;
 8008a38:	e004      	b.n	8008a44 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008a3a:	6839      	ldr	r1, [r7, #0]
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f000 fb1b 	bl	8009078 <USBD_CtlError>
      break;
 8008a42:	bf00      	nop
  }

  return ret;
 8008a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3710      	adds	r7, #16
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
	...

08008a50 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b084      	sub	sp, #16
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008a62:	2300      	movs	r3, #0
 8008a64:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	885b      	ldrh	r3, [r3, #2]
 8008a6a:	0a1b      	lsrs	r3, r3, #8
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	3b01      	subs	r3, #1
 8008a70:	2b06      	cmp	r3, #6
 8008a72:	f200 8128 	bhi.w	8008cc6 <USBD_GetDescriptor+0x276>
 8008a76:	a201      	add	r2, pc, #4	; (adr r2, 8008a7c <USBD_GetDescriptor+0x2c>)
 8008a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a7c:	08008a99 	.word	0x08008a99
 8008a80:	08008ab1 	.word	0x08008ab1
 8008a84:	08008af1 	.word	0x08008af1
 8008a88:	08008cc7 	.word	0x08008cc7
 8008a8c:	08008cc7 	.word	0x08008cc7
 8008a90:	08008c67 	.word	0x08008c67
 8008a94:	08008c93 	.word	0x08008c93
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	7c12      	ldrb	r2, [r2, #16]
 8008aa4:	f107 0108 	add.w	r1, r7, #8
 8008aa8:	4610      	mov	r0, r2
 8008aaa:	4798      	blx	r3
 8008aac:	60f8      	str	r0, [r7, #12]
      break;
 8008aae:	e112      	b.n	8008cd6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	7c1b      	ldrb	r3, [r3, #16]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d10d      	bne.n	8008ad4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ac0:	f107 0208 	add.w	r2, r7, #8
 8008ac4:	4610      	mov	r0, r2
 8008ac6:	4798      	blx	r3
 8008ac8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	3301      	adds	r3, #1
 8008ace:	2202      	movs	r2, #2
 8008ad0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008ad2:	e100      	b.n	8008cd6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008adc:	f107 0208 	add.w	r2, r7, #8
 8008ae0:	4610      	mov	r0, r2
 8008ae2:	4798      	blx	r3
 8008ae4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	3301      	adds	r3, #1
 8008aea:	2202      	movs	r2, #2
 8008aec:	701a      	strb	r2, [r3, #0]
      break;
 8008aee:	e0f2      	b.n	8008cd6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	885b      	ldrh	r3, [r3, #2]
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	2b05      	cmp	r3, #5
 8008af8:	f200 80ac 	bhi.w	8008c54 <USBD_GetDescriptor+0x204>
 8008afc:	a201      	add	r2, pc, #4	; (adr r2, 8008b04 <USBD_GetDescriptor+0xb4>)
 8008afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b02:	bf00      	nop
 8008b04:	08008b1d 	.word	0x08008b1d
 8008b08:	08008b51 	.word	0x08008b51
 8008b0c:	08008b85 	.word	0x08008b85
 8008b10:	08008bb9 	.word	0x08008bb9
 8008b14:	08008bed 	.word	0x08008bed
 8008b18:	08008c21 	.word	0x08008c21
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d00b      	beq.n	8008b40 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	687a      	ldr	r2, [r7, #4]
 8008b32:	7c12      	ldrb	r2, [r2, #16]
 8008b34:	f107 0108 	add.w	r1, r7, #8
 8008b38:	4610      	mov	r0, r2
 8008b3a:	4798      	blx	r3
 8008b3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b3e:	e091      	b.n	8008c64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b40:	6839      	ldr	r1, [r7, #0]
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 fa98 	bl	8009078 <USBD_CtlError>
            err++;
 8008b48:	7afb      	ldrb	r3, [r7, #11]
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	72fb      	strb	r3, [r7, #11]
          break;
 8008b4e:	e089      	b.n	8008c64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d00b      	beq.n	8008b74 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	687a      	ldr	r2, [r7, #4]
 8008b66:	7c12      	ldrb	r2, [r2, #16]
 8008b68:	f107 0108 	add.w	r1, r7, #8
 8008b6c:	4610      	mov	r0, r2
 8008b6e:	4798      	blx	r3
 8008b70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b72:	e077      	b.n	8008c64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b74:	6839      	ldr	r1, [r7, #0]
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 fa7e 	bl	8009078 <USBD_CtlError>
            err++;
 8008b7c:	7afb      	ldrb	r3, [r7, #11]
 8008b7e:	3301      	adds	r3, #1
 8008b80:	72fb      	strb	r3, [r7, #11]
          break;
 8008b82:	e06f      	b.n	8008c64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b8a:	68db      	ldr	r3, [r3, #12]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d00b      	beq.n	8008ba8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b96:	68db      	ldr	r3, [r3, #12]
 8008b98:	687a      	ldr	r2, [r7, #4]
 8008b9a:	7c12      	ldrb	r2, [r2, #16]
 8008b9c:	f107 0108 	add.w	r1, r7, #8
 8008ba0:	4610      	mov	r0, r2
 8008ba2:	4798      	blx	r3
 8008ba4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ba6:	e05d      	b.n	8008c64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ba8:	6839      	ldr	r1, [r7, #0]
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 fa64 	bl	8009078 <USBD_CtlError>
            err++;
 8008bb0:	7afb      	ldrb	r3, [r7, #11]
 8008bb2:	3301      	adds	r3, #1
 8008bb4:	72fb      	strb	r3, [r7, #11]
          break;
 8008bb6:	e055      	b.n	8008c64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008bbe:	691b      	ldr	r3, [r3, #16]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d00b      	beq.n	8008bdc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008bca:	691b      	ldr	r3, [r3, #16]
 8008bcc:	687a      	ldr	r2, [r7, #4]
 8008bce:	7c12      	ldrb	r2, [r2, #16]
 8008bd0:	f107 0108 	add.w	r1, r7, #8
 8008bd4:	4610      	mov	r0, r2
 8008bd6:	4798      	blx	r3
 8008bd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008bda:	e043      	b.n	8008c64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008bdc:	6839      	ldr	r1, [r7, #0]
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 fa4a 	bl	8009078 <USBD_CtlError>
            err++;
 8008be4:	7afb      	ldrb	r3, [r7, #11]
 8008be6:	3301      	adds	r3, #1
 8008be8:	72fb      	strb	r3, [r7, #11]
          break;
 8008bea:	e03b      	b.n	8008c64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008bf2:	695b      	ldr	r3, [r3, #20]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d00b      	beq.n	8008c10 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008bfe:	695b      	ldr	r3, [r3, #20]
 8008c00:	687a      	ldr	r2, [r7, #4]
 8008c02:	7c12      	ldrb	r2, [r2, #16]
 8008c04:	f107 0108 	add.w	r1, r7, #8
 8008c08:	4610      	mov	r0, r2
 8008c0a:	4798      	blx	r3
 8008c0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c0e:	e029      	b.n	8008c64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c10:	6839      	ldr	r1, [r7, #0]
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 fa30 	bl	8009078 <USBD_CtlError>
            err++;
 8008c18:	7afb      	ldrb	r3, [r7, #11]
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	72fb      	strb	r3, [r7, #11]
          break;
 8008c1e:	e021      	b.n	8008c64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c26:	699b      	ldr	r3, [r3, #24]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d00b      	beq.n	8008c44 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c32:	699b      	ldr	r3, [r3, #24]
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	7c12      	ldrb	r2, [r2, #16]
 8008c38:	f107 0108 	add.w	r1, r7, #8
 8008c3c:	4610      	mov	r0, r2
 8008c3e:	4798      	blx	r3
 8008c40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c42:	e00f      	b.n	8008c64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c44:	6839      	ldr	r1, [r7, #0]
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 fa16 	bl	8009078 <USBD_CtlError>
            err++;
 8008c4c:	7afb      	ldrb	r3, [r7, #11]
 8008c4e:	3301      	adds	r3, #1
 8008c50:	72fb      	strb	r3, [r7, #11]
          break;
 8008c52:	e007      	b.n	8008c64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008c54:	6839      	ldr	r1, [r7, #0]
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f000 fa0e 	bl	8009078 <USBD_CtlError>
          err++;
 8008c5c:	7afb      	ldrb	r3, [r7, #11]
 8008c5e:	3301      	adds	r3, #1
 8008c60:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008c62:	e038      	b.n	8008cd6 <USBD_GetDescriptor+0x286>
 8008c64:	e037      	b.n	8008cd6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	7c1b      	ldrb	r3, [r3, #16]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d109      	bne.n	8008c82 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c76:	f107 0208 	add.w	r2, r7, #8
 8008c7a:	4610      	mov	r0, r2
 8008c7c:	4798      	blx	r3
 8008c7e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c80:	e029      	b.n	8008cd6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008c82:	6839      	ldr	r1, [r7, #0]
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f000 f9f7 	bl	8009078 <USBD_CtlError>
        err++;
 8008c8a:	7afb      	ldrb	r3, [r7, #11]
 8008c8c:	3301      	adds	r3, #1
 8008c8e:	72fb      	strb	r3, [r7, #11]
      break;
 8008c90:	e021      	b.n	8008cd6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	7c1b      	ldrb	r3, [r3, #16]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d10d      	bne.n	8008cb6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ca2:	f107 0208 	add.w	r2, r7, #8
 8008ca6:	4610      	mov	r0, r2
 8008ca8:	4798      	blx	r3
 8008caa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	3301      	adds	r3, #1
 8008cb0:	2207      	movs	r2, #7
 8008cb2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008cb4:	e00f      	b.n	8008cd6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008cb6:	6839      	ldr	r1, [r7, #0]
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f000 f9dd 	bl	8009078 <USBD_CtlError>
        err++;
 8008cbe:	7afb      	ldrb	r3, [r7, #11]
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	72fb      	strb	r3, [r7, #11]
      break;
 8008cc4:	e007      	b.n	8008cd6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008cc6:	6839      	ldr	r1, [r7, #0]
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 f9d5 	bl	8009078 <USBD_CtlError>
      err++;
 8008cce:	7afb      	ldrb	r3, [r7, #11]
 8008cd0:	3301      	adds	r3, #1
 8008cd2:	72fb      	strb	r3, [r7, #11]
      break;
 8008cd4:	bf00      	nop
  }

  if (err != 0U)
 8008cd6:	7afb      	ldrb	r3, [r7, #11]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d11c      	bne.n	8008d16 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008cdc:	893b      	ldrh	r3, [r7, #8]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d011      	beq.n	8008d06 <USBD_GetDescriptor+0x2b6>
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	88db      	ldrh	r3, [r3, #6]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d00d      	beq.n	8008d06 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	88da      	ldrh	r2, [r3, #6]
 8008cee:	893b      	ldrh	r3, [r7, #8]
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	bf28      	it	cs
 8008cf4:	4613      	movcs	r3, r2
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008cfa:	893b      	ldrh	r3, [r7, #8]
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	68f9      	ldr	r1, [r7, #12]
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f000 fa24 	bl	800914e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	88db      	ldrh	r3, [r3, #6]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d104      	bne.n	8008d18 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f000 fa7b 	bl	800920a <USBD_CtlSendStatus>
 8008d14:	e000      	b.n	8008d18 <USBD_GetDescriptor+0x2c8>
    return;
 8008d16:	bf00      	nop
    }
  }
}
 8008d18:	3710      	adds	r7, #16
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}
 8008d1e:	bf00      	nop

08008d20 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b084      	sub	sp, #16
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	889b      	ldrh	r3, [r3, #4]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d130      	bne.n	8008d94 <USBD_SetAddress+0x74>
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	88db      	ldrh	r3, [r3, #6]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d12c      	bne.n	8008d94 <USBD_SetAddress+0x74>
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	885b      	ldrh	r3, [r3, #2]
 8008d3e:	2b7f      	cmp	r3, #127	; 0x7f
 8008d40:	d828      	bhi.n	8008d94 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	885b      	ldrh	r3, [r3, #2]
 8008d46:	b2db      	uxtb	r3, r3
 8008d48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d4c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d54:	2b03      	cmp	r3, #3
 8008d56:	d104      	bne.n	8008d62 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008d58:	6839      	ldr	r1, [r7, #0]
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f000 f98c 	bl	8009078 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d60:	e01d      	b.n	8008d9e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	7bfa      	ldrb	r2, [r7, #15]
 8008d66:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008d6a:	7bfb      	ldrb	r3, [r7, #15]
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 fe31 	bl	80099d6 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 fa48 	bl	800920a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008d7a:	7bfb      	ldrb	r3, [r7, #15]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d004      	beq.n	8008d8a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2202      	movs	r2, #2
 8008d84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d88:	e009      	b.n	8008d9e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d92:	e004      	b.n	8008d9e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008d94:	6839      	ldr	r1, [r7, #0]
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 f96e 	bl	8009078 <USBD_CtlError>
  }
}
 8008d9c:	bf00      	nop
 8008d9e:	bf00      	nop
 8008da0:	3710      	adds	r7, #16
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
	...

08008da8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b082      	sub	sp, #8
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	885b      	ldrh	r3, [r3, #2]
 8008db6:	b2da      	uxtb	r2, r3
 8008db8:	4b41      	ldr	r3, [pc, #260]	; (8008ec0 <USBD_SetConfig+0x118>)
 8008dba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008dbc:	4b40      	ldr	r3, [pc, #256]	; (8008ec0 <USBD_SetConfig+0x118>)
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d904      	bls.n	8008dce <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008dc4:	6839      	ldr	r1, [r7, #0]
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 f956 	bl	8009078 <USBD_CtlError>
 8008dcc:	e075      	b.n	8008eba <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dd4:	2b02      	cmp	r3, #2
 8008dd6:	d002      	beq.n	8008dde <USBD_SetConfig+0x36>
 8008dd8:	2b03      	cmp	r3, #3
 8008dda:	d023      	beq.n	8008e24 <USBD_SetConfig+0x7c>
 8008ddc:	e062      	b.n	8008ea4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008dde:	4b38      	ldr	r3, [pc, #224]	; (8008ec0 <USBD_SetConfig+0x118>)
 8008de0:	781b      	ldrb	r3, [r3, #0]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d01a      	beq.n	8008e1c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008de6:	4b36      	ldr	r3, [pc, #216]	; (8008ec0 <USBD_SetConfig+0x118>)
 8008de8:	781b      	ldrb	r3, [r3, #0]
 8008dea:	461a      	mov	r2, r3
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2203      	movs	r2, #3
 8008df4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008df8:	4b31      	ldr	r3, [pc, #196]	; (8008ec0 <USBD_SetConfig+0x118>)
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f7ff f9e5 	bl	80081ce <USBD_SetClassConfig>
 8008e04:	4603      	mov	r3, r0
 8008e06:	2b02      	cmp	r3, #2
 8008e08:	d104      	bne.n	8008e14 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008e0a:	6839      	ldr	r1, [r7, #0]
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 f933 	bl	8009078 <USBD_CtlError>
            return;
 8008e12:	e052      	b.n	8008eba <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 f9f8 	bl	800920a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008e1a:	e04e      	b.n	8008eba <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f000 f9f4 	bl	800920a <USBD_CtlSendStatus>
        break;
 8008e22:	e04a      	b.n	8008eba <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008e24:	4b26      	ldr	r3, [pc, #152]	; (8008ec0 <USBD_SetConfig+0x118>)
 8008e26:	781b      	ldrb	r3, [r3, #0]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d112      	bne.n	8008e52 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2202      	movs	r2, #2
 8008e30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008e34:	4b22      	ldr	r3, [pc, #136]	; (8008ec0 <USBD_SetConfig+0x118>)
 8008e36:	781b      	ldrb	r3, [r3, #0]
 8008e38:	461a      	mov	r2, r3
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008e3e:	4b20      	ldr	r3, [pc, #128]	; (8008ec0 <USBD_SetConfig+0x118>)
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	4619      	mov	r1, r3
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f7ff f9e1 	bl	800820c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 f9dd 	bl	800920a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008e50:	e033      	b.n	8008eba <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008e52:	4b1b      	ldr	r3, [pc, #108]	; (8008ec0 <USBD_SetConfig+0x118>)
 8008e54:	781b      	ldrb	r3, [r3, #0]
 8008e56:	461a      	mov	r2, r3
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d01d      	beq.n	8008e9c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	b2db      	uxtb	r3, r3
 8008e66:	4619      	mov	r1, r3
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f7ff f9cf 	bl	800820c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008e6e:	4b14      	ldr	r3, [pc, #80]	; (8008ec0 <USBD_SetConfig+0x118>)
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	461a      	mov	r2, r3
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008e78:	4b11      	ldr	r3, [pc, #68]	; (8008ec0 <USBD_SetConfig+0x118>)
 8008e7a:	781b      	ldrb	r3, [r3, #0]
 8008e7c:	4619      	mov	r1, r3
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f7ff f9a5 	bl	80081ce <USBD_SetClassConfig>
 8008e84:	4603      	mov	r3, r0
 8008e86:	2b02      	cmp	r3, #2
 8008e88:	d104      	bne.n	8008e94 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008e8a:	6839      	ldr	r1, [r7, #0]
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f000 f8f3 	bl	8009078 <USBD_CtlError>
            return;
 8008e92:	e012      	b.n	8008eba <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f000 f9b8 	bl	800920a <USBD_CtlSendStatus>
        break;
 8008e9a:	e00e      	b.n	8008eba <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f000 f9b4 	bl	800920a <USBD_CtlSendStatus>
        break;
 8008ea2:	e00a      	b.n	8008eba <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008ea4:	6839      	ldr	r1, [r7, #0]
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 f8e6 	bl	8009078 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008eac:	4b04      	ldr	r3, [pc, #16]	; (8008ec0 <USBD_SetConfig+0x118>)
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f7ff f9aa 	bl	800820c <USBD_ClrClassConfig>
        break;
 8008eb8:	bf00      	nop
    }
  }
}
 8008eba:	3708      	adds	r7, #8
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}
 8008ec0:	200002a8 	.word	0x200002a8

08008ec4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b082      	sub	sp, #8
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	88db      	ldrh	r3, [r3, #6]
 8008ed2:	2b01      	cmp	r3, #1
 8008ed4:	d004      	beq.n	8008ee0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008ed6:	6839      	ldr	r1, [r7, #0]
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f000 f8cd 	bl	8009078 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008ede:	e022      	b.n	8008f26 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ee6:	2b02      	cmp	r3, #2
 8008ee8:	dc02      	bgt.n	8008ef0 <USBD_GetConfig+0x2c>
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	dc03      	bgt.n	8008ef6 <USBD_GetConfig+0x32>
 8008eee:	e015      	b.n	8008f1c <USBD_GetConfig+0x58>
 8008ef0:	2b03      	cmp	r3, #3
 8008ef2:	d00b      	beq.n	8008f0c <USBD_GetConfig+0x48>
 8008ef4:	e012      	b.n	8008f1c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	3308      	adds	r3, #8
 8008f00:	2201      	movs	r2, #1
 8008f02:	4619      	mov	r1, r3
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f000 f922 	bl	800914e <USBD_CtlSendData>
        break;
 8008f0a:	e00c      	b.n	8008f26 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	3304      	adds	r3, #4
 8008f10:	2201      	movs	r2, #1
 8008f12:	4619      	mov	r1, r3
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 f91a 	bl	800914e <USBD_CtlSendData>
        break;
 8008f1a:	e004      	b.n	8008f26 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008f1c:	6839      	ldr	r1, [r7, #0]
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 f8aa 	bl	8009078 <USBD_CtlError>
        break;
 8008f24:	bf00      	nop
}
 8008f26:	bf00      	nop
 8008f28:	3708      	adds	r7, #8
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}

08008f2e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f2e:	b580      	push	{r7, lr}
 8008f30:	b082      	sub	sp, #8
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	6078      	str	r0, [r7, #4]
 8008f36:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f3e:	3b01      	subs	r3, #1
 8008f40:	2b02      	cmp	r3, #2
 8008f42:	d81e      	bhi.n	8008f82 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	88db      	ldrh	r3, [r3, #6]
 8008f48:	2b02      	cmp	r3, #2
 8008f4a:	d004      	beq.n	8008f56 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008f4c:	6839      	ldr	r1, [r7, #0]
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 f892 	bl	8009078 <USBD_CtlError>
        break;
 8008f54:	e01a      	b.n	8008f8c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2201      	movs	r2, #1
 8008f5a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d005      	beq.n	8008f72 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	68db      	ldr	r3, [r3, #12]
 8008f6a:	f043 0202 	orr.w	r2, r3, #2
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	330c      	adds	r3, #12
 8008f76:	2202      	movs	r2, #2
 8008f78:	4619      	mov	r1, r3
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 f8e7 	bl	800914e <USBD_CtlSendData>
      break;
 8008f80:	e004      	b.n	8008f8c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008f82:	6839      	ldr	r1, [r7, #0]
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f000 f877 	bl	8009078 <USBD_CtlError>
      break;
 8008f8a:	bf00      	nop
  }
}
 8008f8c:	bf00      	nop
 8008f8e:	3708      	adds	r7, #8
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b082      	sub	sp, #8
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	885b      	ldrh	r3, [r3, #2]
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	d106      	bne.n	8008fb4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2201      	movs	r2, #1
 8008faa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 f92b 	bl	800920a <USBD_CtlSendStatus>
  }
}
 8008fb4:	bf00      	nop
 8008fb6:	3708      	adds	r7, #8
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}

08008fbc <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b082      	sub	sp, #8
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fcc:	3b01      	subs	r3, #1
 8008fce:	2b02      	cmp	r3, #2
 8008fd0:	d80b      	bhi.n	8008fea <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	885b      	ldrh	r3, [r3, #2]
 8008fd6:	2b01      	cmp	r3, #1
 8008fd8:	d10c      	bne.n	8008ff4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 f911 	bl	800920a <USBD_CtlSendStatus>
      }
      break;
 8008fe8:	e004      	b.n	8008ff4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008fea:	6839      	ldr	r1, [r7, #0]
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 f843 	bl	8009078 <USBD_CtlError>
      break;
 8008ff2:	e000      	b.n	8008ff6 <USBD_ClrFeature+0x3a>
      break;
 8008ff4:	bf00      	nop
  }
}
 8008ff6:	bf00      	nop
 8008ff8:	3708      	adds	r7, #8
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}

08008ffe <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008ffe:	b480      	push	{r7}
 8009000:	b083      	sub	sp, #12
 8009002:	af00      	add	r7, sp, #0
 8009004:	6078      	str	r0, [r7, #4]
 8009006:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	781a      	ldrb	r2, [r3, #0]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	785a      	ldrb	r2, [r3, #1]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	3302      	adds	r3, #2
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	b29a      	uxth	r2, r3
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	3303      	adds	r3, #3
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	b29b      	uxth	r3, r3
 8009028:	021b      	lsls	r3, r3, #8
 800902a:	b29b      	uxth	r3, r3
 800902c:	4413      	add	r3, r2
 800902e:	b29a      	uxth	r2, r3
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	3304      	adds	r3, #4
 8009038:	781b      	ldrb	r3, [r3, #0]
 800903a:	b29a      	uxth	r2, r3
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	3305      	adds	r3, #5
 8009040:	781b      	ldrb	r3, [r3, #0]
 8009042:	b29b      	uxth	r3, r3
 8009044:	021b      	lsls	r3, r3, #8
 8009046:	b29b      	uxth	r3, r3
 8009048:	4413      	add	r3, r2
 800904a:	b29a      	uxth	r2, r3
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	3306      	adds	r3, #6
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	b29a      	uxth	r2, r3
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	3307      	adds	r3, #7
 800905c:	781b      	ldrb	r3, [r3, #0]
 800905e:	b29b      	uxth	r3, r3
 8009060:	021b      	lsls	r3, r3, #8
 8009062:	b29b      	uxth	r3, r3
 8009064:	4413      	add	r3, r2
 8009066:	b29a      	uxth	r2, r3
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	80da      	strh	r2, [r3, #6]

}
 800906c:	bf00      	nop
 800906e:	370c      	adds	r7, #12
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr

08009078 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b082      	sub	sp, #8
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009082:	2180      	movs	r1, #128	; 0x80
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f000 fc3b 	bl	8009900 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800908a:	2100      	movs	r1, #0
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 fc37 	bl	8009900 <USBD_LL_StallEP>
}
 8009092:	bf00      	nop
 8009094:	3708      	adds	r7, #8
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}

0800909a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800909a:	b580      	push	{r7, lr}
 800909c:	b086      	sub	sp, #24
 800909e:	af00      	add	r7, sp, #0
 80090a0:	60f8      	str	r0, [r7, #12]
 80090a2:	60b9      	str	r1, [r7, #8]
 80090a4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80090a6:	2300      	movs	r3, #0
 80090a8:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d032      	beq.n	8009116 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80090b0:	68f8      	ldr	r0, [r7, #12]
 80090b2:	f000 f834 	bl	800911e <USBD_GetLen>
 80090b6:	4603      	mov	r3, r0
 80090b8:	3301      	adds	r3, #1
 80090ba:	b29b      	uxth	r3, r3
 80090bc:	005b      	lsls	r3, r3, #1
 80090be:	b29a      	uxth	r2, r3
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80090c4:	7dfb      	ldrb	r3, [r7, #23]
 80090c6:	1c5a      	adds	r2, r3, #1
 80090c8:	75fa      	strb	r2, [r7, #23]
 80090ca:	461a      	mov	r2, r3
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	4413      	add	r3, r2
 80090d0:	687a      	ldr	r2, [r7, #4]
 80090d2:	7812      	ldrb	r2, [r2, #0]
 80090d4:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80090d6:	7dfb      	ldrb	r3, [r7, #23]
 80090d8:	1c5a      	adds	r2, r3, #1
 80090da:	75fa      	strb	r2, [r7, #23]
 80090dc:	461a      	mov	r2, r3
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	4413      	add	r3, r2
 80090e2:	2203      	movs	r2, #3
 80090e4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80090e6:	e012      	b.n	800910e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	1c5a      	adds	r2, r3, #1
 80090ec:	60fa      	str	r2, [r7, #12]
 80090ee:	7dfa      	ldrb	r2, [r7, #23]
 80090f0:	1c51      	adds	r1, r2, #1
 80090f2:	75f9      	strb	r1, [r7, #23]
 80090f4:	4611      	mov	r1, r2
 80090f6:	68ba      	ldr	r2, [r7, #8]
 80090f8:	440a      	add	r2, r1
 80090fa:	781b      	ldrb	r3, [r3, #0]
 80090fc:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80090fe:	7dfb      	ldrb	r3, [r7, #23]
 8009100:	1c5a      	adds	r2, r3, #1
 8009102:	75fa      	strb	r2, [r7, #23]
 8009104:	461a      	mov	r2, r3
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	4413      	add	r3, r2
 800910a:	2200      	movs	r2, #0
 800910c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	781b      	ldrb	r3, [r3, #0]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d1e8      	bne.n	80090e8 <USBD_GetString+0x4e>
    }
  }
}
 8009116:	bf00      	nop
 8009118:	3718      	adds	r7, #24
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}

0800911e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800911e:	b480      	push	{r7}
 8009120:	b085      	sub	sp, #20
 8009122:	af00      	add	r7, sp, #0
 8009124:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009126:	2300      	movs	r3, #0
 8009128:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800912a:	e005      	b.n	8009138 <USBD_GetLen+0x1a>
  {
    len++;
 800912c:	7bfb      	ldrb	r3, [r7, #15]
 800912e:	3301      	adds	r3, #1
 8009130:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	3301      	adds	r3, #1
 8009136:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	781b      	ldrb	r3, [r3, #0]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d1f5      	bne.n	800912c <USBD_GetLen+0xe>
  }

  return len;
 8009140:	7bfb      	ldrb	r3, [r7, #15]
}
 8009142:	4618      	mov	r0, r3
 8009144:	3714      	adds	r7, #20
 8009146:	46bd      	mov	sp, r7
 8009148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914c:	4770      	bx	lr

0800914e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800914e:	b580      	push	{r7, lr}
 8009150:	b084      	sub	sp, #16
 8009152:	af00      	add	r7, sp, #0
 8009154:	60f8      	str	r0, [r7, #12]
 8009156:	60b9      	str	r1, [r7, #8]
 8009158:	4613      	mov	r3, r2
 800915a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2202      	movs	r2, #2
 8009160:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009164:	88fa      	ldrh	r2, [r7, #6]
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800916a:	88fa      	ldrh	r2, [r7, #6]
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009170:	88fb      	ldrh	r3, [r7, #6]
 8009172:	68ba      	ldr	r2, [r7, #8]
 8009174:	2100      	movs	r1, #0
 8009176:	68f8      	ldr	r0, [r7, #12]
 8009178:	f000 fc4c 	bl	8009a14 <USBD_LL_Transmit>

  return USBD_OK;
 800917c:	2300      	movs	r3, #0
}
 800917e:	4618      	mov	r0, r3
 8009180:	3710      	adds	r7, #16
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}

08009186 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009186:	b580      	push	{r7, lr}
 8009188:	b084      	sub	sp, #16
 800918a:	af00      	add	r7, sp, #0
 800918c:	60f8      	str	r0, [r7, #12]
 800918e:	60b9      	str	r1, [r7, #8]
 8009190:	4613      	mov	r3, r2
 8009192:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009194:	88fb      	ldrh	r3, [r7, #6]
 8009196:	68ba      	ldr	r2, [r7, #8]
 8009198:	2100      	movs	r1, #0
 800919a:	68f8      	ldr	r0, [r7, #12]
 800919c:	f000 fc3a 	bl	8009a14 <USBD_LL_Transmit>

  return USBD_OK;
 80091a0:	2300      	movs	r3, #0
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3710      	adds	r7, #16
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}

080091aa <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80091aa:	b580      	push	{r7, lr}
 80091ac:	b084      	sub	sp, #16
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	60f8      	str	r0, [r7, #12]
 80091b2:	60b9      	str	r1, [r7, #8]
 80091b4:	4613      	mov	r3, r2
 80091b6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2203      	movs	r2, #3
 80091bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80091c0:	88fa      	ldrh	r2, [r7, #6]
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80091c8:	88fa      	ldrh	r2, [r7, #6]
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80091d0:	88fb      	ldrh	r3, [r7, #6]
 80091d2:	68ba      	ldr	r2, [r7, #8]
 80091d4:	2100      	movs	r1, #0
 80091d6:	68f8      	ldr	r0, [r7, #12]
 80091d8:	f000 fc3f 	bl	8009a5a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80091dc:	2300      	movs	r3, #0
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3710      	adds	r7, #16
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}

080091e6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80091e6:	b580      	push	{r7, lr}
 80091e8:	b084      	sub	sp, #16
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	60f8      	str	r0, [r7, #12]
 80091ee:	60b9      	str	r1, [r7, #8]
 80091f0:	4613      	mov	r3, r2
 80091f2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80091f4:	88fb      	ldrh	r3, [r7, #6]
 80091f6:	68ba      	ldr	r2, [r7, #8]
 80091f8:	2100      	movs	r1, #0
 80091fa:	68f8      	ldr	r0, [r7, #12]
 80091fc:	f000 fc2d 	bl	8009a5a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009200:	2300      	movs	r3, #0
}
 8009202:	4618      	mov	r0, r3
 8009204:	3710      	adds	r7, #16
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}

0800920a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800920a:	b580      	push	{r7, lr}
 800920c:	b082      	sub	sp, #8
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2204      	movs	r2, #4
 8009216:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800921a:	2300      	movs	r3, #0
 800921c:	2200      	movs	r2, #0
 800921e:	2100      	movs	r1, #0
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f000 fbf7 	bl	8009a14 <USBD_LL_Transmit>

  return USBD_OK;
 8009226:	2300      	movs	r3, #0
}
 8009228:	4618      	mov	r0, r3
 800922a:	3708      	adds	r7, #8
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2205      	movs	r2, #5
 800923c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009240:	2300      	movs	r3, #0
 8009242:	2200      	movs	r2, #0
 8009244:	2100      	movs	r1, #0
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 fc07 	bl	8009a5a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800924c:	2300      	movs	r3, #0
}
 800924e:	4618      	mov	r0, r3
 8009250:	3708      	adds	r7, #8
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
	...

08009258 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800925c:	2200      	movs	r2, #0
 800925e:	4912      	ldr	r1, [pc, #72]	; (80092a8 <MX_USB_DEVICE_Init+0x50>)
 8009260:	4812      	ldr	r0, [pc, #72]	; (80092ac <MX_USB_DEVICE_Init+0x54>)
 8009262:	f7fe ff58 	bl	8008116 <USBD_Init>
 8009266:	4603      	mov	r3, r0
 8009268:	2b00      	cmp	r3, #0
 800926a:	d001      	beq.n	8009270 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800926c:	f7f7 f9be 	bl	80005ec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009270:	490f      	ldr	r1, [pc, #60]	; (80092b0 <MX_USB_DEVICE_Init+0x58>)
 8009272:	480e      	ldr	r0, [pc, #56]	; (80092ac <MX_USB_DEVICE_Init+0x54>)
 8009274:	f7fe ff7a 	bl	800816c <USBD_RegisterClass>
 8009278:	4603      	mov	r3, r0
 800927a:	2b00      	cmp	r3, #0
 800927c:	d001      	beq.n	8009282 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800927e:	f7f7 f9b5 	bl	80005ec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009282:	490c      	ldr	r1, [pc, #48]	; (80092b4 <MX_USB_DEVICE_Init+0x5c>)
 8009284:	4809      	ldr	r0, [pc, #36]	; (80092ac <MX_USB_DEVICE_Init+0x54>)
 8009286:	f7fe fed7 	bl	8008038 <USBD_CDC_RegisterInterface>
 800928a:	4603      	mov	r3, r0
 800928c:	2b00      	cmp	r3, #0
 800928e:	d001      	beq.n	8009294 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009290:	f7f7 f9ac 	bl	80005ec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009294:	4805      	ldr	r0, [pc, #20]	; (80092ac <MX_USB_DEVICE_Init+0x54>)
 8009296:	f7fe ff83 	bl	80081a0 <USBD_Start>
 800929a:	4603      	mov	r3, r0
 800929c:	2b00      	cmp	r3, #0
 800929e:	d001      	beq.n	80092a4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80092a0:	f7f7 f9a4 	bl	80005ec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80092a4:	bf00      	nop
 80092a6:	bd80      	pop	{r7, pc}
 80092a8:	2000012c 	.word	0x2000012c
 80092ac:	200002ac 	.word	0x200002ac
 80092b0:	20000018 	.word	0x20000018
 80092b4:	2000011c 	.word	0x2000011c

080092b8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80092bc:	2200      	movs	r2, #0
 80092be:	4905      	ldr	r1, [pc, #20]	; (80092d4 <CDC_Init_FS+0x1c>)
 80092c0:	4805      	ldr	r0, [pc, #20]	; (80092d8 <CDC_Init_FS+0x20>)
 80092c2:	f7fe fed0 	bl	8008066 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80092c6:	4905      	ldr	r1, [pc, #20]	; (80092dc <CDC_Init_FS+0x24>)
 80092c8:	4803      	ldr	r0, [pc, #12]	; (80092d8 <CDC_Init_FS+0x20>)
 80092ca:	f7fe fee6 	bl	800809a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80092ce:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	bd80      	pop	{r7, pc}
 80092d4:	20000970 	.word	0x20000970
 80092d8:	200002ac 	.word	0x200002ac
 80092dc:	20000570 	.word	0x20000570

080092e0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80092e0:	b480      	push	{r7}
 80092e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80092e4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr

080092f0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b083      	sub	sp, #12
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	4603      	mov	r3, r0
 80092f8:	6039      	str	r1, [r7, #0]
 80092fa:	71fb      	strb	r3, [r7, #7]
 80092fc:	4613      	mov	r3, r2
 80092fe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009300:	79fb      	ldrb	r3, [r7, #7]
 8009302:	2b23      	cmp	r3, #35	; 0x23
 8009304:	d84a      	bhi.n	800939c <CDC_Control_FS+0xac>
 8009306:	a201      	add	r2, pc, #4	; (adr r2, 800930c <CDC_Control_FS+0x1c>)
 8009308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800930c:	0800939d 	.word	0x0800939d
 8009310:	0800939d 	.word	0x0800939d
 8009314:	0800939d 	.word	0x0800939d
 8009318:	0800939d 	.word	0x0800939d
 800931c:	0800939d 	.word	0x0800939d
 8009320:	0800939d 	.word	0x0800939d
 8009324:	0800939d 	.word	0x0800939d
 8009328:	0800939d 	.word	0x0800939d
 800932c:	0800939d 	.word	0x0800939d
 8009330:	0800939d 	.word	0x0800939d
 8009334:	0800939d 	.word	0x0800939d
 8009338:	0800939d 	.word	0x0800939d
 800933c:	0800939d 	.word	0x0800939d
 8009340:	0800939d 	.word	0x0800939d
 8009344:	0800939d 	.word	0x0800939d
 8009348:	0800939d 	.word	0x0800939d
 800934c:	0800939d 	.word	0x0800939d
 8009350:	0800939d 	.word	0x0800939d
 8009354:	0800939d 	.word	0x0800939d
 8009358:	0800939d 	.word	0x0800939d
 800935c:	0800939d 	.word	0x0800939d
 8009360:	0800939d 	.word	0x0800939d
 8009364:	0800939d 	.word	0x0800939d
 8009368:	0800939d 	.word	0x0800939d
 800936c:	0800939d 	.word	0x0800939d
 8009370:	0800939d 	.word	0x0800939d
 8009374:	0800939d 	.word	0x0800939d
 8009378:	0800939d 	.word	0x0800939d
 800937c:	0800939d 	.word	0x0800939d
 8009380:	0800939d 	.word	0x0800939d
 8009384:	0800939d 	.word	0x0800939d
 8009388:	0800939d 	.word	0x0800939d
 800938c:	0800939d 	.word	0x0800939d
 8009390:	0800939d 	.word	0x0800939d
 8009394:	0800939d 	.word	0x0800939d
 8009398:	0800939d 	.word	0x0800939d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800939c:	bf00      	nop
  }

  return (USBD_OK);
 800939e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	370c      	adds	r7, #12
 80093a4:	46bd      	mov	sp, r7
 80093a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093aa:	4770      	bx	lr

080093ac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b082      	sub	sp, #8
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80093b6:	6879      	ldr	r1, [r7, #4]
 80093b8:	4805      	ldr	r0, [pc, #20]	; (80093d0 <CDC_Receive_FS+0x24>)
 80093ba:	f7fe fe6e 	bl	800809a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80093be:	4804      	ldr	r0, [pc, #16]	; (80093d0 <CDC_Receive_FS+0x24>)
 80093c0:	f7fe fe7f 	bl	80080c2 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80093c4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3708      	adds	r7, #8
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}
 80093ce:	bf00      	nop
 80093d0:	200002ac 	.word	0x200002ac

080093d4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b083      	sub	sp, #12
 80093d8:	af00      	add	r7, sp, #0
 80093da:	4603      	mov	r3, r0
 80093dc:	6039      	str	r1, [r7, #0]
 80093de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	2212      	movs	r2, #18
 80093e4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80093e6:	4b03      	ldr	r3, [pc, #12]	; (80093f4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	370c      	adds	r7, #12
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr
 80093f4:	20000148 	.word	0x20000148

080093f8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b083      	sub	sp, #12
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	4603      	mov	r3, r0
 8009400:	6039      	str	r1, [r7, #0]
 8009402:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	2204      	movs	r2, #4
 8009408:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800940a:	4b03      	ldr	r3, [pc, #12]	; (8009418 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800940c:	4618      	mov	r0, r3
 800940e:	370c      	adds	r7, #12
 8009410:	46bd      	mov	sp, r7
 8009412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009416:	4770      	bx	lr
 8009418:	2000015c 	.word	0x2000015c

0800941c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b082      	sub	sp, #8
 8009420:	af00      	add	r7, sp, #0
 8009422:	4603      	mov	r3, r0
 8009424:	6039      	str	r1, [r7, #0]
 8009426:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009428:	79fb      	ldrb	r3, [r7, #7]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d105      	bne.n	800943a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800942e:	683a      	ldr	r2, [r7, #0]
 8009430:	4907      	ldr	r1, [pc, #28]	; (8009450 <USBD_FS_ProductStrDescriptor+0x34>)
 8009432:	4808      	ldr	r0, [pc, #32]	; (8009454 <USBD_FS_ProductStrDescriptor+0x38>)
 8009434:	f7ff fe31 	bl	800909a <USBD_GetString>
 8009438:	e004      	b.n	8009444 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800943a:	683a      	ldr	r2, [r7, #0]
 800943c:	4904      	ldr	r1, [pc, #16]	; (8009450 <USBD_FS_ProductStrDescriptor+0x34>)
 800943e:	4805      	ldr	r0, [pc, #20]	; (8009454 <USBD_FS_ProductStrDescriptor+0x38>)
 8009440:	f7ff fe2b 	bl	800909a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009444:	4b02      	ldr	r3, [pc, #8]	; (8009450 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009446:	4618      	mov	r0, r3
 8009448:	3708      	adds	r7, #8
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}
 800944e:	bf00      	nop
 8009450:	20000d70 	.word	0x20000d70
 8009454:	08009bd8 	.word	0x08009bd8

08009458 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b082      	sub	sp, #8
 800945c:	af00      	add	r7, sp, #0
 800945e:	4603      	mov	r3, r0
 8009460:	6039      	str	r1, [r7, #0]
 8009462:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009464:	683a      	ldr	r2, [r7, #0]
 8009466:	4904      	ldr	r1, [pc, #16]	; (8009478 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009468:	4804      	ldr	r0, [pc, #16]	; (800947c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800946a:	f7ff fe16 	bl	800909a <USBD_GetString>
  return USBD_StrDesc;
 800946e:	4b02      	ldr	r3, [pc, #8]	; (8009478 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009470:	4618      	mov	r0, r3
 8009472:	3708      	adds	r7, #8
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}
 8009478:	20000d70 	.word	0x20000d70
 800947c:	08009bf0 	.word	0x08009bf0

08009480 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af00      	add	r7, sp, #0
 8009486:	4603      	mov	r3, r0
 8009488:	6039      	str	r1, [r7, #0]
 800948a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	221a      	movs	r2, #26
 8009490:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009492:	f000 f843 	bl	800951c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009496:	4b02      	ldr	r3, [pc, #8]	; (80094a0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009498:	4618      	mov	r0, r3
 800949a:	3708      	adds	r7, #8
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}
 80094a0:	20000160 	.word	0x20000160

080094a4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	4603      	mov	r3, r0
 80094ac:	6039      	str	r1, [r7, #0]
 80094ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80094b0:	79fb      	ldrb	r3, [r7, #7]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d105      	bne.n	80094c2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80094b6:	683a      	ldr	r2, [r7, #0]
 80094b8:	4907      	ldr	r1, [pc, #28]	; (80094d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80094ba:	4808      	ldr	r0, [pc, #32]	; (80094dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80094bc:	f7ff fded 	bl	800909a <USBD_GetString>
 80094c0:	e004      	b.n	80094cc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80094c2:	683a      	ldr	r2, [r7, #0]
 80094c4:	4904      	ldr	r1, [pc, #16]	; (80094d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80094c6:	4805      	ldr	r0, [pc, #20]	; (80094dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80094c8:	f7ff fde7 	bl	800909a <USBD_GetString>
  }
  return USBD_StrDesc;
 80094cc:	4b02      	ldr	r3, [pc, #8]	; (80094d8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3708      	adds	r7, #8
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	20000d70 	.word	0x20000d70
 80094dc:	08009c04 	.word	0x08009c04

080094e0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b082      	sub	sp, #8
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	4603      	mov	r3, r0
 80094e8:	6039      	str	r1, [r7, #0]
 80094ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80094ec:	79fb      	ldrb	r3, [r7, #7]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d105      	bne.n	80094fe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80094f2:	683a      	ldr	r2, [r7, #0]
 80094f4:	4907      	ldr	r1, [pc, #28]	; (8009514 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80094f6:	4808      	ldr	r0, [pc, #32]	; (8009518 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80094f8:	f7ff fdcf 	bl	800909a <USBD_GetString>
 80094fc:	e004      	b.n	8009508 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80094fe:	683a      	ldr	r2, [r7, #0]
 8009500:	4904      	ldr	r1, [pc, #16]	; (8009514 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009502:	4805      	ldr	r0, [pc, #20]	; (8009518 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009504:	f7ff fdc9 	bl	800909a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009508:	4b02      	ldr	r3, [pc, #8]	; (8009514 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800950a:	4618      	mov	r0, r3
 800950c:	3708      	adds	r7, #8
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}
 8009512:	bf00      	nop
 8009514:	20000d70 	.word	0x20000d70
 8009518:	08009c10 	.word	0x08009c10

0800951c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b084      	sub	sp, #16
 8009520:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009522:	4b0f      	ldr	r3, [pc, #60]	; (8009560 <Get_SerialNum+0x44>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009528:	4b0e      	ldr	r3, [pc, #56]	; (8009564 <Get_SerialNum+0x48>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800952e:	4b0e      	ldr	r3, [pc, #56]	; (8009568 <Get_SerialNum+0x4c>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009534:	68fa      	ldr	r2, [r7, #12]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	4413      	add	r3, r2
 800953a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d009      	beq.n	8009556 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009542:	2208      	movs	r2, #8
 8009544:	4909      	ldr	r1, [pc, #36]	; (800956c <Get_SerialNum+0x50>)
 8009546:	68f8      	ldr	r0, [r7, #12]
 8009548:	f000 f814 	bl	8009574 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800954c:	2204      	movs	r2, #4
 800954e:	4908      	ldr	r1, [pc, #32]	; (8009570 <Get_SerialNum+0x54>)
 8009550:	68b8      	ldr	r0, [r7, #8]
 8009552:	f000 f80f 	bl	8009574 <IntToUnicode>
  }
}
 8009556:	bf00      	nop
 8009558:	3710      	adds	r7, #16
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
 800955e:	bf00      	nop
 8009560:	1ffff7ac 	.word	0x1ffff7ac
 8009564:	1ffff7b0 	.word	0x1ffff7b0
 8009568:	1ffff7b4 	.word	0x1ffff7b4
 800956c:	20000162 	.word	0x20000162
 8009570:	20000172 	.word	0x20000172

08009574 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009574:	b480      	push	{r7}
 8009576:	b087      	sub	sp, #28
 8009578:	af00      	add	r7, sp, #0
 800957a:	60f8      	str	r0, [r7, #12]
 800957c:	60b9      	str	r1, [r7, #8]
 800957e:	4613      	mov	r3, r2
 8009580:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009582:	2300      	movs	r3, #0
 8009584:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009586:	2300      	movs	r3, #0
 8009588:	75fb      	strb	r3, [r7, #23]
 800958a:	e027      	b.n	80095dc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	0f1b      	lsrs	r3, r3, #28
 8009590:	2b09      	cmp	r3, #9
 8009592:	d80b      	bhi.n	80095ac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	0f1b      	lsrs	r3, r3, #28
 8009598:	b2da      	uxtb	r2, r3
 800959a:	7dfb      	ldrb	r3, [r7, #23]
 800959c:	005b      	lsls	r3, r3, #1
 800959e:	4619      	mov	r1, r3
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	440b      	add	r3, r1
 80095a4:	3230      	adds	r2, #48	; 0x30
 80095a6:	b2d2      	uxtb	r2, r2
 80095a8:	701a      	strb	r2, [r3, #0]
 80095aa:	e00a      	b.n	80095c2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	0f1b      	lsrs	r3, r3, #28
 80095b0:	b2da      	uxtb	r2, r3
 80095b2:	7dfb      	ldrb	r3, [r7, #23]
 80095b4:	005b      	lsls	r3, r3, #1
 80095b6:	4619      	mov	r1, r3
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	440b      	add	r3, r1
 80095bc:	3237      	adds	r2, #55	; 0x37
 80095be:	b2d2      	uxtb	r2, r2
 80095c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	011b      	lsls	r3, r3, #4
 80095c6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80095c8:	7dfb      	ldrb	r3, [r7, #23]
 80095ca:	005b      	lsls	r3, r3, #1
 80095cc:	3301      	adds	r3, #1
 80095ce:	68ba      	ldr	r2, [r7, #8]
 80095d0:	4413      	add	r3, r2
 80095d2:	2200      	movs	r2, #0
 80095d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80095d6:	7dfb      	ldrb	r3, [r7, #23]
 80095d8:	3301      	adds	r3, #1
 80095da:	75fb      	strb	r3, [r7, #23]
 80095dc:	7dfa      	ldrb	r2, [r7, #23]
 80095de:	79fb      	ldrb	r3, [r7, #7]
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d3d3      	bcc.n	800958c <IntToUnicode+0x18>
  }
}
 80095e4:	bf00      	nop
 80095e6:	bf00      	nop
 80095e8:	371c      	adds	r7, #28
 80095ea:	46bd      	mov	sp, r7
 80095ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f0:	4770      	bx	lr
	...

080095f4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b084      	sub	sp, #16
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4a10      	ldr	r2, [pc, #64]	; (8009644 <HAL_PCD_MspInit+0x50>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d119      	bne.n	800963a <HAL_PCD_MspInit+0x46>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009606:	4b10      	ldr	r3, [pc, #64]	; (8009648 <HAL_PCD_MspInit+0x54>)
 8009608:	69db      	ldr	r3, [r3, #28]
 800960a:	4a0f      	ldr	r2, [pc, #60]	; (8009648 <HAL_PCD_MspInit+0x54>)
 800960c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009610:	61d3      	str	r3, [r2, #28]
 8009612:	4b0d      	ldr	r3, [pc, #52]	; (8009648 <HAL_PCD_MspInit+0x54>)
 8009614:	69db      	ldr	r3, [r3, #28]
 8009616:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800961a:	60fb      	str	r3, [r7, #12]
 800961c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    __HAL_REMAPINTERRUPT_USB_ENABLE();
 800961e:	4b0b      	ldr	r3, [pc, #44]	; (800964c <HAL_PCD_MspInit+0x58>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	4a0a      	ldr	r2, [pc, #40]	; (800964c <HAL_PCD_MspInit+0x58>)
 8009624:	f043 0320 	orr.w	r3, r3, #32
 8009628:	6013      	str	r3, [r2, #0]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800962a:	2200      	movs	r2, #0
 800962c:	2100      	movs	r1, #0
 800962e:	204b      	movs	r0, #75	; 0x4b
 8009630:	f7f7 fa89 	bl	8000b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009634:	204b      	movs	r0, #75	; 0x4b
 8009636:	f7f7 faa2 	bl	8000b7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800963a:	bf00      	nop
 800963c:	3710      	adds	r7, #16
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
 8009642:	bf00      	nop
 8009644:	40005c00 	.word	0x40005c00
 8009648:	40021000 	.word	0x40021000
 800964c:	40010000 	.word	0x40010000

08009650 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b082      	sub	sp, #8
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009664:	4619      	mov	r1, r3
 8009666:	4610      	mov	r0, r2
 8009668:	f7fe fde3 	bl	8008232 <USBD_LL_SetupStage>
}
 800966c:	bf00      	nop
 800966e:	3708      	adds	r7, #8
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}

08009674 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b082      	sub	sp, #8
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	460b      	mov	r3, r1
 800967e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009686:	78fa      	ldrb	r2, [r7, #3]
 8009688:	6879      	ldr	r1, [r7, #4]
 800968a:	4613      	mov	r3, r2
 800968c:	009b      	lsls	r3, r3, #2
 800968e:	4413      	add	r3, r2
 8009690:	00db      	lsls	r3, r3, #3
 8009692:	440b      	add	r3, r1
 8009694:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009698:	681a      	ldr	r2, [r3, #0]
 800969a:	78fb      	ldrb	r3, [r7, #3]
 800969c:	4619      	mov	r1, r3
 800969e:	f7fe fe15 	bl	80082cc <USBD_LL_DataOutStage>
}
 80096a2:	bf00      	nop
 80096a4:	3708      	adds	r7, #8
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}

080096aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096aa:	b580      	push	{r7, lr}
 80096ac:	b082      	sub	sp, #8
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
 80096b2:	460b      	mov	r3, r1
 80096b4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80096bc:	78fa      	ldrb	r2, [r7, #3]
 80096be:	6879      	ldr	r1, [r7, #4]
 80096c0:	4613      	mov	r3, r2
 80096c2:	009b      	lsls	r3, r3, #2
 80096c4:	4413      	add	r3, r2
 80096c6:	00db      	lsls	r3, r3, #3
 80096c8:	440b      	add	r3, r1
 80096ca:	333c      	adds	r3, #60	; 0x3c
 80096cc:	681a      	ldr	r2, [r3, #0]
 80096ce:	78fb      	ldrb	r3, [r7, #3]
 80096d0:	4619      	mov	r1, r3
 80096d2:	f7fe fe6c 	bl	80083ae <USBD_LL_DataInStage>
}
 80096d6:	bf00      	nop
 80096d8:	3708      	adds	r7, #8
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}

080096de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096de:	b580      	push	{r7, lr}
 80096e0:	b082      	sub	sp, #8
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80096ec:	4618      	mov	r0, r3
 80096ee:	f7fe ff7f 	bl	80085f0 <USBD_LL_SOF>
}
 80096f2:	bf00      	nop
 80096f4:	3708      	adds	r7, #8
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}

080096fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096fa:	b580      	push	{r7, lr}
 80096fc:	b084      	sub	sp, #16
 80096fe:	af00      	add	r7, sp, #0
 8009700:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009702:	2301      	movs	r3, #1
 8009704:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	689b      	ldr	r3, [r3, #8]
 800970a:	2b02      	cmp	r3, #2
 800970c:	d001      	beq.n	8009712 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800970e:	f7f6 ff6d 	bl	80005ec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009718:	7bfa      	ldrb	r2, [r7, #15]
 800971a:	4611      	mov	r1, r2
 800971c:	4618      	mov	r0, r3
 800971e:	f7fe ff2c 	bl	800857a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009728:	4618      	mov	r0, r3
 800972a:	f7fe fee5 	bl	80084f8 <USBD_LL_Reset>
}
 800972e:	bf00      	nop
 8009730:	3710      	adds	r7, #16
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
	...

08009738 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b082      	sub	sp, #8
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009746:	4618      	mov	r0, r3
 8009748:	f7fe ff27 	bl	800859a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	699b      	ldr	r3, [r3, #24]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d005      	beq.n	8009760 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009754:	4b04      	ldr	r3, [pc, #16]	; (8009768 <HAL_PCD_SuspendCallback+0x30>)
 8009756:	691b      	ldr	r3, [r3, #16]
 8009758:	4a03      	ldr	r2, [pc, #12]	; (8009768 <HAL_PCD_SuspendCallback+0x30>)
 800975a:	f043 0306 	orr.w	r3, r3, #6
 800975e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009760:	bf00      	nop
 8009762:	3708      	adds	r7, #8
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}
 8009768:	e000ed00 	.word	0xe000ed00

0800976c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b082      	sub	sp, #8
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800977a:	4618      	mov	r0, r3
 800977c:	f7fe ff22 	bl	80085c4 <USBD_LL_Resume>
}
 8009780:	bf00      	nop
 8009782:	3708      	adds	r7, #8
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}

08009788 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b082      	sub	sp, #8
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009790:	4a29      	ldr	r2, [pc, #164]	; (8009838 <USBD_LL_Init+0xb0>)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	4a27      	ldr	r2, [pc, #156]	; (8009838 <USBD_LL_Init+0xb0>)
 800979c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80097a0:	4b25      	ldr	r3, [pc, #148]	; (8009838 <USBD_LL_Init+0xb0>)
 80097a2:	4a26      	ldr	r2, [pc, #152]	; (800983c <USBD_LL_Init+0xb4>)
 80097a4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80097a6:	4b24      	ldr	r3, [pc, #144]	; (8009838 <USBD_LL_Init+0xb0>)
 80097a8:	2208      	movs	r2, #8
 80097aa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80097ac:	4b22      	ldr	r3, [pc, #136]	; (8009838 <USBD_LL_Init+0xb0>)
 80097ae:	2202      	movs	r2, #2
 80097b0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80097b2:	4b21      	ldr	r3, [pc, #132]	; (8009838 <USBD_LL_Init+0xb0>)
 80097b4:	2202      	movs	r2, #2
 80097b6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80097b8:	4b1f      	ldr	r3, [pc, #124]	; (8009838 <USBD_LL_Init+0xb0>)
 80097ba:	2200      	movs	r2, #0
 80097bc:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80097be:	4b1e      	ldr	r3, [pc, #120]	; (8009838 <USBD_LL_Init+0xb0>)
 80097c0:	2200      	movs	r2, #0
 80097c2:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80097c4:	4b1c      	ldr	r3, [pc, #112]	; (8009838 <USBD_LL_Init+0xb0>)
 80097c6:	2200      	movs	r2, #0
 80097c8:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80097ca:	481b      	ldr	r0, [pc, #108]	; (8009838 <USBD_LL_Init+0xb0>)
 80097cc:	f7f7 fbae 	bl	8000f2c <HAL_PCD_Init>
 80097d0:	4603      	mov	r3, r0
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d001      	beq.n	80097da <USBD_LL_Init+0x52>
  {
    Error_Handler( );
 80097d6:	f7f6 ff09 	bl	80005ec <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80097e0:	2318      	movs	r3, #24
 80097e2:	2200      	movs	r2, #0
 80097e4:	2100      	movs	r1, #0
 80097e6:	f7f9 f821 	bl	800282c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80097f0:	2358      	movs	r3, #88	; 0x58
 80097f2:	2200      	movs	r2, #0
 80097f4:	2180      	movs	r1, #128	; 0x80
 80097f6:	f7f9 f819 	bl	800282c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009800:	23c0      	movs	r3, #192	; 0xc0
 8009802:	2200      	movs	r2, #0
 8009804:	2181      	movs	r1, #129	; 0x81
 8009806:	f7f9 f811 	bl	800282c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009810:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009814:	2200      	movs	r2, #0
 8009816:	2101      	movs	r1, #1
 8009818:	f7f9 f808 	bl	800282c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009822:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009826:	2200      	movs	r2, #0
 8009828:	2182      	movs	r1, #130	; 0x82
 800982a:	f7f8 ffff 	bl	800282c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800982e:	2300      	movs	r3, #0
}
 8009830:	4618      	mov	r0, r3
 8009832:	3708      	adds	r7, #8
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}
 8009838:	20000f70 	.word	0x20000f70
 800983c:	40005c00 	.word	0x40005c00

08009840 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b084      	sub	sp, #16
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009848:	2300      	movs	r3, #0
 800984a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800984c:	2300      	movs	r3, #0
 800984e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009856:	4618      	mov	r0, r3
 8009858:	f7f7 fc3a 	bl	80010d0 <HAL_PCD_Start>
 800985c:	4603      	mov	r3, r0
 800985e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009860:	7bfb      	ldrb	r3, [r7, #15]
 8009862:	4618      	mov	r0, r3
 8009864:	f000 f954 	bl	8009b10 <USBD_Get_USB_Status>
 8009868:	4603      	mov	r3, r0
 800986a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800986c:	7bbb      	ldrb	r3, [r7, #14]
}
 800986e:	4618      	mov	r0, r3
 8009870:	3710      	adds	r7, #16
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}

08009876 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009876:	b580      	push	{r7, lr}
 8009878:	b084      	sub	sp, #16
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
 800987e:	4608      	mov	r0, r1
 8009880:	4611      	mov	r1, r2
 8009882:	461a      	mov	r2, r3
 8009884:	4603      	mov	r3, r0
 8009886:	70fb      	strb	r3, [r7, #3]
 8009888:	460b      	mov	r3, r1
 800988a:	70bb      	strb	r3, [r7, #2]
 800988c:	4613      	mov	r3, r2
 800988e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009890:	2300      	movs	r3, #0
 8009892:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009894:	2300      	movs	r3, #0
 8009896:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800989e:	78bb      	ldrb	r3, [r7, #2]
 80098a0:	883a      	ldrh	r2, [r7, #0]
 80098a2:	78f9      	ldrb	r1, [r7, #3]
 80098a4:	f7f7 fd33 	bl	800130e <HAL_PCD_EP_Open>
 80098a8:	4603      	mov	r3, r0
 80098aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098ac:	7bfb      	ldrb	r3, [r7, #15]
 80098ae:	4618      	mov	r0, r3
 80098b0:	f000 f92e 	bl	8009b10 <USBD_Get_USB_Status>
 80098b4:	4603      	mov	r3, r0
 80098b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	3710      	adds	r7, #16
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}

080098c2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098c2:	b580      	push	{r7, lr}
 80098c4:	b084      	sub	sp, #16
 80098c6:	af00      	add	r7, sp, #0
 80098c8:	6078      	str	r0, [r7, #4]
 80098ca:	460b      	mov	r3, r1
 80098cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098ce:	2300      	movs	r3, #0
 80098d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098d2:	2300      	movs	r3, #0
 80098d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80098dc:	78fa      	ldrb	r2, [r7, #3]
 80098de:	4611      	mov	r1, r2
 80098e0:	4618      	mov	r0, r3
 80098e2:	f7f7 fd71 	bl	80013c8 <HAL_PCD_EP_Close>
 80098e6:	4603      	mov	r3, r0
 80098e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098ea:	7bfb      	ldrb	r3, [r7, #15]
 80098ec:	4618      	mov	r0, r3
 80098ee:	f000 f90f 	bl	8009b10 <USBD_Get_USB_Status>
 80098f2:	4603      	mov	r3, r0
 80098f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3710      	adds	r7, #16
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}

08009900 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b084      	sub	sp, #16
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
 8009908:	460b      	mov	r3, r1
 800990a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800990c:	2300      	movs	r3, #0
 800990e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009910:	2300      	movs	r3, #0
 8009912:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800991a:	78fa      	ldrb	r2, [r7, #3]
 800991c:	4611      	mov	r1, r2
 800991e:	4618      	mov	r0, r3
 8009920:	f7f7 fe1a 	bl	8001558 <HAL_PCD_EP_SetStall>
 8009924:	4603      	mov	r3, r0
 8009926:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009928:	7bfb      	ldrb	r3, [r7, #15]
 800992a:	4618      	mov	r0, r3
 800992c:	f000 f8f0 	bl	8009b10 <USBD_Get_USB_Status>
 8009930:	4603      	mov	r3, r0
 8009932:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009934:	7bbb      	ldrb	r3, [r7, #14]
}
 8009936:	4618      	mov	r0, r3
 8009938:	3710      	adds	r7, #16
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}

0800993e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800993e:	b580      	push	{r7, lr}
 8009940:	b084      	sub	sp, #16
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]
 8009946:	460b      	mov	r3, r1
 8009948:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800994a:	2300      	movs	r3, #0
 800994c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800994e:	2300      	movs	r3, #0
 8009950:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009958:	78fa      	ldrb	r2, [r7, #3]
 800995a:	4611      	mov	r1, r2
 800995c:	4618      	mov	r0, r3
 800995e:	f7f7 fe4d 	bl	80015fc <HAL_PCD_EP_ClrStall>
 8009962:	4603      	mov	r3, r0
 8009964:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009966:	7bfb      	ldrb	r3, [r7, #15]
 8009968:	4618      	mov	r0, r3
 800996a:	f000 f8d1 	bl	8009b10 <USBD_Get_USB_Status>
 800996e:	4603      	mov	r3, r0
 8009970:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009972:	7bbb      	ldrb	r3, [r7, #14]
}
 8009974:	4618      	mov	r0, r3
 8009976:	3710      	adds	r7, #16
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}

0800997c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800997c:	b480      	push	{r7}
 800997e:	b085      	sub	sp, #20
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	460b      	mov	r3, r1
 8009986:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800998e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009990:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009994:	2b00      	cmp	r3, #0
 8009996:	da0c      	bge.n	80099b2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009998:	78fb      	ldrb	r3, [r7, #3]
 800999a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800999e:	68f9      	ldr	r1, [r7, #12]
 80099a0:	1c5a      	adds	r2, r3, #1
 80099a2:	4613      	mov	r3, r2
 80099a4:	009b      	lsls	r3, r3, #2
 80099a6:	4413      	add	r3, r2
 80099a8:	00db      	lsls	r3, r3, #3
 80099aa:	440b      	add	r3, r1
 80099ac:	3302      	adds	r3, #2
 80099ae:	781b      	ldrb	r3, [r3, #0]
 80099b0:	e00b      	b.n	80099ca <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80099b2:	78fb      	ldrb	r3, [r7, #3]
 80099b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80099b8:	68f9      	ldr	r1, [r7, #12]
 80099ba:	4613      	mov	r3, r2
 80099bc:	009b      	lsls	r3, r3, #2
 80099be:	4413      	add	r3, r2
 80099c0:	00db      	lsls	r3, r3, #3
 80099c2:	440b      	add	r3, r1
 80099c4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80099c8:	781b      	ldrb	r3, [r3, #0]
  }
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3714      	adds	r7, #20
 80099ce:	46bd      	mov	sp, r7
 80099d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d4:	4770      	bx	lr

080099d6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80099d6:	b580      	push	{r7, lr}
 80099d8:	b084      	sub	sp, #16
 80099da:	af00      	add	r7, sp, #0
 80099dc:	6078      	str	r0, [r7, #4]
 80099de:	460b      	mov	r3, r1
 80099e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099e2:	2300      	movs	r3, #0
 80099e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099e6:	2300      	movs	r3, #0
 80099e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80099f0:	78fa      	ldrb	r2, [r7, #3]
 80099f2:	4611      	mov	r1, r2
 80099f4:	4618      	mov	r0, r3
 80099f6:	f7f7 fc65 	bl	80012c4 <HAL_PCD_SetAddress>
 80099fa:	4603      	mov	r3, r0
 80099fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099fe:	7bfb      	ldrb	r3, [r7, #15]
 8009a00:	4618      	mov	r0, r3
 8009a02:	f000 f885 	bl	8009b10 <USBD_Get_USB_Status>
 8009a06:	4603      	mov	r3, r0
 8009a08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3710      	adds	r7, #16
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b086      	sub	sp, #24
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	60f8      	str	r0, [r7, #12]
 8009a1c:	607a      	str	r2, [r7, #4]
 8009a1e:	461a      	mov	r2, r3
 8009a20:	460b      	mov	r3, r1
 8009a22:	72fb      	strb	r3, [r7, #11]
 8009a24:	4613      	mov	r3, r2
 8009a26:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009a36:	893b      	ldrh	r3, [r7, #8]
 8009a38:	7af9      	ldrb	r1, [r7, #11]
 8009a3a:	687a      	ldr	r2, [r7, #4]
 8009a3c:	f7f7 fd55 	bl	80014ea <HAL_PCD_EP_Transmit>
 8009a40:	4603      	mov	r3, r0
 8009a42:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a44:	7dfb      	ldrb	r3, [r7, #23]
 8009a46:	4618      	mov	r0, r3
 8009a48:	f000 f862 	bl	8009b10 <USBD_Get_USB_Status>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009a50:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3718      	adds	r7, #24
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}

08009a5a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009a5a:	b580      	push	{r7, lr}
 8009a5c:	b086      	sub	sp, #24
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	60f8      	str	r0, [r7, #12]
 8009a62:	607a      	str	r2, [r7, #4]
 8009a64:	461a      	mov	r2, r3
 8009a66:	460b      	mov	r3, r1
 8009a68:	72fb      	strb	r3, [r7, #11]
 8009a6a:	4613      	mov	r3, r2
 8009a6c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a72:	2300      	movs	r3, #0
 8009a74:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009a7c:	893b      	ldrh	r3, [r7, #8]
 8009a7e:	7af9      	ldrb	r1, [r7, #11]
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	f7f7 fce9 	bl	8001458 <HAL_PCD_EP_Receive>
 8009a86:	4603      	mov	r3, r0
 8009a88:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a8a:	7dfb      	ldrb	r3, [r7, #23]
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f000 f83f 	bl	8009b10 <USBD_Get_USB_Status>
 8009a92:	4603      	mov	r3, r0
 8009a94:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009a96:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	3718      	adds	r7, #24
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}

08009aa0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b082      	sub	sp, #8
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	460b      	mov	r3, r1
 8009aaa:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ab2:	78fa      	ldrb	r2, [r7, #3]
 8009ab4:	4611      	mov	r1, r2
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f7f7 fcff 	bl	80014ba <HAL_PCD_EP_GetRxCount>
 8009abc:	4603      	mov	r3, r0
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3708      	adds	r7, #8
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}
	...

08009ac8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b083      	sub	sp, #12
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009ad0:	4b03      	ldr	r3, [pc, #12]	; (8009ae0 <USBD_static_malloc+0x18>)
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	370c      	adds	r7, #12
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009adc:	4770      	bx	lr
 8009ade:	bf00      	nop
 8009ae0:	2000125c 	.word	0x2000125c

08009ae4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b083      	sub	sp, #12
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]

}
 8009aec:	bf00      	nop
 8009aee:	370c      	adds	r7, #12
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr

08009af8 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009af8:	b480      	push	{r7}
 8009afa:	b083      	sub	sp, #12
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	460b      	mov	r3, r1
 8009b02:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009b04:	bf00      	nop
 8009b06:	370c      	adds	r7, #12
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0e:	4770      	bx	lr

08009b10 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009b10:	b480      	push	{r7}
 8009b12:	b085      	sub	sp, #20
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	4603      	mov	r3, r0
 8009b18:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009b1e:	79fb      	ldrb	r3, [r7, #7]
 8009b20:	2b03      	cmp	r3, #3
 8009b22:	d817      	bhi.n	8009b54 <USBD_Get_USB_Status+0x44>
 8009b24:	a201      	add	r2, pc, #4	; (adr r2, 8009b2c <USBD_Get_USB_Status+0x1c>)
 8009b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b2a:	bf00      	nop
 8009b2c:	08009b3d 	.word	0x08009b3d
 8009b30:	08009b43 	.word	0x08009b43
 8009b34:	08009b49 	.word	0x08009b49
 8009b38:	08009b4f 	.word	0x08009b4f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	73fb      	strb	r3, [r7, #15]
    break;
 8009b40:	e00b      	b.n	8009b5a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009b42:	2302      	movs	r3, #2
 8009b44:	73fb      	strb	r3, [r7, #15]
    break;
 8009b46:	e008      	b.n	8009b5a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009b48:	2301      	movs	r3, #1
 8009b4a:	73fb      	strb	r3, [r7, #15]
    break;
 8009b4c:	e005      	b.n	8009b5a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009b4e:	2302      	movs	r3, #2
 8009b50:	73fb      	strb	r3, [r7, #15]
    break;
 8009b52:	e002      	b.n	8009b5a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009b54:	2302      	movs	r3, #2
 8009b56:	73fb      	strb	r3, [r7, #15]
    break;
 8009b58:	bf00      	nop
  }
  return usb_status;
 8009b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3714      	adds	r7, #20
 8009b60:	46bd      	mov	sp, r7
 8009b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b66:	4770      	bx	lr

08009b68 <__libc_init_array>:
 8009b68:	b570      	push	{r4, r5, r6, lr}
 8009b6a:	4d0d      	ldr	r5, [pc, #52]	; (8009ba0 <__libc_init_array+0x38>)
 8009b6c:	4c0d      	ldr	r4, [pc, #52]	; (8009ba4 <__libc_init_array+0x3c>)
 8009b6e:	1b64      	subs	r4, r4, r5
 8009b70:	10a4      	asrs	r4, r4, #2
 8009b72:	2600      	movs	r6, #0
 8009b74:	42a6      	cmp	r6, r4
 8009b76:	d109      	bne.n	8009b8c <__libc_init_array+0x24>
 8009b78:	4d0b      	ldr	r5, [pc, #44]	; (8009ba8 <__libc_init_array+0x40>)
 8009b7a:	4c0c      	ldr	r4, [pc, #48]	; (8009bac <__libc_init_array+0x44>)
 8009b7c:	f000 f820 	bl	8009bc0 <_init>
 8009b80:	1b64      	subs	r4, r4, r5
 8009b82:	10a4      	asrs	r4, r4, #2
 8009b84:	2600      	movs	r6, #0
 8009b86:	42a6      	cmp	r6, r4
 8009b88:	d105      	bne.n	8009b96 <__libc_init_array+0x2e>
 8009b8a:	bd70      	pop	{r4, r5, r6, pc}
 8009b8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b90:	4798      	blx	r3
 8009b92:	3601      	adds	r6, #1
 8009b94:	e7ee      	b.n	8009b74 <__libc_init_array+0xc>
 8009b96:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b9a:	4798      	blx	r3
 8009b9c:	3601      	adds	r6, #1
 8009b9e:	e7f2      	b.n	8009b86 <__libc_init_array+0x1e>
 8009ba0:	08009c58 	.word	0x08009c58
 8009ba4:	08009c58 	.word	0x08009c58
 8009ba8:	08009c58 	.word	0x08009c58
 8009bac:	08009c5c 	.word	0x08009c5c

08009bb0 <memset>:
 8009bb0:	4402      	add	r2, r0
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d100      	bne.n	8009bba <memset+0xa>
 8009bb8:	4770      	bx	lr
 8009bba:	f803 1b01 	strb.w	r1, [r3], #1
 8009bbe:	e7f9      	b.n	8009bb4 <memset+0x4>

08009bc0 <_init>:
 8009bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bc2:	bf00      	nop
 8009bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bc6:	bc08      	pop	{r3}
 8009bc8:	469e      	mov	lr, r3
 8009bca:	4770      	bx	lr

08009bcc <_fini>:
 8009bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bce:	bf00      	nop
 8009bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bd2:	bc08      	pop	{r3}
 8009bd4:	469e      	mov	lr, r3
 8009bd6:	4770      	bx	lr
