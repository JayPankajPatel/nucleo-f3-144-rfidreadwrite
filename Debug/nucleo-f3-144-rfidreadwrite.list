
nucleo-f3-144-rfidreadwrite.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092bc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08009450  08009450  00019450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094d0  080094d0  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  080094d0  080094d0  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080094d0  080094d0  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094d0  080094d0  000194d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094d4  080094d4  000194d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  080094d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002017c  2**0
                  CONTENTS
 10 .bss          00001300  2000017c  2000017c  0002017c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000147c  2000147c  0002017c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000159fc  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000323e  00000000  00000000  00035ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f78  00000000  00000000  00038de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e30  00000000  00000000  00039d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004910  00000000  00000000  0003ab90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001607a  00000000  00000000  0003f4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd14c  00000000  00000000  0005551a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00122666  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003eb8  00000000  00000000  001226b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000017c 	.word	0x2000017c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08009438 	.word	0x08009438

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000180 	.word	0x20000180
 80001d0:	08009438 	.word	0x08009438

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001da:	f000 fb11 	bl	8000800 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001de:	f000 f815 	bl	800020c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e2:	f000 f90f 	bl	8000404 <MX_GPIO_Init>
  MX_RTC_Init();
 80001e6:	f000 f879 	bl	80002dc <MX_RTC_Init>
  MX_USART3_UART_Init();
 80001ea:	f000 f8db 	bl	80003a4 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80001ee:	f000 f89b 	bl	8000328 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80001f2:	f008 fc6d 	bl	8008ad0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_6); // Turns on Micro USB Port CN13 for Data Transmission
 80001f6:	2140      	movs	r1, #64	; 0x40
 80001f8:	4803      	ldr	r0, [pc, #12]	; (8000208 <main+0x34>)
 80001fa:	f000 fe3f 	bl	8000e7c <HAL_GPIO_TogglePin>
  while (1)
  {



	  HAL_Delay(100);
 80001fe:	2064      	movs	r0, #100	; 0x64
 8000200:	f000 fb64 	bl	80008cc <HAL_Delay>
 8000204:	e7fb      	b.n	80001fe <main+0x2a>
 8000206:	bf00      	nop
 8000208:	48001800 	.word	0x48001800

0800020c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b0a6      	sub	sp, #152	; 0x98
 8000210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000212:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000216:	2228      	movs	r2, #40	; 0x28
 8000218:	2100      	movs	r1, #0
 800021a:	4618      	mov	r0, r3
 800021c:	f009 f904 	bl	8009428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000220:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000224:	2200      	movs	r2, #0
 8000226:	601a      	str	r2, [r3, #0]
 8000228:	605a      	str	r2, [r3, #4]
 800022a:	609a      	str	r2, [r3, #8]
 800022c:	60da      	str	r2, [r3, #12]
 800022e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000230:	1d3b      	adds	r3, r7, #4
 8000232:	2258      	movs	r2, #88	; 0x58
 8000234:	2100      	movs	r1, #0
 8000236:	4618      	mov	r0, r3
 8000238:	f009 f8f6 	bl	8009428 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800023c:	2309      	movs	r3, #9
 800023e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000240:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000244:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000246:	2301      	movs	r3, #1
 8000248:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800024a:	2301      	movs	r3, #1
 800024c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000250:	2302      	movs	r3, #2
 8000252:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000256:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800025a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800025e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000262:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000266:	2300      	movs	r3, #0
 8000268:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000270:	4618      	mov	r0, r3
 8000272:	f002 fae1 	bl	8002838 <HAL_RCC_OscConfig>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d001      	beq.n	8000280 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800027c:	f000 f978 	bl	8000570 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000280:	230f      	movs	r3, #15
 8000282:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000284:	2302      	movs	r3, #2
 8000286:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000288:	2300      	movs	r3, #0
 800028a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800028c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000290:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000292:	2300      	movs	r3, #0
 8000294:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000296:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800029a:	2102      	movs	r1, #2
 800029c:	4618      	mov	r0, r3
 800029e:	f003 fb1f 	bl	80038e0 <HAL_RCC_ClockConfig>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80002a8:	f000 f962 	bl	8000570 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART3
 80002ac:	4b0a      	ldr	r3, [pc, #40]	; (80002d8 <SystemClock_Config+0xcc>)
 80002ae:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80002b0:	2300      	movs	r3, #0
 80002b2:	617b      	str	r3, [r7, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80002b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80002b8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80002ba:	2300      	movs	r3, #0
 80002bc:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	4618      	mov	r0, r3
 80002c2:	f003 fd43 	bl	8003d4c <HAL_RCCEx_PeriphCLKConfig>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80002cc:	f000 f950 	bl	8000570 <Error_Handler>
  }
}
 80002d0:	bf00      	nop
 80002d2:	3798      	adds	r7, #152	; 0x98
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	00030004 	.word	0x00030004

080002dc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80002e0:	4b0f      	ldr	r3, [pc, #60]	; (8000320 <MX_RTC_Init+0x44>)
 80002e2:	4a10      	ldr	r2, [pc, #64]	; (8000324 <MX_RTC_Init+0x48>)
 80002e4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80002e6:	4b0e      	ldr	r3, [pc, #56]	; (8000320 <MX_RTC_Init+0x44>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80002ec:	4b0c      	ldr	r3, [pc, #48]	; (8000320 <MX_RTC_Init+0x44>)
 80002ee:	227f      	movs	r2, #127	; 0x7f
 80002f0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80002f2:	4b0b      	ldr	r3, [pc, #44]	; (8000320 <MX_RTC_Init+0x44>)
 80002f4:	22ff      	movs	r2, #255	; 0xff
 80002f6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80002f8:	4b09      	ldr	r3, [pc, #36]	; (8000320 <MX_RTC_Init+0x44>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80002fe:	4b08      	ldr	r3, [pc, #32]	; (8000320 <MX_RTC_Init+0x44>)
 8000300:	2200      	movs	r2, #0
 8000302:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000304:	4b06      	ldr	r3, [pc, #24]	; (8000320 <MX_RTC_Init+0x44>)
 8000306:	2200      	movs	r2, #0
 8000308:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800030a:	4805      	ldr	r0, [pc, #20]	; (8000320 <MX_RTC_Init+0x44>)
 800030c:	f003 ff3c 	bl	8004188 <HAL_RTC_Init>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000316:	f000 f92b 	bl	8000570 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	20000198 	.word	0x20000198
 8000324:	40002800 	.word	0x40002800

08000328 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800032c:	4b1b      	ldr	r3, [pc, #108]	; (800039c <MX_SPI1_Init+0x74>)
 800032e:	4a1c      	ldr	r2, [pc, #112]	; (80003a0 <MX_SPI1_Init+0x78>)
 8000330:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000332:	4b1a      	ldr	r3, [pc, #104]	; (800039c <MX_SPI1_Init+0x74>)
 8000334:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000338:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800033a:	4b18      	ldr	r3, [pc, #96]	; (800039c <MX_SPI1_Init+0x74>)
 800033c:	2200      	movs	r2, #0
 800033e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000340:	4b16      	ldr	r3, [pc, #88]	; (800039c <MX_SPI1_Init+0x74>)
 8000342:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000346:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000348:	4b14      	ldr	r3, [pc, #80]	; (800039c <MX_SPI1_Init+0x74>)
 800034a:	2200      	movs	r2, #0
 800034c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800034e:	4b13      	ldr	r3, [pc, #76]	; (800039c <MX_SPI1_Init+0x74>)
 8000350:	2200      	movs	r2, #0
 8000352:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000354:	4b11      	ldr	r3, [pc, #68]	; (800039c <MX_SPI1_Init+0x74>)
 8000356:	f44f 7200 	mov.w	r2, #512	; 0x200
 800035a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800035c:	4b0f      	ldr	r3, [pc, #60]	; (800039c <MX_SPI1_Init+0x74>)
 800035e:	2220      	movs	r2, #32
 8000360:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000362:	4b0e      	ldr	r3, [pc, #56]	; (800039c <MX_SPI1_Init+0x74>)
 8000364:	2200      	movs	r2, #0
 8000366:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000368:	4b0c      	ldr	r3, [pc, #48]	; (800039c <MX_SPI1_Init+0x74>)
 800036a:	2200      	movs	r2, #0
 800036c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800036e:	4b0b      	ldr	r3, [pc, #44]	; (800039c <MX_SPI1_Init+0x74>)
 8000370:	2200      	movs	r2, #0
 8000372:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000374:	4b09      	ldr	r3, [pc, #36]	; (800039c <MX_SPI1_Init+0x74>)
 8000376:	2207      	movs	r2, #7
 8000378:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800037a:	4b08      	ldr	r3, [pc, #32]	; (800039c <MX_SPI1_Init+0x74>)
 800037c:	2200      	movs	r2, #0
 800037e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000380:	4b06      	ldr	r3, [pc, #24]	; (800039c <MX_SPI1_Init+0x74>)
 8000382:	2208      	movs	r2, #8
 8000384:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000386:	4805      	ldr	r0, [pc, #20]	; (800039c <MX_SPI1_Init+0x74>)
 8000388:	f004 f804 	bl	8004394 <HAL_SPI_Init>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000392:	f000 f8ed 	bl	8000570 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000396:	bf00      	nop
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	200001b8 	.word	0x200001b8
 80003a0:	40013000 	.word	0x40013000

080003a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80003a8:	4b14      	ldr	r3, [pc, #80]	; (80003fc <MX_USART3_UART_Init+0x58>)
 80003aa:	4a15      	ldr	r2, [pc, #84]	; (8000400 <MX_USART3_UART_Init+0x5c>)
 80003ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 80003ae:	4b13      	ldr	r3, [pc, #76]	; (80003fc <MX_USART3_UART_Init+0x58>)
 80003b0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80003b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80003b6:	4b11      	ldr	r3, [pc, #68]	; (80003fc <MX_USART3_UART_Init+0x58>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <MX_USART3_UART_Init+0x58>)
 80003be:	2200      	movs	r2, #0
 80003c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80003c2:	4b0e      	ldr	r3, [pc, #56]	; (80003fc <MX_USART3_UART_Init+0x58>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80003c8:	4b0c      	ldr	r3, [pc, #48]	; (80003fc <MX_USART3_UART_Init+0x58>)
 80003ca:	220c      	movs	r2, #12
 80003cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ce:	4b0b      	ldr	r3, [pc, #44]	; (80003fc <MX_USART3_UART_Init+0x58>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80003d4:	4b09      	ldr	r3, [pc, #36]	; (80003fc <MX_USART3_UART_Init+0x58>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003da:	4b08      	ldr	r3, [pc, #32]	; (80003fc <MX_USART3_UART_Init+0x58>)
 80003dc:	2200      	movs	r2, #0
 80003de:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003e0:	4b06      	ldr	r3, [pc, #24]	; (80003fc <MX_USART3_UART_Init+0x58>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80003e6:	4805      	ldr	r0, [pc, #20]	; (80003fc <MX_USART3_UART_Init+0x58>)
 80003e8:	f004 f87f 	bl	80044ea <HAL_UART_Init>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80003f2:	f000 f8bd 	bl	8000570 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80003f6:	bf00      	nop
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	2000021c 	.word	0x2000021c
 8000400:	40004800 	.word	0x40004800

08000404 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b08c      	sub	sp, #48	; 0x30
 8000408:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040a:	f107 031c 	add.w	r3, r7, #28
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
 8000412:	605a      	str	r2, [r3, #4]
 8000414:	609a      	str	r2, [r3, #8]
 8000416:	60da      	str	r2, [r3, #12]
 8000418:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800041a:	4b51      	ldr	r3, [pc, #324]	; (8000560 <MX_GPIO_Init+0x15c>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	4a50      	ldr	r2, [pc, #320]	; (8000560 <MX_GPIO_Init+0x15c>)
 8000420:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000424:	6153      	str	r3, [r2, #20]
 8000426:	4b4e      	ldr	r3, [pc, #312]	; (8000560 <MX_GPIO_Init+0x15c>)
 8000428:	695b      	ldr	r3, [r3, #20]
 800042a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800042e:	61bb      	str	r3, [r7, #24]
 8000430:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000432:	4b4b      	ldr	r3, [pc, #300]	; (8000560 <MX_GPIO_Init+0x15c>)
 8000434:	695b      	ldr	r3, [r3, #20]
 8000436:	4a4a      	ldr	r2, [pc, #296]	; (8000560 <MX_GPIO_Init+0x15c>)
 8000438:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800043c:	6153      	str	r3, [r2, #20]
 800043e:	4b48      	ldr	r3, [pc, #288]	; (8000560 <MX_GPIO_Init+0x15c>)
 8000440:	695b      	ldr	r3, [r3, #20]
 8000442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000446:	617b      	str	r3, [r7, #20]
 8000448:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800044a:	4b45      	ldr	r3, [pc, #276]	; (8000560 <MX_GPIO_Init+0x15c>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	4a44      	ldr	r2, [pc, #272]	; (8000560 <MX_GPIO_Init+0x15c>)
 8000450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000454:	6153      	str	r3, [r2, #20]
 8000456:	4b42      	ldr	r3, [pc, #264]	; (8000560 <MX_GPIO_Init+0x15c>)
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800045e:	613b      	str	r3, [r7, #16]
 8000460:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000462:	4b3f      	ldr	r3, [pc, #252]	; (8000560 <MX_GPIO_Init+0x15c>)
 8000464:	695b      	ldr	r3, [r3, #20]
 8000466:	4a3e      	ldr	r2, [pc, #248]	; (8000560 <MX_GPIO_Init+0x15c>)
 8000468:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800046c:	6153      	str	r3, [r2, #20]
 800046e:	4b3c      	ldr	r3, [pc, #240]	; (8000560 <MX_GPIO_Init+0x15c>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000476:	60fb      	str	r3, [r7, #12]
 8000478:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800047a:	4b39      	ldr	r3, [pc, #228]	; (8000560 <MX_GPIO_Init+0x15c>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	4a38      	ldr	r2, [pc, #224]	; (8000560 <MX_GPIO_Init+0x15c>)
 8000480:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000484:	6153      	str	r3, [r2, #20]
 8000486:	4b36      	ldr	r3, [pc, #216]	; (8000560 <MX_GPIO_Init+0x15c>)
 8000488:	695b      	ldr	r3, [r3, #20]
 800048a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800048e:	60bb      	str	r3, [r7, #8]
 8000490:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000492:	4b33      	ldr	r3, [pc, #204]	; (8000560 <MX_GPIO_Init+0x15c>)
 8000494:	695b      	ldr	r3, [r3, #20]
 8000496:	4a32      	ldr	r2, [pc, #200]	; (8000560 <MX_GPIO_Init+0x15c>)
 8000498:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800049c:	6153      	str	r3, [r2, #20]
 800049e:	4b30      	ldr	r3, [pc, #192]	; (8000560 <MX_GPIO_Init+0x15c>)
 80004a0:	695b      	ldr	r3, [r3, #20]
 80004a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80004a6:	607b      	str	r3, [r7, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SP1_NSS_RC552_GPIO_Port, SP1_NSS_RC552_Pin, GPIO_PIN_RESET);
 80004aa:	2200      	movs	r2, #0
 80004ac:	2101      	movs	r1, #1
 80004ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004b2:	f000 fccb 	bl	8000e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80004b6:	2200      	movs	r2, #0
 80004b8:	f244 0181 	movw	r1, #16513	; 0x4081
 80004bc:	4829      	ldr	r0, [pc, #164]	; (8000564 <MX_GPIO_Init+0x160>)
 80004be:	f000 fcc5 	bl	8000e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80004c2:	2200      	movs	r2, #0
 80004c4:	2140      	movs	r1, #64	; 0x40
 80004c6:	4828      	ldr	r0, [pc, #160]	; (8000568 <MX_GPIO_Init+0x164>)
 80004c8:	f000 fcc0 	bl	8000e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80004cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004d2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80004d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d8:	2300      	movs	r3, #0
 80004da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80004dc:	f107 031c 	add.w	r3, r7, #28
 80004e0:	4619      	mov	r1, r3
 80004e2:	4822      	ldr	r0, [pc, #136]	; (800056c <MX_GPIO_Init+0x168>)
 80004e4:	f000 fb28 	bl	8000b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : SP1_NSS_RC552_Pin */
  GPIO_InitStruct.Pin = SP1_NSS_RC552_Pin;
 80004e8:	2301      	movs	r3, #1
 80004ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ec:	2301      	movs	r3, #1
 80004ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f0:	2300      	movs	r3, #0
 80004f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f4:	2300      	movs	r3, #0
 80004f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SP1_NSS_RC552_GPIO_Port, &GPIO_InitStruct);
 80004f8:	f107 031c 	add.w	r3, r7, #28
 80004fc:	4619      	mov	r1, r3
 80004fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000502:	f000 fb19 	bl	8000b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000506:	f244 0381 	movw	r3, #16513	; 0x4081
 800050a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800050c:	2301      	movs	r3, #1
 800050e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000510:	2300      	movs	r3, #0
 8000512:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000514:	2300      	movs	r3, #0
 8000516:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000518:	f107 031c 	add.w	r3, r7, #28
 800051c:	4619      	mov	r1, r3
 800051e:	4811      	ldr	r0, [pc, #68]	; (8000564 <MX_GPIO_Init+0x160>)
 8000520:	f000 fb0a 	bl	8000b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000524:	2340      	movs	r3, #64	; 0x40
 8000526:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000528:	2301      	movs	r3, #1
 800052a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052c:	2300      	movs	r3, #0
 800052e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000530:	2300      	movs	r3, #0
 8000532:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000534:	f107 031c 	add.w	r3, r7, #28
 8000538:	4619      	mov	r1, r3
 800053a:	480b      	ldr	r0, [pc, #44]	; (8000568 <MX_GPIO_Init+0x164>)
 800053c:	f000 fafc 	bl	8000b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000540:	2380      	movs	r3, #128	; 0x80
 8000542:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000544:	2300      	movs	r3, #0
 8000546:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000548:	2300      	movs	r3, #0
 800054a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800054c:	f107 031c 	add.w	r3, r7, #28
 8000550:	4619      	mov	r1, r3
 8000552:	4805      	ldr	r0, [pc, #20]	; (8000568 <MX_GPIO_Init+0x164>)
 8000554:	f000 faf0 	bl	8000b38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000558:	bf00      	nop
 800055a:	3730      	adds	r7, #48	; 0x30
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	40021000 	.word	0x40021000
 8000564:	48000400 	.word	0x48000400
 8000568:	48001800 	.word	0x48001800
 800056c:	48000800 	.word	0x48000800

08000570 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000574:	b672      	cpsid	i
}
 8000576:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000578:	e7fe      	b.n	8000578 <Error_Handler+0x8>
	...

0800057c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000582:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <HAL_MspInit+0x44>)
 8000584:	699b      	ldr	r3, [r3, #24]
 8000586:	4a0e      	ldr	r2, [pc, #56]	; (80005c0 <HAL_MspInit+0x44>)
 8000588:	f043 0301 	orr.w	r3, r3, #1
 800058c:	6193      	str	r3, [r2, #24]
 800058e:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <HAL_MspInit+0x44>)
 8000590:	699b      	ldr	r3, [r3, #24]
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800059a:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <HAL_MspInit+0x44>)
 800059c:	69db      	ldr	r3, [r3, #28]
 800059e:	4a08      	ldr	r2, [pc, #32]	; (80005c0 <HAL_MspInit+0x44>)
 80005a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a4:	61d3      	str	r3, [r2, #28]
 80005a6:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <HAL_MspInit+0x44>)
 80005a8:	69db      	ldr	r3, [r3, #28]
 80005aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ae:	603b      	str	r3, [r7, #0]
 80005b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005b2:	bf00      	nop
 80005b4:	370c      	adds	r7, #12
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	40021000 	.word	0x40021000

080005c4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a0d      	ldr	r2, [pc, #52]	; (8000608 <HAL_RTC_MspInit+0x44>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d111      	bne.n	80005fa <HAL_RTC_MspInit+0x36>
 80005d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005da:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	fa93 f3a3 	rbit	r3, r3
 80005e2:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80005e4:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80005e6:	fab3 f383 	clz	r3, r3
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	461a      	mov	r2, r3
 80005ee:	4b07      	ldr	r3, [pc, #28]	; (800060c <HAL_RTC_MspInit+0x48>)
 80005f0:	4413      	add	r3, r2
 80005f2:	009b      	lsls	r3, r3, #2
 80005f4:	461a      	mov	r2, r3
 80005f6:	2301      	movs	r3, #1
 80005f8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80005fa:	bf00      	nop
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	40002800 	.word	0x40002800
 800060c:	10908100 	.word	0x10908100

08000610 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b08a      	sub	sp, #40	; 0x28
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000618:	f107 0314 	add.w	r3, r7, #20
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a17      	ldr	r2, [pc, #92]	; (800068c <HAL_SPI_MspInit+0x7c>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d127      	bne.n	8000682 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000632:	4b17      	ldr	r3, [pc, #92]	; (8000690 <HAL_SPI_MspInit+0x80>)
 8000634:	699b      	ldr	r3, [r3, #24]
 8000636:	4a16      	ldr	r2, [pc, #88]	; (8000690 <HAL_SPI_MspInit+0x80>)
 8000638:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800063c:	6193      	str	r3, [r2, #24]
 800063e:	4b14      	ldr	r3, [pc, #80]	; (8000690 <HAL_SPI_MspInit+0x80>)
 8000640:	699b      	ldr	r3, [r3, #24]
 8000642:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000646:	613b      	str	r3, [r7, #16]
 8000648:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800064a:	4b11      	ldr	r3, [pc, #68]	; (8000690 <HAL_SPI_MspInit+0x80>)
 800064c:	695b      	ldr	r3, [r3, #20]
 800064e:	4a10      	ldr	r2, [pc, #64]	; (8000690 <HAL_SPI_MspInit+0x80>)
 8000650:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000654:	6153      	str	r3, [r2, #20]
 8000656:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <HAL_SPI_MspInit+0x80>)
 8000658:	695b      	ldr	r3, [r3, #20]
 800065a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SP1_SCK_RC552_Pin|SP1_MISO_RC552_Pin|SP1_MOSI_RC552_Pin;
 8000662:	2338      	movs	r3, #56	; 0x38
 8000664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000666:	2302      	movs	r3, #2
 8000668:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800066e:	2303      	movs	r3, #3
 8000670:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000672:	2305      	movs	r3, #5
 8000674:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000676:	f107 0314 	add.w	r3, r7, #20
 800067a:	4619      	mov	r1, r3
 800067c:	4805      	ldr	r0, [pc, #20]	; (8000694 <HAL_SPI_MspInit+0x84>)
 800067e:	f000 fa5b 	bl	8000b38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000682:	bf00      	nop
 8000684:	3728      	adds	r7, #40	; 0x28
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40013000 	.word	0x40013000
 8000690:	40021000 	.word	0x40021000
 8000694:	48000400 	.word	0x48000400

08000698 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08a      	sub	sp, #40	; 0x28
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a0:	f107 0314 	add.w	r3, r7, #20
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a17      	ldr	r2, [pc, #92]	; (8000714 <HAL_UART_MspInit+0x7c>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d128      	bne.n	800070c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80006ba:	4b17      	ldr	r3, [pc, #92]	; (8000718 <HAL_UART_MspInit+0x80>)
 80006bc:	69db      	ldr	r3, [r3, #28]
 80006be:	4a16      	ldr	r2, [pc, #88]	; (8000718 <HAL_UART_MspInit+0x80>)
 80006c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006c4:	61d3      	str	r3, [r2, #28]
 80006c6:	4b14      	ldr	r3, [pc, #80]	; (8000718 <HAL_UART_MspInit+0x80>)
 80006c8:	69db      	ldr	r3, [r3, #28]
 80006ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80006ce:	613b      	str	r3, [r7, #16]
 80006d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80006d2:	4b11      	ldr	r3, [pc, #68]	; (8000718 <HAL_UART_MspInit+0x80>)
 80006d4:	695b      	ldr	r3, [r3, #20]
 80006d6:	4a10      	ldr	r2, [pc, #64]	; (8000718 <HAL_UART_MspInit+0x80>)
 80006d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006dc:	6153      	str	r3, [r2, #20]
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <HAL_UART_MspInit+0x80>)
 80006e0:	695b      	ldr	r3, [r3, #20]
 80006e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80006ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f0:	2302      	movs	r3, #2
 80006f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006f8:	2303      	movs	r3, #3
 80006fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80006fc:	2307      	movs	r3, #7
 80006fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000700:	f107 0314 	add.w	r3, r7, #20
 8000704:	4619      	mov	r1, r3
 8000706:	4805      	ldr	r0, [pc, #20]	; (800071c <HAL_UART_MspInit+0x84>)
 8000708:	f000 fa16 	bl	8000b38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800070c:	bf00      	nop
 800070e:	3728      	adds	r7, #40	; 0x28
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40004800 	.word	0x40004800
 8000718:	40021000 	.word	0x40021000
 800071c:	48000c00 	.word	0x48000c00

08000720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000724:	e7fe      	b.n	8000724 <NMI_Handler+0x4>

08000726 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000726:	b480      	push	{r7}
 8000728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800072a:	e7fe      	b.n	800072a <HardFault_Handler+0x4>

0800072c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000730:	e7fe      	b.n	8000730 <MemManage_Handler+0x4>

08000732 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000736:	e7fe      	b.n	8000736 <BusFault_Handler+0x4>

08000738 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800073c:	e7fe      	b.n	800073c <UsageFault_Handler+0x4>

0800073e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000742:	bf00      	nop
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr

0800074c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr

0800075a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800075e:	bf00      	nop
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800076c:	f000 f88e 	bl	800088c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}

08000774 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000778:	4802      	ldr	r0, [pc, #8]	; (8000784 <USB_LP_IRQHandler+0x10>)
 800077a:	f000 fc91 	bl	80010a0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000f70 	.word	0x20000f70

08000788 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <SystemInit+0x20>)
 800078e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000792:	4a05      	ldr	r2, [pc, #20]	; (80007a8 <SystemInit+0x20>)
 8000794:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000798:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	e000ed00 	.word	0xe000ed00

080007ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007e4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80007b0:	f7ff ffea 	bl	8000788 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007b4:	480c      	ldr	r0, [pc, #48]	; (80007e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80007b6:	490d      	ldr	r1, [pc, #52]	; (80007ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80007b8:	4a0d      	ldr	r2, [pc, #52]	; (80007f0 <LoopForever+0xe>)
  movs r3, #0
 80007ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007bc:	e002      	b.n	80007c4 <LoopCopyDataInit>

080007be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007c2:	3304      	adds	r3, #4

080007c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007c8:	d3f9      	bcc.n	80007be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ca:	4a0a      	ldr	r2, [pc, #40]	; (80007f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007cc:	4c0a      	ldr	r4, [pc, #40]	; (80007f8 <LoopForever+0x16>)
  movs r3, #0
 80007ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007d0:	e001      	b.n	80007d6 <LoopFillZerobss>

080007d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007d4:	3204      	adds	r2, #4

080007d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007d8:	d3fb      	bcc.n	80007d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007da:	f008 fe01 	bl	80093e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007de:	f7ff fcf9 	bl	80001d4 <main>

080007e2 <LoopForever>:

LoopForever:
    b LoopForever
 80007e2:	e7fe      	b.n	80007e2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007e4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80007e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007ec:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 80007f0:	080094d8 	.word	0x080094d8
  ldr r2, =_sbss
 80007f4:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 80007f8:	2000147c 	.word	0x2000147c

080007fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007fc:	e7fe      	b.n	80007fc <ADC1_2_IRQHandler>
	...

08000800 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000804:	4b08      	ldr	r3, [pc, #32]	; (8000828 <HAL_Init+0x28>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a07      	ldr	r2, [pc, #28]	; (8000828 <HAL_Init+0x28>)
 800080a:	f043 0310 	orr.w	r3, r3, #16
 800080e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000810:	2003      	movs	r0, #3
 8000812:	f000 f94f 	bl	8000ab4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000816:	2000      	movs	r0, #0
 8000818:	f000 f808 	bl	800082c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800081c:	f7ff feae 	bl	800057c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000820:	2300      	movs	r3, #0
}
 8000822:	4618      	mov	r0, r3
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40022000 	.word	0x40022000

0800082c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000834:	4b12      	ldr	r3, [pc, #72]	; (8000880 <HAL_InitTick+0x54>)
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	4b12      	ldr	r3, [pc, #72]	; (8000884 <HAL_InitTick+0x58>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	4619      	mov	r1, r3
 800083e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000842:	fbb3 f3f1 	udiv	r3, r3, r1
 8000846:	fbb2 f3f3 	udiv	r3, r2, r3
 800084a:	4618      	mov	r0, r3
 800084c:	f000 f967 	bl	8000b1e <HAL_SYSTICK_Config>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000856:	2301      	movs	r3, #1
 8000858:	e00e      	b.n	8000878 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2b0f      	cmp	r3, #15
 800085e:	d80a      	bhi.n	8000876 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000860:	2200      	movs	r2, #0
 8000862:	6879      	ldr	r1, [r7, #4]
 8000864:	f04f 30ff 	mov.w	r0, #4294967295
 8000868:	f000 f92f 	bl	8000aca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800086c:	4a06      	ldr	r2, [pc, #24]	; (8000888 <HAL_InitTick+0x5c>)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000872:	2300      	movs	r3, #0
 8000874:	e000      	b.n	8000878 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000876:	2301      	movs	r3, #1
}
 8000878:	4618      	mov	r0, r3
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20000000 	.word	0x20000000
 8000884:	20000008 	.word	0x20000008
 8000888:	20000004 	.word	0x20000004

0800088c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <HAL_IncTick+0x20>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	461a      	mov	r2, r3
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <HAL_IncTick+0x24>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4413      	add	r3, r2
 800089c:	4a04      	ldr	r2, [pc, #16]	; (80008b0 <HAL_IncTick+0x24>)
 800089e:	6013      	str	r3, [r2, #0]
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	20000008 	.word	0x20000008
 80008b0:	200002a4 	.word	0x200002a4

080008b4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  return uwTick;  
 80008b8:	4b03      	ldr	r3, [pc, #12]	; (80008c8 <HAL_GetTick+0x14>)
 80008ba:	681b      	ldr	r3, [r3, #0]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	200002a4 	.word	0x200002a4

080008cc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008d4:	f7ff ffee 	bl	80008b4 <HAL_GetTick>
 80008d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008e4:	d005      	beq.n	80008f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008e6:	4b0a      	ldr	r3, [pc, #40]	; (8000910 <HAL_Delay+0x44>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	461a      	mov	r2, r3
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	4413      	add	r3, r2
 80008f0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80008f2:	bf00      	nop
 80008f4:	f7ff ffde 	bl	80008b4 <HAL_GetTick>
 80008f8:	4602      	mov	r2, r0
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	1ad3      	subs	r3, r2, r3
 80008fe:	68fa      	ldr	r2, [r7, #12]
 8000900:	429a      	cmp	r2, r3
 8000902:	d8f7      	bhi.n	80008f4 <HAL_Delay+0x28>
  {
  }
}
 8000904:	bf00      	nop
 8000906:	bf00      	nop
 8000908:	3710      	adds	r7, #16
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000008 	.word	0x20000008

08000914 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000914:	b480      	push	{r7}
 8000916:	b085      	sub	sp, #20
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	f003 0307 	and.w	r3, r3, #7
 8000922:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000924:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <__NVIC_SetPriorityGrouping+0x44>)
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800092a:	68ba      	ldr	r2, [r7, #8]
 800092c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000930:	4013      	ands	r3, r2
 8000932:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800093c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000944:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000946:	4a04      	ldr	r2, [pc, #16]	; (8000958 <__NVIC_SetPriorityGrouping+0x44>)
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	60d3      	str	r3, [r2, #12]
}
 800094c:	bf00      	nop
 800094e:	3714      	adds	r7, #20
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr
 8000958:	e000ed00 	.word	0xe000ed00

0800095c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000960:	4b04      	ldr	r3, [pc, #16]	; (8000974 <__NVIC_GetPriorityGrouping+0x18>)
 8000962:	68db      	ldr	r3, [r3, #12]
 8000964:	0a1b      	lsrs	r3, r3, #8
 8000966:	f003 0307 	and.w	r3, r3, #7
}
 800096a:	4618      	mov	r0, r3
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	e000ed00 	.word	0xe000ed00

08000978 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000986:	2b00      	cmp	r3, #0
 8000988:	db0b      	blt.n	80009a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800098a:	79fb      	ldrb	r3, [r7, #7]
 800098c:	f003 021f 	and.w	r2, r3, #31
 8000990:	4907      	ldr	r1, [pc, #28]	; (80009b0 <__NVIC_EnableIRQ+0x38>)
 8000992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000996:	095b      	lsrs	r3, r3, #5
 8000998:	2001      	movs	r0, #1
 800099a:	fa00 f202 	lsl.w	r2, r0, r2
 800099e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009a2:	bf00      	nop
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	e000e100 	.word	0xe000e100

080009b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	6039      	str	r1, [r7, #0]
 80009be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	db0a      	blt.n	80009de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	490c      	ldr	r1, [pc, #48]	; (8000a00 <__NVIC_SetPriority+0x4c>)
 80009ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d2:	0112      	lsls	r2, r2, #4
 80009d4:	b2d2      	uxtb	r2, r2
 80009d6:	440b      	add	r3, r1
 80009d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009dc:	e00a      	b.n	80009f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	b2da      	uxtb	r2, r3
 80009e2:	4908      	ldr	r1, [pc, #32]	; (8000a04 <__NVIC_SetPriority+0x50>)
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	f003 030f 	and.w	r3, r3, #15
 80009ea:	3b04      	subs	r3, #4
 80009ec:	0112      	lsls	r2, r2, #4
 80009ee:	b2d2      	uxtb	r2, r2
 80009f0:	440b      	add	r3, r1
 80009f2:	761a      	strb	r2, [r3, #24]
}
 80009f4:	bf00      	nop
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	e000e100 	.word	0xe000e100
 8000a04:	e000ed00 	.word	0xe000ed00

08000a08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b089      	sub	sp, #36	; 0x24
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	60f8      	str	r0, [r7, #12]
 8000a10:	60b9      	str	r1, [r7, #8]
 8000a12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	f003 0307 	and.w	r3, r3, #7
 8000a1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a1c:	69fb      	ldr	r3, [r7, #28]
 8000a1e:	f1c3 0307 	rsb	r3, r3, #7
 8000a22:	2b04      	cmp	r3, #4
 8000a24:	bf28      	it	cs
 8000a26:	2304      	movcs	r3, #4
 8000a28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a2a:	69fb      	ldr	r3, [r7, #28]
 8000a2c:	3304      	adds	r3, #4
 8000a2e:	2b06      	cmp	r3, #6
 8000a30:	d902      	bls.n	8000a38 <NVIC_EncodePriority+0x30>
 8000a32:	69fb      	ldr	r3, [r7, #28]
 8000a34:	3b03      	subs	r3, #3
 8000a36:	e000      	b.n	8000a3a <NVIC_EncodePriority+0x32>
 8000a38:	2300      	movs	r3, #0
 8000a3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a40:	69bb      	ldr	r3, [r7, #24]
 8000a42:	fa02 f303 	lsl.w	r3, r2, r3
 8000a46:	43da      	mvns	r2, r3
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	401a      	ands	r2, r3
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a50:	f04f 31ff 	mov.w	r1, #4294967295
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	fa01 f303 	lsl.w	r3, r1, r3
 8000a5a:	43d9      	mvns	r1, r3
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a60:	4313      	orrs	r3, r2
         );
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3724      	adds	r7, #36	; 0x24
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
	...

08000a70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	3b01      	subs	r3, #1
 8000a7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a80:	d301      	bcc.n	8000a86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a82:	2301      	movs	r3, #1
 8000a84:	e00f      	b.n	8000aa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a86:	4a0a      	ldr	r2, [pc, #40]	; (8000ab0 <SysTick_Config+0x40>)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a8e:	210f      	movs	r1, #15
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	f7ff ff8e 	bl	80009b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a98:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <SysTick_Config+0x40>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a9e:	4b04      	ldr	r3, [pc, #16]	; (8000ab0 <SysTick_Config+0x40>)
 8000aa0:	2207      	movs	r2, #7
 8000aa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000aa4:	2300      	movs	r3, #0
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	e000e010 	.word	0xe000e010

08000ab4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000abc:	6878      	ldr	r0, [r7, #4]
 8000abe:	f7ff ff29 	bl	8000914 <__NVIC_SetPriorityGrouping>
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}

08000aca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	b086      	sub	sp, #24
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	60b9      	str	r1, [r7, #8]
 8000ad4:	607a      	str	r2, [r7, #4]
 8000ad6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000adc:	f7ff ff3e 	bl	800095c <__NVIC_GetPriorityGrouping>
 8000ae0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	68b9      	ldr	r1, [r7, #8]
 8000ae6:	6978      	ldr	r0, [r7, #20]
 8000ae8:	f7ff ff8e 	bl	8000a08 <NVIC_EncodePriority>
 8000aec:	4602      	mov	r2, r0
 8000aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000af2:	4611      	mov	r1, r2
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff ff5d 	bl	80009b4 <__NVIC_SetPriority>
}
 8000afa:	bf00      	nop
 8000afc:	3718      	adds	r7, #24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b082      	sub	sp, #8
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	4603      	mov	r3, r0
 8000b0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff ff31 	bl	8000978 <__NVIC_EnableIRQ>
}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b082      	sub	sp, #8
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f7ff ffa2 	bl	8000a70 <SysTick_Config>
 8000b2c:	4603      	mov	r3, r0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
	...

08000b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b087      	sub	sp, #28
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b42:	2300      	movs	r3, #0
 8000b44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b46:	e160      	b.n	8000e0a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	fa01 f303 	lsl.w	r3, r1, r3
 8000b54:	4013      	ands	r3, r2
 8000b56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	f000 8152 	beq.w	8000e04 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	f003 0303 	and.w	r3, r3, #3
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d005      	beq.n	8000b78 <HAL_GPIO_Init+0x40>
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f003 0303 	and.w	r3, r3, #3
 8000b74:	2b02      	cmp	r3, #2
 8000b76:	d130      	bne.n	8000bda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	689b      	ldr	r3, [r3, #8]
 8000b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	2203      	movs	r2, #3
 8000b84:	fa02 f303 	lsl.w	r3, r2, r3
 8000b88:	43db      	mvns	r3, r3
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	68da      	ldr	r2, [r3, #12]
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9c:	693a      	ldr	r2, [r7, #16]
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bae:	2201      	movs	r2, #1
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	43db      	mvns	r3, r3
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	4013      	ands	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	091b      	lsrs	r3, r3, #4
 8000bc4:	f003 0201 	and.w	r2, r3, #1
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f003 0303 	and.w	r3, r3, #3
 8000be2:	2b03      	cmp	r3, #3
 8000be4:	d017      	beq.n	8000c16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	68db      	ldr	r3, [r3, #12]
 8000bea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	2203      	movs	r2, #3
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	43db      	mvns	r3, r3
 8000bf8:	693a      	ldr	r2, [r7, #16]
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	689a      	ldr	r2, [r3, #8]
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	f003 0303 	and.w	r3, r3, #3
 8000c1e:	2b02      	cmp	r3, #2
 8000c20:	d123      	bne.n	8000c6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	08da      	lsrs	r2, r3, #3
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	3208      	adds	r2, #8
 8000c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	220f      	movs	r2, #15
 8000c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3e:	43db      	mvns	r3, r3
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	4013      	ands	r3, r2
 8000c44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	691a      	ldr	r2, [r3, #16]
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	f003 0307 	and.w	r3, r3, #7
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	08da      	lsrs	r2, r3, #3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3208      	adds	r2, #8
 8000c64:	6939      	ldr	r1, [r7, #16]
 8000c66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	2203      	movs	r2, #3
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	43db      	mvns	r3, r3
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	4013      	ands	r3, r2
 8000c80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	f003 0203 	and.w	r2, r3, #3
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	f000 80ac 	beq.w	8000e04 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cac:	4b5e      	ldr	r3, [pc, #376]	; (8000e28 <HAL_GPIO_Init+0x2f0>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	4a5d      	ldr	r2, [pc, #372]	; (8000e28 <HAL_GPIO_Init+0x2f0>)
 8000cb2:	f043 0301 	orr.w	r3, r3, #1
 8000cb6:	6193      	str	r3, [r2, #24]
 8000cb8:	4b5b      	ldr	r3, [pc, #364]	; (8000e28 <HAL_GPIO_Init+0x2f0>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	f003 0301 	and.w	r3, r3, #1
 8000cc0:	60bb      	str	r3, [r7, #8]
 8000cc2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000cc4:	4a59      	ldr	r2, [pc, #356]	; (8000e2c <HAL_GPIO_Init+0x2f4>)
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	089b      	lsrs	r3, r3, #2
 8000cca:	3302      	adds	r3, #2
 8000ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	f003 0303 	and.w	r3, r3, #3
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	220f      	movs	r2, #15
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000cee:	d025      	beq.n	8000d3c <HAL_GPIO_Init+0x204>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4a4f      	ldr	r2, [pc, #316]	; (8000e30 <HAL_GPIO_Init+0x2f8>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d01f      	beq.n	8000d38 <HAL_GPIO_Init+0x200>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	4a4e      	ldr	r2, [pc, #312]	; (8000e34 <HAL_GPIO_Init+0x2fc>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d019      	beq.n	8000d34 <HAL_GPIO_Init+0x1fc>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4a4d      	ldr	r2, [pc, #308]	; (8000e38 <HAL_GPIO_Init+0x300>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d013      	beq.n	8000d30 <HAL_GPIO_Init+0x1f8>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	4a4c      	ldr	r2, [pc, #304]	; (8000e3c <HAL_GPIO_Init+0x304>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d00d      	beq.n	8000d2c <HAL_GPIO_Init+0x1f4>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4a4b      	ldr	r2, [pc, #300]	; (8000e40 <HAL_GPIO_Init+0x308>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d007      	beq.n	8000d28 <HAL_GPIO_Init+0x1f0>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4a4a      	ldr	r2, [pc, #296]	; (8000e44 <HAL_GPIO_Init+0x30c>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d101      	bne.n	8000d24 <HAL_GPIO_Init+0x1ec>
 8000d20:	2306      	movs	r3, #6
 8000d22:	e00c      	b.n	8000d3e <HAL_GPIO_Init+0x206>
 8000d24:	2307      	movs	r3, #7
 8000d26:	e00a      	b.n	8000d3e <HAL_GPIO_Init+0x206>
 8000d28:	2305      	movs	r3, #5
 8000d2a:	e008      	b.n	8000d3e <HAL_GPIO_Init+0x206>
 8000d2c:	2304      	movs	r3, #4
 8000d2e:	e006      	b.n	8000d3e <HAL_GPIO_Init+0x206>
 8000d30:	2303      	movs	r3, #3
 8000d32:	e004      	b.n	8000d3e <HAL_GPIO_Init+0x206>
 8000d34:	2302      	movs	r3, #2
 8000d36:	e002      	b.n	8000d3e <HAL_GPIO_Init+0x206>
 8000d38:	2301      	movs	r3, #1
 8000d3a:	e000      	b.n	8000d3e <HAL_GPIO_Init+0x206>
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	697a      	ldr	r2, [r7, #20]
 8000d40:	f002 0203 	and.w	r2, r2, #3
 8000d44:	0092      	lsls	r2, r2, #2
 8000d46:	4093      	lsls	r3, r2
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d4e:	4937      	ldr	r1, [pc, #220]	; (8000e2c <HAL_GPIO_Init+0x2f4>)
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	089b      	lsrs	r3, r3, #2
 8000d54:	3302      	adds	r3, #2
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d5c:	4b3a      	ldr	r3, [pc, #232]	; (8000e48 <HAL_GPIO_Init+0x310>)
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	43db      	mvns	r3, r3
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d003      	beq.n	8000d80 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d80:	4a31      	ldr	r2, [pc, #196]	; (8000e48 <HAL_GPIO_Init+0x310>)
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d86:	4b30      	ldr	r3, [pc, #192]	; (8000e48 <HAL_GPIO_Init+0x310>)
 8000d88:	68db      	ldr	r3, [r3, #12]
 8000d8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	4013      	ands	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d003      	beq.n	8000daa <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000daa:	4a27      	ldr	r2, [pc, #156]	; (8000e48 <HAL_GPIO_Init+0x310>)
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000db0:	4b25      	ldr	r3, [pc, #148]	; (8000e48 <HAL_GPIO_Init+0x310>)
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	43db      	mvns	r3, r3
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d003      	beq.n	8000dd4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000dd4:	4a1c      	ldr	r2, [pc, #112]	; (8000e48 <HAL_GPIO_Init+0x310>)
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dda:	4b1b      	ldr	r3, [pc, #108]	; (8000e48 <HAL_GPIO_Init+0x310>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	43db      	mvns	r3, r3
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	4013      	ands	r3, r2
 8000de8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d003      	beq.n	8000dfe <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000dfe:	4a12      	ldr	r2, [pc, #72]	; (8000e48 <HAL_GPIO_Init+0x310>)
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	3301      	adds	r3, #1
 8000e08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	fa22 f303 	lsr.w	r3, r2, r3
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	f47f ae97 	bne.w	8000b48 <HAL_GPIO_Init+0x10>
  }
}
 8000e1a:	bf00      	nop
 8000e1c:	bf00      	nop
 8000e1e:	371c      	adds	r7, #28
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	40010000 	.word	0x40010000
 8000e30:	48000400 	.word	0x48000400
 8000e34:	48000800 	.word	0x48000800
 8000e38:	48000c00 	.word	0x48000c00
 8000e3c:	48001000 	.word	0x48001000
 8000e40:	48001400 	.word	0x48001400
 8000e44:	48001800 	.word	0x48001800
 8000e48:	40010400 	.word	0x40010400

08000e4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	460b      	mov	r3, r1
 8000e56:	807b      	strh	r3, [r7, #2]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e5c:	787b      	ldrb	r3, [r7, #1]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d003      	beq.n	8000e6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e62:	887a      	ldrh	r2, [r7, #2]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e68:	e002      	b.n	8000e70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e6a:	887a      	ldrh	r2, [r7, #2]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e70:	bf00      	nop
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	460b      	mov	r3, r1
 8000e86:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	695b      	ldr	r3, [r3, #20]
 8000e8c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e8e:	887a      	ldrh	r2, [r7, #2]
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	4013      	ands	r3, r2
 8000e94:	041a      	lsls	r2, r3, #16
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	43d9      	mvns	r1, r3
 8000e9a:	887b      	ldrh	r3, [r7, #2]
 8000e9c:	400b      	ands	r3, r1
 8000e9e:	431a      	orrs	r2, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	619a      	str	r2, [r3, #24]
}
 8000ea4:	bf00      	nop
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eb2:	b08b      	sub	sp, #44	; 0x2c
 8000eb4:	af06      	add	r7, sp, #24
 8000eb6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d101      	bne.n	8000ec2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e0c4      	b.n	800104c <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d106      	bne.n	8000edc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f007 ffc8 	bl	8008e6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2203      	movs	r2, #3
 8000ee0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f003 ff4d 	bl	8004d88 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000eee:	2300      	movs	r3, #0
 8000ef0:	73fb      	strb	r3, [r7, #15]
 8000ef2:	e040      	b.n	8000f76 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000ef4:	7bfb      	ldrb	r3, [r7, #15]
 8000ef6:	6879      	ldr	r1, [r7, #4]
 8000ef8:	1c5a      	adds	r2, r3, #1
 8000efa:	4613      	mov	r3, r2
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	4413      	add	r3, r2
 8000f00:	00db      	lsls	r3, r3, #3
 8000f02:	440b      	add	r3, r1
 8000f04:	3301      	adds	r3, #1
 8000f06:	2201      	movs	r2, #1
 8000f08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
 8000f0c:	6879      	ldr	r1, [r7, #4]
 8000f0e:	1c5a      	adds	r2, r3, #1
 8000f10:	4613      	mov	r3, r2
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	4413      	add	r3, r2
 8000f16:	00db      	lsls	r3, r3, #3
 8000f18:	440b      	add	r3, r1
 8000f1a:	7bfa      	ldrb	r2, [r7, #15]
 8000f1c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f1e:	7bfb      	ldrb	r3, [r7, #15]
 8000f20:	6879      	ldr	r1, [r7, #4]
 8000f22:	1c5a      	adds	r2, r3, #1
 8000f24:	4613      	mov	r3, r2
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	4413      	add	r3, r2
 8000f2a:	00db      	lsls	r3, r3, #3
 8000f2c:	440b      	add	r3, r1
 8000f2e:	3303      	adds	r3, #3
 8000f30:	2200      	movs	r2, #0
 8000f32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f34:	7bfa      	ldrb	r2, [r7, #15]
 8000f36:	6879      	ldr	r1, [r7, #4]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	4413      	add	r3, r2
 8000f3e:	00db      	lsls	r3, r3, #3
 8000f40:	440b      	add	r3, r1
 8000f42:	3338      	adds	r3, #56	; 0x38
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f48:	7bfa      	ldrb	r2, [r7, #15]
 8000f4a:	6879      	ldr	r1, [r7, #4]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	4413      	add	r3, r2
 8000f52:	00db      	lsls	r3, r3, #3
 8000f54:	440b      	add	r3, r1
 8000f56:	333c      	adds	r3, #60	; 0x3c
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f5c:	7bfa      	ldrb	r2, [r7, #15]
 8000f5e:	6879      	ldr	r1, [r7, #4]
 8000f60:	4613      	mov	r3, r2
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	4413      	add	r3, r2
 8000f66:	00db      	lsls	r3, r3, #3
 8000f68:	440b      	add	r3, r1
 8000f6a:	3340      	adds	r3, #64	; 0x40
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
 8000f72:	3301      	adds	r3, #1
 8000f74:	73fb      	strb	r3, [r7, #15]
 8000f76:	7bfa      	ldrb	r2, [r7, #15]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d3b9      	bcc.n	8000ef4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f80:	2300      	movs	r3, #0
 8000f82:	73fb      	strb	r3, [r7, #15]
 8000f84:	e044      	b.n	8001010 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000f86:	7bfa      	ldrb	r2, [r7, #15]
 8000f88:	6879      	ldr	r1, [r7, #4]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	4413      	add	r3, r2
 8000f90:	00db      	lsls	r3, r3, #3
 8000f92:	440b      	add	r3, r1
 8000f94:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000f98:	2200      	movs	r2, #0
 8000f9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000f9c:	7bfa      	ldrb	r2, [r7, #15]
 8000f9e:	6879      	ldr	r1, [r7, #4]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	4413      	add	r3, r2
 8000fa6:	00db      	lsls	r3, r3, #3
 8000fa8:	440b      	add	r3, r1
 8000faa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000fae:	7bfa      	ldrb	r2, [r7, #15]
 8000fb0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000fb2:	7bfa      	ldrb	r2, [r7, #15]
 8000fb4:	6879      	ldr	r1, [r7, #4]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	4413      	add	r3, r2
 8000fbc:	00db      	lsls	r3, r3, #3
 8000fbe:	440b      	add	r3, r1
 8000fc0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000fc8:	7bfa      	ldrb	r2, [r7, #15]
 8000fca:	6879      	ldr	r1, [r7, #4]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	4413      	add	r3, r2
 8000fd2:	00db      	lsls	r3, r3, #3
 8000fd4:	440b      	add	r3, r1
 8000fd6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000fde:	7bfa      	ldrb	r2, [r7, #15]
 8000fe0:	6879      	ldr	r1, [r7, #4]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	4413      	add	r3, r2
 8000fe8:	00db      	lsls	r3, r3, #3
 8000fea:	440b      	add	r3, r1
 8000fec:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000ff4:	7bfa      	ldrb	r2, [r7, #15]
 8000ff6:	6879      	ldr	r1, [r7, #4]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	4413      	add	r3, r2
 8000ffe:	00db      	lsls	r3, r3, #3
 8001000:	440b      	add	r3, r1
 8001002:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800100a:	7bfb      	ldrb	r3, [r7, #15]
 800100c:	3301      	adds	r3, #1
 800100e:	73fb      	strb	r3, [r7, #15]
 8001010:	7bfa      	ldrb	r2, [r7, #15]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	429a      	cmp	r2, r3
 8001018:	d3b5      	bcc.n	8000f86 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	603b      	str	r3, [r7, #0]
 8001020:	687e      	ldr	r6, [r7, #4]
 8001022:	466d      	mov	r5, sp
 8001024:	f106 0410 	add.w	r4, r6, #16
 8001028:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800102a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800102c:	6823      	ldr	r3, [r4, #0]
 800102e:	602b      	str	r3, [r5, #0]
 8001030:	1d33      	adds	r3, r6, #4
 8001032:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001034:	6838      	ldr	r0, [r7, #0]
 8001036:	f003 fec2 	bl	8004dbe <USB_DevInit>

  hpcd->USB_Address = 0U;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2200      	movs	r2, #0
 800103e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2201      	movs	r2, #1
 8001046:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800104a:	2300      	movs	r3, #0
}
 800104c:	4618      	mov	r0, r3
 800104e:	3714      	adds	r7, #20
 8001050:	46bd      	mov	sp, r7
 8001052:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001054 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001062:	2b01      	cmp	r3, #1
 8001064:	d101      	bne.n	800106a <HAL_PCD_Start+0x16>
 8001066:	2302      	movs	r3, #2
 8001068:	e016      	b.n	8001098 <HAL_PCD_Start+0x44>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2201      	movs	r2, #1
 800106e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f003 fe6f 	bl	8004d5a <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800107c:	2101      	movs	r1, #1
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f008 f976 	bl	8009370 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4618      	mov	r0, r3
 800108a:	f006 f92e 	bl	80072ea <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001096:	2300      	movs	r3, #0
}
 8001098:	4618      	mov	r0, r3
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f006 f927 	bl	8007300 <USB_ReadInterrupts>
 80010b2:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d003      	beq.n	80010c6 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f000 fab2 	bl	8001628 <PCD_EP_ISR_Handler>

    return;
 80010c4:	e0bd      	b.n	8001242 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d013      	beq.n	80010f8 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010d8:	b29a      	uxth	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010e2:	b292      	uxth	r2, r2
 80010e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f007 ff42 	bl	8008f72 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80010ee:	2100      	movs	r1, #0
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f000 f8a9 	bl	8001248 <HAL_PCD_SetAddress>

    return;
 80010f6:	e0a4      	b.n	8001242 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d00c      	beq.n	800111c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800110a:	b29a      	uxth	r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001114:	b292      	uxth	r2, r2
 8001116:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800111a:	e092      	b.n	8001242 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d00c      	beq.n	8001140 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800112e:	b29a      	uxth	r2, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001138:	b292      	uxth	r2, r2
 800113a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800113e:	e080      	b.n	8001242 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d027      	beq.n	800119a <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001152:	b29a      	uxth	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f022 0204 	bic.w	r2, r2, #4
 800115c:	b292      	uxth	r2, r2
 800115e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800116a:	b29a      	uxth	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f022 0208 	bic.w	r2, r2, #8
 8001174:	b292      	uxth	r2, r2
 8001176:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f007 ff32 	bl	8008fe4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001188:	b29a      	uxth	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001192:	b292      	uxth	r2, r2
 8001194:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001198:	e053      	b.n	8001242 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d027      	beq.n	80011f4 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011ac:	b29a      	uxth	r2, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f042 0208 	orr.w	r2, r2, #8
 80011b6:	b292      	uxth	r2, r2
 80011b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80011ce:	b292      	uxth	r2, r2
 80011d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011dc:	b29a      	uxth	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f042 0204 	orr.w	r2, r2, #4
 80011e6:	b292      	uxth	r2, r2
 80011e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f007 fedf 	bl	8008fb0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80011f2:	e026      	b.n	8001242 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d00f      	beq.n	800121e <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001206:	b29a      	uxth	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001210:	b292      	uxth	r2, r2
 8001212:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f007 fe9d 	bl	8008f56 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800121c:	e011      	b.n	8001242 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001224:	2b00      	cmp	r3, #0
 8001226:	d00c      	beq.n	8001242 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001230:	b29a      	uxth	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800123a:	b292      	uxth	r2, r2
 800123c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001240:	bf00      	nop
  }
}
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	460b      	mov	r3, r1
 8001252:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800125a:	2b01      	cmp	r3, #1
 800125c:	d101      	bne.n	8001262 <HAL_PCD_SetAddress+0x1a>
 800125e:	2302      	movs	r3, #2
 8001260:	e013      	b.n	800128a <HAL_PCD_SetAddress+0x42>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2201      	movs	r2, #1
 8001266:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	78fa      	ldrb	r2, [r7, #3]
 800126e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	78fa      	ldrb	r2, [r7, #3]
 8001278:	4611      	mov	r1, r2
 800127a:	4618      	mov	r0, r3
 800127c:	f006 f821 	bl	80072c2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b084      	sub	sp, #16
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
 800129a:	4608      	mov	r0, r1
 800129c:	4611      	mov	r1, r2
 800129e:	461a      	mov	r2, r3
 80012a0:	4603      	mov	r3, r0
 80012a2:	70fb      	strb	r3, [r7, #3]
 80012a4:	460b      	mov	r3, r1
 80012a6:	803b      	strh	r3, [r7, #0]
 80012a8:	4613      	mov	r3, r2
 80012aa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80012ac:	2300      	movs	r3, #0
 80012ae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80012b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	da0e      	bge.n	80012d6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012b8:	78fb      	ldrb	r3, [r7, #3]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	1c5a      	adds	r2, r3, #1
 80012c0:	4613      	mov	r3, r2
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	4413      	add	r3, r2
 80012c6:	00db      	lsls	r3, r3, #3
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	4413      	add	r3, r2
 80012cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2201      	movs	r2, #1
 80012d2:	705a      	strb	r2, [r3, #1]
 80012d4:	e00e      	b.n	80012f4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80012d6:	78fb      	ldrb	r3, [r7, #3]
 80012d8:	f003 0207 	and.w	r2, r3, #7
 80012dc:	4613      	mov	r3, r2
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	4413      	add	r3, r2
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	4413      	add	r3, r2
 80012ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	2200      	movs	r2, #0
 80012f2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80012f4:	78fb      	ldrb	r3, [r7, #3]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001300:	883a      	ldrh	r2, [r7, #0]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	78ba      	ldrb	r2, [r7, #2]
 800130a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800130c:	78bb      	ldrb	r3, [r7, #2]
 800130e:	2b02      	cmp	r3, #2
 8001310:	d102      	bne.n	8001318 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2200      	movs	r2, #0
 8001316:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800131e:	2b01      	cmp	r3, #1
 8001320:	d101      	bne.n	8001326 <HAL_PCD_EP_Open+0x94>
 8001322:	2302      	movs	r3, #2
 8001324:	e00e      	b.n	8001344 <HAL_PCD_EP_Open+0xb2>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2201      	movs	r2, #1
 800132a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	68f9      	ldr	r1, [r7, #12]
 8001334:	4618      	mov	r0, r3
 8001336:	f003 fd63 	bl	8004e00 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001342:	7afb      	ldrb	r3, [r7, #11]
}
 8001344:	4618      	mov	r0, r3
 8001346:	3710      	adds	r7, #16
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001358:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800135c:	2b00      	cmp	r3, #0
 800135e:	da0e      	bge.n	800137e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001360:	78fb      	ldrb	r3, [r7, #3]
 8001362:	f003 0307 	and.w	r3, r3, #7
 8001366:	1c5a      	adds	r2, r3, #1
 8001368:	4613      	mov	r3, r2
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	4413      	add	r3, r2
 800136e:	00db      	lsls	r3, r3, #3
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	4413      	add	r3, r2
 8001374:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2201      	movs	r2, #1
 800137a:	705a      	strb	r2, [r3, #1]
 800137c:	e00e      	b.n	800139c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800137e:	78fb      	ldrb	r3, [r7, #3]
 8001380:	f003 0207 	and.w	r2, r3, #7
 8001384:	4613      	mov	r3, r2
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	4413      	add	r3, r2
 800138a:	00db      	lsls	r3, r3, #3
 800138c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	4413      	add	r3, r2
 8001394:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	2200      	movs	r2, #0
 800139a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800139c:	78fb      	ldrb	r3, [r7, #3]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d101      	bne.n	80013b6 <HAL_PCD_EP_Close+0x6a>
 80013b2:	2302      	movs	r3, #2
 80013b4:	e00e      	b.n	80013d4 <HAL_PCD_EP_Close+0x88>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2201      	movs	r2, #1
 80013ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	68f9      	ldr	r1, [r7, #12]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f004 f8df 	bl	8005588 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80013d2:	2300      	movs	r3, #0
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3710      	adds	r7, #16
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	607a      	str	r2, [r7, #4]
 80013e6:	603b      	str	r3, [r7, #0]
 80013e8:	460b      	mov	r3, r1
 80013ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013ec:	7afb      	ldrb	r3, [r7, #11]
 80013ee:	f003 0207 	and.w	r2, r3, #7
 80013f2:	4613      	mov	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	00db      	lsls	r3, r3, #3
 80013fa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	4413      	add	r3, r2
 8001402:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	683a      	ldr	r2, [r7, #0]
 800140e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	2200      	movs	r2, #0
 8001414:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	2200      	movs	r2, #0
 800141a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800141c:	7afb      	ldrb	r3, [r7, #11]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	b2da      	uxtb	r2, r3
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6979      	ldr	r1, [r7, #20]
 800142e:	4618      	mov	r0, r3
 8001430:	f004 fa97 	bl	8005962 <USB_EPStartXfer>

  return HAL_OK;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800143e:	b480      	push	{r7}
 8001440:	b083      	sub	sp, #12
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
 8001446:	460b      	mov	r3, r1
 8001448:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800144a:	78fb      	ldrb	r3, [r7, #3]
 800144c:	f003 0207 	and.w	r2, r3, #7
 8001450:	6879      	ldr	r1, [r7, #4]
 8001452:	4613      	mov	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4413      	add	r3, r2
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	440b      	add	r3, r1
 800145c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001460:	681b      	ldr	r3, [r3, #0]
}
 8001462:	4618      	mov	r0, r3
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b086      	sub	sp, #24
 8001472:	af00      	add	r7, sp, #0
 8001474:	60f8      	str	r0, [r7, #12]
 8001476:	607a      	str	r2, [r7, #4]
 8001478:	603b      	str	r3, [r7, #0]
 800147a:	460b      	mov	r3, r1
 800147c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800147e:	7afb      	ldrb	r3, [r7, #11]
 8001480:	f003 0307 	and.w	r3, r3, #7
 8001484:	1c5a      	adds	r2, r3, #1
 8001486:	4613      	mov	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	4413      	add	r3, r2
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	68fa      	ldr	r2, [r7, #12]
 8001490:	4413      	add	r3, r2
 8001492:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	683a      	ldr	r2, [r7, #0]
 800149e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	2201      	movs	r2, #1
 80014a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	683a      	ldr	r2, [r7, #0]
 80014ac:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	2200      	movs	r2, #0
 80014b2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	2201      	movs	r2, #1
 80014b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80014ba:	7afb      	ldrb	r3, [r7, #11]
 80014bc:	f003 0307 	and.w	r3, r3, #7
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	6979      	ldr	r1, [r7, #20]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f004 fa48 	bl	8005962 <USB_EPStartXfer>

  return HAL_OK;
 80014d2:	2300      	movs	r3, #0
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3718      	adds	r7, #24
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	460b      	mov	r3, r1
 80014e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80014e8:	78fb      	ldrb	r3, [r7, #3]
 80014ea:	f003 0207 	and.w	r2, r3, #7
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d901      	bls.n	80014fa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e03e      	b.n	8001578 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80014fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	da0e      	bge.n	8001520 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001502:	78fb      	ldrb	r3, [r7, #3]
 8001504:	f003 0307 	and.w	r3, r3, #7
 8001508:	1c5a      	adds	r2, r3, #1
 800150a:	4613      	mov	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	4413      	add	r3, r2
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	4413      	add	r3, r2
 8001516:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2201      	movs	r2, #1
 800151c:	705a      	strb	r2, [r3, #1]
 800151e:	e00c      	b.n	800153a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001520:	78fa      	ldrb	r2, [r7, #3]
 8001522:	4613      	mov	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4413      	add	r3, r2
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	4413      	add	r3, r2
 8001532:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2200      	movs	r2, #0
 8001538:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2201      	movs	r2, #1
 800153e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001540:	78fb      	ldrb	r3, [r7, #3]
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	b2da      	uxtb	r2, r3
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001552:	2b01      	cmp	r3, #1
 8001554:	d101      	bne.n	800155a <HAL_PCD_EP_SetStall+0x7e>
 8001556:	2302      	movs	r3, #2
 8001558:	e00e      	b.n	8001578 <HAL_PCD_EP_SetStall+0x9c>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2201      	movs	r2, #1
 800155e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	68f9      	ldr	r1, [r7, #12]
 8001568:	4618      	mov	r0, r3
 800156a:	f005 fdab 	bl	80070c4 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001576:	2300      	movs	r3, #0
}
 8001578:	4618      	mov	r0, r3
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800158c:	78fb      	ldrb	r3, [r7, #3]
 800158e:	f003 020f 	and.w	r2, r3, #15
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	429a      	cmp	r2, r3
 8001598:	d901      	bls.n	800159e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e040      	b.n	8001620 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800159e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	da0e      	bge.n	80015c4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015a6:	78fb      	ldrb	r3, [r7, #3]
 80015a8:	f003 0307 	and.w	r3, r3, #7
 80015ac:	1c5a      	adds	r2, r3, #1
 80015ae:	4613      	mov	r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	4413      	add	r3, r2
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	4413      	add	r3, r2
 80015ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2201      	movs	r2, #1
 80015c0:	705a      	strb	r2, [r3, #1]
 80015c2:	e00e      	b.n	80015e2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015c4:	78fb      	ldrb	r3, [r7, #3]
 80015c6:	f003 0207 	and.w	r2, r3, #7
 80015ca:	4613      	mov	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4413      	add	r3, r2
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	4413      	add	r3, r2
 80015da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2200      	movs	r2, #0
 80015e0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2200      	movs	r2, #0
 80015e6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015e8:	78fb      	ldrb	r3, [r7, #3]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d101      	bne.n	8001602 <HAL_PCD_EP_ClrStall+0x82>
 80015fe:	2302      	movs	r3, #2
 8001600:	e00e      	b.n	8001620 <HAL_PCD_EP_ClrStall+0xa0>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2201      	movs	r2, #1
 8001606:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	68f9      	ldr	r1, [r7, #12]
 8001610:	4618      	mov	r0, r3
 8001612:	f005 fda8 	bl	8007166 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b096      	sub	sp, #88	; 0x58
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001630:	e3b1      	b.n	8001d96 <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800163a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800163e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001642:	b2db      	uxtb	r3, r3
 8001644:	f003 030f 	and.w	r3, r3, #15
 8001648:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800164c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001650:	2b00      	cmp	r3, #0
 8001652:	f040 8173 	bne.w	800193c <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001656:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800165a:	f003 0310 	and.w	r3, r3, #16
 800165e:	2b00      	cmp	r3, #0
 8001660:	d150      	bne.n	8001704 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	881b      	ldrh	r3, [r3, #0]
 8001668:	b29b      	uxth	r3, r3
 800166a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800166e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001672:	81fb      	strh	r3, [r7, #14]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	89fb      	ldrh	r3, [r7, #14]
 800167a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800167e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001682:	b29b      	uxth	r3, r3
 8001684:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	3328      	adds	r3, #40	; 0x28
 800168a:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001694:	b29b      	uxth	r3, r3
 8001696:	461a      	mov	r2, r3
 8001698:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	00db      	lsls	r3, r3, #3
 800169e:	4413      	add	r3, r2
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	6812      	ldr	r2, [r2, #0]
 80016a4:	4413      	add	r3, r2
 80016a6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80016aa:	881b      	ldrh	r3, [r3, #0]
 80016ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80016b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016b2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80016b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016b6:	695a      	ldr	r2, [r3, #20]
 80016b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016ba:	69db      	ldr	r3, [r3, #28]
 80016bc:	441a      	add	r2, r3
 80016be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016c0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80016c2:	2100      	movs	r1, #0
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f007 fc2c 	bl	8008f22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f000 835f 	beq.w	8001d96 <PCD_EP_ISR_Handler+0x76e>
 80016d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	f040 835a 	bne.w	8001d96 <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	b292      	uxth	r2, r2
 80016f6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001702:	e348      	b.n	8001d96 <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800170a:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	881b      	ldrh	r3, [r3, #0]
 8001712:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001716:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800171a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800171e:	2b00      	cmp	r3, #0
 8001720:	d032      	beq.n	8001788 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800172a:	b29b      	uxth	r3, r3
 800172c:	461a      	mov	r2, r3
 800172e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	4413      	add	r3, r2
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	6812      	ldr	r2, [r2, #0]
 800173a:	4413      	add	r3, r2
 800173c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001740:	881b      	ldrh	r3, [r3, #0]
 8001742:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001746:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001748:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6818      	ldr	r0, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001754:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001756:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001758:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800175a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800175c:	b29b      	uxth	r3, r3
 800175e:	f005 fe21 	bl	80073a4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	881b      	ldrh	r3, [r3, #0]
 8001768:	b29a      	uxth	r2, r3
 800176a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800176e:	4013      	ands	r3, r2
 8001770:	823b      	strh	r3, [r7, #16]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	8a3a      	ldrh	r2, [r7, #16]
 8001778:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800177c:	b292      	uxth	r2, r2
 800177e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f007 fba1 	bl	8008ec8 <HAL_PCD_SetupStageCallback>
 8001786:	e306      	b.n	8001d96 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001788:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800178c:	2b00      	cmp	r3, #0
 800178e:	f280 8302 	bge.w	8001d96 <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	881b      	ldrh	r3, [r3, #0]
 8001798:	b29a      	uxth	r2, r3
 800179a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800179e:	4013      	ands	r3, r2
 80017a0:	83fb      	strh	r3, [r7, #30]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	8bfa      	ldrh	r2, [r7, #30]
 80017a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017ac:	b292      	uxth	r2, r2
 80017ae:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	461a      	mov	r2, r3
 80017bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	4413      	add	r3, r2
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	6812      	ldr	r2, [r2, #0]
 80017c8:	4413      	add	r3, r2
 80017ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80017ce:	881b      	ldrh	r3, [r3, #0]
 80017d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80017d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017d6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80017d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017da:	69db      	ldr	r3, [r3, #28]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d019      	beq.n	8001814 <PCD_EP_ISR_Handler+0x1ec>
 80017e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017e2:	695b      	ldr	r3, [r3, #20]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d015      	beq.n	8001814 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6818      	ldr	r0, [r3, #0]
 80017ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ee:	6959      	ldr	r1, [r3, #20]
 80017f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017f2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80017f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017f6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	f005 fdd3 	bl	80073a4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80017fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001800:	695a      	ldr	r2, [r3, #20]
 8001802:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	441a      	add	r2, r3
 8001808:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800180a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800180c:	2100      	movs	r1, #0
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f007 fb6c 	bl	8008eec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	881b      	ldrh	r3, [r3, #0]
 800181a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800181e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001822:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001826:	2b00      	cmp	r3, #0
 8001828:	f040 82b5 	bne.w	8001d96 <PCD_EP_ISR_Handler+0x76e>
 800182c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001830:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001834:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001838:	f000 82ad 	beq.w	8001d96 <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	61bb      	str	r3, [r7, #24]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800184a:	b29b      	uxth	r3, r3
 800184c:	461a      	mov	r2, r3
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	4413      	add	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	881b      	ldrh	r3, [r3, #0]
 8001860:	b29b      	uxth	r3, r3
 8001862:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001866:	b29a      	uxth	r2, r3
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	801a      	strh	r2, [r3, #0]
 800186c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800186e:	691b      	ldr	r3, [r3, #16]
 8001870:	2b3e      	cmp	r3, #62	; 0x3e
 8001872:	d91d      	bls.n	80018b0 <PCD_EP_ISR_Handler+0x288>
 8001874:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001876:	691b      	ldr	r3, [r3, #16]
 8001878:	095b      	lsrs	r3, r3, #5
 800187a:	647b      	str	r3, [r7, #68]	; 0x44
 800187c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800187e:	691b      	ldr	r3, [r3, #16]
 8001880:	f003 031f 	and.w	r3, r3, #31
 8001884:	2b00      	cmp	r3, #0
 8001886:	d102      	bne.n	800188e <PCD_EP_ISR_Handler+0x266>
 8001888:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800188a:	3b01      	subs	r3, #1
 800188c:	647b      	str	r3, [r7, #68]	; 0x44
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	881b      	ldrh	r3, [r3, #0]
 8001892:	b29a      	uxth	r2, r3
 8001894:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001896:	b29b      	uxth	r3, r3
 8001898:	029b      	lsls	r3, r3, #10
 800189a:	b29b      	uxth	r3, r3
 800189c:	4313      	orrs	r3, r2
 800189e:	b29b      	uxth	r3, r3
 80018a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80018a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	801a      	strh	r2, [r3, #0]
 80018ae:	e026      	b.n	80018fe <PCD_EP_ISR_Handler+0x2d6>
 80018b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018b2:	691b      	ldr	r3, [r3, #16]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d10a      	bne.n	80018ce <PCD_EP_ISR_Handler+0x2a6>
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	881b      	ldrh	r3, [r3, #0]
 80018bc:	b29b      	uxth	r3, r3
 80018be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80018c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	801a      	strh	r2, [r3, #0]
 80018cc:	e017      	b.n	80018fe <PCD_EP_ISR_Handler+0x2d6>
 80018ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	085b      	lsrs	r3, r3, #1
 80018d4:	647b      	str	r3, [r7, #68]	; 0x44
 80018d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d002      	beq.n	80018e8 <PCD_EP_ISR_Handler+0x2c0>
 80018e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018e4:	3301      	adds	r3, #1
 80018e6:	647b      	str	r3, [r7, #68]	; 0x44
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	029b      	lsls	r3, r3, #10
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	4313      	orrs	r3, r2
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	881b      	ldrh	r3, [r3, #0]
 8001904:	b29b      	uxth	r3, r3
 8001906:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800190a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800190e:	827b      	strh	r3, [r7, #18]
 8001910:	8a7b      	ldrh	r3, [r7, #18]
 8001912:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001916:	827b      	strh	r3, [r7, #18]
 8001918:	8a7b      	ldrh	r3, [r7, #18]
 800191a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800191e:	827b      	strh	r3, [r7, #18]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	8a7b      	ldrh	r3, [r7, #18]
 8001926:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800192a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800192e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001936:	b29b      	uxth	r3, r3
 8001938:	8013      	strh	r3, [r2, #0]
 800193a:	e22c      	b.n	8001d96 <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	461a      	mov	r2, r3
 8001942:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	4413      	add	r3, r2
 800194a:	881b      	ldrh	r3, [r3, #0]
 800194c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001950:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001954:	2b00      	cmp	r3, #0
 8001956:	f280 80f6 	bge.w	8001b46 <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	461a      	mov	r2, r3
 8001960:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4413      	add	r3, r2
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	b29a      	uxth	r2, r3
 800196c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001970:	4013      	ands	r3, r2
 8001972:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	461a      	mov	r2, r3
 800197c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	4413      	add	r3, r2
 8001984:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001988:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800198c:	b292      	uxth	r2, r2
 800198e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001990:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001994:	4613      	mov	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4413      	add	r3, r2
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	4413      	add	r3, r2
 80019a4:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80019a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019a8:	7b1b      	ldrb	r3, [r3, #12]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d123      	bne.n	80019f6 <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	461a      	mov	r2, r3
 80019ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	4413      	add	r3, r2
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	6812      	ldr	r2, [r2, #0]
 80019c6:	4413      	add	r3, r2
 80019c8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80019cc:	881b      	ldrh	r3, [r3, #0]
 80019ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019d2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80019d6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f000 808e 	beq.w	8001afc <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6818      	ldr	r0, [r3, #0]
 80019e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019e6:	6959      	ldr	r1, [r3, #20]
 80019e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019ea:	88da      	ldrh	r2, [r3, #6]
 80019ec:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80019f0:	f005 fcd8 	bl	80073a4 <USB_ReadPMA>
 80019f4:	e082      	b.n	8001afc <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80019f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019f8:	78db      	ldrb	r3, [r3, #3]
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d10a      	bne.n	8001a14 <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80019fe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001a02:	461a      	mov	r2, r3
 8001a04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f000 f9d3 	bl	8001db2 <HAL_PCD_EP_DB_Receive>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001a12:	e073      	b.n	8001afc <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	4413      	add	r3, r2
 8001a22:	881b      	ldrh	r3, [r3, #0]
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a2e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	461a      	mov	r2, r3
 8001a38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	441a      	add	r2, r3
 8001a40:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001a44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001a48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001a4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a50:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4413      	add	r3, r2
 8001a66:	881b      	ldrh	r3, [r3, #0]
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d022      	beq.n	8001ab8 <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	4413      	add	r3, r2
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	6812      	ldr	r2, [r2, #0]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001a90:	881b      	ldrh	r3, [r3, #0]
 8001a92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a96:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001a9a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d02c      	beq.n	8001afc <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6818      	ldr	r0, [r3, #0]
 8001aa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aa8:	6959      	ldr	r1, [r3, #20]
 8001aaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aac:	891a      	ldrh	r2, [r3, #8]
 8001aae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ab2:	f005 fc77 	bl	80073a4 <USB_ReadPMA>
 8001ab6:	e021      	b.n	8001afc <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	00db      	lsls	r3, r3, #3
 8001aca:	4413      	add	r3, r2
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	6812      	ldr	r2, [r2, #0]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001ad6:	881b      	ldrh	r3, [r3, #0]
 8001ad8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001adc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001ae0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d009      	beq.n	8001afc <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6818      	ldr	r0, [r3, #0]
 8001aec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aee:	6959      	ldr	r1, [r3, #20]
 8001af0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001af2:	895a      	ldrh	r2, [r3, #10]
 8001af4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001af8:	f005 fc54 	bl	80073a4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001afc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001afe:	69da      	ldr	r2, [r3, #28]
 8001b00:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b04:	441a      	add	r2, r3
 8001b06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b08:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001b0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b0c:	695a      	ldr	r2, [r3, #20]
 8001b0e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b12:	441a      	add	r2, r3
 8001b14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b16:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001b18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d005      	beq.n	8001b2c <PCD_EP_ISR_Handler+0x504>
 8001b20:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001b24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b26:	691b      	ldr	r3, [r3, #16]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d206      	bcs.n	8001b3a <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001b2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	4619      	mov	r1, r3
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f007 f9da 	bl	8008eec <HAL_PCD_DataOutStageCallback>
 8001b38:	e005      	b.n	8001b46 <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001b40:	4618      	mov	r0, r3
 8001b42:	f003 ff0e 	bl	8005962 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001b46:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f000 8121 	beq.w	8001d96 <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 8001b54:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b58:	1c5a      	adds	r2, r3, #1
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	4413      	add	r3, r2
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	4413      	add	r3, r2
 8001b66:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4413      	add	r3, r2
 8001b76:	881b      	ldrh	r3, [r3, #0]
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b82:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	441a      	add	r2, r3
 8001b94:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001b98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001ba4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ba6:	78db      	ldrb	r3, [r3, #3]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	f040 80a2 	bne.w	8001cf2 <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 8001bae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001bb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bb6:	7b1b      	ldrb	r3, [r3, #12]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f000 8093 	beq.w	8001ce4 <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001bbe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d046      	beq.n	8001c58 <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001bca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bcc:	785b      	ldrb	r3, [r3, #1]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d126      	bne.n	8001c20 <PCD_EP_ISR_Handler+0x5f8>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	627b      	str	r3, [r7, #36]	; 0x24
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	461a      	mov	r2, r3
 8001be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be6:	4413      	add	r3, r2
 8001be8:	627b      	str	r3, [r7, #36]	; 0x24
 8001bea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	00da      	lsls	r2, r3, #3
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf2:	4413      	add	r3, r2
 8001bf4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001bf8:	623b      	str	r3, [r7, #32]
 8001bfa:	6a3b      	ldr	r3, [r7, #32]
 8001bfc:	881b      	ldrh	r3, [r3, #0]
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	6a3b      	ldr	r3, [r7, #32]
 8001c08:	801a      	strh	r2, [r3, #0]
 8001c0a:	6a3b      	ldr	r3, [r7, #32]
 8001c0c:	881b      	ldrh	r3, [r3, #0]
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	6a3b      	ldr	r3, [r7, #32]
 8001c1c:	801a      	strh	r2, [r3, #0]
 8001c1e:	e061      	b.n	8001ce4 <PCD_EP_ISR_Handler+0x6bc>
 8001c20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c22:	785b      	ldrb	r3, [r3, #1]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d15d      	bne.n	8001ce4 <PCD_EP_ISR_Handler+0x6bc>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	461a      	mov	r2, r3
 8001c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c3c:	4413      	add	r3, r2
 8001c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	00da      	lsls	r2, r3, #3
 8001c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c48:	4413      	add	r3, r2
 8001c4a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001c4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c52:	2200      	movs	r2, #0
 8001c54:	801a      	strh	r2, [r3, #0]
 8001c56:	e045      	b.n	8001ce4 <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c60:	785b      	ldrb	r3, [r3, #1]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d126      	bne.n	8001cb4 <PCD_EP_ISR_Handler+0x68c>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	637b      	str	r3, [r7, #52]	; 0x34
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	461a      	mov	r2, r3
 8001c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c7a:	4413      	add	r3, r2
 8001c7c:	637b      	str	r3, [r7, #52]	; 0x34
 8001c7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	00da      	lsls	r2, r3, #3
 8001c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c86:	4413      	add	r3, r2
 8001c88:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001c8c:	633b      	str	r3, [r7, #48]	; 0x30
 8001c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c90:	881b      	ldrh	r3, [r3, #0]
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c9c:	801a      	strh	r2, [r3, #0]
 8001c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ca0:	881b      	ldrh	r3, [r3, #0]
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ca8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cb0:	801a      	strh	r2, [r3, #0]
 8001cb2:	e017      	b.n	8001ce4 <PCD_EP_ISR_Handler+0x6bc>
 8001cb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cb6:	785b      	ldrb	r3, [r3, #1]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d113      	bne.n	8001ce4 <PCD_EP_ISR_Handler+0x6bc>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cca:	4413      	add	r3, r2
 8001ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	00da      	lsls	r2, r3, #3
 8001cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cd6:	4413      	add	r3, r2
 8001cd8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001cdc:	63bb      	str	r3, [r7, #56]	; 0x38
 8001cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ce4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	4619      	mov	r1, r3
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f007 f919 	bl	8008f22 <HAL_PCD_DataInStageCallback>
 8001cf0:	e051      	b.n	8001d96 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001cf2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d144      	bne.n	8001d88 <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	461a      	mov	r2, r3
 8001d0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	4413      	add	r3, r2
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	6812      	ldr	r2, [r2, #0]
 8001d16:	4413      	add	r3, r2
 8001d18:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001d1c:	881b      	ldrh	r3, [r3, #0]
 8001d1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d22:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8001d26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d28:	699a      	ldr	r2, [r3, #24]
 8001d2a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d907      	bls.n	8001d42 <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 8001d32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d34:	699a      	ldr	r2, [r3, #24]
 8001d36:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001d3a:	1ad2      	subs	r2, r2, r3
 8001d3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d3e:	619a      	str	r2, [r3, #24]
 8001d40:	e002      	b.n	8001d48 <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 8001d42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d44:	2200      	movs	r2, #0
 8001d46:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001d48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d106      	bne.n	8001d5e <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001d50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	4619      	mov	r1, r3
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f007 f8e3 	bl	8008f22 <HAL_PCD_DataInStageCallback>
 8001d5c:	e01b      	b.n	8001d96 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001d5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d60:	695a      	ldr	r2, [r3, #20]
 8001d62:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001d66:	441a      	add	r2, r3
 8001d68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d6a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001d6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d6e:	69da      	ldr	r2, [r3, #28]
 8001d70:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001d74:	441a      	add	r2, r3
 8001d76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d78:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001d80:	4618      	mov	r0, r3
 8001d82:	f003 fdee 	bl	8005962 <USB_EPStartXfer>
 8001d86:	e006      	b.n	8001d96 <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001d88:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 f917 	bl	8001fc4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	b21b      	sxth	r3, r3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f6ff ac45 	blt.w	8001632 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3758      	adds	r7, #88	; 0x58
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b088      	sub	sp, #32
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	60f8      	str	r0, [r7, #12]
 8001dba:	60b9      	str	r1, [r7, #8]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001dc0:	88fb      	ldrh	r3, [r7, #6]
 8001dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d07c      	beq.n	8001ec4 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	4413      	add	r3, r2
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	6812      	ldr	r2, [r2, #0]
 8001de2:	4413      	add	r3, r2
 8001de4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001de8:	881b      	ldrh	r3, [r3, #0]
 8001dea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dee:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	699a      	ldr	r2, [r3, #24]
 8001df4:	8b7b      	ldrh	r3, [r7, #26]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d306      	bcc.n	8001e08 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	699a      	ldr	r2, [r3, #24]
 8001dfe:	8b7b      	ldrh	r3, [r7, #26]
 8001e00:	1ad2      	subs	r2, r2, r3
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	619a      	str	r2, [r3, #24]
 8001e06:	e002      	b.n	8001e0e <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d123      	bne.n	8001e5e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	881b      	ldrh	r3, [r3, #0]
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e30:	833b      	strh	r3, [r7, #24]
 8001e32:	8b3b      	ldrh	r3, [r7, #24]
 8001e34:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001e38:	833b      	strh	r3, [r7, #24]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	461a      	mov	r2, r3
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	441a      	add	r2, r3
 8001e48:	8b3b      	ldrh	r3, [r7, #24]
 8001e4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001e5e:	88fb      	ldrh	r3, [r7, #6]
 8001e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d01f      	beq.n	8001ea8 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4413      	add	r3, r2
 8001e76:	881b      	ldrh	r3, [r3, #0]
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e82:	82fb      	strh	r3, [r7, #22]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	461a      	mov	r2, r3
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	441a      	add	r2, r3
 8001e92:	8afb      	ldrh	r3, [r7, #22]
 8001e94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ea0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001ea8:	8b7b      	ldrh	r3, [r7, #26]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f000 8085 	beq.w	8001fba <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6818      	ldr	r0, [r3, #0]
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	6959      	ldr	r1, [r3, #20]
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	891a      	ldrh	r2, [r3, #8]
 8001ebc:	8b7b      	ldrh	r3, [r7, #26]
 8001ebe:	f005 fa71 	bl	80073a4 <USB_ReadPMA>
 8001ec2:	e07a      	b.n	8001fba <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	461a      	mov	r2, r3
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	4413      	add	r3, r2
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	6812      	ldr	r2, [r2, #0]
 8001edc:	4413      	add	r3, r2
 8001ede:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001ee2:	881b      	ldrh	r3, [r3, #0]
 8001ee4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ee8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	699a      	ldr	r2, [r3, #24]
 8001eee:	8b7b      	ldrh	r3, [r7, #26]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d306      	bcc.n	8001f02 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	699a      	ldr	r2, [r3, #24]
 8001ef8:	8b7b      	ldrh	r3, [r7, #26]
 8001efa:	1ad2      	subs	r2, r2, r3
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	619a      	str	r2, [r3, #24]
 8001f00:	e002      	b.n	8001f08 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	2200      	movs	r2, #0
 8001f06:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d123      	bne.n	8001f58 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	461a      	mov	r2, r3
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	4413      	add	r3, r2
 8001f1e:	881b      	ldrh	r3, [r3, #0]
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f2a:	83fb      	strh	r3, [r7, #30]
 8001f2c:	8bfb      	ldrh	r3, [r7, #30]
 8001f2e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001f32:	83fb      	strh	r3, [r7, #30]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	441a      	add	r2, r3
 8001f42:	8bfb      	ldrh	r3, [r7, #30]
 8001f44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001f58:	88fb      	ldrh	r3, [r7, #6]
 8001f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d11f      	bne.n	8001fa2 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	461a      	mov	r2, r3
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4413      	add	r3, r2
 8001f70:	881b      	ldrh	r3, [r3, #0]
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f7c:	83bb      	strh	r3, [r7, #28]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	461a      	mov	r2, r3
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	441a      	add	r2, r3
 8001f8c:	8bbb      	ldrh	r3, [r7, #28]
 8001f8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f9a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001fa2:	8b7b      	ldrh	r3, [r7, #26]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d008      	beq.n	8001fba <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6818      	ldr	r0, [r3, #0]
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	6959      	ldr	r1, [r3, #20]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	895a      	ldrh	r2, [r3, #10]
 8001fb4:	8b7b      	ldrh	r3, [r7, #26]
 8001fb6:	f005 f9f5 	bl	80073a4 <USB_ReadPMA>
    }
  }

  return count;
 8001fba:	8b7b      	ldrh	r3, [r7, #26]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3720      	adds	r7, #32
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b0a4      	sub	sp, #144	; 0x90
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001fd2:	88fb      	ldrh	r3, [r7, #6]
 8001fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f000 81db 	beq.w	8002394 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	461a      	mov	r2, r3
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	4413      	add	r3, r2
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	6812      	ldr	r2, [r2, #0]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001ffc:	881b      	ldrh	r3, [r3, #0]
 8001ffe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002002:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	699a      	ldr	r2, [r3, #24]
 800200a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800200e:	429a      	cmp	r2, r3
 8002010:	d907      	bls.n	8002022 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	699a      	ldr	r2, [r3, #24]
 8002016:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800201a:	1ad2      	subs	r2, r2, r3
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	619a      	str	r2, [r3, #24]
 8002020:	e002      	b.n	8002028 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	2200      	movs	r2, #0
 8002026:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	2b00      	cmp	r3, #0
 800202e:	f040 80b9 	bne.w	80021a4 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	785b      	ldrb	r3, [r3, #1]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d126      	bne.n	8002088 <HAL_PCD_EP_DB_Transmit+0xc4>
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002048:	b29b      	uxth	r3, r3
 800204a:	461a      	mov	r2, r3
 800204c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800204e:	4413      	add	r3, r2
 8002050:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	00da      	lsls	r2, r3, #3
 8002058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800205a:	4413      	add	r3, r2
 800205c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002060:	62bb      	str	r3, [r7, #40]	; 0x28
 8002062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002064:	881b      	ldrh	r3, [r3, #0]
 8002066:	b29b      	uxth	r3, r3
 8002068:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800206c:	b29a      	uxth	r2, r3
 800206e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002070:	801a      	strh	r2, [r3, #0]
 8002072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002074:	881b      	ldrh	r3, [r3, #0]
 8002076:	b29b      	uxth	r3, r3
 8002078:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800207c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002080:	b29a      	uxth	r2, r3
 8002082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002084:	801a      	strh	r2, [r3, #0]
 8002086:	e01a      	b.n	80020be <HAL_PCD_EP_DB_Transmit+0xfa>
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	785b      	ldrb	r3, [r3, #1]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d116      	bne.n	80020be <HAL_PCD_EP_DB_Transmit+0xfa>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	637b      	str	r3, [r7, #52]	; 0x34
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800209e:	b29b      	uxth	r3, r3
 80020a0:	461a      	mov	r2, r3
 80020a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020a4:	4413      	add	r3, r2
 80020a6:	637b      	str	r3, [r7, #52]	; 0x34
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	00da      	lsls	r2, r3, #3
 80020ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020b0:	4413      	add	r3, r2
 80020b2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80020b6:	633b      	str	r3, [r7, #48]	; 0x30
 80020b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ba:	2200      	movs	r2, #0
 80020bc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	627b      	str	r3, [r7, #36]	; 0x24
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	785b      	ldrb	r3, [r3, #1]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d126      	bne.n	800211a <HAL_PCD_EP_DB_Transmit+0x156>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	61fb      	str	r3, [r7, #28]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020da:	b29b      	uxth	r3, r3
 80020dc:	461a      	mov	r2, r3
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	4413      	add	r3, r2
 80020e2:	61fb      	str	r3, [r7, #28]
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	00da      	lsls	r2, r3, #3
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	4413      	add	r3, r2
 80020ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80020f2:	61bb      	str	r3, [r7, #24]
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	881b      	ldrh	r3, [r3, #0]
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020fe:	b29a      	uxth	r2, r3
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	801a      	strh	r2, [r3, #0]
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	881b      	ldrh	r3, [r3, #0]
 8002108:	b29b      	uxth	r3, r3
 800210a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800210e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002112:	b29a      	uxth	r2, r3
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	801a      	strh	r2, [r3, #0]
 8002118:	e017      	b.n	800214a <HAL_PCD_EP_DB_Transmit+0x186>
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	785b      	ldrb	r3, [r3, #1]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d113      	bne.n	800214a <HAL_PCD_EP_DB_Transmit+0x186>
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800212a:	b29b      	uxth	r3, r3
 800212c:	461a      	mov	r2, r3
 800212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002130:	4413      	add	r3, r2
 8002132:	627b      	str	r3, [r7, #36]	; 0x24
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	00da      	lsls	r2, r3, #3
 800213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213c:	4413      	add	r3, r2
 800213e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002142:	623b      	str	r3, [r7, #32]
 8002144:	6a3b      	ldr	r3, [r7, #32]
 8002146:	2200      	movs	r2, #0
 8002148:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	4619      	mov	r1, r3
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f006 fee6 	bl	8008f22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002156:	88fb      	ldrh	r3, [r7, #6]
 8002158:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800215c:	2b00      	cmp	r3, #0
 800215e:	f000 82fa 	beq.w	8002756 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	461a      	mov	r2, r3
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	881b      	ldrh	r3, [r3, #0]
 8002172:	b29b      	uxth	r3, r3
 8002174:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002178:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800217c:	82fb      	strh	r3, [r7, #22]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	461a      	mov	r2, r3
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	441a      	add	r2, r3
 800218c:	8afb      	ldrh	r3, [r7, #22]
 800218e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002192:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002196:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800219a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800219e:	b29b      	uxth	r3, r3
 80021a0:	8013      	strh	r3, [r2, #0]
 80021a2:	e2d8      	b.n	8002756 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80021a4:	88fb      	ldrh	r3, [r7, #6]
 80021a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d021      	beq.n	80021f2 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	461a      	mov	r2, r3
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4413      	add	r3, r2
 80021bc:	881b      	ldrh	r3, [r3, #0]
 80021be:	b29b      	uxth	r3, r3
 80021c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021c8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	461a      	mov	r2, r3
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	441a      	add	r2, r3
 80021da:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80021de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	f040 82ac 	bne.w	8002756 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	695a      	ldr	r2, [r3, #20]
 8002202:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002206:	441a      	add	r2, r3
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	69da      	ldr	r2, [r3, #28]
 8002210:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002214:	441a      	add	r2, r3
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	6a1a      	ldr	r2, [r3, #32]
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	429a      	cmp	r2, r3
 8002224:	d30b      	bcc.n	800223e <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	6a1a      	ldr	r2, [r3, #32]
 8002232:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002236:	1ad2      	subs	r2, r2, r3
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	621a      	str	r2, [r3, #32]
 800223c:	e017      	b.n	800226e <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d108      	bne.n	8002258 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8002246:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800224a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002256:	e00a      	b.n	800226e <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	2200      	movs	r2, #0
 800226c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	785b      	ldrb	r3, [r3, #1]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d165      	bne.n	8002342 <HAL_PCD_EP_DB_Transmit+0x37e>
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002284:	b29b      	uxth	r3, r3
 8002286:	461a      	mov	r2, r3
 8002288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800228a:	4413      	add	r3, r2
 800228c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	00da      	lsls	r2, r3, #3
 8002294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002296:	4413      	add	r3, r2
 8002298:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800229c:	63bb      	str	r3, [r7, #56]	; 0x38
 800229e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022a0:	881b      	ldrh	r3, [r3, #0]
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ac:	801a      	strh	r2, [r3, #0]
 80022ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022b2:	2b3e      	cmp	r3, #62	; 0x3e
 80022b4:	d91d      	bls.n	80022f2 <HAL_PCD_EP_DB_Transmit+0x32e>
 80022b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022ba:	095b      	lsrs	r3, r3, #5
 80022bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80022be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022c2:	f003 031f 	and.w	r3, r3, #31
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d102      	bne.n	80022d0 <HAL_PCD_EP_DB_Transmit+0x30c>
 80022ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022cc:	3b01      	subs	r3, #1
 80022ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80022d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022d2:	881b      	ldrh	r3, [r3, #0]
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022d8:	b29b      	uxth	r3, r3
 80022da:	029b      	lsls	r3, r3, #10
 80022dc:	b29b      	uxth	r3, r3
 80022de:	4313      	orrs	r3, r2
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ee:	801a      	strh	r2, [r3, #0]
 80022f0:	e044      	b.n	800237c <HAL_PCD_EP_DB_Transmit+0x3b8>
 80022f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d10a      	bne.n	8002310 <HAL_PCD_EP_DB_Transmit+0x34c>
 80022fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022fc:	881b      	ldrh	r3, [r3, #0]
 80022fe:	b29b      	uxth	r3, r3
 8002300:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002304:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002308:	b29a      	uxth	r2, r3
 800230a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800230c:	801a      	strh	r2, [r3, #0]
 800230e:	e035      	b.n	800237c <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002310:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002314:	085b      	lsrs	r3, r3, #1
 8002316:	64bb      	str	r3, [r7, #72]	; 0x48
 8002318:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	2b00      	cmp	r3, #0
 8002322:	d002      	beq.n	800232a <HAL_PCD_EP_DB_Transmit+0x366>
 8002324:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002326:	3301      	adds	r3, #1
 8002328:	64bb      	str	r3, [r7, #72]	; 0x48
 800232a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800232c:	881b      	ldrh	r3, [r3, #0]
 800232e:	b29a      	uxth	r2, r3
 8002330:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002332:	b29b      	uxth	r3, r3
 8002334:	029b      	lsls	r3, r3, #10
 8002336:	b29b      	uxth	r3, r3
 8002338:	4313      	orrs	r3, r2
 800233a:	b29a      	uxth	r2, r3
 800233c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800233e:	801a      	strh	r2, [r3, #0]
 8002340:	e01c      	b.n	800237c <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	785b      	ldrb	r3, [r3, #1]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d118      	bne.n	800237c <HAL_PCD_EP_DB_Transmit+0x3b8>
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	647b      	str	r3, [r7, #68]	; 0x44
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002358:	b29b      	uxth	r3, r3
 800235a:	461a      	mov	r2, r3
 800235c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800235e:	4413      	add	r3, r2
 8002360:	647b      	str	r3, [r7, #68]	; 0x44
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	00da      	lsls	r2, r3, #3
 8002368:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800236a:	4413      	add	r3, r2
 800236c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002370:	643b      	str	r3, [r7, #64]	; 0x40
 8002372:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002376:	b29a      	uxth	r2, r3
 8002378:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800237a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6818      	ldr	r0, [r3, #0]
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	6959      	ldr	r1, [r3, #20]
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	891a      	ldrh	r2, [r3, #8]
 8002388:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800238c:	b29b      	uxth	r3, r3
 800238e:	f004 ffc7 	bl	8007320 <USB_WritePMA>
 8002392:	e1e0      	b.n	8002756 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800239c:	b29b      	uxth	r3, r3
 800239e:	461a      	mov	r2, r3
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	4413      	add	r3, r2
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	6812      	ldr	r2, [r2, #0]
 80023ac:	4413      	add	r3, r2
 80023ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80023b2:	881b      	ldrh	r3, [r3, #0]
 80023b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023b8:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	699a      	ldr	r2, [r3, #24]
 80023c0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d307      	bcc.n	80023d8 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	699a      	ldr	r2, [r3, #24]
 80023cc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80023d0:	1ad2      	subs	r2, r2, r3
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	619a      	str	r2, [r3, #24]
 80023d6:	e002      	b.n	80023de <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	2200      	movs	r2, #0
 80023dc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f040 80c0 	bne.w	8002568 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	785b      	ldrb	r3, [r3, #1]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d126      	bne.n	800243e <HAL_PCD_EP_DB_Transmit+0x47a>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023fe:	b29b      	uxth	r3, r3
 8002400:	461a      	mov	r2, r3
 8002402:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002404:	4413      	add	r3, r2
 8002406:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	00da      	lsls	r2, r3, #3
 800240e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002410:	4413      	add	r3, r2
 8002412:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002416:	67bb      	str	r3, [r7, #120]	; 0x78
 8002418:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800241a:	881b      	ldrh	r3, [r3, #0]
 800241c:	b29b      	uxth	r3, r3
 800241e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002422:	b29a      	uxth	r2, r3
 8002424:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002426:	801a      	strh	r2, [r3, #0]
 8002428:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800242a:	881b      	ldrh	r3, [r3, #0]
 800242c:	b29b      	uxth	r3, r3
 800242e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002432:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002436:	b29a      	uxth	r2, r3
 8002438:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800243a:	801a      	strh	r2, [r3, #0]
 800243c:	e01a      	b.n	8002474 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	785b      	ldrb	r3, [r3, #1]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d116      	bne.n	8002474 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	667b      	str	r3, [r7, #100]	; 0x64
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002454:	b29b      	uxth	r3, r3
 8002456:	461a      	mov	r2, r3
 8002458:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800245a:	4413      	add	r3, r2
 800245c:	667b      	str	r3, [r7, #100]	; 0x64
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	00da      	lsls	r2, r3, #3
 8002464:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002466:	4413      	add	r3, r2
 8002468:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800246c:	663b      	str	r3, [r7, #96]	; 0x60
 800246e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002470:	2200      	movs	r2, #0
 8002472:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	677b      	str	r3, [r7, #116]	; 0x74
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	785b      	ldrb	r3, [r3, #1]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d12b      	bne.n	80024da <HAL_PCD_EP_DB_Transmit+0x516>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002490:	b29b      	uxth	r3, r3
 8002492:	461a      	mov	r2, r3
 8002494:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002496:	4413      	add	r3, r2
 8002498:	66fb      	str	r3, [r7, #108]	; 0x6c
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	00da      	lsls	r2, r3, #3
 80024a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024a2:	4413      	add	r3, r2
 80024a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80024a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80024ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024b0:	881b      	ldrh	r3, [r3, #0]
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024be:	801a      	strh	r2, [r3, #0]
 80024c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024c4:	881b      	ldrh	r3, [r3, #0]
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024d6:	801a      	strh	r2, [r3, #0]
 80024d8:	e017      	b.n	800250a <HAL_PCD_EP_DB_Transmit+0x546>
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	785b      	ldrb	r3, [r3, #1]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d113      	bne.n	800250a <HAL_PCD_EP_DB_Transmit+0x546>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	461a      	mov	r2, r3
 80024ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024f0:	4413      	add	r3, r2
 80024f2:	677b      	str	r3, [r7, #116]	; 0x74
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	00da      	lsls	r2, r3, #3
 80024fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024fc:	4413      	add	r3, r2
 80024fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002502:	673b      	str	r3, [r7, #112]	; 0x70
 8002504:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002506:	2200      	movs	r2, #0
 8002508:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	4619      	mov	r1, r3
 8002510:	68f8      	ldr	r0, [r7, #12]
 8002512:	f006 fd06 	bl	8008f22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002516:	88fb      	ldrh	r3, [r7, #6]
 8002518:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800251c:	2b00      	cmp	r3, #0
 800251e:	f040 811a 	bne.w	8002756 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	461a      	mov	r2, r3
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	881b      	ldrh	r3, [r3, #0]
 8002532:	b29b      	uxth	r3, r3
 8002534:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002538:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800253c:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	461a      	mov	r2, r3
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	441a      	add	r2, r3
 800254e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002552:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002556:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800255a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800255e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002562:	b29b      	uxth	r3, r3
 8002564:	8013      	strh	r3, [r2, #0]
 8002566:	e0f6      	b.n	8002756 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002568:	88fb      	ldrh	r3, [r7, #6]
 800256a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d121      	bne.n	80025b6 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	461a      	mov	r2, r3
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4413      	add	r3, r2
 8002580:	881b      	ldrh	r3, [r3, #0]
 8002582:	b29b      	uxth	r3, r3
 8002584:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002588:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800258c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	461a      	mov	r2, r3
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	441a      	add	r2, r3
 800259e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025bc:	2b01      	cmp	r3, #1
 80025be:	f040 80ca 	bne.w	8002756 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	695a      	ldr	r2, [r3, #20]
 80025c6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80025ca:	441a      	add	r2, r3
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	69da      	ldr	r2, [r3, #28]
 80025d4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80025d8:	441a      	add	r2, r3
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	6a1a      	ldr	r2, [r3, #32]
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d30b      	bcc.n	8002602 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	6a1a      	ldr	r2, [r3, #32]
 80025f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025fa:	1ad2      	subs	r2, r2, r3
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	621a      	str	r2, [r3, #32]
 8002600:	e017      	b.n	8002632 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d108      	bne.n	800261c <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800260a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800260e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800261a:	e00a      	b.n	8002632 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	2200      	movs	r2, #0
 8002628:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	657b      	str	r3, [r7, #84]	; 0x54
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	785b      	ldrb	r3, [r3, #1]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d165      	bne.n	800270c <HAL_PCD_EP_DB_Transmit+0x748>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800264e:	b29b      	uxth	r3, r3
 8002650:	461a      	mov	r2, r3
 8002652:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002654:	4413      	add	r3, r2
 8002656:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	00da      	lsls	r2, r3, #3
 800265e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002660:	4413      	add	r3, r2
 8002662:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002666:	65bb      	str	r3, [r7, #88]	; 0x58
 8002668:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800266a:	881b      	ldrh	r3, [r3, #0]
 800266c:	b29b      	uxth	r3, r3
 800266e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002672:	b29a      	uxth	r2, r3
 8002674:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002676:	801a      	strh	r2, [r3, #0]
 8002678:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800267c:	2b3e      	cmp	r3, #62	; 0x3e
 800267e:	d91d      	bls.n	80026bc <HAL_PCD_EP_DB_Transmit+0x6f8>
 8002680:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002684:	095b      	lsrs	r3, r3, #5
 8002686:	66bb      	str	r3, [r7, #104]	; 0x68
 8002688:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800268c:	f003 031f 	and.w	r3, r3, #31
 8002690:	2b00      	cmp	r3, #0
 8002692:	d102      	bne.n	800269a <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002694:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002696:	3b01      	subs	r3, #1
 8002698:	66bb      	str	r3, [r7, #104]	; 0x68
 800269a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800269c:	881b      	ldrh	r3, [r3, #0]
 800269e:	b29a      	uxth	r2, r3
 80026a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	029b      	lsls	r3, r3, #10
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	4313      	orrs	r3, r2
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026b8:	801a      	strh	r2, [r3, #0]
 80026ba:	e041      	b.n	8002740 <HAL_PCD_EP_DB_Transmit+0x77c>
 80026bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d10a      	bne.n	80026da <HAL_PCD_EP_DB_Transmit+0x716>
 80026c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026c6:	881b      	ldrh	r3, [r3, #0]
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026d6:	801a      	strh	r2, [r3, #0]
 80026d8:	e032      	b.n	8002740 <HAL_PCD_EP_DB_Transmit+0x77c>
 80026da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026de:	085b      	lsrs	r3, r3, #1
 80026e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80026e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d002      	beq.n	80026f4 <HAL_PCD_EP_DB_Transmit+0x730>
 80026ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026f0:	3301      	adds	r3, #1
 80026f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80026f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026f6:	881b      	ldrh	r3, [r3, #0]
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	029b      	lsls	r3, r3, #10
 8002700:	b29b      	uxth	r3, r3
 8002702:	4313      	orrs	r3, r2
 8002704:	b29a      	uxth	r2, r3
 8002706:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002708:	801a      	strh	r2, [r3, #0]
 800270a:	e019      	b.n	8002740 <HAL_PCD_EP_DB_Transmit+0x77c>
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	785b      	ldrb	r3, [r3, #1]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d115      	bne.n	8002740 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800271c:	b29b      	uxth	r3, r3
 800271e:	461a      	mov	r2, r3
 8002720:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002722:	4413      	add	r3, r2
 8002724:	657b      	str	r3, [r7, #84]	; 0x54
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	00da      	lsls	r2, r3, #3
 800272c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800272e:	4413      	add	r3, r2
 8002730:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002734:	653b      	str	r3, [r7, #80]	; 0x50
 8002736:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800273a:	b29a      	uxth	r2, r3
 800273c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800273e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6818      	ldr	r0, [r3, #0]
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	6959      	ldr	r1, [r3, #20]
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	895a      	ldrh	r2, [r3, #10]
 800274c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002750:	b29b      	uxth	r3, r3
 8002752:	f004 fde5 	bl	8007320 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	461a      	mov	r2, r3
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	4413      	add	r3, r2
 8002764:	881b      	ldrh	r3, [r3, #0]
 8002766:	b29b      	uxth	r3, r3
 8002768:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800276c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002770:	82bb      	strh	r3, [r7, #20]
 8002772:	8abb      	ldrh	r3, [r7, #20]
 8002774:	f083 0310 	eor.w	r3, r3, #16
 8002778:	82bb      	strh	r3, [r7, #20]
 800277a:	8abb      	ldrh	r3, [r7, #20]
 800277c:	f083 0320 	eor.w	r3, r3, #32
 8002780:	82bb      	strh	r3, [r7, #20]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	461a      	mov	r2, r3
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	441a      	add	r2, r3
 8002790:	8abb      	ldrh	r3, [r7, #20]
 8002792:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002796:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800279a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800279e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3790      	adds	r7, #144	; 0x90
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b087      	sub	sp, #28
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	607b      	str	r3, [r7, #4]
 80027ba:	460b      	mov	r3, r1
 80027bc:	817b      	strh	r3, [r7, #10]
 80027be:	4613      	mov	r3, r2
 80027c0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80027c2:	897b      	ldrh	r3, [r7, #10]
 80027c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00b      	beq.n	80027e6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027ce:	897b      	ldrh	r3, [r7, #10]
 80027d0:	f003 0307 	and.w	r3, r3, #7
 80027d4:	1c5a      	adds	r2, r3, #1
 80027d6:	4613      	mov	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	4413      	add	r3, r2
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	4413      	add	r3, r2
 80027e2:	617b      	str	r3, [r7, #20]
 80027e4:	e009      	b.n	80027fa <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80027e6:	897a      	ldrh	r2, [r7, #10]
 80027e8:	4613      	mov	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4413      	add	r3, r2
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	4413      	add	r3, r2
 80027f8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80027fa:	893b      	ldrh	r3, [r7, #8]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d107      	bne.n	8002810 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	2200      	movs	r2, #0
 8002804:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	b29a      	uxth	r2, r3
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	80da      	strh	r2, [r3, #6]
 800280e:	e00b      	b.n	8002828 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	2201      	movs	r2, #1
 8002814:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	b29a      	uxth	r2, r3
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	0c1b      	lsrs	r3, r3, #16
 8002822:	b29a      	uxth	r2, r3
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	371c      	adds	r7, #28
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
	...

08002838 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800283e:	af00      	add	r7, sp, #0
 8002840:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002844:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002848:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800284a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800284e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d102      	bne.n	800285e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	f001 b83a 	b.w	80038d2 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800285e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002862:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	f000 816f 	beq.w	8002b52 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002874:	4bb5      	ldr	r3, [pc, #724]	; (8002b4c <HAL_RCC_OscConfig+0x314>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f003 030c 	and.w	r3, r3, #12
 800287c:	2b04      	cmp	r3, #4
 800287e:	d00c      	beq.n	800289a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002880:	4bb2      	ldr	r3, [pc, #712]	; (8002b4c <HAL_RCC_OscConfig+0x314>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 030c 	and.w	r3, r3, #12
 8002888:	2b08      	cmp	r3, #8
 800288a:	d15c      	bne.n	8002946 <HAL_RCC_OscConfig+0x10e>
 800288c:	4baf      	ldr	r3, [pc, #700]	; (8002b4c <HAL_RCC_OscConfig+0x314>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002898:	d155      	bne.n	8002946 <HAL_RCC_OscConfig+0x10e>
 800289a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800289e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80028a6:	fa93 f3a3 	rbit	r3, r3
 80028aa:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  return result;
 80028ae:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b2:	fab3 f383 	clz	r3, r3
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	095b      	lsrs	r3, r3, #5
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	f043 0301 	orr.w	r3, r3, #1
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d102      	bne.n	80028cc <HAL_RCC_OscConfig+0x94>
 80028c6:	4ba1      	ldr	r3, [pc, #644]	; (8002b4c <HAL_RCC_OscConfig+0x314>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	e015      	b.n	80028f8 <HAL_RCC_OscConfig+0xc0>
 80028cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028d0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80028d8:	fa93 f3a3 	rbit	r3, r3
 80028dc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80028e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028e4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80028e8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80028ec:	fa93 f3a3 	rbit	r3, r3
 80028f0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80028f4:	4b95      	ldr	r3, [pc, #596]	; (8002b4c <HAL_RCC_OscConfig+0x314>)
 80028f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028fc:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002900:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002904:	fa92 f2a2 	rbit	r2, r2
 8002908:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800290c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002910:	fab2 f282 	clz	r2, r2
 8002914:	b2d2      	uxtb	r2, r2
 8002916:	f042 0220 	orr.w	r2, r2, #32
 800291a:	b2d2      	uxtb	r2, r2
 800291c:	f002 021f 	and.w	r2, r2, #31
 8002920:	2101      	movs	r1, #1
 8002922:	fa01 f202 	lsl.w	r2, r1, r2
 8002926:	4013      	ands	r3, r2
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 8111 	beq.w	8002b50 <HAL_RCC_OscConfig+0x318>
 800292e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002932:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	f040 8108 	bne.w	8002b50 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	f000 bfc6 	b.w	80038d2 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002946:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800294a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002956:	d106      	bne.n	8002966 <HAL_RCC_OscConfig+0x12e>
 8002958:	4b7c      	ldr	r3, [pc, #496]	; (8002b4c <HAL_RCC_OscConfig+0x314>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a7b      	ldr	r2, [pc, #492]	; (8002b4c <HAL_RCC_OscConfig+0x314>)
 800295e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002962:	6013      	str	r3, [r2, #0]
 8002964:	e036      	b.n	80029d4 <HAL_RCC_OscConfig+0x19c>
 8002966:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800296a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10c      	bne.n	8002990 <HAL_RCC_OscConfig+0x158>
 8002976:	4b75      	ldr	r3, [pc, #468]	; (8002b4c <HAL_RCC_OscConfig+0x314>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a74      	ldr	r2, [pc, #464]	; (8002b4c <HAL_RCC_OscConfig+0x314>)
 800297c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002980:	6013      	str	r3, [r2, #0]
 8002982:	4b72      	ldr	r3, [pc, #456]	; (8002b4c <HAL_RCC_OscConfig+0x314>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a71      	ldr	r2, [pc, #452]	; (8002b4c <HAL_RCC_OscConfig+0x314>)
 8002988:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800298c:	6013      	str	r3, [r2, #0]
 800298e:	e021      	b.n	80029d4 <HAL_RCC_OscConfig+0x19c>
 8002990:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002994:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029a0:	d10c      	bne.n	80029bc <HAL_RCC_OscConfig+0x184>
 80029a2:	4b6a      	ldr	r3, [pc, #424]	; (8002b4c <HAL_RCC_OscConfig+0x314>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a69      	ldr	r2, [pc, #420]	; (8002b4c <HAL_RCC_OscConfig+0x314>)
 80029a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029ac:	6013      	str	r3, [r2, #0]
 80029ae:	4b67      	ldr	r3, [pc, #412]	; (8002b4c <HAL_RCC_OscConfig+0x314>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a66      	ldr	r2, [pc, #408]	; (8002b4c <HAL_RCC_OscConfig+0x314>)
 80029b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b8:	6013      	str	r3, [r2, #0]
 80029ba:	e00b      	b.n	80029d4 <HAL_RCC_OscConfig+0x19c>
 80029bc:	4b63      	ldr	r3, [pc, #396]	; (8002b4c <HAL_RCC_OscConfig+0x314>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a62      	ldr	r2, [pc, #392]	; (8002b4c <HAL_RCC_OscConfig+0x314>)
 80029c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029c6:	6013      	str	r3, [r2, #0]
 80029c8:	4b60      	ldr	r3, [pc, #384]	; (8002b4c <HAL_RCC_OscConfig+0x314>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a5f      	ldr	r2, [pc, #380]	; (8002b4c <HAL_RCC_OscConfig+0x314>)
 80029ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029d2:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029d8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d059      	beq.n	8002a98 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e4:	f7fd ff66 	bl	80008b4 <HAL_GetTick>
 80029e8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ec:	e00a      	b.n	8002a04 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029ee:	f7fd ff61 	bl	80008b4 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b64      	cmp	r3, #100	; 0x64
 80029fc:	d902      	bls.n	8002a04 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	f000 bf67 	b.w	80038d2 <HAL_RCC_OscConfig+0x109a>
 8002a04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a08:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002a10:	fa93 f3a3 	rbit	r3, r3
 8002a14:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002a18:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a1c:	fab3 f383 	clz	r3, r3
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	095b      	lsrs	r3, r3, #5
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	f043 0301 	orr.w	r3, r3, #1
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d102      	bne.n	8002a36 <HAL_RCC_OscConfig+0x1fe>
 8002a30:	4b46      	ldr	r3, [pc, #280]	; (8002b4c <HAL_RCC_OscConfig+0x314>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	e015      	b.n	8002a62 <HAL_RCC_OscConfig+0x22a>
 8002a36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a3a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002a42:	fa93 f3a3 	rbit	r3, r3
 8002a46:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002a4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a4e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002a52:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002a56:	fa93 f3a3 	rbit	r3, r3
 8002a5a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002a5e:	4b3b      	ldr	r3, [pc, #236]	; (8002b4c <HAL_RCC_OscConfig+0x314>)
 8002a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a66:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002a6a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002a6e:	fa92 f2a2 	rbit	r2, r2
 8002a72:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002a76:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002a7a:	fab2 f282 	clz	r2, r2
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	f042 0220 	orr.w	r2, r2, #32
 8002a84:	b2d2      	uxtb	r2, r2
 8002a86:	f002 021f 	and.w	r2, r2, #31
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a90:	4013      	ands	r3, r2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d0ab      	beq.n	80029ee <HAL_RCC_OscConfig+0x1b6>
 8002a96:	e05c      	b.n	8002b52 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a98:	f7fd ff0c 	bl	80008b4 <HAL_GetTick>
 8002a9c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aa0:	e00a      	b.n	8002ab8 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aa2:	f7fd ff07 	bl	80008b4 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b64      	cmp	r3, #100	; 0x64
 8002ab0:	d902      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	f000 bf0d 	b.w	80038d2 <HAL_RCC_OscConfig+0x109a>
 8002ab8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002abc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002ac4:	fa93 f3a3 	rbit	r3, r3
 8002ac8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002acc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ad0:	fab3 f383 	clz	r3, r3
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	095b      	lsrs	r3, r3, #5
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	f043 0301 	orr.w	r3, r3, #1
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d102      	bne.n	8002aea <HAL_RCC_OscConfig+0x2b2>
 8002ae4:	4b19      	ldr	r3, [pc, #100]	; (8002b4c <HAL_RCC_OscConfig+0x314>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	e015      	b.n	8002b16 <HAL_RCC_OscConfig+0x2de>
 8002aea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002aee:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002af6:	fa93 f3a3 	rbit	r3, r3
 8002afa:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002afe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b02:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002b06:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b0a:	fa93 f3a3 	rbit	r3, r3
 8002b0e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002b12:	4b0e      	ldr	r3, [pc, #56]	; (8002b4c <HAL_RCC_OscConfig+0x314>)
 8002b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b1a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002b1e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002b22:	fa92 f2a2 	rbit	r2, r2
 8002b26:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002b2a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002b2e:	fab2 f282 	clz	r2, r2
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	f042 0220 	orr.w	r2, r2, #32
 8002b38:	b2d2      	uxtb	r2, r2
 8002b3a:	f002 021f 	and.w	r2, r2, #31
 8002b3e:	2101      	movs	r1, #1
 8002b40:	fa01 f202 	lsl.w	r2, r1, r2
 8002b44:	4013      	ands	r3, r2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1ab      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x26a>
 8002b4a:	e002      	b.n	8002b52 <HAL_RCC_OscConfig+0x31a>
 8002b4c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b56:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	f000 817f 	beq.w	8002e66 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002b68:	4ba7      	ldr	r3, [pc, #668]	; (8002e08 <HAL_RCC_OscConfig+0x5d0>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f003 030c 	and.w	r3, r3, #12
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00c      	beq.n	8002b8e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002b74:	4ba4      	ldr	r3, [pc, #656]	; (8002e08 <HAL_RCC_OscConfig+0x5d0>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f003 030c 	and.w	r3, r3, #12
 8002b7c:	2b08      	cmp	r3, #8
 8002b7e:	d173      	bne.n	8002c68 <HAL_RCC_OscConfig+0x430>
 8002b80:	4ba1      	ldr	r3, [pc, #644]	; (8002e08 <HAL_RCC_OscConfig+0x5d0>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002b88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b8c:	d16c      	bne.n	8002c68 <HAL_RCC_OscConfig+0x430>
 8002b8e:	2302      	movs	r3, #2
 8002b90:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b94:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002b98:	fa93 f3a3 	rbit	r3, r3
 8002b9c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002ba0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ba4:	fab3 f383 	clz	r3, r3
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	095b      	lsrs	r3, r3, #5
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	f043 0301 	orr.w	r3, r3, #1
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d102      	bne.n	8002bbe <HAL_RCC_OscConfig+0x386>
 8002bb8:	4b93      	ldr	r3, [pc, #588]	; (8002e08 <HAL_RCC_OscConfig+0x5d0>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	e013      	b.n	8002be6 <HAL_RCC_OscConfig+0x3ae>
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002bc8:	fa93 f3a3 	rbit	r3, r3
 8002bcc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002bd6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002bda:	fa93 f3a3 	rbit	r3, r3
 8002bde:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002be2:	4b89      	ldr	r3, [pc, #548]	; (8002e08 <HAL_RCC_OscConfig+0x5d0>)
 8002be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be6:	2202      	movs	r2, #2
 8002be8:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002bec:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002bf0:	fa92 f2a2 	rbit	r2, r2
 8002bf4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002bf8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002bfc:	fab2 f282 	clz	r2, r2
 8002c00:	b2d2      	uxtb	r2, r2
 8002c02:	f042 0220 	orr.w	r2, r2, #32
 8002c06:	b2d2      	uxtb	r2, r2
 8002c08:	f002 021f 	and.w	r2, r2, #31
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c12:	4013      	ands	r3, r2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00a      	beq.n	8002c2e <HAL_RCC_OscConfig+0x3f6>
 8002c18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c1c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d002      	beq.n	8002c2e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	f000 be52 	b.w	80038d2 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c2e:	4b76      	ldr	r3, [pc, #472]	; (8002e08 <HAL_RCC_OscConfig+0x5d0>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c3a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	21f8      	movs	r1, #248	; 0xf8
 8002c44:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c48:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002c4c:	fa91 f1a1 	rbit	r1, r1
 8002c50:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002c54:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002c58:	fab1 f181 	clz	r1, r1
 8002c5c:	b2c9      	uxtb	r1, r1
 8002c5e:	408b      	lsls	r3, r1
 8002c60:	4969      	ldr	r1, [pc, #420]	; (8002e08 <HAL_RCC_OscConfig+0x5d0>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c66:	e0fe      	b.n	8002e66 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c6c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f000 8088 	beq.w	8002d8a <HAL_RCC_OscConfig+0x552>
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c80:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002c84:	fa93 f3a3 	rbit	r3, r3
 8002c88:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002c8c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c90:	fab3 f383 	clz	r3, r3
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c9a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca6:	f7fd fe05 	bl	80008b4 <HAL_GetTick>
 8002caa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cae:	e00a      	b.n	8002cc6 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cb0:	f7fd fe00 	bl	80008b4 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d902      	bls.n	8002cc6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	f000 be06 	b.w	80038d2 <HAL_RCC_OscConfig+0x109a>
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ccc:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002cd0:	fa93 f3a3 	rbit	r3, r3
 8002cd4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002cd8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cdc:	fab3 f383 	clz	r3, r3
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	095b      	lsrs	r3, r3, #5
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	f043 0301 	orr.w	r3, r3, #1
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d102      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x4be>
 8002cf0:	4b45      	ldr	r3, [pc, #276]	; (8002e08 <HAL_RCC_OscConfig+0x5d0>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	e013      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e6>
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfc:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002d00:	fa93 f3a3 	rbit	r3, r3
 8002d04:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002d08:	2302      	movs	r3, #2
 8002d0a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002d0e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002d12:	fa93 f3a3 	rbit	r3, r3
 8002d16:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002d1a:	4b3b      	ldr	r3, [pc, #236]	; (8002e08 <HAL_RCC_OscConfig+0x5d0>)
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1e:	2202      	movs	r2, #2
 8002d20:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002d24:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002d28:	fa92 f2a2 	rbit	r2, r2
 8002d2c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002d30:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002d34:	fab2 f282 	clz	r2, r2
 8002d38:	b2d2      	uxtb	r2, r2
 8002d3a:	f042 0220 	orr.w	r2, r2, #32
 8002d3e:	b2d2      	uxtb	r2, r2
 8002d40:	f002 021f 	and.w	r2, r2, #31
 8002d44:	2101      	movs	r1, #1
 8002d46:	fa01 f202 	lsl.w	r2, r1, r2
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d0af      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d50:	4b2d      	ldr	r3, [pc, #180]	; (8002e08 <HAL_RCC_OscConfig+0x5d0>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d5c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	21f8      	movs	r1, #248	; 0xf8
 8002d66:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6a:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002d6e:	fa91 f1a1 	rbit	r1, r1
 8002d72:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002d76:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002d7a:	fab1 f181 	clz	r1, r1
 8002d7e:	b2c9      	uxtb	r1, r1
 8002d80:	408b      	lsls	r3, r1
 8002d82:	4921      	ldr	r1, [pc, #132]	; (8002e08 <HAL_RCC_OscConfig+0x5d0>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	600b      	str	r3, [r1, #0]
 8002d88:	e06d      	b.n	8002e66 <HAL_RCC_OscConfig+0x62e>
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d90:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002d94:	fa93 f3a3 	rbit	r3, r3
 8002d98:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002d9c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002da0:	fab3 f383 	clz	r3, r3
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002daa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	461a      	mov	r2, r3
 8002db2:	2300      	movs	r3, #0
 8002db4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db6:	f7fd fd7d 	bl	80008b4 <HAL_GetTick>
 8002dba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dbe:	e00a      	b.n	8002dd6 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dc0:	f7fd fd78 	bl	80008b4 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d902      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	f000 bd7e 	b.w	80038d2 <HAL_RCC_OscConfig+0x109a>
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ddc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002de0:	fa93 f3a3 	rbit	r3, r3
 8002de4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002de8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dec:	fab3 f383 	clz	r3, r3
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	095b      	lsrs	r3, r3, #5
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	f043 0301 	orr.w	r3, r3, #1
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d105      	bne.n	8002e0c <HAL_RCC_OscConfig+0x5d4>
 8002e00:	4b01      	ldr	r3, [pc, #4]	; (8002e08 <HAL_RCC_OscConfig+0x5d0>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	e016      	b.n	8002e34 <HAL_RCC_OscConfig+0x5fc>
 8002e06:	bf00      	nop
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002e16:	fa93 f3a3 	rbit	r3, r3
 8002e1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002e1e:	2302      	movs	r3, #2
 8002e20:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002e24:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002e28:	fa93 f3a3 	rbit	r3, r3
 8002e2c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002e30:	4bbf      	ldr	r3, [pc, #764]	; (8003130 <HAL_RCC_OscConfig+0x8f8>)
 8002e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e34:	2202      	movs	r2, #2
 8002e36:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002e3a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002e3e:	fa92 f2a2 	rbit	r2, r2
 8002e42:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002e46:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002e4a:	fab2 f282 	clz	r2, r2
 8002e4e:	b2d2      	uxtb	r2, r2
 8002e50:	f042 0220 	orr.w	r2, r2, #32
 8002e54:	b2d2      	uxtb	r2, r2
 8002e56:	f002 021f 	and.w	r2, r2, #31
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e60:	4013      	ands	r3, r2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1ac      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e6a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0308 	and.w	r3, r3, #8
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	f000 8113 	beq.w	80030a2 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e80:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d07c      	beq.n	8002f86 <HAL_RCC_OscConfig+0x74e>
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e96:	fa93 f3a3 	rbit	r3, r3
 8002e9a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002e9e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ea2:	fab3 f383 	clz	r3, r3
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	4ba2      	ldr	r3, [pc, #648]	; (8003134 <HAL_RCC_OscConfig+0x8fc>)
 8002eac:	4413      	add	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eb6:	f7fd fcfd 	bl	80008b4 <HAL_GetTick>
 8002eba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ebe:	e00a      	b.n	8002ed6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ec0:	f7fd fcf8 	bl	80008b4 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d902      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	f000 bcfe 	b.w	80038d2 <HAL_RCC_OscConfig+0x109a>
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002edc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ee0:	fa93 f2a3 	rbit	r2, r3
 8002ee4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ee8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002eec:	601a      	str	r2, [r3, #0]
 8002eee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ef2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002efe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	fa93 f2a3 	rbit	r2, r3
 8002f08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002f10:	601a      	str	r2, [r3, #0]
 8002f12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f16:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	601a      	str	r2, [r3, #0]
 8002f1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f22:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	fa93 f2a3 	rbit	r2, r3
 8002f2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f30:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002f34:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f36:	4b7e      	ldr	r3, [pc, #504]	; (8003130 <HAL_RCC_OscConfig+0x8f8>)
 8002f38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f3e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002f42:	2102      	movs	r1, #2
 8002f44:	6019      	str	r1, [r3, #0]
 8002f46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f4a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	fa93 f1a3 	rbit	r1, r3
 8002f54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f58:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002f5c:	6019      	str	r1, [r3, #0]
  return result;
 8002f5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f62:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	fab3 f383 	clz	r3, r3
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	f003 031f 	and.w	r3, r3, #31
 8002f78:	2101      	movs	r1, #1
 8002f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f7e:	4013      	ands	r3, r2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d09d      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x688>
 8002f84:	e08d      	b.n	80030a2 <HAL_RCC_OscConfig+0x86a>
 8002f86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f8a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002f8e:	2201      	movs	r2, #1
 8002f90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f96:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	fa93 f2a3 	rbit	r2, r3
 8002fa0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fa4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002fa8:	601a      	str	r2, [r3, #0]
  return result;
 8002faa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fae:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002fb2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fb4:	fab3 f383 	clz	r3, r3
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	461a      	mov	r2, r3
 8002fbc:	4b5d      	ldr	r3, [pc, #372]	; (8003134 <HAL_RCC_OscConfig+0x8fc>)
 8002fbe:	4413      	add	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fc8:	f7fd fc74 	bl	80008b4 <HAL_GetTick>
 8002fcc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fd0:	e00a      	b.n	8002fe8 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fd2:	f7fd fc6f 	bl	80008b4 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d902      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	f000 bc75 	b.w	80038d2 <HAL_RCC_OscConfig+0x109a>
 8002fe8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fec:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002ff0:	2202      	movs	r2, #2
 8002ff2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ff8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	fa93 f2a3 	rbit	r2, r3
 8003002:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003006:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003010:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003014:	2202      	movs	r2, #2
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800301c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	fa93 f2a3 	rbit	r2, r3
 8003026:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800302a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003034:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003038:	2202      	movs	r2, #2
 800303a:	601a      	str	r2, [r3, #0]
 800303c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003040:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	fa93 f2a3 	rbit	r2, r3
 800304a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800304e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003052:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003054:	4b36      	ldr	r3, [pc, #216]	; (8003130 <HAL_RCC_OscConfig+0x8f8>)
 8003056:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003058:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800305c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003060:	2102      	movs	r1, #2
 8003062:	6019      	str	r1, [r3, #0]
 8003064:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003068:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	fa93 f1a3 	rbit	r1, r3
 8003072:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003076:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800307a:	6019      	str	r1, [r3, #0]
  return result;
 800307c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003080:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	fab3 f383 	clz	r3, r3
 800308a:	b2db      	uxtb	r3, r3
 800308c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003090:	b2db      	uxtb	r3, r3
 8003092:	f003 031f 	and.w	r3, r3, #31
 8003096:	2101      	movs	r1, #1
 8003098:	fa01 f303 	lsl.w	r3, r1, r3
 800309c:	4013      	ands	r3, r2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d197      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030a6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0304 	and.w	r3, r3, #4
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f000 81a5 	beq.w	8003402 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030b8:	2300      	movs	r3, #0
 80030ba:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030be:	4b1c      	ldr	r3, [pc, #112]	; (8003130 <HAL_RCC_OscConfig+0x8f8>)
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d116      	bne.n	80030f8 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ca:	4b19      	ldr	r3, [pc, #100]	; (8003130 <HAL_RCC_OscConfig+0x8f8>)
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	4a18      	ldr	r2, [pc, #96]	; (8003130 <HAL_RCC_OscConfig+0x8f8>)
 80030d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030d4:	61d3      	str	r3, [r2, #28]
 80030d6:	4b16      	ldr	r3, [pc, #88]	; (8003130 <HAL_RCC_OscConfig+0x8f8>)
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80030de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030f0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80030f2:	2301      	movs	r3, #1
 80030f4:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f8:	4b0f      	ldr	r3, [pc, #60]	; (8003138 <HAL_RCC_OscConfig+0x900>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003100:	2b00      	cmp	r3, #0
 8003102:	d121      	bne.n	8003148 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003104:	4b0c      	ldr	r3, [pc, #48]	; (8003138 <HAL_RCC_OscConfig+0x900>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a0b      	ldr	r2, [pc, #44]	; (8003138 <HAL_RCC_OscConfig+0x900>)
 800310a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800310e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003110:	f7fd fbd0 	bl	80008b4 <HAL_GetTick>
 8003114:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003118:	e010      	b.n	800313c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800311a:	f7fd fbcb 	bl	80008b4 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b64      	cmp	r3, #100	; 0x64
 8003128:	d908      	bls.n	800313c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e3d1      	b.n	80038d2 <HAL_RCC_OscConfig+0x109a>
 800312e:	bf00      	nop
 8003130:	40021000 	.word	0x40021000
 8003134:	10908120 	.word	0x10908120
 8003138:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800313c:	4b8d      	ldr	r3, [pc, #564]	; (8003374 <HAL_RCC_OscConfig+0xb3c>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003144:	2b00      	cmp	r3, #0
 8003146:	d0e8      	beq.n	800311a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003148:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800314c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d106      	bne.n	8003166 <HAL_RCC_OscConfig+0x92e>
 8003158:	4b87      	ldr	r3, [pc, #540]	; (8003378 <HAL_RCC_OscConfig+0xb40>)
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	4a86      	ldr	r2, [pc, #536]	; (8003378 <HAL_RCC_OscConfig+0xb40>)
 800315e:	f043 0301 	orr.w	r3, r3, #1
 8003162:	6213      	str	r3, [r2, #32]
 8003164:	e035      	b.n	80031d2 <HAL_RCC_OscConfig+0x99a>
 8003166:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800316a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10c      	bne.n	8003190 <HAL_RCC_OscConfig+0x958>
 8003176:	4b80      	ldr	r3, [pc, #512]	; (8003378 <HAL_RCC_OscConfig+0xb40>)
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	4a7f      	ldr	r2, [pc, #508]	; (8003378 <HAL_RCC_OscConfig+0xb40>)
 800317c:	f023 0301 	bic.w	r3, r3, #1
 8003180:	6213      	str	r3, [r2, #32]
 8003182:	4b7d      	ldr	r3, [pc, #500]	; (8003378 <HAL_RCC_OscConfig+0xb40>)
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	4a7c      	ldr	r2, [pc, #496]	; (8003378 <HAL_RCC_OscConfig+0xb40>)
 8003188:	f023 0304 	bic.w	r3, r3, #4
 800318c:	6213      	str	r3, [r2, #32]
 800318e:	e020      	b.n	80031d2 <HAL_RCC_OscConfig+0x99a>
 8003190:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003194:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	2b05      	cmp	r3, #5
 800319e:	d10c      	bne.n	80031ba <HAL_RCC_OscConfig+0x982>
 80031a0:	4b75      	ldr	r3, [pc, #468]	; (8003378 <HAL_RCC_OscConfig+0xb40>)
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	4a74      	ldr	r2, [pc, #464]	; (8003378 <HAL_RCC_OscConfig+0xb40>)
 80031a6:	f043 0304 	orr.w	r3, r3, #4
 80031aa:	6213      	str	r3, [r2, #32]
 80031ac:	4b72      	ldr	r3, [pc, #456]	; (8003378 <HAL_RCC_OscConfig+0xb40>)
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	4a71      	ldr	r2, [pc, #452]	; (8003378 <HAL_RCC_OscConfig+0xb40>)
 80031b2:	f043 0301 	orr.w	r3, r3, #1
 80031b6:	6213      	str	r3, [r2, #32]
 80031b8:	e00b      	b.n	80031d2 <HAL_RCC_OscConfig+0x99a>
 80031ba:	4b6f      	ldr	r3, [pc, #444]	; (8003378 <HAL_RCC_OscConfig+0xb40>)
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	4a6e      	ldr	r2, [pc, #440]	; (8003378 <HAL_RCC_OscConfig+0xb40>)
 80031c0:	f023 0301 	bic.w	r3, r3, #1
 80031c4:	6213      	str	r3, [r2, #32]
 80031c6:	4b6c      	ldr	r3, [pc, #432]	; (8003378 <HAL_RCC_OscConfig+0xb40>)
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	4a6b      	ldr	r2, [pc, #428]	; (8003378 <HAL_RCC_OscConfig+0xb40>)
 80031cc:	f023 0304 	bic.w	r3, r3, #4
 80031d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031d6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f000 8081 	beq.w	80032e6 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031e4:	f7fd fb66 	bl	80008b4 <HAL_GetTick>
 80031e8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ec:	e00b      	b.n	8003206 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031ee:	f7fd fb61 	bl	80008b4 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80031fe:	4293      	cmp	r3, r2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e365      	b.n	80038d2 <HAL_RCC_OscConfig+0x109a>
 8003206:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800320a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800320e:	2202      	movs	r2, #2
 8003210:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003212:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003216:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	fa93 f2a3 	rbit	r2, r3
 8003220:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003224:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800322e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003232:	2202      	movs	r2, #2
 8003234:	601a      	str	r2, [r3, #0]
 8003236:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800323a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	fa93 f2a3 	rbit	r2, r3
 8003244:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003248:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800324c:	601a      	str	r2, [r3, #0]
  return result;
 800324e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003252:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003256:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003258:	fab3 f383 	clz	r3, r3
 800325c:	b2db      	uxtb	r3, r3
 800325e:	095b      	lsrs	r3, r3, #5
 8003260:	b2db      	uxtb	r3, r3
 8003262:	f043 0302 	orr.w	r3, r3, #2
 8003266:	b2db      	uxtb	r3, r3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d102      	bne.n	8003272 <HAL_RCC_OscConfig+0xa3a>
 800326c:	4b42      	ldr	r3, [pc, #264]	; (8003378 <HAL_RCC_OscConfig+0xb40>)
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	e013      	b.n	800329a <HAL_RCC_OscConfig+0xa62>
 8003272:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003276:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800327a:	2202      	movs	r2, #2
 800327c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003282:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	fa93 f2a3 	rbit	r2, r3
 800328c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003290:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	4b38      	ldr	r3, [pc, #224]	; (8003378 <HAL_RCC_OscConfig+0xb40>)
 8003298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800329e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80032a2:	2102      	movs	r1, #2
 80032a4:	6011      	str	r1, [r2, #0]
 80032a6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80032aa:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80032ae:	6812      	ldr	r2, [r2, #0]
 80032b0:	fa92 f1a2 	rbit	r1, r2
 80032b4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80032b8:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80032bc:	6011      	str	r1, [r2, #0]
  return result;
 80032be:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80032c2:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80032c6:	6812      	ldr	r2, [r2, #0]
 80032c8:	fab2 f282 	clz	r2, r2
 80032cc:	b2d2      	uxtb	r2, r2
 80032ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032d2:	b2d2      	uxtb	r2, r2
 80032d4:	f002 021f 	and.w	r2, r2, #31
 80032d8:	2101      	movs	r1, #1
 80032da:	fa01 f202 	lsl.w	r2, r1, r2
 80032de:	4013      	ands	r3, r2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d084      	beq.n	80031ee <HAL_RCC_OscConfig+0x9b6>
 80032e4:	e083      	b.n	80033ee <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032e6:	f7fd fae5 	bl	80008b4 <HAL_GetTick>
 80032ea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ee:	e00b      	b.n	8003308 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032f0:	f7fd fae0 	bl	80008b4 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003300:	4293      	cmp	r3, r2
 8003302:	d901      	bls.n	8003308 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e2e4      	b.n	80038d2 <HAL_RCC_OscConfig+0x109a>
 8003308:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800330c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003310:	2202      	movs	r2, #2
 8003312:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003314:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003318:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	fa93 f2a3 	rbit	r2, r3
 8003322:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003326:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003330:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003334:	2202      	movs	r2, #2
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800333c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	fa93 f2a3 	rbit	r2, r3
 8003346:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800334a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800334e:	601a      	str	r2, [r3, #0]
  return result;
 8003350:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003354:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003358:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800335a:	fab3 f383 	clz	r3, r3
 800335e:	b2db      	uxtb	r3, r3
 8003360:	095b      	lsrs	r3, r3, #5
 8003362:	b2db      	uxtb	r3, r3
 8003364:	f043 0302 	orr.w	r3, r3, #2
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b02      	cmp	r3, #2
 800336c:	d106      	bne.n	800337c <HAL_RCC_OscConfig+0xb44>
 800336e:	4b02      	ldr	r3, [pc, #8]	; (8003378 <HAL_RCC_OscConfig+0xb40>)
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	e017      	b.n	80033a4 <HAL_RCC_OscConfig+0xb6c>
 8003374:	40007000 	.word	0x40007000
 8003378:	40021000 	.word	0x40021000
 800337c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003380:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003384:	2202      	movs	r2, #2
 8003386:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003388:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800338c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	fa93 f2a3 	rbit	r2, r3
 8003396:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800339a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800339e:	601a      	str	r2, [r3, #0]
 80033a0:	4bb3      	ldr	r3, [pc, #716]	; (8003670 <HAL_RCC_OscConfig+0xe38>)
 80033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80033a8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80033ac:	2102      	movs	r1, #2
 80033ae:	6011      	str	r1, [r2, #0]
 80033b0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80033b4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80033b8:	6812      	ldr	r2, [r2, #0]
 80033ba:	fa92 f1a2 	rbit	r1, r2
 80033be:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80033c2:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80033c6:	6011      	str	r1, [r2, #0]
  return result;
 80033c8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80033cc:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80033d0:	6812      	ldr	r2, [r2, #0]
 80033d2:	fab2 f282 	clz	r2, r2
 80033d6:	b2d2      	uxtb	r2, r2
 80033d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033dc:	b2d2      	uxtb	r2, r2
 80033de:	f002 021f 	and.w	r2, r2, #31
 80033e2:	2101      	movs	r1, #1
 80033e4:	fa01 f202 	lsl.w	r2, r1, r2
 80033e8:	4013      	ands	r3, r2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d180      	bne.n	80032f0 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033ee:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d105      	bne.n	8003402 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033f6:	4b9e      	ldr	r3, [pc, #632]	; (8003670 <HAL_RCC_OscConfig+0xe38>)
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	4a9d      	ldr	r2, [pc, #628]	; (8003670 <HAL_RCC_OscConfig+0xe38>)
 80033fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003400:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003402:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003406:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	2b00      	cmp	r3, #0
 8003410:	f000 825e 	beq.w	80038d0 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003414:	4b96      	ldr	r3, [pc, #600]	; (8003670 <HAL_RCC_OscConfig+0xe38>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f003 030c 	and.w	r3, r3, #12
 800341c:	2b08      	cmp	r3, #8
 800341e:	f000 821f 	beq.w	8003860 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003422:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003426:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	2b02      	cmp	r3, #2
 8003430:	f040 8170 	bne.w	8003714 <HAL_RCC_OscConfig+0xedc>
 8003434:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003438:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800343c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003440:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003442:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003446:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	fa93 f2a3 	rbit	r2, r3
 8003450:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003454:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003458:	601a      	str	r2, [r3, #0]
  return result;
 800345a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800345e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003462:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003464:	fab3 f383 	clz	r3, r3
 8003468:	b2db      	uxtb	r3, r3
 800346a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800346e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	461a      	mov	r2, r3
 8003476:	2300      	movs	r3, #0
 8003478:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800347a:	f7fd fa1b 	bl	80008b4 <HAL_GetTick>
 800347e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003482:	e009      	b.n	8003498 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003484:	f7fd fa16 	bl	80008b4 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e21c      	b.n	80038d2 <HAL_RCC_OscConfig+0x109a>
 8003498:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800349c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80034a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034aa:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	fa93 f2a3 	rbit	r2, r3
 80034b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034b8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80034bc:	601a      	str	r2, [r3, #0]
  return result;
 80034be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034c2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80034c6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034c8:	fab3 f383 	clz	r3, r3
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	095b      	lsrs	r3, r3, #5
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	f043 0301 	orr.w	r3, r3, #1
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d102      	bne.n	80034e2 <HAL_RCC_OscConfig+0xcaa>
 80034dc:	4b64      	ldr	r3, [pc, #400]	; (8003670 <HAL_RCC_OscConfig+0xe38>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	e027      	b.n	8003532 <HAL_RCC_OscConfig+0xcfa>
 80034e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034e6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80034ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034f4:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	fa93 f2a3 	rbit	r2, r3
 80034fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003502:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003506:	601a      	str	r2, [r3, #0]
 8003508:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800350c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003510:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003514:	601a      	str	r2, [r3, #0]
 8003516:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800351a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	fa93 f2a3 	rbit	r2, r3
 8003524:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003528:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800352c:	601a      	str	r2, [r3, #0]
 800352e:	4b50      	ldr	r3, [pc, #320]	; (8003670 <HAL_RCC_OscConfig+0xe38>)
 8003530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003532:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003536:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800353a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800353e:	6011      	str	r1, [r2, #0]
 8003540:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003544:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003548:	6812      	ldr	r2, [r2, #0]
 800354a:	fa92 f1a2 	rbit	r1, r2
 800354e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003552:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003556:	6011      	str	r1, [r2, #0]
  return result;
 8003558:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800355c:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003560:	6812      	ldr	r2, [r2, #0]
 8003562:	fab2 f282 	clz	r2, r2
 8003566:	b2d2      	uxtb	r2, r2
 8003568:	f042 0220 	orr.w	r2, r2, #32
 800356c:	b2d2      	uxtb	r2, r2
 800356e:	f002 021f 	and.w	r2, r2, #31
 8003572:	2101      	movs	r1, #1
 8003574:	fa01 f202 	lsl.w	r2, r1, r2
 8003578:	4013      	ands	r3, r2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d182      	bne.n	8003484 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800357e:	4b3c      	ldr	r3, [pc, #240]	; (8003670 <HAL_RCC_OscConfig+0xe38>)
 8003580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003582:	f023 020f 	bic.w	r2, r3, #15
 8003586:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800358a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003592:	4937      	ldr	r1, [pc, #220]	; (8003670 <HAL_RCC_OscConfig+0xe38>)
 8003594:	4313      	orrs	r3, r2
 8003596:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003598:	4b35      	ldr	r3, [pc, #212]	; (8003670 <HAL_RCC_OscConfig+0xe38>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80035a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035a4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	6a19      	ldr	r1, [r3, #32]
 80035ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035b0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	69db      	ldr	r3, [r3, #28]
 80035b8:	430b      	orrs	r3, r1
 80035ba:	492d      	ldr	r1, [pc, #180]	; (8003670 <HAL_RCC_OscConfig+0xe38>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	604b      	str	r3, [r1, #4]
 80035c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035c4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80035c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80035cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035d2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	fa93 f2a3 	rbit	r2, r3
 80035dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035e0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80035e4:	601a      	str	r2, [r3, #0]
  return result;
 80035e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035ea:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80035ee:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035f0:	fab3 f383 	clz	r3, r3
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80035fa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	461a      	mov	r2, r3
 8003602:	2301      	movs	r3, #1
 8003604:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003606:	f7fd f955 	bl	80008b4 <HAL_GetTick>
 800360a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800360e:	e009      	b.n	8003624 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003610:	f7fd f950 	bl	80008b4 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b02      	cmp	r3, #2
 800361e:	d901      	bls.n	8003624 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e156      	b.n	80038d2 <HAL_RCC_OscConfig+0x109a>
 8003624:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003628:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800362c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003630:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003632:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003636:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	fa93 f2a3 	rbit	r2, r3
 8003640:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003644:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003648:	601a      	str	r2, [r3, #0]
  return result;
 800364a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800364e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003652:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003654:	fab3 f383 	clz	r3, r3
 8003658:	b2db      	uxtb	r3, r3
 800365a:	095b      	lsrs	r3, r3, #5
 800365c:	b2db      	uxtb	r3, r3
 800365e:	f043 0301 	orr.w	r3, r3, #1
 8003662:	b2db      	uxtb	r3, r3
 8003664:	2b01      	cmp	r3, #1
 8003666:	d105      	bne.n	8003674 <HAL_RCC_OscConfig+0xe3c>
 8003668:	4b01      	ldr	r3, [pc, #4]	; (8003670 <HAL_RCC_OscConfig+0xe38>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	e02a      	b.n	80036c4 <HAL_RCC_OscConfig+0xe8c>
 800366e:	bf00      	nop
 8003670:	40021000 	.word	0x40021000
 8003674:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003678:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800367c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003680:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003682:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003686:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	fa93 f2a3 	rbit	r2, r3
 8003690:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003694:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003698:	601a      	str	r2, [r3, #0]
 800369a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800369e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80036a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036a6:	601a      	str	r2, [r3, #0]
 80036a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036ac:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	fa93 f2a3 	rbit	r2, r3
 80036b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036ba:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80036be:	601a      	str	r2, [r3, #0]
 80036c0:	4b86      	ldr	r3, [pc, #536]	; (80038dc <HAL_RCC_OscConfig+0x10a4>)
 80036c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80036c8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80036cc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80036d0:	6011      	str	r1, [r2, #0]
 80036d2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80036d6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80036da:	6812      	ldr	r2, [r2, #0]
 80036dc:	fa92 f1a2 	rbit	r1, r2
 80036e0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80036e4:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80036e8:	6011      	str	r1, [r2, #0]
  return result;
 80036ea:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80036ee:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80036f2:	6812      	ldr	r2, [r2, #0]
 80036f4:	fab2 f282 	clz	r2, r2
 80036f8:	b2d2      	uxtb	r2, r2
 80036fa:	f042 0220 	orr.w	r2, r2, #32
 80036fe:	b2d2      	uxtb	r2, r2
 8003700:	f002 021f 	and.w	r2, r2, #31
 8003704:	2101      	movs	r1, #1
 8003706:	fa01 f202 	lsl.w	r2, r1, r2
 800370a:	4013      	ands	r3, r2
 800370c:	2b00      	cmp	r3, #0
 800370e:	f43f af7f 	beq.w	8003610 <HAL_RCC_OscConfig+0xdd8>
 8003712:	e0dd      	b.n	80038d0 <HAL_RCC_OscConfig+0x1098>
 8003714:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003718:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800371c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003720:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003722:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003726:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	fa93 f2a3 	rbit	r2, r3
 8003730:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003734:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003738:	601a      	str	r2, [r3, #0]
  return result;
 800373a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800373e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003742:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003744:	fab3 f383 	clz	r3, r3
 8003748:	b2db      	uxtb	r3, r3
 800374a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800374e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	461a      	mov	r2, r3
 8003756:	2300      	movs	r3, #0
 8003758:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375a:	f7fd f8ab 	bl	80008b4 <HAL_GetTick>
 800375e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003762:	e009      	b.n	8003778 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003764:	f7fd f8a6 	bl	80008b4 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e0ac      	b.n	80038d2 <HAL_RCC_OscConfig+0x109a>
 8003778:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800377c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003780:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003784:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003786:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800378a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	fa93 f2a3 	rbit	r2, r3
 8003794:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003798:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800379c:	601a      	str	r2, [r3, #0]
  return result;
 800379e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037a2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80037a6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037a8:	fab3 f383 	clz	r3, r3
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	095b      	lsrs	r3, r3, #5
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	f043 0301 	orr.w	r3, r3, #1
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d102      	bne.n	80037c2 <HAL_RCC_OscConfig+0xf8a>
 80037bc:	4b47      	ldr	r3, [pc, #284]	; (80038dc <HAL_RCC_OscConfig+0x10a4>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	e027      	b.n	8003812 <HAL_RCC_OscConfig+0xfda>
 80037c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037c6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80037ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037d4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	fa93 f2a3 	rbit	r2, r3
 80037de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037e2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037ec:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80037f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037f4:	601a      	str	r2, [r3, #0]
 80037f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037fa:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	fa93 f2a3 	rbit	r2, r3
 8003804:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003808:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	4b33      	ldr	r3, [pc, #204]	; (80038dc <HAL_RCC_OscConfig+0x10a4>)
 8003810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003812:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003816:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800381a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800381e:	6011      	str	r1, [r2, #0]
 8003820:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003824:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003828:	6812      	ldr	r2, [r2, #0]
 800382a:	fa92 f1a2 	rbit	r1, r2
 800382e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003832:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8003836:	6011      	str	r1, [r2, #0]
  return result;
 8003838:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800383c:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8003840:	6812      	ldr	r2, [r2, #0]
 8003842:	fab2 f282 	clz	r2, r2
 8003846:	b2d2      	uxtb	r2, r2
 8003848:	f042 0220 	orr.w	r2, r2, #32
 800384c:	b2d2      	uxtb	r2, r2
 800384e:	f002 021f 	and.w	r2, r2, #31
 8003852:	2101      	movs	r1, #1
 8003854:	fa01 f202 	lsl.w	r2, r1, r2
 8003858:	4013      	ands	r3, r2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d182      	bne.n	8003764 <HAL_RCC_OscConfig+0xf2c>
 800385e:	e037      	b.n	80038d0 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003860:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003864:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d101      	bne.n	8003874 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e02e      	b.n	80038d2 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003874:	4b19      	ldr	r3, [pc, #100]	; (80038dc <HAL_RCC_OscConfig+0x10a4>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800387c:	4b17      	ldr	r3, [pc, #92]	; (80038dc <HAL_RCC_OscConfig+0x10a4>)
 800387e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003880:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003884:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003888:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800388c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003890:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	69db      	ldr	r3, [r3, #28]
 8003898:	429a      	cmp	r2, r3
 800389a:	d117      	bne.n	80038cc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800389c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80038a0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80038a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038a8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d10b      	bne.n	80038cc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80038b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038b8:	f003 020f 	and.w	r2, r3, #15
 80038bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038c0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d001      	beq.n	80038d0 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e000      	b.n	80038d2 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	40021000 	.word	0x40021000

080038e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b09e      	sub	sp, #120	; 0x78
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80038ea:	2300      	movs	r3, #0
 80038ec:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d101      	bne.n	80038f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e162      	b.n	8003bbe <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038f8:	4b90      	ldr	r3, [pc, #576]	; (8003b3c <HAL_RCC_ClockConfig+0x25c>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0307 	and.w	r3, r3, #7
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	429a      	cmp	r2, r3
 8003904:	d910      	bls.n	8003928 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003906:	4b8d      	ldr	r3, [pc, #564]	; (8003b3c <HAL_RCC_ClockConfig+0x25c>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f023 0207 	bic.w	r2, r3, #7
 800390e:	498b      	ldr	r1, [pc, #556]	; (8003b3c <HAL_RCC_ClockConfig+0x25c>)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	4313      	orrs	r3, r2
 8003914:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003916:	4b89      	ldr	r3, [pc, #548]	; (8003b3c <HAL_RCC_ClockConfig+0x25c>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0307 	and.w	r3, r3, #7
 800391e:	683a      	ldr	r2, [r7, #0]
 8003920:	429a      	cmp	r2, r3
 8003922:	d001      	beq.n	8003928 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e14a      	b.n	8003bbe <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	2b00      	cmp	r3, #0
 8003932:	d008      	beq.n	8003946 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003934:	4b82      	ldr	r3, [pc, #520]	; (8003b40 <HAL_RCC_ClockConfig+0x260>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	497f      	ldr	r1, [pc, #508]	; (8003b40 <HAL_RCC_ClockConfig+0x260>)
 8003942:	4313      	orrs	r3, r2
 8003944:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b00      	cmp	r3, #0
 8003950:	f000 80dc 	beq.w	8003b0c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d13c      	bne.n	80039d6 <HAL_RCC_ClockConfig+0xf6>
 800395c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003960:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003962:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003964:	fa93 f3a3 	rbit	r3, r3
 8003968:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800396a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800396c:	fab3 f383 	clz	r3, r3
 8003970:	b2db      	uxtb	r3, r3
 8003972:	095b      	lsrs	r3, r3, #5
 8003974:	b2db      	uxtb	r3, r3
 8003976:	f043 0301 	orr.w	r3, r3, #1
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b01      	cmp	r3, #1
 800397e:	d102      	bne.n	8003986 <HAL_RCC_ClockConfig+0xa6>
 8003980:	4b6f      	ldr	r3, [pc, #444]	; (8003b40 <HAL_RCC_ClockConfig+0x260>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	e00f      	b.n	80039a6 <HAL_RCC_ClockConfig+0xc6>
 8003986:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800398a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800398e:	fa93 f3a3 	rbit	r3, r3
 8003992:	667b      	str	r3, [r7, #100]	; 0x64
 8003994:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003998:	663b      	str	r3, [r7, #96]	; 0x60
 800399a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800399c:	fa93 f3a3 	rbit	r3, r3
 80039a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039a2:	4b67      	ldr	r3, [pc, #412]	; (8003b40 <HAL_RCC_ClockConfig+0x260>)
 80039a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80039aa:	65ba      	str	r2, [r7, #88]	; 0x58
 80039ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039ae:	fa92 f2a2 	rbit	r2, r2
 80039b2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80039b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80039b6:	fab2 f282 	clz	r2, r2
 80039ba:	b2d2      	uxtb	r2, r2
 80039bc:	f042 0220 	orr.w	r2, r2, #32
 80039c0:	b2d2      	uxtb	r2, r2
 80039c2:	f002 021f 	and.w	r2, r2, #31
 80039c6:	2101      	movs	r1, #1
 80039c8:	fa01 f202 	lsl.w	r2, r1, r2
 80039cc:	4013      	ands	r3, r2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d17b      	bne.n	8003aca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e0f3      	b.n	8003bbe <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d13c      	bne.n	8003a58 <HAL_RCC_ClockConfig+0x178>
 80039de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039e2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039e6:	fa93 f3a3 	rbit	r3, r3
 80039ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80039ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ee:	fab3 f383 	clz	r3, r3
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	095b      	lsrs	r3, r3, #5
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	f043 0301 	orr.w	r3, r3, #1
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d102      	bne.n	8003a08 <HAL_RCC_ClockConfig+0x128>
 8003a02:	4b4f      	ldr	r3, [pc, #316]	; (8003b40 <HAL_RCC_ClockConfig+0x260>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	e00f      	b.n	8003a28 <HAL_RCC_ClockConfig+0x148>
 8003a08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a0c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a10:	fa93 f3a3 	rbit	r3, r3
 8003a14:	647b      	str	r3, [r7, #68]	; 0x44
 8003a16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a1a:	643b      	str	r3, [r7, #64]	; 0x40
 8003a1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a1e:	fa93 f3a3 	rbit	r3, r3
 8003a22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a24:	4b46      	ldr	r3, [pc, #280]	; (8003b40 <HAL_RCC_ClockConfig+0x260>)
 8003a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a2c:	63ba      	str	r2, [r7, #56]	; 0x38
 8003a2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a30:	fa92 f2a2 	rbit	r2, r2
 8003a34:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003a36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a38:	fab2 f282 	clz	r2, r2
 8003a3c:	b2d2      	uxtb	r2, r2
 8003a3e:	f042 0220 	orr.w	r2, r2, #32
 8003a42:	b2d2      	uxtb	r2, r2
 8003a44:	f002 021f 	and.w	r2, r2, #31
 8003a48:	2101      	movs	r1, #1
 8003a4a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a4e:	4013      	ands	r3, r2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d13a      	bne.n	8003aca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e0b2      	b.n	8003bbe <HAL_RCC_ClockConfig+0x2de>
 8003a58:	2302      	movs	r3, #2
 8003a5a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5e:	fa93 f3a3 	rbit	r3, r3
 8003a62:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a66:	fab3 f383 	clz	r3, r3
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	095b      	lsrs	r3, r3, #5
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	f043 0301 	orr.w	r3, r3, #1
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d102      	bne.n	8003a80 <HAL_RCC_ClockConfig+0x1a0>
 8003a7a:	4b31      	ldr	r3, [pc, #196]	; (8003b40 <HAL_RCC_ClockConfig+0x260>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	e00d      	b.n	8003a9c <HAL_RCC_ClockConfig+0x1bc>
 8003a80:	2302      	movs	r3, #2
 8003a82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a86:	fa93 f3a3 	rbit	r3, r3
 8003a8a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	623b      	str	r3, [r7, #32]
 8003a90:	6a3b      	ldr	r3, [r7, #32]
 8003a92:	fa93 f3a3 	rbit	r3, r3
 8003a96:	61fb      	str	r3, [r7, #28]
 8003a98:	4b29      	ldr	r3, [pc, #164]	; (8003b40 <HAL_RCC_ClockConfig+0x260>)
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9c:	2202      	movs	r2, #2
 8003a9e:	61ba      	str	r2, [r7, #24]
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	fa92 f2a2 	rbit	r2, r2
 8003aa6:	617a      	str	r2, [r7, #20]
  return result;
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	fab2 f282 	clz	r2, r2
 8003aae:	b2d2      	uxtb	r2, r2
 8003ab0:	f042 0220 	orr.w	r2, r2, #32
 8003ab4:	b2d2      	uxtb	r2, r2
 8003ab6:	f002 021f 	and.w	r2, r2, #31
 8003aba:	2101      	movs	r1, #1
 8003abc:	fa01 f202 	lsl.w	r2, r1, r2
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d101      	bne.n	8003aca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e079      	b.n	8003bbe <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aca:	4b1d      	ldr	r3, [pc, #116]	; (8003b40 <HAL_RCC_ClockConfig+0x260>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f023 0203 	bic.w	r2, r3, #3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	491a      	ldr	r1, [pc, #104]	; (8003b40 <HAL_RCC_ClockConfig+0x260>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003adc:	f7fc feea 	bl	80008b4 <HAL_GetTick>
 8003ae0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ae2:	e00a      	b.n	8003afa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ae4:	f7fc fee6 	bl	80008b4 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e061      	b.n	8003bbe <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003afa:	4b11      	ldr	r3, [pc, #68]	; (8003b40 <HAL_RCC_ClockConfig+0x260>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f003 020c 	and.w	r2, r3, #12
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d1eb      	bne.n	8003ae4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b0c:	4b0b      	ldr	r3, [pc, #44]	; (8003b3c <HAL_RCC_ClockConfig+0x25c>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0307 	and.w	r3, r3, #7
 8003b14:	683a      	ldr	r2, [r7, #0]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d214      	bcs.n	8003b44 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b1a:	4b08      	ldr	r3, [pc, #32]	; (8003b3c <HAL_RCC_ClockConfig+0x25c>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f023 0207 	bic.w	r2, r3, #7
 8003b22:	4906      	ldr	r1, [pc, #24]	; (8003b3c <HAL_RCC_ClockConfig+0x25c>)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b2a:	4b04      	ldr	r3, [pc, #16]	; (8003b3c <HAL_RCC_ClockConfig+0x25c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0307 	and.w	r3, r3, #7
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d005      	beq.n	8003b44 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e040      	b.n	8003bbe <HAL_RCC_ClockConfig+0x2de>
 8003b3c:	40022000 	.word	0x40022000
 8003b40:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d008      	beq.n	8003b62 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b50:	4b1d      	ldr	r3, [pc, #116]	; (8003bc8 <HAL_RCC_ClockConfig+0x2e8>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	491a      	ldr	r1, [pc, #104]	; (8003bc8 <HAL_RCC_ClockConfig+0x2e8>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0308 	and.w	r3, r3, #8
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d009      	beq.n	8003b82 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b6e:	4b16      	ldr	r3, [pc, #88]	; (8003bc8 <HAL_RCC_ClockConfig+0x2e8>)
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	4912      	ldr	r1, [pc, #72]	; (8003bc8 <HAL_RCC_ClockConfig+0x2e8>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003b82:	f000 f829 	bl	8003bd8 <HAL_RCC_GetSysClockFreq>
 8003b86:	4601      	mov	r1, r0
 8003b88:	4b0f      	ldr	r3, [pc, #60]	; (8003bc8 <HAL_RCC_ClockConfig+0x2e8>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b90:	22f0      	movs	r2, #240	; 0xf0
 8003b92:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	fa92 f2a2 	rbit	r2, r2
 8003b9a:	60fa      	str	r2, [r7, #12]
  return result;
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	fab2 f282 	clz	r2, r2
 8003ba2:	b2d2      	uxtb	r2, r2
 8003ba4:	40d3      	lsrs	r3, r2
 8003ba6:	4a09      	ldr	r2, [pc, #36]	; (8003bcc <HAL_RCC_ClockConfig+0x2ec>)
 8003ba8:	5cd3      	ldrb	r3, [r2, r3]
 8003baa:	fa21 f303 	lsr.w	r3, r1, r3
 8003bae:	4a08      	ldr	r2, [pc, #32]	; (8003bd0 <HAL_RCC_ClockConfig+0x2f0>)
 8003bb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003bb2:	4b08      	ldr	r3, [pc, #32]	; (8003bd4 <HAL_RCC_ClockConfig+0x2f4>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7fc fe38 	bl	800082c <HAL_InitTick>
  
  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3778      	adds	r7, #120	; 0x78
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	08009498 	.word	0x08009498
 8003bd0:	20000000 	.word	0x20000000
 8003bd4:	20000004 	.word	0x20000004

08003bd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b08b      	sub	sp, #44	; 0x2c
 8003bdc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003bde:	2300      	movs	r3, #0
 8003be0:	61fb      	str	r3, [r7, #28]
 8003be2:	2300      	movs	r3, #0
 8003be4:	61bb      	str	r3, [r7, #24]
 8003be6:	2300      	movs	r3, #0
 8003be8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bea:	2300      	movs	r3, #0
 8003bec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003bf2:	4b2a      	ldr	r3, [pc, #168]	; (8003c9c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	f003 030c 	and.w	r3, r3, #12
 8003bfe:	2b04      	cmp	r3, #4
 8003c00:	d002      	beq.n	8003c08 <HAL_RCC_GetSysClockFreq+0x30>
 8003c02:	2b08      	cmp	r3, #8
 8003c04:	d003      	beq.n	8003c0e <HAL_RCC_GetSysClockFreq+0x36>
 8003c06:	e03f      	b.n	8003c88 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c08:	4b25      	ldr	r3, [pc, #148]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003c0a:	623b      	str	r3, [r7, #32]
      break;
 8003c0c:	e03f      	b.n	8003c8e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003c14:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003c18:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	fa92 f2a2 	rbit	r2, r2
 8003c20:	607a      	str	r2, [r7, #4]
  return result;
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	fab2 f282 	clz	r2, r2
 8003c28:	b2d2      	uxtb	r2, r2
 8003c2a:	40d3      	lsrs	r3, r2
 8003c2c:	4a1d      	ldr	r2, [pc, #116]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003c2e:	5cd3      	ldrb	r3, [r2, r3]
 8003c30:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003c32:	4b1a      	ldr	r3, [pc, #104]	; (8003c9c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c36:	f003 030f 	and.w	r3, r3, #15
 8003c3a:	220f      	movs	r2, #15
 8003c3c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	fa92 f2a2 	rbit	r2, r2
 8003c44:	60fa      	str	r2, [r7, #12]
  return result;
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	fab2 f282 	clz	r2, r2
 8003c4c:	b2d2      	uxtb	r2, r2
 8003c4e:	40d3      	lsrs	r3, r2
 8003c50:	4a15      	ldr	r2, [pc, #84]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003c52:	5cd3      	ldrb	r3, [r2, r3]
 8003c54:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d008      	beq.n	8003c72 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003c60:	4a0f      	ldr	r2, [pc, #60]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	fb02 f303 	mul.w	r3, r2, r3
 8003c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c70:	e007      	b.n	8003c82 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003c72:	4a0b      	ldr	r2, [pc, #44]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	fb02 f303 	mul.w	r3, r2, r3
 8003c80:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c84:	623b      	str	r3, [r7, #32]
      break;
 8003c86:	e002      	b.n	8003c8e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c88:	4b05      	ldr	r3, [pc, #20]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003c8a:	623b      	str	r3, [r7, #32]
      break;
 8003c8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c8e:	6a3b      	ldr	r3, [r7, #32]
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	372c      	adds	r7, #44	; 0x2c
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr
 8003c9c:	40021000 	.word	0x40021000
 8003ca0:	007a1200 	.word	0x007a1200
 8003ca4:	080094b0 	.word	0x080094b0
 8003ca8:	080094c0 	.word	0x080094c0

08003cac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cb0:	4b03      	ldr	r3, [pc, #12]	; (8003cc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	20000000 	.word	0x20000000

08003cc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003cca:	f7ff ffef 	bl	8003cac <HAL_RCC_GetHCLKFreq>
 8003cce:	4601      	mov	r1, r0
 8003cd0:	4b0b      	ldr	r3, [pc, #44]	; (8003d00 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003cd8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003cdc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	fa92 f2a2 	rbit	r2, r2
 8003ce4:	603a      	str	r2, [r7, #0]
  return result;
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	fab2 f282 	clz	r2, r2
 8003cec:	b2d2      	uxtb	r2, r2
 8003cee:	40d3      	lsrs	r3, r2
 8003cf0:	4a04      	ldr	r2, [pc, #16]	; (8003d04 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003cf2:	5cd3      	ldrb	r3, [r2, r3]
 8003cf4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3708      	adds	r7, #8
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	40021000 	.word	0x40021000
 8003d04:	080094a8 	.word	0x080094a8

08003d08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003d0e:	f7ff ffcd 	bl	8003cac <HAL_RCC_GetHCLKFreq>
 8003d12:	4601      	mov	r1, r0
 8003d14:	4b0b      	ldr	r3, [pc, #44]	; (8003d44 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003d1c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003d20:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	fa92 f2a2 	rbit	r2, r2
 8003d28:	603a      	str	r2, [r7, #0]
  return result;
 8003d2a:	683a      	ldr	r2, [r7, #0]
 8003d2c:	fab2 f282 	clz	r2, r2
 8003d30:	b2d2      	uxtb	r2, r2
 8003d32:	40d3      	lsrs	r3, r2
 8003d34:	4a04      	ldr	r2, [pc, #16]	; (8003d48 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003d36:	5cd3      	ldrb	r3, [r2, r3]
 8003d38:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3708      	adds	r7, #8
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	40021000 	.word	0x40021000
 8003d48:	080094a8 	.word	0x080094a8

08003d4c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b092      	sub	sp, #72	; 0x48
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d54:	2300      	movs	r3, #0
 8003d56:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f000 80d4 	beq.w	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d70:	4b4e      	ldr	r3, [pc, #312]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d72:	69db      	ldr	r3, [r3, #28]
 8003d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d10e      	bne.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d7c:	4b4b      	ldr	r3, [pc, #300]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d7e:	69db      	ldr	r3, [r3, #28]
 8003d80:	4a4a      	ldr	r2, [pc, #296]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d86:	61d3      	str	r3, [r2, #28]
 8003d88:	4b48      	ldr	r3, [pc, #288]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d8a:	69db      	ldr	r3, [r3, #28]
 8003d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d90:	60bb      	str	r3, [r7, #8]
 8003d92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d94:	2301      	movs	r3, #1
 8003d96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d9a:	4b45      	ldr	r3, [pc, #276]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d118      	bne.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003da6:	4b42      	ldr	r3, [pc, #264]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a41      	ldr	r2, [pc, #260]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003db0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003db2:	f7fc fd7f 	bl	80008b4 <HAL_GetTick>
 8003db6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003db8:	e008      	b.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dba:	f7fc fd7b 	bl	80008b4 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b64      	cmp	r3, #100	; 0x64
 8003dc6:	d901      	bls.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e1d6      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dcc:	4b38      	ldr	r3, [pc, #224]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d0f0      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003dd8:	4b34      	ldr	r3, [pc, #208]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dda:	6a1b      	ldr	r3, [r3, #32]
 8003ddc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003de0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f000 8084 	beq.w	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003df2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d07c      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003df8:	4b2c      	ldr	r3, [pc, #176]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dfa:	6a1b      	ldr	r3, [r3, #32]
 8003dfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e06:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0a:	fa93 f3a3 	rbit	r3, r3
 8003e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e12:	fab3 f383 	clz	r3, r3
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	461a      	mov	r2, r3
 8003e1a:	4b26      	ldr	r3, [pc, #152]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e1c:	4413      	add	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	461a      	mov	r2, r3
 8003e22:	2301      	movs	r3, #1
 8003e24:	6013      	str	r3, [r2, #0]
 8003e26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e2a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e2e:	fa93 f3a3 	rbit	r3, r3
 8003e32:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e36:	fab3 f383 	clz	r3, r3
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	4b1d      	ldr	r3, [pc, #116]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e40:	4413      	add	r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	461a      	mov	r2, r3
 8003e46:	2300      	movs	r3, #0
 8003e48:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003e4a:	4a18      	ldr	r2, [pc, #96]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e4e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d04b      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e5a:	f7fc fd2b 	bl	80008b4 <HAL_GetTick>
 8003e5e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e60:	e00a      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e62:	f7fc fd27 	bl	80008b4 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d901      	bls.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e180      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003e78:	2302      	movs	r3, #2
 8003e7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e7e:	fa93 f3a3 	rbit	r3, r3
 8003e82:	627b      	str	r3, [r7, #36]	; 0x24
 8003e84:	2302      	movs	r3, #2
 8003e86:	623b      	str	r3, [r7, #32]
 8003e88:	6a3b      	ldr	r3, [r7, #32]
 8003e8a:	fa93 f3a3 	rbit	r3, r3
 8003e8e:	61fb      	str	r3, [r7, #28]
  return result;
 8003e90:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e92:	fab3 f383 	clz	r3, r3
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	095b      	lsrs	r3, r3, #5
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	f043 0302 	orr.w	r3, r3, #2
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d108      	bne.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003ea6:	4b01      	ldr	r3, [pc, #4]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	e00d      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003eac:	40021000 	.word	0x40021000
 8003eb0:	40007000 	.word	0x40007000
 8003eb4:	10908100 	.word	0x10908100
 8003eb8:	2302      	movs	r3, #2
 8003eba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	fa93 f3a3 	rbit	r3, r3
 8003ec2:	617b      	str	r3, [r7, #20]
 8003ec4:	4b9a      	ldr	r3, [pc, #616]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec8:	2202      	movs	r2, #2
 8003eca:	613a      	str	r2, [r7, #16]
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	fa92 f2a2 	rbit	r2, r2
 8003ed2:	60fa      	str	r2, [r7, #12]
  return result;
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	fab2 f282 	clz	r2, r2
 8003eda:	b2d2      	uxtb	r2, r2
 8003edc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ee0:	b2d2      	uxtb	r2, r2
 8003ee2:	f002 021f 	and.w	r2, r2, #31
 8003ee6:	2101      	movs	r1, #1
 8003ee8:	fa01 f202 	lsl.w	r2, r1, r2
 8003eec:	4013      	ands	r3, r2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d0b7      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003ef2:	4b8f      	ldr	r3, [pc, #572]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	498c      	ldr	r1, [pc, #560]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f04:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d105      	bne.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f0c:	4b88      	ldr	r3, [pc, #544]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f0e:	69db      	ldr	r3, [r3, #28]
 8003f10:	4a87      	ldr	r2, [pc, #540]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f16:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d008      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f24:	4b82      	ldr	r3, [pc, #520]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f28:	f023 0203 	bic.w	r2, r3, #3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	497f      	ldr	r1, [pc, #508]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d008      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f42:	4b7b      	ldr	r3, [pc, #492]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f46:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	4978      	ldr	r1, [pc, #480]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0304 	and.w	r3, r3, #4
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d008      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f60:	4b73      	ldr	r3, [pc, #460]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	4970      	ldr	r1, [pc, #448]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0320 	and.w	r3, r3, #32
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d008      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f7e:	4b6c      	ldr	r3, [pc, #432]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f82:	f023 0210 	bic.w	r2, r3, #16
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	4969      	ldr	r1, [pc, #420]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d008      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003f9c:	4b64      	ldr	r3, [pc, #400]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa8:	4961      	ldr	r1, [pc, #388]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d008      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fba:	4b5d      	ldr	r3, [pc, #372]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbe:	f023 0220 	bic.w	r2, r3, #32
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	495a      	ldr	r1, [pc, #360]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d008      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003fd8:	4b55      	ldr	r3, [pc, #340]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fdc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe4:	4952      	ldr	r1, [pc, #328]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0308 	and.w	r3, r3, #8
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d008      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ff6:	4b4e      	ldr	r3, [pc, #312]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	494b      	ldr	r1, [pc, #300]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004004:	4313      	orrs	r3, r2
 8004006:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0310 	and.w	r3, r3, #16
 8004010:	2b00      	cmp	r3, #0
 8004012:	d008      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004014:	4b46      	ldr	r3, [pc, #280]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004018:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	4943      	ldr	r1, [pc, #268]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004022:	4313      	orrs	r3, r2
 8004024:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800402e:	2b00      	cmp	r3, #0
 8004030:	d008      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004032:	4b3f      	ldr	r3, [pc, #252]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403e:	493c      	ldr	r1, [pc, #240]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004040:	4313      	orrs	r3, r2
 8004042:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800404c:	2b00      	cmp	r3, #0
 800404e:	d008      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004050:	4b37      	ldr	r3, [pc, #220]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004054:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405c:	4934      	ldr	r1, [pc, #208]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800405e:	4313      	orrs	r3, r2
 8004060:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800406a:	2b00      	cmp	r3, #0
 800406c:	d008      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800406e:	4b30      	ldr	r3, [pc, #192]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004072:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407a:	492d      	ldr	r1, [pc, #180]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800407c:	4313      	orrs	r3, r2
 800407e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d008      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800408c:	4b28      	ldr	r3, [pc, #160]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800408e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004090:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004098:	4925      	ldr	r1, [pc, #148]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800409a:	4313      	orrs	r3, r2
 800409c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d008      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80040aa:	4b21      	ldr	r3, [pc, #132]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ae:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b6:	491e      	ldr	r1, [pc, #120]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d008      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80040c8:	4b19      	ldr	r3, [pc, #100]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040cc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d4:	4916      	ldr	r1, [pc, #88]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d008      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80040e6:	4b12      	ldr	r3, [pc, #72]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f2:	490f      	ldr	r1, [pc, #60]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d008      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004104:	4b0a      	ldr	r3, [pc, #40]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004108:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004110:	4907      	ldr	r1, [pc, #28]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004112:	4313      	orrs	r3, r2
 8004114:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00c      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004122:	4b03      	ldr	r3, [pc, #12]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004126:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	e002      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800412e:	bf00      	nop
 8004130:	40021000 	.word	0x40021000
 8004134:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004136:	4913      	ldr	r1, [pc, #76]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004138:	4313      	orrs	r3, r2
 800413a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d008      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004148:	4b0e      	ldr	r3, [pc, #56]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800414a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004154:	490b      	ldr	r1, [pc, #44]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004156:	4313      	orrs	r3, r2
 8004158:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d008      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004166:	4b07      	ldr	r3, [pc, #28]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004172:	4904      	ldr	r1, [pc, #16]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004174:	4313      	orrs	r3, r2
 8004176:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3748      	adds	r7, #72	; 0x48
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	40021000 	.word	0x40021000

08004188 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e073      	b.n	8004286 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	7f5b      	ldrb	r3, [r3, #29]
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d105      	bne.n	80041b4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f7fc fa08 	bl	80005c4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2202      	movs	r2, #2
 80041b8:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	f003 0310 	and.w	r3, r3, #16
 80041c4:	2b10      	cmp	r3, #16
 80041c6:	d055      	beq.n	8004274 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	22ca      	movs	r2, #202	; 0xca
 80041ce:	625a      	str	r2, [r3, #36]	; 0x24
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2253      	movs	r2, #83	; 0x53
 80041d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f000 f87f 	bl	80042dc <RTC_EnterInitMode>
 80041de:	4603      	mov	r3, r0
 80041e0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80041e2:	7bfb      	ldrb	r3, [r7, #15]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d12c      	bne.n	8004242 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	6812      	ldr	r2, [r2, #0]
 80041f2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80041f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041fa:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	6899      	ldr	r1, [r3, #8]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685a      	ldr	r2, [r3, #4]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	431a      	orrs	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	431a      	orrs	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	68d2      	ldr	r2, [r2, #12]
 8004222:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6919      	ldr	r1, [r3, #16]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	041a      	lsls	r2, r3, #16
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	430a      	orrs	r2, r1
 8004236:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 f886 	bl	800434a <RTC_ExitInitMode>
 800423e:	4603      	mov	r3, r0
 8004240:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004242:	7bfb      	ldrb	r3, [r7, #15]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d110      	bne.n	800426a <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004256:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	699a      	ldr	r2, [r3, #24]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	430a      	orrs	r2, r1
 8004268:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	22ff      	movs	r2, #255	; 0xff
 8004270:	625a      	str	r2, [r3, #36]	; 0x24
 8004272:	e001      	b.n	8004278 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004274:	2300      	movs	r3, #0
 8004276:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004278:	7bfb      	ldrb	r3, [r7, #15]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d102      	bne.n	8004284 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8004284:	7bfb      	ldrb	r3, [r7, #15]
}
 8004286:	4618      	mov	r0, r3
 8004288:	3710      	adds	r7, #16
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
	...

08004290 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004298:	2300      	movs	r3, #0
 800429a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a0d      	ldr	r2, [pc, #52]	; (80042d8 <HAL_RTC_WaitForSynchro+0x48>)
 80042a2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042a4:	f7fc fb06 	bl	80008b4 <HAL_GetTick>
 80042a8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80042aa:	e009      	b.n	80042c0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80042ac:	f7fc fb02 	bl	80008b4 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042ba:	d901      	bls.n	80042c0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e007      	b.n	80042d0 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	f003 0320 	and.w	r3, r3, #32
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d0ee      	beq.n	80042ac <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	0001ff5f 	.word	0x0001ff5f

080042dc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042e4:	2300      	movs	r3, #0
 80042e6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80042e8:	2300      	movs	r3, #0
 80042ea:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d122      	bne.n	8004340 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68da      	ldr	r2, [r3, #12]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004308:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800430a:	f7fc fad3 	bl	80008b4 <HAL_GetTick>
 800430e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004310:	e00c      	b.n	800432c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004312:	f7fc facf 	bl	80008b4 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004320:	d904      	bls.n	800432c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2204      	movs	r2, #4
 8004326:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004336:	2b00      	cmp	r3, #0
 8004338:	d102      	bne.n	8004340 <RTC_EnterInitMode+0x64>
 800433a:	7bfb      	ldrb	r3, [r7, #15]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d1e8      	bne.n	8004312 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004340:	7bfb      	ldrb	r3, [r7, #15]
}
 8004342:	4618      	mov	r0, r3
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b084      	sub	sp, #16
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004352:	2300      	movs	r3, #0
 8004354:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68da      	ldr	r2, [r3, #12]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004364:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f003 0320 	and.w	r3, r3, #32
 8004370:	2b00      	cmp	r3, #0
 8004372:	d10a      	bne.n	800438a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f7ff ff8b 	bl	8004290 <HAL_RTC_WaitForSynchro>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d004      	beq.n	800438a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2204      	movs	r2, #4
 8004384:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800438a:	7bfb      	ldrb	r3, [r7, #15]
}
 800438c:	4618      	mov	r0, r3
 800438e:	3710      	adds	r7, #16
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e09d      	b.n	80044e2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d108      	bne.n	80043c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043b6:	d009      	beq.n	80043cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	61da      	str	r2, [r3, #28]
 80043be:	e005      	b.n	80043cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d106      	bne.n	80043ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7fc f912 	bl	8000610 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2202      	movs	r2, #2
 80043f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004402:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800440c:	d902      	bls.n	8004414 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800440e:	2300      	movs	r3, #0
 8004410:	60fb      	str	r3, [r7, #12]
 8004412:	e002      	b.n	800441a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004414:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004418:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004422:	d007      	beq.n	8004434 <HAL_SPI_Init+0xa0>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800442c:	d002      	beq.n	8004434 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004444:	431a      	orrs	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	431a      	orrs	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	695b      	ldr	r3, [r3, #20]
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	431a      	orrs	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004462:	431a      	orrs	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	69db      	ldr	r3, [r3, #28]
 8004468:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800446c:	431a      	orrs	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004476:	ea42 0103 	orr.w	r1, r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	430a      	orrs	r2, r1
 8004488:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	0c1b      	lsrs	r3, r3, #16
 8004490:	f003 0204 	and.w	r2, r3, #4
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004498:	f003 0310 	and.w	r3, r3, #16
 800449c:	431a      	orrs	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044a2:	f003 0308 	and.w	r3, r3, #8
 80044a6:	431a      	orrs	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80044b0:	ea42 0103 	orr.w	r1, r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	430a      	orrs	r2, r1
 80044c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	69da      	ldr	r2, [r3, #28]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b082      	sub	sp, #8
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d101      	bne.n	80044fc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e040      	b.n	800457e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004500:	2b00      	cmp	r3, #0
 8004502:	d106      	bne.n	8004512 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f7fc f8c3 	bl	8000698 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2224      	movs	r2, #36	; 0x24
 8004516:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f022 0201 	bic.w	r2, r2, #1
 8004526:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 f82d 	bl	8004588 <UART_SetConfig>
 800452e:	4603      	mov	r3, r0
 8004530:	2b01      	cmp	r3, #1
 8004532:	d101      	bne.n	8004538 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e022      	b.n	800457e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453c:	2b00      	cmp	r3, #0
 800453e:	d002      	beq.n	8004546 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 f9f5 	bl	8004930 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004554:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	689a      	ldr	r2, [r3, #8]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004564:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f042 0201 	orr.w	r2, r2, #1
 8004574:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 fa7c 	bl	8004a74 <UART_CheckIdleState>
 800457c:	4603      	mov	r3, r0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3708      	adds	r7, #8
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
	...

08004588 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b088      	sub	sp, #32
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004590:	2300      	movs	r3, #0
 8004592:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	689a      	ldr	r2, [r3, #8]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	431a      	orrs	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	431a      	orrs	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	69db      	ldr	r3, [r3, #28]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	4b92      	ldr	r3, [pc, #584]	; (80047fc <UART_SetConfig+0x274>)
 80045b4:	4013      	ands	r3, r2
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	6812      	ldr	r2, [r2, #0]
 80045ba:	6979      	ldr	r1, [r7, #20]
 80045bc:	430b      	orrs	r3, r1
 80045be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68da      	ldr	r2, [r3, #12]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	430a      	orrs	r2, r1
 80045d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	430a      	orrs	r2, r1
 80045f8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a80      	ldr	r2, [pc, #512]	; (8004800 <UART_SetConfig+0x278>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d120      	bne.n	8004646 <UART_SetConfig+0xbe>
 8004604:	4b7f      	ldr	r3, [pc, #508]	; (8004804 <UART_SetConfig+0x27c>)
 8004606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004608:	f003 0303 	and.w	r3, r3, #3
 800460c:	2b03      	cmp	r3, #3
 800460e:	d817      	bhi.n	8004640 <UART_SetConfig+0xb8>
 8004610:	a201      	add	r2, pc, #4	; (adr r2, 8004618 <UART_SetConfig+0x90>)
 8004612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004616:	bf00      	nop
 8004618:	08004629 	.word	0x08004629
 800461c:	08004635 	.word	0x08004635
 8004620:	0800463b 	.word	0x0800463b
 8004624:	0800462f 	.word	0x0800462f
 8004628:	2301      	movs	r3, #1
 800462a:	77fb      	strb	r3, [r7, #31]
 800462c:	e0b5      	b.n	800479a <UART_SetConfig+0x212>
 800462e:	2302      	movs	r3, #2
 8004630:	77fb      	strb	r3, [r7, #31]
 8004632:	e0b2      	b.n	800479a <UART_SetConfig+0x212>
 8004634:	2304      	movs	r3, #4
 8004636:	77fb      	strb	r3, [r7, #31]
 8004638:	e0af      	b.n	800479a <UART_SetConfig+0x212>
 800463a:	2308      	movs	r3, #8
 800463c:	77fb      	strb	r3, [r7, #31]
 800463e:	e0ac      	b.n	800479a <UART_SetConfig+0x212>
 8004640:	2310      	movs	r3, #16
 8004642:	77fb      	strb	r3, [r7, #31]
 8004644:	e0a9      	b.n	800479a <UART_SetConfig+0x212>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a6f      	ldr	r2, [pc, #444]	; (8004808 <UART_SetConfig+0x280>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d124      	bne.n	800469a <UART_SetConfig+0x112>
 8004650:	4b6c      	ldr	r3, [pc, #432]	; (8004804 <UART_SetConfig+0x27c>)
 8004652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004654:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004658:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800465c:	d011      	beq.n	8004682 <UART_SetConfig+0xfa>
 800465e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004662:	d817      	bhi.n	8004694 <UART_SetConfig+0x10c>
 8004664:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004668:	d011      	beq.n	800468e <UART_SetConfig+0x106>
 800466a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800466e:	d811      	bhi.n	8004694 <UART_SetConfig+0x10c>
 8004670:	2b00      	cmp	r3, #0
 8004672:	d003      	beq.n	800467c <UART_SetConfig+0xf4>
 8004674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004678:	d006      	beq.n	8004688 <UART_SetConfig+0x100>
 800467a:	e00b      	b.n	8004694 <UART_SetConfig+0x10c>
 800467c:	2300      	movs	r3, #0
 800467e:	77fb      	strb	r3, [r7, #31]
 8004680:	e08b      	b.n	800479a <UART_SetConfig+0x212>
 8004682:	2302      	movs	r3, #2
 8004684:	77fb      	strb	r3, [r7, #31]
 8004686:	e088      	b.n	800479a <UART_SetConfig+0x212>
 8004688:	2304      	movs	r3, #4
 800468a:	77fb      	strb	r3, [r7, #31]
 800468c:	e085      	b.n	800479a <UART_SetConfig+0x212>
 800468e:	2308      	movs	r3, #8
 8004690:	77fb      	strb	r3, [r7, #31]
 8004692:	e082      	b.n	800479a <UART_SetConfig+0x212>
 8004694:	2310      	movs	r3, #16
 8004696:	77fb      	strb	r3, [r7, #31]
 8004698:	e07f      	b.n	800479a <UART_SetConfig+0x212>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a5b      	ldr	r2, [pc, #364]	; (800480c <UART_SetConfig+0x284>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d124      	bne.n	80046ee <UART_SetConfig+0x166>
 80046a4:	4b57      	ldr	r3, [pc, #348]	; (8004804 <UART_SetConfig+0x27c>)
 80046a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80046ac:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80046b0:	d011      	beq.n	80046d6 <UART_SetConfig+0x14e>
 80046b2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80046b6:	d817      	bhi.n	80046e8 <UART_SetConfig+0x160>
 80046b8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80046bc:	d011      	beq.n	80046e2 <UART_SetConfig+0x15a>
 80046be:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80046c2:	d811      	bhi.n	80046e8 <UART_SetConfig+0x160>
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d003      	beq.n	80046d0 <UART_SetConfig+0x148>
 80046c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80046cc:	d006      	beq.n	80046dc <UART_SetConfig+0x154>
 80046ce:	e00b      	b.n	80046e8 <UART_SetConfig+0x160>
 80046d0:	2300      	movs	r3, #0
 80046d2:	77fb      	strb	r3, [r7, #31]
 80046d4:	e061      	b.n	800479a <UART_SetConfig+0x212>
 80046d6:	2302      	movs	r3, #2
 80046d8:	77fb      	strb	r3, [r7, #31]
 80046da:	e05e      	b.n	800479a <UART_SetConfig+0x212>
 80046dc:	2304      	movs	r3, #4
 80046de:	77fb      	strb	r3, [r7, #31]
 80046e0:	e05b      	b.n	800479a <UART_SetConfig+0x212>
 80046e2:	2308      	movs	r3, #8
 80046e4:	77fb      	strb	r3, [r7, #31]
 80046e6:	e058      	b.n	800479a <UART_SetConfig+0x212>
 80046e8:	2310      	movs	r3, #16
 80046ea:	77fb      	strb	r3, [r7, #31]
 80046ec:	e055      	b.n	800479a <UART_SetConfig+0x212>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a47      	ldr	r2, [pc, #284]	; (8004810 <UART_SetConfig+0x288>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d124      	bne.n	8004742 <UART_SetConfig+0x1ba>
 80046f8:	4b42      	ldr	r3, [pc, #264]	; (8004804 <UART_SetConfig+0x27c>)
 80046fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004700:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004704:	d011      	beq.n	800472a <UART_SetConfig+0x1a2>
 8004706:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800470a:	d817      	bhi.n	800473c <UART_SetConfig+0x1b4>
 800470c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004710:	d011      	beq.n	8004736 <UART_SetConfig+0x1ae>
 8004712:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004716:	d811      	bhi.n	800473c <UART_SetConfig+0x1b4>
 8004718:	2b00      	cmp	r3, #0
 800471a:	d003      	beq.n	8004724 <UART_SetConfig+0x19c>
 800471c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004720:	d006      	beq.n	8004730 <UART_SetConfig+0x1a8>
 8004722:	e00b      	b.n	800473c <UART_SetConfig+0x1b4>
 8004724:	2300      	movs	r3, #0
 8004726:	77fb      	strb	r3, [r7, #31]
 8004728:	e037      	b.n	800479a <UART_SetConfig+0x212>
 800472a:	2302      	movs	r3, #2
 800472c:	77fb      	strb	r3, [r7, #31]
 800472e:	e034      	b.n	800479a <UART_SetConfig+0x212>
 8004730:	2304      	movs	r3, #4
 8004732:	77fb      	strb	r3, [r7, #31]
 8004734:	e031      	b.n	800479a <UART_SetConfig+0x212>
 8004736:	2308      	movs	r3, #8
 8004738:	77fb      	strb	r3, [r7, #31]
 800473a:	e02e      	b.n	800479a <UART_SetConfig+0x212>
 800473c:	2310      	movs	r3, #16
 800473e:	77fb      	strb	r3, [r7, #31]
 8004740:	e02b      	b.n	800479a <UART_SetConfig+0x212>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a33      	ldr	r2, [pc, #204]	; (8004814 <UART_SetConfig+0x28c>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d124      	bne.n	8004796 <UART_SetConfig+0x20e>
 800474c:	4b2d      	ldr	r3, [pc, #180]	; (8004804 <UART_SetConfig+0x27c>)
 800474e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004750:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004754:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004758:	d011      	beq.n	800477e <UART_SetConfig+0x1f6>
 800475a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800475e:	d817      	bhi.n	8004790 <UART_SetConfig+0x208>
 8004760:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004764:	d011      	beq.n	800478a <UART_SetConfig+0x202>
 8004766:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800476a:	d811      	bhi.n	8004790 <UART_SetConfig+0x208>
 800476c:	2b00      	cmp	r3, #0
 800476e:	d003      	beq.n	8004778 <UART_SetConfig+0x1f0>
 8004770:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004774:	d006      	beq.n	8004784 <UART_SetConfig+0x1fc>
 8004776:	e00b      	b.n	8004790 <UART_SetConfig+0x208>
 8004778:	2300      	movs	r3, #0
 800477a:	77fb      	strb	r3, [r7, #31]
 800477c:	e00d      	b.n	800479a <UART_SetConfig+0x212>
 800477e:	2302      	movs	r3, #2
 8004780:	77fb      	strb	r3, [r7, #31]
 8004782:	e00a      	b.n	800479a <UART_SetConfig+0x212>
 8004784:	2304      	movs	r3, #4
 8004786:	77fb      	strb	r3, [r7, #31]
 8004788:	e007      	b.n	800479a <UART_SetConfig+0x212>
 800478a:	2308      	movs	r3, #8
 800478c:	77fb      	strb	r3, [r7, #31]
 800478e:	e004      	b.n	800479a <UART_SetConfig+0x212>
 8004790:	2310      	movs	r3, #16
 8004792:	77fb      	strb	r3, [r7, #31]
 8004794:	e001      	b.n	800479a <UART_SetConfig+0x212>
 8004796:	2310      	movs	r3, #16
 8004798:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	69db      	ldr	r3, [r3, #28]
 800479e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047a2:	d16b      	bne.n	800487c <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80047a4:	7ffb      	ldrb	r3, [r7, #31]
 80047a6:	2b08      	cmp	r3, #8
 80047a8:	d838      	bhi.n	800481c <UART_SetConfig+0x294>
 80047aa:	a201      	add	r2, pc, #4	; (adr r2, 80047b0 <UART_SetConfig+0x228>)
 80047ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b0:	080047d5 	.word	0x080047d5
 80047b4:	080047dd 	.word	0x080047dd
 80047b8:	080047e5 	.word	0x080047e5
 80047bc:	0800481d 	.word	0x0800481d
 80047c0:	080047eb 	.word	0x080047eb
 80047c4:	0800481d 	.word	0x0800481d
 80047c8:	0800481d 	.word	0x0800481d
 80047cc:	0800481d 	.word	0x0800481d
 80047d0:	080047f3 	.word	0x080047f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047d4:	f7ff fa76 	bl	8003cc4 <HAL_RCC_GetPCLK1Freq>
 80047d8:	61b8      	str	r0, [r7, #24]
        break;
 80047da:	e024      	b.n	8004826 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047dc:	f7ff fa94 	bl	8003d08 <HAL_RCC_GetPCLK2Freq>
 80047e0:	61b8      	str	r0, [r7, #24]
        break;
 80047e2:	e020      	b.n	8004826 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047e4:	4b0c      	ldr	r3, [pc, #48]	; (8004818 <UART_SetConfig+0x290>)
 80047e6:	61bb      	str	r3, [r7, #24]
        break;
 80047e8:	e01d      	b.n	8004826 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047ea:	f7ff f9f5 	bl	8003bd8 <HAL_RCC_GetSysClockFreq>
 80047ee:	61b8      	str	r0, [r7, #24]
        break;
 80047f0:	e019      	b.n	8004826 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047f6:	61bb      	str	r3, [r7, #24]
        break;
 80047f8:	e015      	b.n	8004826 <UART_SetConfig+0x29e>
 80047fa:	bf00      	nop
 80047fc:	efff69f3 	.word	0xefff69f3
 8004800:	40013800 	.word	0x40013800
 8004804:	40021000 	.word	0x40021000
 8004808:	40004400 	.word	0x40004400
 800480c:	40004800 	.word	0x40004800
 8004810:	40004c00 	.word	0x40004c00
 8004814:	40005000 	.word	0x40005000
 8004818:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800481c:	2300      	movs	r3, #0
 800481e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	77bb      	strb	r3, [r7, #30]
        break;
 8004824:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d073      	beq.n	8004914 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	005a      	lsls	r2, r3, #1
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	085b      	lsrs	r3, r3, #1
 8004836:	441a      	add	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004840:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	2b0f      	cmp	r3, #15
 8004846:	d916      	bls.n	8004876 <UART_SetConfig+0x2ee>
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800484e:	d212      	bcs.n	8004876 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	b29b      	uxth	r3, r3
 8004854:	f023 030f 	bic.w	r3, r3, #15
 8004858:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	085b      	lsrs	r3, r3, #1
 800485e:	b29b      	uxth	r3, r3
 8004860:	f003 0307 	and.w	r3, r3, #7
 8004864:	b29a      	uxth	r2, r3
 8004866:	89fb      	ldrh	r3, [r7, #14]
 8004868:	4313      	orrs	r3, r2
 800486a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	89fa      	ldrh	r2, [r7, #14]
 8004872:	60da      	str	r2, [r3, #12]
 8004874:	e04e      	b.n	8004914 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	77bb      	strb	r3, [r7, #30]
 800487a:	e04b      	b.n	8004914 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800487c:	7ffb      	ldrb	r3, [r7, #31]
 800487e:	2b08      	cmp	r3, #8
 8004880:	d827      	bhi.n	80048d2 <UART_SetConfig+0x34a>
 8004882:	a201      	add	r2, pc, #4	; (adr r2, 8004888 <UART_SetConfig+0x300>)
 8004884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004888:	080048ad 	.word	0x080048ad
 800488c:	080048b5 	.word	0x080048b5
 8004890:	080048bd 	.word	0x080048bd
 8004894:	080048d3 	.word	0x080048d3
 8004898:	080048c3 	.word	0x080048c3
 800489c:	080048d3 	.word	0x080048d3
 80048a0:	080048d3 	.word	0x080048d3
 80048a4:	080048d3 	.word	0x080048d3
 80048a8:	080048cb 	.word	0x080048cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048ac:	f7ff fa0a 	bl	8003cc4 <HAL_RCC_GetPCLK1Freq>
 80048b0:	61b8      	str	r0, [r7, #24]
        break;
 80048b2:	e013      	b.n	80048dc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048b4:	f7ff fa28 	bl	8003d08 <HAL_RCC_GetPCLK2Freq>
 80048b8:	61b8      	str	r0, [r7, #24]
        break;
 80048ba:	e00f      	b.n	80048dc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048bc:	4b1b      	ldr	r3, [pc, #108]	; (800492c <UART_SetConfig+0x3a4>)
 80048be:	61bb      	str	r3, [r7, #24]
        break;
 80048c0:	e00c      	b.n	80048dc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048c2:	f7ff f989 	bl	8003bd8 <HAL_RCC_GetSysClockFreq>
 80048c6:	61b8      	str	r0, [r7, #24]
        break;
 80048c8:	e008      	b.n	80048dc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048ce:	61bb      	str	r3, [r7, #24]
        break;
 80048d0:	e004      	b.n	80048dc <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80048d2:	2300      	movs	r3, #0
 80048d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	77bb      	strb	r3, [r7, #30]
        break;
 80048da:	bf00      	nop
    }

    if (pclk != 0U)
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d018      	beq.n	8004914 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	085a      	lsrs	r2, r3, #1
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	441a      	add	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	2b0f      	cmp	r3, #15
 80048fa:	d909      	bls.n	8004910 <UART_SetConfig+0x388>
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004902:	d205      	bcs.n	8004910 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	b29a      	uxth	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	60da      	str	r2, [r3, #12]
 800490e:	e001      	b.n	8004914 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004920:	7fbb      	ldrb	r3, [r7, #30]
}
 8004922:	4618      	mov	r0, r3
 8004924:	3720      	adds	r7, #32
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	007a1200 	.word	0x007a1200

08004930 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493c:	f003 0301 	and.w	r3, r3, #1
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00a      	beq.n	800495a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	430a      	orrs	r2, r1
 8004958:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00a      	beq.n	800497c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	430a      	orrs	r2, r1
 800497a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004980:	f003 0304 	and.w	r3, r3, #4
 8004984:	2b00      	cmp	r3, #0
 8004986:	d00a      	beq.n	800499e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	430a      	orrs	r2, r1
 800499c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a2:	f003 0308 	and.w	r3, r3, #8
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00a      	beq.n	80049c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	430a      	orrs	r2, r1
 80049be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c4:	f003 0310 	and.w	r3, r3, #16
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00a      	beq.n	80049e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	430a      	orrs	r2, r1
 80049e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e6:	f003 0320 	and.w	r3, r3, #32
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00a      	beq.n	8004a04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	430a      	orrs	r2, r1
 8004a02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d01a      	beq.n	8004a46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	430a      	orrs	r2, r1
 8004a24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a2e:	d10a      	bne.n	8004a46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	430a      	orrs	r2, r1
 8004a44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00a      	beq.n	8004a68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	430a      	orrs	r2, r1
 8004a66:	605a      	str	r2, [r3, #4]
  }
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b098      	sub	sp, #96	; 0x60
 8004a78:	af02      	add	r7, sp, #8
 8004a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a84:	f7fb ff16 	bl	80008b4 <HAL_GetTick>
 8004a88:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0308 	and.w	r3, r3, #8
 8004a94:	2b08      	cmp	r3, #8
 8004a96:	d12e      	bne.n	8004af6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a9c:	9300      	str	r3, [sp, #0]
 8004a9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 f88c 	bl	8004bc4 <UART_WaitOnFlagUntilTimeout>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d021      	beq.n	8004af6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aba:	e853 3f00 	ldrex	r3, [r3]
 8004abe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ac2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ac6:	653b      	str	r3, [r7, #80]	; 0x50
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	461a      	mov	r2, r3
 8004ace:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ad0:	647b      	str	r3, [r7, #68]	; 0x44
 8004ad2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ad6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ad8:	e841 2300 	strex	r3, r2, [r1]
 8004adc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1e6      	bne.n	8004ab2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2220      	movs	r2, #32
 8004ae8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e062      	b.n	8004bbc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0304 	and.w	r3, r3, #4
 8004b00:	2b04      	cmp	r3, #4
 8004b02:	d149      	bne.n	8004b98 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b08:	9300      	str	r3, [sp, #0]
 8004b0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 f856 	bl	8004bc4 <UART_WaitOnFlagUntilTimeout>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d03c      	beq.n	8004b98 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b26:	e853 3f00 	ldrex	r3, [r3]
 8004b2a:	623b      	str	r3, [r7, #32]
   return(result);
 8004b2c:	6a3b      	ldr	r3, [r7, #32]
 8004b2e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	461a      	mov	r2, r3
 8004b3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b3c:	633b      	str	r3, [r7, #48]	; 0x30
 8004b3e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b44:	e841 2300 	strex	r3, r2, [r1]
 8004b48:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1e6      	bne.n	8004b1e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	3308      	adds	r3, #8
 8004b56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	e853 3f00 	ldrex	r3, [r3]
 8004b5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f023 0301 	bic.w	r3, r3, #1
 8004b66:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	3308      	adds	r3, #8
 8004b6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b70:	61fa      	str	r2, [r7, #28]
 8004b72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b74:	69b9      	ldr	r1, [r7, #24]
 8004b76:	69fa      	ldr	r2, [r7, #28]
 8004b78:	e841 2300 	strex	r3, r2, [r1]
 8004b7c:	617b      	str	r3, [r7, #20]
   return(result);
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1e5      	bne.n	8004b50 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2220      	movs	r2, #32
 8004b88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e011      	b.n	8004bbc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2220      	movs	r2, #32
 8004b9c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2220      	movs	r2, #32
 8004ba2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3758      	adds	r7, #88	; 0x58
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	603b      	str	r3, [r7, #0]
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bd4:	e049      	b.n	8004c6a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bdc:	d045      	beq.n	8004c6a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bde:	f7fb fe69 	bl	80008b4 <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	69ba      	ldr	r2, [r7, #24]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d302      	bcc.n	8004bf4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004bee:	69bb      	ldr	r3, [r7, #24]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d101      	bne.n	8004bf8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e048      	b.n	8004c8a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0304 	and.w	r3, r3, #4
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d031      	beq.n	8004c6a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	69db      	ldr	r3, [r3, #28]
 8004c0c:	f003 0308 	and.w	r3, r3, #8
 8004c10:	2b08      	cmp	r3, #8
 8004c12:	d110      	bne.n	8004c36 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2208      	movs	r2, #8
 8004c1a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004c1c:	68f8      	ldr	r0, [r7, #12]
 8004c1e:	f000 f838 	bl	8004c92 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2208      	movs	r2, #8
 8004c26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e029      	b.n	8004c8a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	69db      	ldr	r3, [r3, #28]
 8004c3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c44:	d111      	bne.n	8004c6a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c50:	68f8      	ldr	r0, [r7, #12]
 8004c52:	f000 f81e 	bl	8004c92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2220      	movs	r2, #32
 8004c5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e00f      	b.n	8004c8a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	69da      	ldr	r2, [r3, #28]
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	4013      	ands	r3, r2
 8004c74:	68ba      	ldr	r2, [r7, #8]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	bf0c      	ite	eq
 8004c7a:	2301      	moveq	r3, #1
 8004c7c:	2300      	movne	r3, #0
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	461a      	mov	r2, r3
 8004c82:	79fb      	ldrb	r3, [r7, #7]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d0a6      	beq.n	8004bd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c92:	b480      	push	{r7}
 8004c94:	b095      	sub	sp, #84	; 0x54
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ca2:	e853 3f00 	ldrex	r3, [r3]
 8004ca6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004caa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cb8:	643b      	str	r3, [r7, #64]	; 0x40
 8004cba:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cbc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004cbe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004cc0:	e841 2300 	strex	r3, r2, [r1]
 8004cc4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1e6      	bne.n	8004c9a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	3308      	adds	r3, #8
 8004cd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd4:	6a3b      	ldr	r3, [r7, #32]
 8004cd6:	e853 3f00 	ldrex	r3, [r3]
 8004cda:	61fb      	str	r3, [r7, #28]
   return(result);
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	f023 0301 	bic.w	r3, r3, #1
 8004ce2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	3308      	adds	r3, #8
 8004cea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cec:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cf4:	e841 2300 	strex	r3, r2, [r1]
 8004cf8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1e5      	bne.n	8004ccc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d118      	bne.n	8004d3a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	e853 3f00 	ldrex	r3, [r3]
 8004d14:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	f023 0310 	bic.w	r3, r3, #16
 8004d1c:	647b      	str	r3, [r7, #68]	; 0x44
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	461a      	mov	r2, r3
 8004d24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d26:	61bb      	str	r3, [r7, #24]
 8004d28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2a:	6979      	ldr	r1, [r7, #20]
 8004d2c:	69ba      	ldr	r2, [r7, #24]
 8004d2e:	e841 2300 	strex	r3, r2, [r1]
 8004d32:	613b      	str	r3, [r7, #16]
   return(result);
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1e6      	bne.n	8004d08 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2220      	movs	r2, #32
 8004d3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004d4e:	bf00      	nop
 8004d50:	3754      	adds	r7, #84	; 0x54
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b085      	sub	sp, #20
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004d6a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004d6e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3714      	adds	r7, #20
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004d90:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004d94:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004d9c:	b29a      	uxth	r2, r3
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	43db      	mvns	r3, r3
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	4013      	ands	r3, r2
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3714      	adds	r7, #20
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	f107 0014 	add.w	r0, r7, #20
 8004dcc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	370c      	adds	r7, #12
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	b004      	add	sp, #16
 8004dfe:	4770      	bx	lr

08004e00 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b09d      	sub	sp, #116	; 0x74
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	4413      	add	r3, r2
 8004e1a:	881b      	ldrh	r3, [r3, #0]
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e26:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	78db      	ldrb	r3, [r3, #3]
 8004e2e:	2b03      	cmp	r3, #3
 8004e30:	d81f      	bhi.n	8004e72 <USB_ActivateEndpoint+0x72>
 8004e32:	a201      	add	r2, pc, #4	; (adr r2, 8004e38 <USB_ActivateEndpoint+0x38>)
 8004e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e38:	08004e49 	.word	0x08004e49
 8004e3c:	08004e65 	.word	0x08004e65
 8004e40:	08004e7b 	.word	0x08004e7b
 8004e44:	08004e57 	.word	0x08004e57
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004e48:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004e4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e50:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004e54:	e012      	b.n	8004e7c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004e56:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004e5a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004e5e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004e62:	e00b      	b.n	8004e7c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004e64:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004e68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e6c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004e70:	e004      	b.n	8004e7c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8004e78:	e000      	b.n	8004e7c <USB_ActivateEndpoint+0x7c>
      break;
 8004e7a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	441a      	add	r2, r3
 8004e86:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004e8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	4413      	add	r3, r2
 8004ea8:	881b      	ldrh	r3, [r3, #0]
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	b21b      	sxth	r3, r3
 8004eae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eb6:	b21a      	sxth	r2, r3
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	b21b      	sxth	r3, r3
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	b21b      	sxth	r3, r3
 8004ec2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	441a      	add	r2, r3
 8004ed0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004ed4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ed8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004edc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	7b1b      	ldrb	r3, [r3, #12]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f040 8178 	bne.w	80051e2 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	785b      	ldrb	r3, [r3, #1]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	f000 8084 	beq.w	8005004 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	61bb      	str	r3, [r7, #24]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	461a      	mov	r2, r3
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	61bb      	str	r3, [r7, #24]
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	00da      	lsls	r2, r3, #3
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	4413      	add	r3, r2
 8004f1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f1e:	617b      	str	r3, [r7, #20]
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	88db      	ldrh	r3, [r3, #6]
 8004f24:	085b      	lsrs	r3, r3, #1
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	005b      	lsls	r3, r3, #1
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	4413      	add	r3, r2
 8004f3a:	881b      	ldrh	r3, [r3, #0]
 8004f3c:	827b      	strh	r3, [r7, #18]
 8004f3e:	8a7b      	ldrh	r3, [r7, #18]
 8004f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d01b      	beq.n	8004f80 <USB_ActivateEndpoint+0x180>
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	4413      	add	r3, r2
 8004f52:	881b      	ldrh	r3, [r3, #0]
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f5e:	823b      	strh	r3, [r7, #16]
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	441a      	add	r2, r3
 8004f6a:	8a3b      	ldrh	r3, [r7, #16]
 8004f6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f78:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	78db      	ldrb	r3, [r3, #3]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d020      	beq.n	8004fca <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	4413      	add	r3, r2
 8004f92:	881b      	ldrh	r3, [r3, #0]
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f9e:	81bb      	strh	r3, [r7, #12]
 8004fa0:	89bb      	ldrh	r3, [r7, #12]
 8004fa2:	f083 0320 	eor.w	r3, r3, #32
 8004fa6:	81bb      	strh	r3, [r7, #12]
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	441a      	add	r2, r3
 8004fb2:	89bb      	ldrh	r3, [r7, #12]
 8004fb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	8013      	strh	r3, [r2, #0]
 8004fc8:	e2d5      	b.n	8005576 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	4413      	add	r3, r2
 8004fd4:	881b      	ldrh	r3, [r3, #0]
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fe0:	81fb      	strh	r3, [r7, #14]
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	441a      	add	r2, r3
 8004fec:	89fb      	ldrh	r3, [r7, #14]
 8004fee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ff2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ff6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ffa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	8013      	strh	r3, [r2, #0]
 8005002:	e2b8      	b.n	8005576 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	633b      	str	r3, [r7, #48]	; 0x30
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800500e:	b29b      	uxth	r3, r3
 8005010:	461a      	mov	r2, r3
 8005012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005014:	4413      	add	r3, r2
 8005016:	633b      	str	r3, [r7, #48]	; 0x30
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	00da      	lsls	r2, r3, #3
 800501e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005020:	4413      	add	r3, r2
 8005022:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005026:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	88db      	ldrh	r3, [r3, #6]
 800502c:	085b      	lsrs	r3, r3, #1
 800502e:	b29b      	uxth	r3, r3
 8005030:	005b      	lsls	r3, r3, #1
 8005032:	b29a      	uxth	r2, r3
 8005034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005036:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	62bb      	str	r3, [r7, #40]	; 0x28
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005042:	b29b      	uxth	r3, r3
 8005044:	461a      	mov	r2, r3
 8005046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005048:	4413      	add	r3, r2
 800504a:	62bb      	str	r3, [r7, #40]	; 0x28
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	00da      	lsls	r2, r3, #3
 8005052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005054:	4413      	add	r3, r2
 8005056:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800505a:	627b      	str	r3, [r7, #36]	; 0x24
 800505c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505e:	881b      	ldrh	r3, [r3, #0]
 8005060:	b29b      	uxth	r3, r3
 8005062:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005066:	b29a      	uxth	r2, r3
 8005068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506a:	801a      	strh	r2, [r3, #0]
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	2b3e      	cmp	r3, #62	; 0x3e
 8005072:	d91d      	bls.n	80050b0 <USB_ActivateEndpoint+0x2b0>
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	095b      	lsrs	r3, r3, #5
 800507a:	66bb      	str	r3, [r7, #104]	; 0x68
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	f003 031f 	and.w	r3, r3, #31
 8005084:	2b00      	cmp	r3, #0
 8005086:	d102      	bne.n	800508e <USB_ActivateEndpoint+0x28e>
 8005088:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800508a:	3b01      	subs	r3, #1
 800508c:	66bb      	str	r3, [r7, #104]	; 0x68
 800508e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005090:	881b      	ldrh	r3, [r3, #0]
 8005092:	b29a      	uxth	r2, r3
 8005094:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005096:	b29b      	uxth	r3, r3
 8005098:	029b      	lsls	r3, r3, #10
 800509a:	b29b      	uxth	r3, r3
 800509c:	4313      	orrs	r3, r2
 800509e:	b29b      	uxth	r3, r3
 80050a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050a8:	b29a      	uxth	r2, r3
 80050aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ac:	801a      	strh	r2, [r3, #0]
 80050ae:	e026      	b.n	80050fe <USB_ActivateEndpoint+0x2fe>
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d10a      	bne.n	80050ce <USB_ActivateEndpoint+0x2ce>
 80050b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ba:	881b      	ldrh	r3, [r3, #0]
 80050bc:	b29b      	uxth	r3, r3
 80050be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050c6:	b29a      	uxth	r2, r3
 80050c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ca:	801a      	strh	r2, [r3, #0]
 80050cc:	e017      	b.n	80050fe <USB_ActivateEndpoint+0x2fe>
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	085b      	lsrs	r3, r3, #1
 80050d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d002      	beq.n	80050e8 <USB_ActivateEndpoint+0x2e8>
 80050e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80050e4:	3301      	adds	r3, #1
 80050e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80050e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ea:	881b      	ldrh	r3, [r3, #0]
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	029b      	lsls	r3, r3, #10
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	4313      	orrs	r3, r2
 80050f8:	b29a      	uxth	r2, r3
 80050fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	4413      	add	r3, r2
 8005108:	881b      	ldrh	r3, [r3, #0]
 800510a:	847b      	strh	r3, [r7, #34]	; 0x22
 800510c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800510e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d01b      	beq.n	800514e <USB_ActivateEndpoint+0x34e>
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	4413      	add	r3, r2
 8005120:	881b      	ldrh	r3, [r3, #0]
 8005122:	b29b      	uxth	r3, r3
 8005124:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005128:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800512c:	843b      	strh	r3, [r7, #32]
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	441a      	add	r2, r3
 8005138:	8c3b      	ldrh	r3, [r7, #32]
 800513a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800513e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005142:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005146:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800514a:	b29b      	uxth	r3, r3
 800514c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d124      	bne.n	80051a0 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	4413      	add	r3, r2
 8005160:	881b      	ldrh	r3, [r3, #0]
 8005162:	b29b      	uxth	r3, r3
 8005164:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005168:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800516c:	83bb      	strh	r3, [r7, #28]
 800516e:	8bbb      	ldrh	r3, [r7, #28]
 8005170:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005174:	83bb      	strh	r3, [r7, #28]
 8005176:	8bbb      	ldrh	r3, [r7, #28]
 8005178:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800517c:	83bb      	strh	r3, [r7, #28]
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	441a      	add	r2, r3
 8005188:	8bbb      	ldrh	r3, [r7, #28]
 800518a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800518e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800519a:	b29b      	uxth	r3, r3
 800519c:	8013      	strh	r3, [r2, #0]
 800519e:	e1ea      	b.n	8005576 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	4413      	add	r3, r2
 80051aa:	881b      	ldrh	r3, [r3, #0]
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051b6:	83fb      	strh	r3, [r7, #30]
 80051b8:	8bfb      	ldrh	r3, [r7, #30]
 80051ba:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80051be:	83fb      	strh	r3, [r7, #30]
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	441a      	add	r2, r3
 80051ca:	8bfb      	ldrh	r3, [r7, #30]
 80051cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051dc:	b29b      	uxth	r3, r3
 80051de:	8013      	strh	r3, [r2, #0]
 80051e0:	e1c9      	b.n	8005576 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	78db      	ldrb	r3, [r3, #3]
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d11e      	bne.n	8005228 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	4413      	add	r3, r2
 80051f4:	881b      	ldrh	r3, [r3, #0]
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005200:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	441a      	add	r2, r3
 800520e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005212:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005216:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800521a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800521e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005222:	b29b      	uxth	r3, r3
 8005224:	8013      	strh	r3, [r2, #0]
 8005226:	e01d      	b.n	8005264 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	4413      	add	r3, r2
 8005232:	881b      	ldrh	r3, [r3, #0]
 8005234:	b29b      	uxth	r3, r3
 8005236:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800523a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800523e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	441a      	add	r2, r3
 800524c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005250:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005254:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005258:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800525c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005260:	b29b      	uxth	r3, r3
 8005262:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800526e:	b29b      	uxth	r3, r3
 8005270:	461a      	mov	r2, r3
 8005272:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005274:	4413      	add	r3, r2
 8005276:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	00da      	lsls	r2, r3, #3
 800527e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005280:	4413      	add	r3, r2
 8005282:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005286:	65bb      	str	r3, [r7, #88]	; 0x58
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	891b      	ldrh	r3, [r3, #8]
 800528c:	085b      	lsrs	r3, r3, #1
 800528e:	b29b      	uxth	r3, r3
 8005290:	005b      	lsls	r3, r3, #1
 8005292:	b29a      	uxth	r2, r3
 8005294:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005296:	801a      	strh	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	657b      	str	r3, [r7, #84]	; 0x54
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	461a      	mov	r2, r3
 80052a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052a8:	4413      	add	r3, r2
 80052aa:	657b      	str	r3, [r7, #84]	; 0x54
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	00da      	lsls	r2, r3, #3
 80052b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052b4:	4413      	add	r3, r2
 80052b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052ba:	653b      	str	r3, [r7, #80]	; 0x50
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	895b      	ldrh	r3, [r3, #10]
 80052c0:	085b      	lsrs	r3, r3, #1
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	005b      	lsls	r3, r3, #1
 80052c6:	b29a      	uxth	r2, r3
 80052c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052ca:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	785b      	ldrb	r3, [r3, #1]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	f040 8093 	bne.w	80053fc <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	4413      	add	r3, r2
 80052e0:	881b      	ldrh	r3, [r3, #0]
 80052e2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80052e6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80052ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d01b      	beq.n	800532a <USB_ActivateEndpoint+0x52a>
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	4413      	add	r3, r2
 80052fc:	881b      	ldrh	r3, [r3, #0]
 80052fe:	b29b      	uxth	r3, r3
 8005300:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005304:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005308:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	441a      	add	r2, r3
 8005314:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005316:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800531a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800531e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005326:	b29b      	uxth	r3, r3
 8005328:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	4413      	add	r3, r2
 8005334:	881b      	ldrh	r3, [r3, #0]
 8005336:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005338:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800533a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800533e:	2b00      	cmp	r3, #0
 8005340:	d01b      	beq.n	800537a <USB_ActivateEndpoint+0x57a>
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	4413      	add	r3, r2
 800534c:	881b      	ldrh	r3, [r3, #0]
 800534e:	b29b      	uxth	r3, r3
 8005350:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005358:	877b      	strh	r3, [r7, #58]	; 0x3a
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	441a      	add	r2, r3
 8005364:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005366:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800536a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800536e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005372:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005376:	b29b      	uxth	r3, r3
 8005378:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	4413      	add	r3, r2
 8005384:	881b      	ldrh	r3, [r3, #0]
 8005386:	b29b      	uxth	r3, r3
 8005388:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800538c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005390:	873b      	strh	r3, [r7, #56]	; 0x38
 8005392:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005394:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005398:	873b      	strh	r3, [r7, #56]	; 0x38
 800539a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800539c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80053a0:	873b      	strh	r3, [r7, #56]	; 0x38
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	441a      	add	r2, r3
 80053ac:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80053ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053be:	b29b      	uxth	r3, r3
 80053c0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	4413      	add	r3, r2
 80053cc:	881b      	ldrh	r3, [r3, #0]
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053d8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	441a      	add	r2, r3
 80053e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80053e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	8013      	strh	r3, [r2, #0]
 80053fa:	e0bc      	b.n	8005576 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	4413      	add	r3, r2
 8005406:	881b      	ldrh	r3, [r3, #0]
 8005408:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800540c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005410:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d01d      	beq.n	8005454 <USB_ActivateEndpoint+0x654>
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	4413      	add	r3, r2
 8005422:	881b      	ldrh	r3, [r3, #0]
 8005424:	b29b      	uxth	r3, r3
 8005426:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800542a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800542e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	441a      	add	r2, r3
 800543c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005440:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005444:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005448:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800544c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005450:	b29b      	uxth	r3, r3
 8005452:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	4413      	add	r3, r2
 800545e:	881b      	ldrh	r3, [r3, #0]
 8005460:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005464:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800546c:	2b00      	cmp	r3, #0
 800546e:	d01d      	beq.n	80054ac <USB_ActivateEndpoint+0x6ac>
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	4413      	add	r3, r2
 800547a:	881b      	ldrh	r3, [r3, #0]
 800547c:	b29b      	uxth	r3, r3
 800547e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005486:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	441a      	add	r2, r3
 8005494:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005498:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800549c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	78db      	ldrb	r3, [r3, #3]
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d024      	beq.n	80054fe <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	4413      	add	r3, r2
 80054be:	881b      	ldrh	r3, [r3, #0]
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054ca:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80054ce:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80054d2:	f083 0320 	eor.w	r3, r3, #32
 80054d6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	441a      	add	r2, r3
 80054e4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80054e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	8013      	strh	r3, [r2, #0]
 80054fc:	e01d      	b.n	800553a <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	4413      	add	r3, r2
 8005508:	881b      	ldrh	r3, [r3, #0]
 800550a:	b29b      	uxth	r3, r3
 800550c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005510:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005514:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	441a      	add	r2, r3
 8005522:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005526:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800552a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800552e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005532:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005536:	b29b      	uxth	r3, r3
 8005538:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	4413      	add	r3, r2
 8005544:	881b      	ldrh	r3, [r3, #0]
 8005546:	b29b      	uxth	r3, r3
 8005548:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800554c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005550:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	441a      	add	r2, r3
 800555e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005562:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005566:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800556a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800556e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005572:	b29b      	uxth	r3, r3
 8005574:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005576:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800557a:	4618      	mov	r0, r3
 800557c:	3774      	adds	r7, #116	; 0x74
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
 8005586:	bf00      	nop

08005588 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005588:	b480      	push	{r7}
 800558a:	b08d      	sub	sp, #52	; 0x34
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	7b1b      	ldrb	r3, [r3, #12]
 8005596:	2b00      	cmp	r3, #0
 8005598:	f040 808e 	bne.w	80056b8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	785b      	ldrb	r3, [r3, #1]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d044      	beq.n	800562e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	4413      	add	r3, r2
 80055ae:	881b      	ldrh	r3, [r3, #0]
 80055b0:	81bb      	strh	r3, [r7, #12]
 80055b2:	89bb      	ldrh	r3, [r7, #12]
 80055b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d01b      	beq.n	80055f4 <USB_DeactivateEndpoint+0x6c>
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	4413      	add	r3, r2
 80055c6:	881b      	ldrh	r3, [r3, #0]
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055d2:	817b      	strh	r3, [r7, #10]
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	441a      	add	r2, r3
 80055de:	897b      	ldrh	r3, [r7, #10]
 80055e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4413      	add	r3, r2
 80055fe:	881b      	ldrh	r3, [r3, #0]
 8005600:	b29b      	uxth	r3, r3
 8005602:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005606:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800560a:	813b      	strh	r3, [r7, #8]
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	441a      	add	r2, r3
 8005616:	893b      	ldrh	r3, [r7, #8]
 8005618:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800561c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005620:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005628:	b29b      	uxth	r3, r3
 800562a:	8013      	strh	r3, [r2, #0]
 800562c:	e192      	b.n	8005954 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	4413      	add	r3, r2
 8005638:	881b      	ldrh	r3, [r3, #0]
 800563a:	827b      	strh	r3, [r7, #18]
 800563c:	8a7b      	ldrh	r3, [r7, #18]
 800563e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d01b      	beq.n	800567e <USB_DeactivateEndpoint+0xf6>
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	4413      	add	r3, r2
 8005650:	881b      	ldrh	r3, [r3, #0]
 8005652:	b29b      	uxth	r3, r3
 8005654:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800565c:	823b      	strh	r3, [r7, #16]
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	441a      	add	r2, r3
 8005668:	8a3b      	ldrh	r3, [r7, #16]
 800566a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800566e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005672:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800567a:	b29b      	uxth	r3, r3
 800567c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	4413      	add	r3, r2
 8005688:	881b      	ldrh	r3, [r3, #0]
 800568a:	b29b      	uxth	r3, r3
 800568c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005694:	81fb      	strh	r3, [r7, #14]
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	441a      	add	r2, r3
 80056a0:	89fb      	ldrh	r3, [r7, #14]
 80056a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	8013      	strh	r3, [r2, #0]
 80056b6:	e14d      	b.n	8005954 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	785b      	ldrb	r3, [r3, #1]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f040 80a5 	bne.w	800580c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	4413      	add	r3, r2
 80056cc:	881b      	ldrh	r3, [r3, #0]
 80056ce:	843b      	strh	r3, [r7, #32]
 80056d0:	8c3b      	ldrh	r3, [r7, #32]
 80056d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d01b      	beq.n	8005712 <USB_DeactivateEndpoint+0x18a>
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	4413      	add	r3, r2
 80056e4:	881b      	ldrh	r3, [r3, #0]
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056f0:	83fb      	strh	r3, [r7, #30]
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	441a      	add	r2, r3
 80056fc:	8bfb      	ldrh	r3, [r7, #30]
 80056fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005702:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005706:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800570a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800570e:	b29b      	uxth	r3, r3
 8005710:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	4413      	add	r3, r2
 800571c:	881b      	ldrh	r3, [r3, #0]
 800571e:	83bb      	strh	r3, [r7, #28]
 8005720:	8bbb      	ldrh	r3, [r7, #28]
 8005722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005726:	2b00      	cmp	r3, #0
 8005728:	d01b      	beq.n	8005762 <USB_DeactivateEndpoint+0x1da>
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	4413      	add	r3, r2
 8005734:	881b      	ldrh	r3, [r3, #0]
 8005736:	b29b      	uxth	r3, r3
 8005738:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800573c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005740:	837b      	strh	r3, [r7, #26]
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	441a      	add	r2, r3
 800574c:	8b7b      	ldrh	r3, [r7, #26]
 800574e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005752:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005756:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800575a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800575e:	b29b      	uxth	r3, r3
 8005760:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	4413      	add	r3, r2
 800576c:	881b      	ldrh	r3, [r3, #0]
 800576e:	b29b      	uxth	r3, r3
 8005770:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005778:	833b      	strh	r3, [r7, #24]
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	441a      	add	r2, r3
 8005784:	8b3b      	ldrh	r3, [r7, #24]
 8005786:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800578a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800578e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005792:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005796:	b29b      	uxth	r3, r3
 8005798:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	4413      	add	r3, r2
 80057a4:	881b      	ldrh	r3, [r3, #0]
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057b0:	82fb      	strh	r3, [r7, #22]
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	441a      	add	r2, r3
 80057bc:	8afb      	ldrh	r3, [r7, #22]
 80057be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	4413      	add	r3, r2
 80057dc:	881b      	ldrh	r3, [r3, #0]
 80057de:	b29b      	uxth	r3, r3
 80057e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057e8:	82bb      	strh	r3, [r7, #20]
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	441a      	add	r2, r3
 80057f4:	8abb      	ldrh	r3, [r7, #20]
 80057f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005802:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005806:	b29b      	uxth	r3, r3
 8005808:	8013      	strh	r3, [r2, #0]
 800580a:	e0a3      	b.n	8005954 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	4413      	add	r3, r2
 8005816:	881b      	ldrh	r3, [r3, #0]
 8005818:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800581a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800581c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d01b      	beq.n	800585c <USB_DeactivateEndpoint+0x2d4>
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	4413      	add	r3, r2
 800582e:	881b      	ldrh	r3, [r3, #0]
 8005830:	b29b      	uxth	r3, r3
 8005832:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800583a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	441a      	add	r2, r3
 8005846:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005848:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800584c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005850:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005858:	b29b      	uxth	r3, r3
 800585a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	4413      	add	r3, r2
 8005866:	881b      	ldrh	r3, [r3, #0]
 8005868:	857b      	strh	r3, [r7, #42]	; 0x2a
 800586a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800586c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005870:	2b00      	cmp	r3, #0
 8005872:	d01b      	beq.n	80058ac <USB_DeactivateEndpoint+0x324>
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	4413      	add	r3, r2
 800587e:	881b      	ldrh	r3, [r3, #0]
 8005880:	b29b      	uxth	r3, r3
 8005882:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800588a:	853b      	strh	r3, [r7, #40]	; 0x28
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	441a      	add	r2, r3
 8005896:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005898:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800589c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	4413      	add	r3, r2
 80058b6:	881b      	ldrh	r3, [r3, #0]
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058c2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	441a      	add	r2, r3
 80058ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80058dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	4413      	add	r3, r2
 80058ee:	881b      	ldrh	r3, [r3, #0]
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058fa:	84bb      	strh	r3, [r7, #36]	; 0x24
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	441a      	add	r2, r3
 8005906:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005908:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800590c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005910:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005918:	b29b      	uxth	r3, r3
 800591a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	4413      	add	r3, r2
 8005926:	881b      	ldrh	r3, [r3, #0]
 8005928:	b29b      	uxth	r3, r3
 800592a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800592e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005932:	847b      	strh	r3, [r7, #34]	; 0x22
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	441a      	add	r2, r3
 800593e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005940:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005944:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005948:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800594c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005950:	b29b      	uxth	r3, r3
 8005952:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3734      	adds	r7, #52	; 0x34
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr

08005962 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005962:	b580      	push	{r7, lr}
 8005964:	b0c2      	sub	sp, #264	; 0x108
 8005966:	af00      	add	r7, sp, #0
 8005968:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800596c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005970:	6018      	str	r0, [r3, #0]
 8005972:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005976:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800597a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800597c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005980:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	785b      	ldrb	r3, [r3, #1]
 8005988:	2b01      	cmp	r3, #1
 800598a:	f040 86b7 	bne.w	80066fc <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800598e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005992:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	699a      	ldr	r2, [r3, #24]
 800599a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800599e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d908      	bls.n	80059bc <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80059aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80059ba:	e007      	b.n	80059cc <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80059bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	699b      	ldr	r3, [r3, #24]
 80059c8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80059cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	7b1b      	ldrb	r3, [r3, #12]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d13a      	bne.n	8005a52 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80059dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	6959      	ldr	r1, [r3, #20]
 80059e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	88da      	ldrh	r2, [r3, #6]
 80059f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80059fe:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005a02:	6800      	ldr	r0, [r0, #0]
 8005a04:	f001 fc8c 	bl	8007320 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005a08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	613b      	str	r3, [r7, #16]
 8005a14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	461a      	mov	r2, r3
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	4413      	add	r3, r2
 8005a2a:	613b      	str	r3, [r7, #16]
 8005a2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	00da      	lsls	r2, r3, #3
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005a42:	60fb      	str	r3, [r7, #12]
 8005a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	801a      	strh	r2, [r3, #0]
 8005a4e:	f000 be1f 	b.w	8006690 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005a52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	78db      	ldrb	r3, [r3, #3]
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	f040 8462 	bne.w	8006328 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005a64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	6a1a      	ldr	r2, [r3, #32]
 8005a70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	f240 83df 	bls.w	8006240 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005a82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	4413      	add	r3, r2
 8005a9c:	881b      	ldrh	r3, [r3, #0]
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aa8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005aac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ab0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	441a      	add	r2, r3
 8005ac6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005aca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ace:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ad2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005ade:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ae2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	6a1a      	ldr	r2, [r3, #32]
 8005aea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aee:	1ad2      	subs	r2, r2, r3
 8005af0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005af4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005afc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	4413      	add	r3, r2
 8005b16:	881b      	ldrh	r3, [r3, #0]
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	f000 81c7 	beq.w	8005eb2 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005b24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	633b      	str	r3, [r7, #48]	; 0x30
 8005b30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	785b      	ldrb	r3, [r3, #1]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d177      	bne.n	8005c30 <USB_EPStartXfer+0x2ce>
 8005b40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b60:	4413      	add	r3, r2
 8005b62:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	00da      	lsls	r2, r3, #3
 8005b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b74:	4413      	add	r3, r2
 8005b76:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7e:	881b      	ldrh	r3, [r3, #0]
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b86:	b29a      	uxth	r2, r3
 8005b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8a:	801a      	strh	r2, [r3, #0]
 8005b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b90:	2b3e      	cmp	r3, #62	; 0x3e
 8005b92:	d921      	bls.n	8005bd8 <USB_EPStartXfer+0x276>
 8005b94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b98:	095b      	lsrs	r3, r3, #5
 8005b9a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ba2:	f003 031f 	and.w	r3, r3, #31
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d104      	bne.n	8005bb4 <USB_EPStartXfer+0x252>
 8005baa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb6:	881b      	ldrh	r3, [r3, #0]
 8005bb8:	b29a      	uxth	r2, r3
 8005bba:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	029b      	lsls	r3, r3, #10
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd4:	801a      	strh	r2, [r3, #0]
 8005bd6:	e050      	b.n	8005c7a <USB_EPStartXfer+0x318>
 8005bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d10a      	bne.n	8005bf6 <USB_EPStartXfer+0x294>
 8005be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be2:	881b      	ldrh	r3, [r3, #0]
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bee:	b29a      	uxth	r2, r3
 8005bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf2:	801a      	strh	r2, [r3, #0]
 8005bf4:	e041      	b.n	8005c7a <USB_EPStartXfer+0x318>
 8005bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bfa:	085b      	lsrs	r3, r3, #1
 8005bfc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c04:	f003 0301 	and.w	r3, r3, #1
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d004      	beq.n	8005c16 <USB_EPStartXfer+0x2b4>
 8005c0c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005c10:	3301      	adds	r3, #1
 8005c12:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c18:	881b      	ldrh	r3, [r3, #0]
 8005c1a:	b29a      	uxth	r2, r3
 8005c1c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	029b      	lsls	r3, r3, #10
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	4313      	orrs	r3, r2
 8005c28:	b29a      	uxth	r2, r3
 8005c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2c:	801a      	strh	r2, [r3, #0]
 8005c2e:	e024      	b.n	8005c7a <USB_EPStartXfer+0x318>
 8005c30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	785b      	ldrb	r3, [r3, #1]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d11c      	bne.n	8005c7a <USB_EPStartXfer+0x318>
 8005c40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	461a      	mov	r2, r3
 8005c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c54:	4413      	add	r3, r2
 8005c56:	633b      	str	r3, [r7, #48]	; 0x30
 8005c58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	00da      	lsls	r2, r3, #3
 8005c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c68:	4413      	add	r3, r2
 8005c6a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c78:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005c7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	895b      	ldrh	r3, [r3, #10]
 8005c86:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	6959      	ldr	r1, [r3, #20]
 8005c96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005ca0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005ca4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005ca8:	6800      	ldr	r0, [r0, #0]
 8005caa:	f001 fb39 	bl	8007320 <USB_WritePMA>
            ep->xfer_buff += len;
 8005cae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	695a      	ldr	r2, [r3, #20]
 8005cba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cbe:	441a      	add	r2, r3
 8005cc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005ccc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	6a1a      	ldr	r2, [r3, #32]
 8005cd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d90f      	bls.n	8005d08 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005ce8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	6a1a      	ldr	r2, [r3, #32]
 8005cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cf8:	1ad2      	subs	r2, r2, r3
 8005cfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	621a      	str	r2, [r3, #32]
 8005d06:	e00e      	b.n	8005d26 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005d08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	6a1b      	ldr	r3, [r3, #32]
 8005d14:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005d18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2200      	movs	r2, #0
 8005d24:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005d26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	785b      	ldrb	r3, [r3, #1]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d177      	bne.n	8005e26 <USB_EPStartXfer+0x4c4>
 8005d36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	61bb      	str	r3, [r7, #24]
 8005d42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	461a      	mov	r2, r3
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	4413      	add	r3, r2
 8005d58:	61bb      	str	r3, [r7, #24]
 8005d5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	00da      	lsls	r2, r3, #3
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005d70:	617b      	str	r3, [r7, #20]
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	881b      	ldrh	r3, [r3, #0]
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	801a      	strh	r2, [r3, #0]
 8005d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d86:	2b3e      	cmp	r3, #62	; 0x3e
 8005d88:	d921      	bls.n	8005dce <USB_EPStartXfer+0x46c>
 8005d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d8e:	095b      	lsrs	r3, r3, #5
 8005d90:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d98:	f003 031f 	and.w	r3, r3, #31
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d104      	bne.n	8005daa <USB_EPStartXfer+0x448>
 8005da0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005da4:	3b01      	subs	r3, #1
 8005da6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	881b      	ldrh	r3, [r3, #0]
 8005dae:	b29a      	uxth	r2, r3
 8005db0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	029b      	lsls	r3, r3, #10
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dc6:	b29a      	uxth	r2, r3
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	801a      	strh	r2, [r3, #0]
 8005dcc:	e056      	b.n	8005e7c <USB_EPStartXfer+0x51a>
 8005dce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d10a      	bne.n	8005dec <USB_EPStartXfer+0x48a>
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	881b      	ldrh	r3, [r3, #0]
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005de0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005de4:	b29a      	uxth	r2, r3
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	801a      	strh	r2, [r3, #0]
 8005dea:	e047      	b.n	8005e7c <USB_EPStartXfer+0x51a>
 8005dec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005df0:	085b      	lsrs	r3, r3, #1
 8005df2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dfa:	f003 0301 	and.w	r3, r3, #1
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d004      	beq.n	8005e0c <USB_EPStartXfer+0x4aa>
 8005e02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e06:	3301      	adds	r3, #1
 8005e08:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	881b      	ldrh	r3, [r3, #0]
 8005e10:	b29a      	uxth	r2, r3
 8005e12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	029b      	lsls	r3, r3, #10
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	b29a      	uxth	r2, r3
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	801a      	strh	r2, [r3, #0]
 8005e24:	e02a      	b.n	8005e7c <USB_EPStartXfer+0x51a>
 8005e26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	785b      	ldrb	r3, [r3, #1]
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d122      	bne.n	8005e7c <USB_EPStartXfer+0x51a>
 8005e36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	623b      	str	r3, [r7, #32]
 8005e42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	461a      	mov	r2, r3
 8005e54:	6a3b      	ldr	r3, [r7, #32]
 8005e56:	4413      	add	r3, r2
 8005e58:	623b      	str	r3, [r7, #32]
 8005e5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	00da      	lsls	r2, r3, #3
 8005e68:	6a3b      	ldr	r3, [r7, #32]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005e70:	61fb      	str	r3, [r7, #28]
 8005e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e76:	b29a      	uxth	r2, r3
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005e7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	891b      	ldrh	r3, [r3, #8]
 8005e88:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	6959      	ldr	r1, [r3, #20]
 8005e98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005ea2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005ea6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005eaa:	6800      	ldr	r0, [r0, #0]
 8005eac:	f001 fa38 	bl	8007320 <USB_WritePMA>
 8005eb0:	e3ee      	b.n	8006690 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005eb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	785b      	ldrb	r3, [r3, #1]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d177      	bne.n	8005fb2 <USB_EPStartXfer+0x650>
 8005ec2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ec6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ed2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	461a      	mov	r2, r3
 8005ee0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ee2:	4413      	add	r3, r2
 8005ee4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ee6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	00da      	lsls	r2, r3, #3
 8005ef4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ef6:	4413      	add	r3, r2
 8005ef8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005efc:	647b      	str	r3, [r7, #68]	; 0x44
 8005efe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f00:	881b      	ldrh	r3, [r3, #0]
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f08:	b29a      	uxth	r2, r3
 8005f0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f0c:	801a      	strh	r2, [r3, #0]
 8005f0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f12:	2b3e      	cmp	r3, #62	; 0x3e
 8005f14:	d921      	bls.n	8005f5a <USB_EPStartXfer+0x5f8>
 8005f16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f1a:	095b      	lsrs	r3, r3, #5
 8005f1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f24:	f003 031f 	and.w	r3, r3, #31
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d104      	bne.n	8005f36 <USB_EPStartXfer+0x5d4>
 8005f2c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f30:	3b01      	subs	r3, #1
 8005f32:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005f36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f38:	881b      	ldrh	r3, [r3, #0]
 8005f3a:	b29a      	uxth	r2, r3
 8005f3c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	029b      	lsls	r3, r3, #10
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	4313      	orrs	r3, r2
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f56:	801a      	strh	r2, [r3, #0]
 8005f58:	e056      	b.n	8006008 <USB_EPStartXfer+0x6a6>
 8005f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d10a      	bne.n	8005f78 <USB_EPStartXfer+0x616>
 8005f62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f64:	881b      	ldrh	r3, [r3, #0]
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f74:	801a      	strh	r2, [r3, #0]
 8005f76:	e047      	b.n	8006008 <USB_EPStartXfer+0x6a6>
 8005f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f7c:	085b      	lsrs	r3, r3, #1
 8005f7e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f86:	f003 0301 	and.w	r3, r3, #1
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d004      	beq.n	8005f98 <USB_EPStartXfer+0x636>
 8005f8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f92:	3301      	adds	r3, #1
 8005f94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005f98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f9a:	881b      	ldrh	r3, [r3, #0]
 8005f9c:	b29a      	uxth	r2, r3
 8005f9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	029b      	lsls	r3, r3, #10
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	b29a      	uxth	r2, r3
 8005fac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fae:	801a      	strh	r2, [r3, #0]
 8005fb0:	e02a      	b.n	8006008 <USB_EPStartXfer+0x6a6>
 8005fb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	785b      	ldrb	r3, [r3, #1]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d122      	bne.n	8006008 <USB_EPStartXfer+0x6a6>
 8005fc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	653b      	str	r3, [r7, #80]	; 0x50
 8005fce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	461a      	mov	r2, r3
 8005fe0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fe2:	4413      	add	r3, r2
 8005fe4:	653b      	str	r3, [r7, #80]	; 0x50
 8005fe6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	00da      	lsls	r2, r3, #3
 8005ff4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ff6:	4413      	add	r3, r2
 8005ff8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005ffc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006002:	b29a      	uxth	r2, r3
 8006004:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006006:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006008:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800600c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	891b      	ldrh	r3, [r3, #8]
 8006014:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006018:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800601c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	6959      	ldr	r1, [r3, #20]
 8006024:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006028:	b29b      	uxth	r3, r3
 800602a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800602e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006032:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006036:	6800      	ldr	r0, [r0, #0]
 8006038:	f001 f972 	bl	8007320 <USB_WritePMA>
            ep->xfer_buff += len;
 800603c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006040:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	695a      	ldr	r2, [r3, #20]
 8006048:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800604c:	441a      	add	r2, r3
 800604e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006052:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800605a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800605e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	6a1a      	ldr	r2, [r3, #32]
 8006066:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800606a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	429a      	cmp	r2, r3
 8006074:	d90f      	bls.n	8006096 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006076:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800607a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	6a1a      	ldr	r2, [r3, #32]
 8006082:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006086:	1ad2      	subs	r2, r2, r3
 8006088:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800608c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	621a      	str	r2, [r3, #32]
 8006094:	e00e      	b.n	80060b4 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006096:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800609a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	6a1b      	ldr	r3, [r3, #32]
 80060a2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80060a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2200      	movs	r2, #0
 80060b2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80060b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	643b      	str	r3, [r7, #64]	; 0x40
 80060c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	785b      	ldrb	r3, [r3, #1]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d177      	bne.n	80061c0 <USB_EPStartXfer+0x85e>
 80060d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	63bb      	str	r3, [r7, #56]	; 0x38
 80060dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	461a      	mov	r2, r3
 80060ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f0:	4413      	add	r3, r2
 80060f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80060f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	00da      	lsls	r2, r3, #3
 8006102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006104:	4413      	add	r3, r2
 8006106:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800610a:	637b      	str	r3, [r7, #52]	; 0x34
 800610c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800610e:	881b      	ldrh	r3, [r3, #0]
 8006110:	b29b      	uxth	r3, r3
 8006112:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006116:	b29a      	uxth	r2, r3
 8006118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800611a:	801a      	strh	r2, [r3, #0]
 800611c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006120:	2b3e      	cmp	r3, #62	; 0x3e
 8006122:	d921      	bls.n	8006168 <USB_EPStartXfer+0x806>
 8006124:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006128:	095b      	lsrs	r3, r3, #5
 800612a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800612e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006132:	f003 031f 	and.w	r3, r3, #31
 8006136:	2b00      	cmp	r3, #0
 8006138:	d104      	bne.n	8006144 <USB_EPStartXfer+0x7e2>
 800613a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800613e:	3b01      	subs	r3, #1
 8006140:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006146:	881b      	ldrh	r3, [r3, #0]
 8006148:	b29a      	uxth	r2, r3
 800614a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800614e:	b29b      	uxth	r3, r3
 8006150:	029b      	lsls	r3, r3, #10
 8006152:	b29b      	uxth	r3, r3
 8006154:	4313      	orrs	r3, r2
 8006156:	b29b      	uxth	r3, r3
 8006158:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800615c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006160:	b29a      	uxth	r2, r3
 8006162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006164:	801a      	strh	r2, [r3, #0]
 8006166:	e050      	b.n	800620a <USB_EPStartXfer+0x8a8>
 8006168:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800616c:	2b00      	cmp	r3, #0
 800616e:	d10a      	bne.n	8006186 <USB_EPStartXfer+0x824>
 8006170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006172:	881b      	ldrh	r3, [r3, #0]
 8006174:	b29b      	uxth	r3, r3
 8006176:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800617a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800617e:	b29a      	uxth	r2, r3
 8006180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006182:	801a      	strh	r2, [r3, #0]
 8006184:	e041      	b.n	800620a <USB_EPStartXfer+0x8a8>
 8006186:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800618a:	085b      	lsrs	r3, r3, #1
 800618c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006190:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006194:	f003 0301 	and.w	r3, r3, #1
 8006198:	2b00      	cmp	r3, #0
 800619a:	d004      	beq.n	80061a6 <USB_EPStartXfer+0x844>
 800619c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061a0:	3301      	adds	r3, #1
 80061a2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80061a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061a8:	881b      	ldrh	r3, [r3, #0]
 80061aa:	b29a      	uxth	r2, r3
 80061ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	029b      	lsls	r3, r3, #10
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	4313      	orrs	r3, r2
 80061b8:	b29a      	uxth	r2, r3
 80061ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061bc:	801a      	strh	r2, [r3, #0]
 80061be:	e024      	b.n	800620a <USB_EPStartXfer+0x8a8>
 80061c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	785b      	ldrb	r3, [r3, #1]
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d11c      	bne.n	800620a <USB_EPStartXfer+0x8a8>
 80061d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061de:	b29b      	uxth	r3, r3
 80061e0:	461a      	mov	r2, r3
 80061e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061e4:	4413      	add	r3, r2
 80061e6:	643b      	str	r3, [r7, #64]	; 0x40
 80061e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	00da      	lsls	r2, r3, #3
 80061f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061f8:	4413      	add	r3, r2
 80061fa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80061fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006200:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006204:	b29a      	uxth	r2, r3
 8006206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006208:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800620a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800620e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	895b      	ldrh	r3, [r3, #10]
 8006216:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800621a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800621e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	6959      	ldr	r1, [r3, #20]
 8006226:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800622a:	b29b      	uxth	r3, r3
 800622c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006230:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006234:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006238:	6800      	ldr	r0, [r0, #0]
 800623a:	f001 f871 	bl	8007320 <USB_WritePMA>
 800623e:	e227      	b.n	8006690 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006240:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006244:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	6a1b      	ldr	r3, [r3, #32]
 800624c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006250:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006254:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800625e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	4413      	add	r3, r2
 800626a:	881b      	ldrh	r3, [r3, #0]
 800626c:	b29b      	uxth	r3, r3
 800626e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006276:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800627a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800627e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006288:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	441a      	add	r2, r3
 8006294:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006298:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800629c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80062ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	461a      	mov	r2, r3
 80062ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062cc:	4413      	add	r3, r2
 80062ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	00da      	lsls	r2, r3, #3
 80062de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062e0:	4413      	add	r3, r2
 80062e2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80062e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80062e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062ec:	b29a      	uxth	r2, r3
 80062ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062f0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80062f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	891b      	ldrh	r3, [r3, #8]
 80062fe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006302:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006306:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	6959      	ldr	r1, [r3, #20]
 800630e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006312:	b29b      	uxth	r3, r3
 8006314:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006318:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800631c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006320:	6800      	ldr	r0, [r0, #0]
 8006322:	f000 fffd 	bl	8007320 <USB_WritePMA>
 8006326:	e1b3      	b.n	8006690 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006328:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800632c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	6a1a      	ldr	r2, [r3, #32]
 8006334:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006338:	1ad2      	subs	r2, r2, r3
 800633a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800633e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006346:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800634a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006354:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	4413      	add	r3, r2
 8006360:	881b      	ldrh	r3, [r3, #0]
 8006362:	b29b      	uxth	r3, r3
 8006364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006368:	2b00      	cmp	r3, #0
 800636a:	f000 80c6 	beq.w	80064fa <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800636e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006372:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	673b      	str	r3, [r7, #112]	; 0x70
 800637a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800637e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	785b      	ldrb	r3, [r3, #1]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d177      	bne.n	800647a <USB_EPStartXfer+0xb18>
 800638a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800638e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	66bb      	str	r3, [r7, #104]	; 0x68
 8006396:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800639a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	461a      	mov	r2, r3
 80063a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063aa:	4413      	add	r3, r2
 80063ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80063ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	00da      	lsls	r2, r3, #3
 80063bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063be:	4413      	add	r3, r2
 80063c0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80063c4:	667b      	str	r3, [r7, #100]	; 0x64
 80063c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063c8:	881b      	ldrh	r3, [r3, #0]
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063d0:	b29a      	uxth	r2, r3
 80063d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063d4:	801a      	strh	r2, [r3, #0]
 80063d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063da:	2b3e      	cmp	r3, #62	; 0x3e
 80063dc:	d921      	bls.n	8006422 <USB_EPStartXfer+0xac0>
 80063de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063e2:	095b      	lsrs	r3, r3, #5
 80063e4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80063e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063ec:	f003 031f 	and.w	r3, r3, #31
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d104      	bne.n	80063fe <USB_EPStartXfer+0xa9c>
 80063f4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80063f8:	3b01      	subs	r3, #1
 80063fa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80063fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006400:	881b      	ldrh	r3, [r3, #0]
 8006402:	b29a      	uxth	r2, r3
 8006404:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006408:	b29b      	uxth	r3, r3
 800640a:	029b      	lsls	r3, r3, #10
 800640c:	b29b      	uxth	r3, r3
 800640e:	4313      	orrs	r3, r2
 8006410:	b29b      	uxth	r3, r3
 8006412:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006416:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800641a:	b29a      	uxth	r2, r3
 800641c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800641e:	801a      	strh	r2, [r3, #0]
 8006420:	e050      	b.n	80064c4 <USB_EPStartXfer+0xb62>
 8006422:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006426:	2b00      	cmp	r3, #0
 8006428:	d10a      	bne.n	8006440 <USB_EPStartXfer+0xade>
 800642a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800642c:	881b      	ldrh	r3, [r3, #0]
 800642e:	b29b      	uxth	r3, r3
 8006430:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006434:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006438:	b29a      	uxth	r2, r3
 800643a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800643c:	801a      	strh	r2, [r3, #0]
 800643e:	e041      	b.n	80064c4 <USB_EPStartXfer+0xb62>
 8006440:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006444:	085b      	lsrs	r3, r3, #1
 8006446:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800644a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800644e:	f003 0301 	and.w	r3, r3, #1
 8006452:	2b00      	cmp	r3, #0
 8006454:	d004      	beq.n	8006460 <USB_EPStartXfer+0xafe>
 8006456:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800645a:	3301      	adds	r3, #1
 800645c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006460:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006462:	881b      	ldrh	r3, [r3, #0]
 8006464:	b29a      	uxth	r2, r3
 8006466:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800646a:	b29b      	uxth	r3, r3
 800646c:	029b      	lsls	r3, r3, #10
 800646e:	b29b      	uxth	r3, r3
 8006470:	4313      	orrs	r3, r2
 8006472:	b29a      	uxth	r2, r3
 8006474:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006476:	801a      	strh	r2, [r3, #0]
 8006478:	e024      	b.n	80064c4 <USB_EPStartXfer+0xb62>
 800647a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800647e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	785b      	ldrb	r3, [r3, #1]
 8006486:	2b01      	cmp	r3, #1
 8006488:	d11c      	bne.n	80064c4 <USB_EPStartXfer+0xb62>
 800648a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800648e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006498:	b29b      	uxth	r3, r3
 800649a:	461a      	mov	r2, r3
 800649c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800649e:	4413      	add	r3, r2
 80064a0:	673b      	str	r3, [r7, #112]	; 0x70
 80064a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	00da      	lsls	r2, r3, #3
 80064b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064b2:	4413      	add	r3, r2
 80064b4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80064b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80064ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064be:	b29a      	uxth	r2, r3
 80064c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064c2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80064c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	895b      	ldrh	r3, [r3, #10]
 80064d0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	6959      	ldr	r1, [r3, #20]
 80064e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80064ea:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80064ee:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80064f2:	6800      	ldr	r0, [r0, #0]
 80064f4:	f000 ff14 	bl	8007320 <USB_WritePMA>
 80064f8:	e0ca      	b.n	8006690 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80064fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	785b      	ldrb	r3, [r3, #1]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d177      	bne.n	80065fa <USB_EPStartXfer+0xc98>
 800650a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800650e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006516:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800651a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006524:	b29b      	uxth	r3, r3
 8006526:	461a      	mov	r2, r3
 8006528:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800652a:	4413      	add	r3, r2
 800652c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800652e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006532:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	00da      	lsls	r2, r3, #3
 800653c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800653e:	4413      	add	r3, r2
 8006540:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006544:	67bb      	str	r3, [r7, #120]	; 0x78
 8006546:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006548:	881b      	ldrh	r3, [r3, #0]
 800654a:	b29b      	uxth	r3, r3
 800654c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006550:	b29a      	uxth	r2, r3
 8006552:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006554:	801a      	strh	r2, [r3, #0]
 8006556:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800655a:	2b3e      	cmp	r3, #62	; 0x3e
 800655c:	d921      	bls.n	80065a2 <USB_EPStartXfer+0xc40>
 800655e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006562:	095b      	lsrs	r3, r3, #5
 8006564:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006568:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800656c:	f003 031f 	and.w	r3, r3, #31
 8006570:	2b00      	cmp	r3, #0
 8006572:	d104      	bne.n	800657e <USB_EPStartXfer+0xc1c>
 8006574:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006578:	3b01      	subs	r3, #1
 800657a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800657e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006580:	881b      	ldrh	r3, [r3, #0]
 8006582:	b29a      	uxth	r2, r3
 8006584:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006588:	b29b      	uxth	r3, r3
 800658a:	029b      	lsls	r3, r3, #10
 800658c:	b29b      	uxth	r3, r3
 800658e:	4313      	orrs	r3, r2
 8006590:	b29b      	uxth	r3, r3
 8006592:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006596:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800659a:	b29a      	uxth	r2, r3
 800659c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800659e:	801a      	strh	r2, [r3, #0]
 80065a0:	e05c      	b.n	800665c <USB_EPStartXfer+0xcfa>
 80065a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d10a      	bne.n	80065c0 <USB_EPStartXfer+0xc5e>
 80065aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065ac:	881b      	ldrh	r3, [r3, #0]
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065b8:	b29a      	uxth	r2, r3
 80065ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065bc:	801a      	strh	r2, [r3, #0]
 80065be:	e04d      	b.n	800665c <USB_EPStartXfer+0xcfa>
 80065c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065c4:	085b      	lsrs	r3, r3, #1
 80065c6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80065ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065ce:	f003 0301 	and.w	r3, r3, #1
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d004      	beq.n	80065e0 <USB_EPStartXfer+0xc7e>
 80065d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80065da:	3301      	adds	r3, #1
 80065dc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80065e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065e2:	881b      	ldrh	r3, [r3, #0]
 80065e4:	b29a      	uxth	r2, r3
 80065e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	029b      	lsls	r3, r3, #10
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	4313      	orrs	r3, r2
 80065f2:	b29a      	uxth	r2, r3
 80065f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065f6:	801a      	strh	r2, [r3, #0]
 80065f8:	e030      	b.n	800665c <USB_EPStartXfer+0xcfa>
 80065fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	785b      	ldrb	r3, [r3, #1]
 8006606:	2b01      	cmp	r3, #1
 8006608:	d128      	bne.n	800665c <USB_EPStartXfer+0xcfa>
 800660a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800660e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006618:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800661c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006626:	b29b      	uxth	r3, r3
 8006628:	461a      	mov	r2, r3
 800662a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800662e:	4413      	add	r3, r2
 8006630:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006634:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006638:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	00da      	lsls	r2, r3, #3
 8006642:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006646:	4413      	add	r3, r2
 8006648:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800664c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006650:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006654:	b29a      	uxth	r2, r3
 8006656:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800665a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800665c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006660:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	891b      	ldrh	r3, [r3, #8]
 8006668:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800666c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006670:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	6959      	ldr	r1, [r3, #20]
 8006678:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800667c:	b29b      	uxth	r3, r3
 800667e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006682:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006686:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800668a:	6800      	ldr	r0, [r0, #0]
 800668c:	f000 fe48 	bl	8007320 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006690:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006694:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800669e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	4413      	add	r3, r2
 80066aa:	881b      	ldrh	r3, [r3, #0]
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066b6:	817b      	strh	r3, [r7, #10]
 80066b8:	897b      	ldrh	r3, [r7, #10]
 80066ba:	f083 0310 	eor.w	r3, r3, #16
 80066be:	817b      	strh	r3, [r7, #10]
 80066c0:	897b      	ldrh	r3, [r7, #10]
 80066c2:	f083 0320 	eor.w	r3, r3, #32
 80066c6:	817b      	strh	r3, [r7, #10]
 80066c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	441a      	add	r2, r3
 80066e2:	897b      	ldrh	r3, [r7, #10]
 80066e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	8013      	strh	r3, [r2, #0]
 80066f8:	f000 bcde 	b.w	80070b8 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80066fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006700:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	7b1b      	ldrb	r3, [r3, #12]
 8006708:	2b00      	cmp	r3, #0
 800670a:	f040 80bb 	bne.w	8006884 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800670e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006712:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	699a      	ldr	r2, [r3, #24]
 800671a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800671e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	691b      	ldr	r3, [r3, #16]
 8006726:	429a      	cmp	r2, r3
 8006728:	d917      	bls.n	800675a <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800672a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800672e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800673a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800673e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	699a      	ldr	r2, [r3, #24]
 8006746:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800674a:	1ad2      	subs	r2, r2, r3
 800674c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006750:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	619a      	str	r2, [r3, #24]
 8006758:	e00e      	b.n	8006778 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800675a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800675e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800676a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800676e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2200      	movs	r2, #0
 8006776:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006778:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800677c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006786:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800678a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006794:	b29b      	uxth	r3, r3
 8006796:	461a      	mov	r2, r3
 8006798:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800679c:	4413      	add	r3, r2
 800679e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80067a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	00da      	lsls	r2, r3, #3
 80067b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80067b4:	4413      	add	r3, r2
 80067b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80067ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80067be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80067c2:	881b      	ldrh	r3, [r3, #0]
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067ca:	b29a      	uxth	r2, r3
 80067cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80067d0:	801a      	strh	r2, [r3, #0]
 80067d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067d6:	2b3e      	cmp	r3, #62	; 0x3e
 80067d8:	d924      	bls.n	8006824 <USB_EPStartXfer+0xec2>
 80067da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067de:	095b      	lsrs	r3, r3, #5
 80067e0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80067e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067e8:	f003 031f 	and.w	r3, r3, #31
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d104      	bne.n	80067fa <USB_EPStartXfer+0xe98>
 80067f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80067f4:	3b01      	subs	r3, #1
 80067f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80067fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80067fe:	881b      	ldrh	r3, [r3, #0]
 8006800:	b29a      	uxth	r2, r3
 8006802:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006806:	b29b      	uxth	r3, r3
 8006808:	029b      	lsls	r3, r3, #10
 800680a:	b29b      	uxth	r3, r3
 800680c:	4313      	orrs	r3, r2
 800680e:	b29b      	uxth	r3, r3
 8006810:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006814:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006818:	b29a      	uxth	r2, r3
 800681a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800681e:	801a      	strh	r2, [r3, #0]
 8006820:	f000 bc10 	b.w	8007044 <USB_EPStartXfer+0x16e2>
 8006824:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006828:	2b00      	cmp	r3, #0
 800682a:	d10c      	bne.n	8006846 <USB_EPStartXfer+0xee4>
 800682c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006830:	881b      	ldrh	r3, [r3, #0]
 8006832:	b29b      	uxth	r3, r3
 8006834:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006838:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800683c:	b29a      	uxth	r2, r3
 800683e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006842:	801a      	strh	r2, [r3, #0]
 8006844:	e3fe      	b.n	8007044 <USB_EPStartXfer+0x16e2>
 8006846:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800684a:	085b      	lsrs	r3, r3, #1
 800684c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006850:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006854:	f003 0301 	and.w	r3, r3, #1
 8006858:	2b00      	cmp	r3, #0
 800685a:	d004      	beq.n	8006866 <USB_EPStartXfer+0xf04>
 800685c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006860:	3301      	adds	r3, #1
 8006862:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006866:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800686a:	881b      	ldrh	r3, [r3, #0]
 800686c:	b29a      	uxth	r2, r3
 800686e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006872:	b29b      	uxth	r3, r3
 8006874:	029b      	lsls	r3, r3, #10
 8006876:	b29b      	uxth	r3, r3
 8006878:	4313      	orrs	r3, r2
 800687a:	b29a      	uxth	r2, r3
 800687c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006880:	801a      	strh	r2, [r3, #0]
 8006882:	e3df      	b.n	8007044 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006884:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006888:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	78db      	ldrb	r3, [r3, #3]
 8006890:	2b02      	cmp	r3, #2
 8006892:	f040 8218 	bne.w	8006cc6 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006896:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800689a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	785b      	ldrb	r3, [r3, #1]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	f040 809d 	bne.w	80069e2 <USB_EPStartXfer+0x1080>
 80068a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80068b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	461a      	mov	r2, r3
 80068c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068cc:	4413      	add	r3, r2
 80068ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80068d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	00da      	lsls	r2, r3, #3
 80068e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068e4:	4413      	add	r3, r2
 80068e6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80068ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80068ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80068f2:	881b      	ldrh	r3, [r3, #0]
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068fa:	b29a      	uxth	r2, r3
 80068fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006900:	801a      	strh	r2, [r3, #0]
 8006902:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006906:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	2b3e      	cmp	r3, #62	; 0x3e
 8006910:	d92b      	bls.n	800696a <USB_EPStartXfer+0x1008>
 8006912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006916:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	095b      	lsrs	r3, r3, #5
 8006920:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006924:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006928:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	f003 031f 	and.w	r3, r3, #31
 8006934:	2b00      	cmp	r3, #0
 8006936:	d104      	bne.n	8006942 <USB_EPStartXfer+0xfe0>
 8006938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800693c:	3b01      	subs	r3, #1
 800693e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006942:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006946:	881b      	ldrh	r3, [r3, #0]
 8006948:	b29a      	uxth	r2, r3
 800694a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800694e:	b29b      	uxth	r3, r3
 8006950:	029b      	lsls	r3, r3, #10
 8006952:	b29b      	uxth	r3, r3
 8006954:	4313      	orrs	r3, r2
 8006956:	b29b      	uxth	r3, r3
 8006958:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800695c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006960:	b29a      	uxth	r2, r3
 8006962:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006966:	801a      	strh	r2, [r3, #0]
 8006968:	e070      	b.n	8006a4c <USB_EPStartXfer+0x10ea>
 800696a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800696e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d10c      	bne.n	8006994 <USB_EPStartXfer+0x1032>
 800697a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800697e:	881b      	ldrh	r3, [r3, #0]
 8006980:	b29b      	uxth	r3, r3
 8006982:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006986:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800698a:	b29a      	uxth	r2, r3
 800698c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006990:	801a      	strh	r2, [r3, #0]
 8006992:	e05b      	b.n	8006a4c <USB_EPStartXfer+0x10ea>
 8006994:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006998:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	085b      	lsrs	r3, r3, #1
 80069a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80069a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	f003 0301 	and.w	r3, r3, #1
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d004      	beq.n	80069c4 <USB_EPStartXfer+0x1062>
 80069ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069be:	3301      	adds	r3, #1
 80069c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80069c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80069c8:	881b      	ldrh	r3, [r3, #0]
 80069ca:	b29a      	uxth	r2, r3
 80069cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	029b      	lsls	r3, r3, #10
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	4313      	orrs	r3, r2
 80069d8:	b29a      	uxth	r2, r3
 80069da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80069de:	801a      	strh	r2, [r3, #0]
 80069e0:	e034      	b.n	8006a4c <USB_EPStartXfer+0x10ea>
 80069e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	785b      	ldrb	r3, [r3, #1]
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d12c      	bne.n	8006a4c <USB_EPStartXfer+0x10ea>
 80069f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	461a      	mov	r2, r3
 8006a12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006a16:	4413      	add	r3, r2
 8006a18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	00da      	lsls	r2, r3, #3
 8006a2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006a2e:	4413      	add	r3, r2
 8006a30:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006a4a:	801a      	strh	r2, [r3, #0]
 8006a4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006a5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	785b      	ldrb	r3, [r3, #1]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	f040 809d 	bne.w	8006ba6 <USB_EPStartXfer+0x1244>
 8006a6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006a7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a90:	4413      	add	r3, r2
 8006a92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006a96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	00da      	lsls	r2, r3, #3
 8006aa4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006aa8:	4413      	add	r3, r2
 8006aaa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006aae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006ab2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ab6:	881b      	ldrh	r3, [r3, #0]
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006abe:	b29a      	uxth	r2, r3
 8006ac0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ac4:	801a      	strh	r2, [r3, #0]
 8006ac6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	2b3e      	cmp	r3, #62	; 0x3e
 8006ad4:	d92b      	bls.n	8006b2e <USB_EPStartXfer+0x11cc>
 8006ad6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ada:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	095b      	lsrs	r3, r3, #5
 8006ae4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006ae8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	691b      	ldr	r3, [r3, #16]
 8006af4:	f003 031f 	and.w	r3, r3, #31
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d104      	bne.n	8006b06 <USB_EPStartXfer+0x11a4>
 8006afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b00:	3b01      	subs	r3, #1
 8006b02:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006b06:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b0a:	881b      	ldrh	r3, [r3, #0]
 8006b0c:	b29a      	uxth	r2, r3
 8006b0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	029b      	lsls	r3, r3, #10
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b24:	b29a      	uxth	r2, r3
 8006b26:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b2a:	801a      	strh	r2, [r3, #0]
 8006b2c:	e069      	b.n	8006c02 <USB_EPStartXfer+0x12a0>
 8006b2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d10c      	bne.n	8006b58 <USB_EPStartXfer+0x11f6>
 8006b3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b42:	881b      	ldrh	r3, [r3, #0]
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b4e:	b29a      	uxth	r2, r3
 8006b50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b54:	801a      	strh	r2, [r3, #0]
 8006b56:	e054      	b.n	8006c02 <USB_EPStartXfer+0x12a0>
 8006b58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	085b      	lsrs	r3, r3, #1
 8006b66:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006b6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	f003 0301 	and.w	r3, r3, #1
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d004      	beq.n	8006b88 <USB_EPStartXfer+0x1226>
 8006b7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b82:	3301      	adds	r3, #1
 8006b84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006b88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b8c:	881b      	ldrh	r3, [r3, #0]
 8006b8e:	b29a      	uxth	r2, r3
 8006b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	029b      	lsls	r3, r3, #10
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	b29a      	uxth	r2, r3
 8006b9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ba2:	801a      	strh	r2, [r3, #0]
 8006ba4:	e02d      	b.n	8006c02 <USB_EPStartXfer+0x12a0>
 8006ba6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006baa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	785b      	ldrb	r3, [r3, #1]
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d125      	bne.n	8006c02 <USB_EPStartXfer+0x12a0>
 8006bb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006bcc:	4413      	add	r3, r2
 8006bce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006bd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	00da      	lsls	r2, r3, #3
 8006be0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006be4:	4413      	add	r3, r2
 8006be6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006bea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006bee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c00:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006c02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	69db      	ldr	r3, [r3, #28]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	f000 8218 	beq.w	8007044 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006c14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	4413      	add	r3, r2
 8006c2e:	881b      	ldrh	r3, [r3, #0]
 8006c30:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006c34:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006c38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d005      	beq.n	8006c4c <USB_EPStartXfer+0x12ea>
 8006c40:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d10d      	bne.n	8006c68 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006c4c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006c50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	f040 81f5 	bne.w	8007044 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006c5a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	f040 81ee 	bne.w	8007044 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006c68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	4413      	add	r3, r2
 8006c82:	881b      	ldrh	r3, [r3, #0]
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c8e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006c92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ca0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	441a      	add	r2, r3
 8006cac:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006cb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cbc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	8013      	strh	r3, [r2, #0]
 8006cc4:	e1be      	b.n	8007044 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006cc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	78db      	ldrb	r3, [r3, #3]
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	f040 81b4 	bne.w	8007040 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006cd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	699a      	ldr	r2, [r3, #24]
 8006ce4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ce8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	691b      	ldr	r3, [r3, #16]
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d917      	bls.n	8006d24 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006cf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	691b      	ldr	r3, [r3, #16]
 8006d00:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8006d04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	699a      	ldr	r2, [r3, #24]
 8006d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d14:	1ad2      	subs	r2, r2, r3
 8006d16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	619a      	str	r2, [r3, #24]
 8006d22:	e00e      	b.n	8006d42 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006d24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	699b      	ldr	r3, [r3, #24]
 8006d30:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8006d34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006d42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	785b      	ldrb	r3, [r3, #1]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	f040 8085 	bne.w	8006e5e <USB_EPStartXfer+0x14fc>
 8006d54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006d62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	461a      	mov	r2, r3
 8006d74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006d78:	4413      	add	r3, r2
 8006d7a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006d7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	00da      	lsls	r2, r3, #3
 8006d8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006d90:	4413      	add	r3, r2
 8006d92:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d9e:	881b      	ldrh	r3, [r3, #0]
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006da6:	b29a      	uxth	r2, r3
 8006da8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006dac:	801a      	strh	r2, [r3, #0]
 8006dae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006db2:	2b3e      	cmp	r3, #62	; 0x3e
 8006db4:	d923      	bls.n	8006dfe <USB_EPStartXfer+0x149c>
 8006db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dba:	095b      	lsrs	r3, r3, #5
 8006dbc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dc4:	f003 031f 	and.w	r3, r3, #31
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d104      	bne.n	8006dd6 <USB_EPStartXfer+0x1474>
 8006dcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dd0:	3b01      	subs	r3, #1
 8006dd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006dd6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006dda:	881b      	ldrh	r3, [r3, #0]
 8006ddc:	b29a      	uxth	r2, r3
 8006dde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	029b      	lsls	r3, r3, #10
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	4313      	orrs	r3, r2
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006df0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006df4:	b29a      	uxth	r2, r3
 8006df6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006dfa:	801a      	strh	r2, [r3, #0]
 8006dfc:	e060      	b.n	8006ec0 <USB_EPStartXfer+0x155e>
 8006dfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d10c      	bne.n	8006e20 <USB_EPStartXfer+0x14be>
 8006e06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e0a:	881b      	ldrh	r3, [r3, #0]
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e16:	b29a      	uxth	r2, r3
 8006e18:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e1c:	801a      	strh	r2, [r3, #0]
 8006e1e:	e04f      	b.n	8006ec0 <USB_EPStartXfer+0x155e>
 8006e20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e24:	085b      	lsrs	r3, r3, #1
 8006e26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e2e:	f003 0301 	and.w	r3, r3, #1
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d004      	beq.n	8006e40 <USB_EPStartXfer+0x14de>
 8006e36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006e40:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e44:	881b      	ldrh	r3, [r3, #0]
 8006e46:	b29a      	uxth	r2, r3
 8006e48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	029b      	lsls	r3, r3, #10
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	4313      	orrs	r3, r2
 8006e54:	b29a      	uxth	r2, r3
 8006e56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e5a:	801a      	strh	r2, [r3, #0]
 8006e5c:	e030      	b.n	8006ec0 <USB_EPStartXfer+0x155e>
 8006e5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	785b      	ldrb	r3, [r3, #1]
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d128      	bne.n	8006ec0 <USB_EPStartXfer+0x155e>
 8006e6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006e7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e92:	4413      	add	r3, r2
 8006e94:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006e98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	00da      	lsls	r2, r3, #3
 8006ea6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006eaa:	4413      	add	r3, r2
 8006eac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006eb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eb8:	b29a      	uxth	r2, r3
 8006eba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006ebe:	801a      	strh	r2, [r3, #0]
 8006ec0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ec4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006ece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ed2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	785b      	ldrb	r3, [r3, #1]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	f040 8085 	bne.w	8006fea <USB_EPStartXfer+0x1688>
 8006ee0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ee4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006eee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ef2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	461a      	mov	r2, r3
 8006f00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006f04:	4413      	add	r3, r2
 8006f06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006f0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	00da      	lsls	r2, r3, #3
 8006f18:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006f1c:	4413      	add	r3, r2
 8006f1e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f22:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f2a:	881b      	ldrh	r3, [r3, #0]
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f32:	b29a      	uxth	r2, r3
 8006f34:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f38:	801a      	strh	r2, [r3, #0]
 8006f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f3e:	2b3e      	cmp	r3, #62	; 0x3e
 8006f40:	d923      	bls.n	8006f8a <USB_EPStartXfer+0x1628>
 8006f42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f46:	095b      	lsrs	r3, r3, #5
 8006f48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006f4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f50:	f003 031f 	and.w	r3, r3, #31
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d104      	bne.n	8006f62 <USB_EPStartXfer+0x1600>
 8006f58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f5c:	3b01      	subs	r3, #1
 8006f5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006f62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f66:	881b      	ldrh	r3, [r3, #0]
 8006f68:	b29a      	uxth	r2, r3
 8006f6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	029b      	lsls	r3, r3, #10
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	4313      	orrs	r3, r2
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f80:	b29a      	uxth	r2, r3
 8006f82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f86:	801a      	strh	r2, [r3, #0]
 8006f88:	e05c      	b.n	8007044 <USB_EPStartXfer+0x16e2>
 8006f8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d10c      	bne.n	8006fac <USB_EPStartXfer+0x164a>
 8006f92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f96:	881b      	ldrh	r3, [r3, #0]
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006fa8:	801a      	strh	r2, [r3, #0]
 8006faa:	e04b      	b.n	8007044 <USB_EPStartXfer+0x16e2>
 8006fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fb0:	085b      	lsrs	r3, r3, #1
 8006fb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006fb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fba:	f003 0301 	and.w	r3, r3, #1
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d004      	beq.n	8006fcc <USB_EPStartXfer+0x166a>
 8006fc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006fcc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006fd0:	881b      	ldrh	r3, [r3, #0]
 8006fd2:	b29a      	uxth	r2, r3
 8006fd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	029b      	lsls	r3, r3, #10
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	b29a      	uxth	r2, r3
 8006fe2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006fe6:	801a      	strh	r2, [r3, #0]
 8006fe8:	e02c      	b.n	8007044 <USB_EPStartXfer+0x16e2>
 8006fea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	785b      	ldrb	r3, [r3, #1]
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d124      	bne.n	8007044 <USB_EPStartXfer+0x16e2>
 8006ffa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ffe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007008:	b29b      	uxth	r3, r3
 800700a:	461a      	mov	r2, r3
 800700c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007010:	4413      	add	r3, r2
 8007012:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007016:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800701a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	00da      	lsls	r2, r3, #3
 8007024:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007028:	4413      	add	r3, r2
 800702a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800702e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007032:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007036:	b29a      	uxth	r2, r3
 8007038:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800703c:	801a      	strh	r2, [r3, #0]
 800703e:	e001      	b.n	8007044 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	e03a      	b.n	80070ba <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007044:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007048:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007052:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	4413      	add	r3, r2
 800705e:	881b      	ldrh	r3, [r3, #0]
 8007060:	b29b      	uxth	r3, r3
 8007062:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800706a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800706e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007072:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007076:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800707a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800707e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007082:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007086:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800708a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007094:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	441a      	add	r2, r3
 80070a0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80070a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b085      	sub	sp, #20
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	785b      	ldrb	r3, [r3, #1]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d020      	beq.n	8007118 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	4413      	add	r3, r2
 80070e0:	881b      	ldrh	r3, [r3, #0]
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070ec:	81bb      	strh	r3, [r7, #12]
 80070ee:	89bb      	ldrh	r3, [r7, #12]
 80070f0:	f083 0310 	eor.w	r3, r3, #16
 80070f4:	81bb      	strh	r3, [r7, #12]
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	009b      	lsls	r3, r3, #2
 80070fe:	441a      	add	r2, r3
 8007100:	89bb      	ldrh	r3, [r7, #12]
 8007102:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007106:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800710a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800710e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007112:	b29b      	uxth	r3, r3
 8007114:	8013      	strh	r3, [r2, #0]
 8007116:	e01f      	b.n	8007158 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	4413      	add	r3, r2
 8007122:	881b      	ldrh	r3, [r3, #0]
 8007124:	b29b      	uxth	r3, r3
 8007126:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800712a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800712e:	81fb      	strh	r3, [r7, #14]
 8007130:	89fb      	ldrh	r3, [r7, #14]
 8007132:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007136:	81fb      	strh	r3, [r7, #14]
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	441a      	add	r2, r3
 8007142:	89fb      	ldrh	r3, [r7, #14]
 8007144:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007148:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800714c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007154:	b29b      	uxth	r3, r3
 8007156:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007158:	2300      	movs	r3, #0
}
 800715a:	4618      	mov	r0, r3
 800715c:	3714      	adds	r7, #20
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr

08007166 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007166:	b480      	push	{r7}
 8007168:	b087      	sub	sp, #28
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
 800716e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	7b1b      	ldrb	r3, [r3, #12]
 8007174:	2b00      	cmp	r3, #0
 8007176:	f040 809d 	bne.w	80072b4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	785b      	ldrb	r3, [r3, #1]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d04c      	beq.n	800721c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	4413      	add	r3, r2
 800718c:	881b      	ldrh	r3, [r3, #0]
 800718e:	823b      	strh	r3, [r7, #16]
 8007190:	8a3b      	ldrh	r3, [r7, #16]
 8007192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007196:	2b00      	cmp	r3, #0
 8007198:	d01b      	beq.n	80071d2 <USB_EPClearStall+0x6c>
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	4413      	add	r3, r2
 80071a4:	881b      	ldrh	r3, [r3, #0]
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071b0:	81fb      	strh	r3, [r7, #14]
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	441a      	add	r2, r3
 80071bc:	89fb      	ldrh	r3, [r7, #14]
 80071be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	78db      	ldrb	r3, [r3, #3]
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d06c      	beq.n	80072b4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	4413      	add	r3, r2
 80071e4:	881b      	ldrh	r3, [r3, #0]
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071f0:	81bb      	strh	r3, [r7, #12]
 80071f2:	89bb      	ldrh	r3, [r7, #12]
 80071f4:	f083 0320 	eor.w	r3, r3, #32
 80071f8:	81bb      	strh	r3, [r7, #12]
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	441a      	add	r2, r3
 8007204:	89bb      	ldrh	r3, [r7, #12]
 8007206:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800720a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800720e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007212:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007216:	b29b      	uxth	r3, r3
 8007218:	8013      	strh	r3, [r2, #0]
 800721a:	e04b      	b.n	80072b4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	4413      	add	r3, r2
 8007226:	881b      	ldrh	r3, [r3, #0]
 8007228:	82fb      	strh	r3, [r7, #22]
 800722a:	8afb      	ldrh	r3, [r7, #22]
 800722c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007230:	2b00      	cmp	r3, #0
 8007232:	d01b      	beq.n	800726c <USB_EPClearStall+0x106>
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	4413      	add	r3, r2
 800723e:	881b      	ldrh	r3, [r3, #0]
 8007240:	b29b      	uxth	r3, r3
 8007242:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800724a:	82bb      	strh	r3, [r7, #20]
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	009b      	lsls	r3, r3, #2
 8007254:	441a      	add	r2, r3
 8007256:	8abb      	ldrh	r3, [r7, #20]
 8007258:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800725c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007260:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007268:	b29b      	uxth	r3, r3
 800726a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	4413      	add	r3, r2
 8007276:	881b      	ldrh	r3, [r3, #0]
 8007278:	b29b      	uxth	r3, r3
 800727a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800727e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007282:	827b      	strh	r3, [r7, #18]
 8007284:	8a7b      	ldrh	r3, [r7, #18]
 8007286:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800728a:	827b      	strh	r3, [r7, #18]
 800728c:	8a7b      	ldrh	r3, [r7, #18]
 800728e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007292:	827b      	strh	r3, [r7, #18]
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	441a      	add	r2, r3
 800729e:	8a7b      	ldrh	r3, [r7, #18]
 80072a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80072b4:	2300      	movs	r3, #0
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	371c      	adds	r7, #28
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr

080072c2 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80072c2:	b480      	push	{r7}
 80072c4:	b083      	sub	sp, #12
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	6078      	str	r0, [r7, #4]
 80072ca:	460b      	mov	r3, r1
 80072cc:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80072ce:	78fb      	ldrb	r3, [r7, #3]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d103      	bne.n	80072dc <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2280      	movs	r2, #128	; 0x80
 80072d8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	370c      	adds	r7, #12
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr

080072ea <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80072ea:	b480      	push	{r7}
 80072ec:	b083      	sub	sp, #12
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	370c      	adds	r7, #12
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007300:	b480      	push	{r7}
 8007302:	b085      	sub	sp, #20
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800730e:	b29b      	uxth	r3, r3
 8007310:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007312:	68fb      	ldr	r3, [r7, #12]
}
 8007314:	4618      	mov	r0, r3
 8007316:	3714      	adds	r7, #20
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007320:	b480      	push	{r7}
 8007322:	b08b      	sub	sp, #44	; 0x2c
 8007324:	af00      	add	r7, sp, #0
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	4611      	mov	r1, r2
 800732c:	461a      	mov	r2, r3
 800732e:	460b      	mov	r3, r1
 8007330:	80fb      	strh	r3, [r7, #6]
 8007332:	4613      	mov	r3, r2
 8007334:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007336:	88bb      	ldrh	r3, [r7, #4]
 8007338:	3301      	adds	r3, #1
 800733a:	085b      	lsrs	r3, r3, #1
 800733c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007346:	88fa      	ldrh	r2, [r7, #6]
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	4413      	add	r3, r2
 800734c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007350:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007352:	69bb      	ldr	r3, [r7, #24]
 8007354:	627b      	str	r3, [r7, #36]	; 0x24
 8007356:	e01b      	b.n	8007390 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	3301      	adds	r3, #1
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	021b      	lsls	r3, r3, #8
 8007366:	b21a      	sxth	r2, r3
 8007368:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800736c:	4313      	orrs	r3, r2
 800736e:	b21b      	sxth	r3, r3
 8007370:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007372:	6a3b      	ldr	r3, [r7, #32]
 8007374:	8a7a      	ldrh	r2, [r7, #18]
 8007376:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007378:	6a3b      	ldr	r3, [r7, #32]
 800737a:	3302      	adds	r3, #2
 800737c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800737e:	69fb      	ldr	r3, [r7, #28]
 8007380:	3301      	adds	r3, #1
 8007382:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	3301      	adds	r3, #1
 8007388:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800738a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738c:	3b01      	subs	r3, #1
 800738e:	627b      	str	r3, [r7, #36]	; 0x24
 8007390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007392:	2b00      	cmp	r3, #0
 8007394:	d1e0      	bne.n	8007358 <USB_WritePMA+0x38>
  }
}
 8007396:	bf00      	nop
 8007398:	bf00      	nop
 800739a:	372c      	adds	r7, #44	; 0x2c
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b08b      	sub	sp, #44	; 0x2c
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	4611      	mov	r1, r2
 80073b0:	461a      	mov	r2, r3
 80073b2:	460b      	mov	r3, r1
 80073b4:	80fb      	strh	r3, [r7, #6]
 80073b6:	4613      	mov	r3, r2
 80073b8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80073ba:	88bb      	ldrh	r3, [r7, #4]
 80073bc:	085b      	lsrs	r3, r3, #1
 80073be:	b29b      	uxth	r3, r3
 80073c0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80073ca:	88fa      	ldrh	r2, [r7, #6]
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	4413      	add	r3, r2
 80073d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073d4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	627b      	str	r3, [r7, #36]	; 0x24
 80073da:	e018      	b.n	800740e <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80073dc:	6a3b      	ldr	r3, [r7, #32]
 80073de:	881b      	ldrh	r3, [r3, #0]
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80073e4:	6a3b      	ldr	r3, [r7, #32]
 80073e6:	3302      	adds	r3, #2
 80073e8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	b2da      	uxtb	r2, r3
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80073f2:	69fb      	ldr	r3, [r7, #28]
 80073f4:	3301      	adds	r3, #1
 80073f6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	0a1b      	lsrs	r3, r3, #8
 80073fc:	b2da      	uxtb	r2, r3
 80073fe:	69fb      	ldr	r3, [r7, #28]
 8007400:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007402:	69fb      	ldr	r3, [r7, #28]
 8007404:	3301      	adds	r3, #1
 8007406:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740a:	3b01      	subs	r3, #1
 800740c:	627b      	str	r3, [r7, #36]	; 0x24
 800740e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007410:	2b00      	cmp	r3, #0
 8007412:	d1e3      	bne.n	80073dc <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007414:	88bb      	ldrh	r3, [r7, #4]
 8007416:	f003 0301 	and.w	r3, r3, #1
 800741a:	b29b      	uxth	r3, r3
 800741c:	2b00      	cmp	r3, #0
 800741e:	d007      	beq.n	8007430 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8007420:	6a3b      	ldr	r3, [r7, #32]
 8007422:	881b      	ldrh	r3, [r3, #0]
 8007424:	b29b      	uxth	r3, r3
 8007426:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	b2da      	uxtb	r2, r3
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	701a      	strb	r2, [r3, #0]
  }
}
 8007430:	bf00      	nop
 8007432:	372c      	adds	r7, #44	; 0x2c
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	460b      	mov	r3, r1
 8007446:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007448:	2300      	movs	r3, #0
 800744a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	7c1b      	ldrb	r3, [r3, #16]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d115      	bne.n	8007480 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007454:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007458:	2202      	movs	r2, #2
 800745a:	2181      	movs	r1, #129	; 0x81
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f001 fe46 	bl	80090ee <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2201      	movs	r2, #1
 8007466:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007468:	f44f 7300 	mov.w	r3, #512	; 0x200
 800746c:	2202      	movs	r2, #2
 800746e:	2101      	movs	r1, #1
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f001 fe3c 	bl	80090ee <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2201      	movs	r2, #1
 800747a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800747e:	e012      	b.n	80074a6 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007480:	2340      	movs	r3, #64	; 0x40
 8007482:	2202      	movs	r2, #2
 8007484:	2181      	movs	r1, #129	; 0x81
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f001 fe31 	bl	80090ee <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007492:	2340      	movs	r3, #64	; 0x40
 8007494:	2202      	movs	r2, #2
 8007496:	2101      	movs	r1, #1
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f001 fe28 	bl	80090ee <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2201      	movs	r2, #1
 80074a2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80074a6:	2308      	movs	r3, #8
 80074a8:	2203      	movs	r2, #3
 80074aa:	2182      	movs	r1, #130	; 0x82
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f001 fe1e 	bl	80090ee <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2201      	movs	r2, #1
 80074b6:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80074b8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80074bc:	f001 ff40 	bl	8009340 <USBD_static_malloc>
 80074c0:	4602      	mov	r2, r0
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d102      	bne.n	80074d8 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80074d2:	2301      	movs	r3, #1
 80074d4:	73fb      	strb	r3, [r7, #15]
 80074d6:	e026      	b.n	8007526 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074de:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	7c1b      	ldrb	r3, [r3, #16]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d109      	bne.n	8007516 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007508:	f44f 7300 	mov.w	r3, #512	; 0x200
 800750c:	2101      	movs	r1, #1
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f001 fedf 	bl	80092d2 <USBD_LL_PrepareReceive>
 8007514:	e007      	b.n	8007526 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800751c:	2340      	movs	r3, #64	; 0x40
 800751e:	2101      	movs	r1, #1
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f001 fed6 	bl	80092d2 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007526:	7bfb      	ldrb	r3, [r7, #15]
}
 8007528:	4618      	mov	r0, r3
 800752a:	3710      	adds	r7, #16
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	460b      	mov	r3, r1
 800753a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800753c:	2300      	movs	r3, #0
 800753e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007540:	2181      	movs	r1, #129	; 0x81
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f001 fdf9 	bl	800913a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800754e:	2101      	movs	r1, #1
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f001 fdf2 	bl	800913a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800755e:	2182      	movs	r1, #130	; 0x82
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f001 fdea 	bl	800913a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007572:	2b00      	cmp	r3, #0
 8007574:	d00e      	beq.n	8007594 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007586:	4618      	mov	r0, r3
 8007588:	f001 fee8 	bl	800935c <USBD_static_free>
    pdev->pClassData = NULL;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007594:	7bfb      	ldrb	r3, [r7, #15]
}
 8007596:	4618      	mov	r0, r3
 8007598:	3710      	adds	r7, #16
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}

0800759e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800759e:	b580      	push	{r7, lr}
 80075a0:	b086      	sub	sp, #24
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
 80075a6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075ae:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80075b0:	2300      	movs	r3, #0
 80075b2:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80075b4:	2300      	movs	r3, #0
 80075b6:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80075b8:	2300      	movs	r3, #0
 80075ba:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d039      	beq.n	800763c <USBD_CDC_Setup+0x9e>
 80075c8:	2b20      	cmp	r3, #32
 80075ca:	d17f      	bne.n	80076cc <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	88db      	ldrh	r3, [r3, #6]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d029      	beq.n	8007628 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	b25b      	sxtb	r3, r3
 80075da:	2b00      	cmp	r3, #0
 80075dc:	da11      	bge.n	8007602 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	683a      	ldr	r2, [r7, #0]
 80075e8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80075ea:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80075ec:	683a      	ldr	r2, [r7, #0]
 80075ee:	88d2      	ldrh	r2, [r2, #6]
 80075f0:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80075f2:	6939      	ldr	r1, [r7, #16]
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	88db      	ldrh	r3, [r3, #6]
 80075f8:	461a      	mov	r2, r3
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f001 f9e3 	bl	80089c6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007600:	e06b      	b.n	80076da <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	785a      	ldrb	r2, [r3, #1]
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	88db      	ldrh	r3, [r3, #6]
 8007610:	b2da      	uxtb	r2, r3
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007618:	6939      	ldr	r1, [r7, #16]
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	88db      	ldrh	r3, [r3, #6]
 800761e:	461a      	mov	r2, r3
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f001 f9fe 	bl	8008a22 <USBD_CtlPrepareRx>
      break;
 8007626:	e058      	b.n	80076da <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	683a      	ldr	r2, [r7, #0]
 8007632:	7850      	ldrb	r0, [r2, #1]
 8007634:	2200      	movs	r2, #0
 8007636:	6839      	ldr	r1, [r7, #0]
 8007638:	4798      	blx	r3
      break;
 800763a:	e04e      	b.n	80076da <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	785b      	ldrb	r3, [r3, #1]
 8007640:	2b0b      	cmp	r3, #11
 8007642:	d02e      	beq.n	80076a2 <USBD_CDC_Setup+0x104>
 8007644:	2b0b      	cmp	r3, #11
 8007646:	dc38      	bgt.n	80076ba <USBD_CDC_Setup+0x11c>
 8007648:	2b00      	cmp	r3, #0
 800764a:	d002      	beq.n	8007652 <USBD_CDC_Setup+0xb4>
 800764c:	2b0a      	cmp	r3, #10
 800764e:	d014      	beq.n	800767a <USBD_CDC_Setup+0xdc>
 8007650:	e033      	b.n	80076ba <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007658:	2b03      	cmp	r3, #3
 800765a:	d107      	bne.n	800766c <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800765c:	f107 030c 	add.w	r3, r7, #12
 8007660:	2202      	movs	r2, #2
 8007662:	4619      	mov	r1, r3
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f001 f9ae 	bl	80089c6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800766a:	e02e      	b.n	80076ca <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800766c:	6839      	ldr	r1, [r7, #0]
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f001 f93e 	bl	80088f0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007674:	2302      	movs	r3, #2
 8007676:	75fb      	strb	r3, [r7, #23]
          break;
 8007678:	e027      	b.n	80076ca <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007680:	2b03      	cmp	r3, #3
 8007682:	d107      	bne.n	8007694 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007684:	f107 030f 	add.w	r3, r7, #15
 8007688:	2201      	movs	r2, #1
 800768a:	4619      	mov	r1, r3
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f001 f99a 	bl	80089c6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007692:	e01a      	b.n	80076ca <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007694:	6839      	ldr	r1, [r7, #0]
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f001 f92a 	bl	80088f0 <USBD_CtlError>
            ret = USBD_FAIL;
 800769c:	2302      	movs	r3, #2
 800769e:	75fb      	strb	r3, [r7, #23]
          break;
 80076a0:	e013      	b.n	80076ca <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076a8:	2b03      	cmp	r3, #3
 80076aa:	d00d      	beq.n	80076c8 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80076ac:	6839      	ldr	r1, [r7, #0]
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f001 f91e 	bl	80088f0 <USBD_CtlError>
            ret = USBD_FAIL;
 80076b4:	2302      	movs	r3, #2
 80076b6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80076b8:	e006      	b.n	80076c8 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80076ba:	6839      	ldr	r1, [r7, #0]
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f001 f917 	bl	80088f0 <USBD_CtlError>
          ret = USBD_FAIL;
 80076c2:	2302      	movs	r3, #2
 80076c4:	75fb      	strb	r3, [r7, #23]
          break;
 80076c6:	e000      	b.n	80076ca <USBD_CDC_Setup+0x12c>
          break;
 80076c8:	bf00      	nop
      }
      break;
 80076ca:	e006      	b.n	80076da <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80076cc:	6839      	ldr	r1, [r7, #0]
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f001 f90e 	bl	80088f0 <USBD_CtlError>
      ret = USBD_FAIL;
 80076d4:	2302      	movs	r3, #2
 80076d6:	75fb      	strb	r3, [r7, #23]
      break;
 80076d8:	bf00      	nop
  }

  return ret;
 80076da:	7dfb      	ldrb	r3, [r7, #23]
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3718      	adds	r7, #24
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	460b      	mov	r3, r1
 80076ee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076f6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076fe:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007706:	2b00      	cmp	r3, #0
 8007708:	d03a      	beq.n	8007780 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800770a:	78fa      	ldrb	r2, [r7, #3]
 800770c:	6879      	ldr	r1, [r7, #4]
 800770e:	4613      	mov	r3, r2
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	4413      	add	r3, r2
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	440b      	add	r3, r1
 8007718:	331c      	adds	r3, #28
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d029      	beq.n	8007774 <USBD_CDC_DataIn+0x90>
 8007720:	78fa      	ldrb	r2, [r7, #3]
 8007722:	6879      	ldr	r1, [r7, #4]
 8007724:	4613      	mov	r3, r2
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	4413      	add	r3, r2
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	440b      	add	r3, r1
 800772e:	331c      	adds	r3, #28
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	78f9      	ldrb	r1, [r7, #3]
 8007734:	68b8      	ldr	r0, [r7, #8]
 8007736:	460b      	mov	r3, r1
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	440b      	add	r3, r1
 800773c:	00db      	lsls	r3, r3, #3
 800773e:	4403      	add	r3, r0
 8007740:	3338      	adds	r3, #56	; 0x38
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	fbb2 f1f3 	udiv	r1, r2, r3
 8007748:	fb01 f303 	mul.w	r3, r1, r3
 800774c:	1ad3      	subs	r3, r2, r3
 800774e:	2b00      	cmp	r3, #0
 8007750:	d110      	bne.n	8007774 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007752:	78fa      	ldrb	r2, [r7, #3]
 8007754:	6879      	ldr	r1, [r7, #4]
 8007756:	4613      	mov	r3, r2
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	4413      	add	r3, r2
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	440b      	add	r3, r1
 8007760:	331c      	adds	r3, #28
 8007762:	2200      	movs	r2, #0
 8007764:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007766:	78f9      	ldrb	r1, [r7, #3]
 8007768:	2300      	movs	r3, #0
 800776a:	2200      	movs	r2, #0
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f001 fd8d 	bl	800928c <USBD_LL_Transmit>
 8007772:	e003      	b.n	800777c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2200      	movs	r2, #0
 8007778:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800777c:	2300      	movs	r3, #0
 800777e:	e000      	b.n	8007782 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007780:	2302      	movs	r3, #2
  }
}
 8007782:	4618      	mov	r0, r3
 8007784:	3710      	adds	r7, #16
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}

0800778a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800778a:	b580      	push	{r7, lr}
 800778c:	b084      	sub	sp, #16
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
 8007792:	460b      	mov	r3, r1
 8007794:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800779c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800779e:	78fb      	ldrb	r3, [r7, #3]
 80077a0:	4619      	mov	r1, r3
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f001 fdb8 	bl	8009318 <USBD_LL_GetRxDataSize>
 80077a8:	4602      	mov	r2, r0
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d00d      	beq.n	80077d6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077c0:	68db      	ldr	r3, [r3, #12]
 80077c2:	68fa      	ldr	r2, [r7, #12]
 80077c4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80077c8:	68fa      	ldr	r2, [r7, #12]
 80077ca:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80077ce:	4611      	mov	r1, r2
 80077d0:	4798      	blx	r3

    return USBD_OK;
 80077d2:	2300      	movs	r3, #0
 80077d4:	e000      	b.n	80077d8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80077d6:	2302      	movs	r3, #2
  }
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3710      	adds	r7, #16
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077ee:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d015      	beq.n	8007826 <USBD_CDC_EP0_RxReady+0x46>
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007800:	2bff      	cmp	r3, #255	; 0xff
 8007802:	d010      	beq.n	8007826 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	68fa      	ldr	r2, [r7, #12]
 800780e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007812:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007814:	68fa      	ldr	r2, [r7, #12]
 8007816:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800781a:	b292      	uxth	r2, r2
 800781c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	22ff      	movs	r2, #255	; 0xff
 8007822:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007826:	2300      	movs	r3, #0
}
 8007828:	4618      	mov	r0, r3
 800782a:	3710      	adds	r7, #16
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007830:	b480      	push	{r7}
 8007832:	b083      	sub	sp, #12
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2243      	movs	r2, #67	; 0x43
 800783c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800783e:	4b03      	ldr	r3, [pc, #12]	; (800784c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007840:	4618      	mov	r0, r3
 8007842:	370c      	adds	r7, #12
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr
 800784c:	20000094 	.word	0x20000094

08007850 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007850:	b480      	push	{r7}
 8007852:	b083      	sub	sp, #12
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2243      	movs	r2, #67	; 0x43
 800785c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800785e:	4b03      	ldr	r3, [pc, #12]	; (800786c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007860:	4618      	mov	r0, r3
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr
 800786c:	20000050 	.word	0x20000050

08007870 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007870:	b480      	push	{r7}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2243      	movs	r2, #67	; 0x43
 800787c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800787e:	4b03      	ldr	r3, [pc, #12]	; (800788c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007880:	4618      	mov	r0, r3
 8007882:	370c      	adds	r7, #12
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr
 800788c:	200000d8 	.word	0x200000d8

08007890 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	220a      	movs	r2, #10
 800789c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800789e:	4b03      	ldr	r3, [pc, #12]	; (80078ac <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	370c      	adds	r7, #12
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr
 80078ac:	2000000c 	.word	0x2000000c

080078b0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b085      	sub	sp, #20
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80078ba:	2302      	movs	r3, #2
 80078bc:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d005      	beq.n	80078d0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	683a      	ldr	r2, [r7, #0]
 80078c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80078cc:	2300      	movs	r3, #0
 80078ce:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80078d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3714      	adds	r7, #20
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr

080078de <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80078de:	b480      	push	{r7}
 80078e0:	b087      	sub	sp, #28
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	60f8      	str	r0, [r7, #12]
 80078e6:	60b9      	str	r1, [r7, #8]
 80078e8:	4613      	mov	r3, r2
 80078ea:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078f2:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	68ba      	ldr	r2, [r7, #8]
 80078f8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80078fc:	88fa      	ldrh	r2, [r7, #6]
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007904:	2300      	movs	r3, #0
}
 8007906:	4618      	mov	r0, r3
 8007908:	371c      	adds	r7, #28
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr

08007912 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007912:	b480      	push	{r7}
 8007914:	b085      	sub	sp, #20
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
 800791a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007922:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	683a      	ldr	r2, [r7, #0]
 8007928:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800792c:	2300      	movs	r3, #0
}
 800792e:	4618      	mov	r0, r3
 8007930:	3714      	adds	r7, #20
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr

0800793a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b084      	sub	sp, #16
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007948:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007950:	2b00      	cmp	r3, #0
 8007952:	d017      	beq.n	8007984 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	7c1b      	ldrb	r3, [r3, #16]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d109      	bne.n	8007970 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007962:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007966:	2101      	movs	r1, #1
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f001 fcb2 	bl	80092d2 <USBD_LL_PrepareReceive>
 800796e:	e007      	b.n	8007980 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007976:	2340      	movs	r3, #64	; 0x40
 8007978:	2101      	movs	r1, #1
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f001 fca9 	bl	80092d2 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007980:	2300      	movs	r3, #0
 8007982:	e000      	b.n	8007986 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007984:	2302      	movs	r3, #2
  }
}
 8007986:	4618      	mov	r0, r3
 8007988:	3710      	adds	r7, #16
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}

0800798e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800798e:	b580      	push	{r7, lr}
 8007990:	b084      	sub	sp, #16
 8007992:	af00      	add	r7, sp, #0
 8007994:	60f8      	str	r0, [r7, #12]
 8007996:	60b9      	str	r1, [r7, #8]
 8007998:	4613      	mov	r3, r2
 800799a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d101      	bne.n	80079a6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80079a2:	2302      	movs	r3, #2
 80079a4:	e01a      	b.n	80079dc <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d003      	beq.n	80079b8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2200      	movs	r2, #0
 80079b4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d003      	beq.n	80079c6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	68ba      	ldr	r2, [r7, #8]
 80079c2:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2201      	movs	r2, #1
 80079ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	79fa      	ldrb	r2, [r7, #7]
 80079d2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80079d4:	68f8      	ldr	r0, [r7, #12]
 80079d6:	f001 fb13 	bl	8009000 <USBD_LL_Init>

  return USBD_OK;
 80079da:	2300      	movs	r3, #0
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3710      	adds	r7, #16
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b085      	sub	sp, #20
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80079ee:	2300      	movs	r3, #0
 80079f0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d006      	beq.n	8007a06 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	683a      	ldr	r2, [r7, #0]
 80079fc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007a00:	2300      	movs	r3, #0
 8007a02:	73fb      	strb	r3, [r7, #15]
 8007a04:	e001      	b.n	8007a0a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007a06:	2302      	movs	r3, #2
 8007a08:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3714      	adds	r7, #20
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f001 fb49 	bl	80090b8 <USBD_LL_Start>

  return USBD_OK;
 8007a26:	2300      	movs	r3, #0
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3708      	adds	r7, #8
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b083      	sub	sp, #12
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007a38:	2300      	movs	r3, #0
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	370c      	adds	r7, #12
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr

08007a46 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007a46:	b580      	push	{r7, lr}
 8007a48:	b084      	sub	sp, #16
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]
 8007a4e:	460b      	mov	r3, r1
 8007a50:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007a52:	2302      	movs	r3, #2
 8007a54:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d00c      	beq.n	8007a7a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	78fa      	ldrb	r2, [r7, #3]
 8007a6a:	4611      	mov	r1, r2
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	4798      	blx	r3
 8007a70:	4603      	mov	r3, r0
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d101      	bne.n	8007a7a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007a76:	2300      	movs	r3, #0
 8007a78:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3710      	adds	r7, #16
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b082      	sub	sp, #8
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	460b      	mov	r3, r1
 8007a8e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	78fa      	ldrb	r2, [r7, #3]
 8007a9a:	4611      	mov	r1, r2
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	4798      	blx	r3

  return USBD_OK;
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3708      	adds	r7, #8
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}

08007aaa <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b082      	sub	sp, #8
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
 8007ab2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007aba:	6839      	ldr	r1, [r7, #0]
 8007abc:	4618      	mov	r0, r3
 8007abe:	f000 feda 	bl	8008876 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007ade:	f003 031f 	and.w	r3, r3, #31
 8007ae2:	2b02      	cmp	r3, #2
 8007ae4:	d016      	beq.n	8007b14 <USBD_LL_SetupStage+0x6a>
 8007ae6:	2b02      	cmp	r3, #2
 8007ae8:	d81c      	bhi.n	8007b24 <USBD_LL_SetupStage+0x7a>
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d002      	beq.n	8007af4 <USBD_LL_SetupStage+0x4a>
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d008      	beq.n	8007b04 <USBD_LL_SetupStage+0x5a>
 8007af2:	e017      	b.n	8007b24 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007afa:	4619      	mov	r1, r3
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 f9cd 	bl	8007e9c <USBD_StdDevReq>
      break;
 8007b02:	e01a      	b.n	8007b3a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007b0a:	4619      	mov	r1, r3
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 fa2f 	bl	8007f70 <USBD_StdItfReq>
      break;
 8007b12:	e012      	b.n	8007b3a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 fa6f 	bl	8008000 <USBD_StdEPReq>
      break;
 8007b22:	e00a      	b.n	8007b3a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007b2a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	4619      	mov	r1, r3
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f001 fb20 	bl	8009178 <USBD_LL_StallEP>
      break;
 8007b38:	bf00      	nop
  }

  return USBD_OK;
 8007b3a:	2300      	movs	r3, #0
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3708      	adds	r7, #8
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b086      	sub	sp, #24
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	460b      	mov	r3, r1
 8007b4e:	607a      	str	r2, [r7, #4]
 8007b50:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007b52:	7afb      	ldrb	r3, [r7, #11]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d14b      	bne.n	8007bf0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007b5e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b66:	2b03      	cmp	r3, #3
 8007b68:	d134      	bne.n	8007bd4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	68da      	ldr	r2, [r3, #12]
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d919      	bls.n	8007baa <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	68da      	ldr	r2, [r3, #12]
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	691b      	ldr	r3, [r3, #16]
 8007b7e:	1ad2      	subs	r2, r2, r3
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	68da      	ldr	r2, [r3, #12]
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d203      	bcs.n	8007b98 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	e002      	b.n	8007b9e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	6879      	ldr	r1, [r7, #4]
 8007ba2:	68f8      	ldr	r0, [r7, #12]
 8007ba4:	f000 ff5b 	bl	8008a5e <USBD_CtlContinueRx>
 8007ba8:	e038      	b.n	8007c1c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bb0:	691b      	ldr	r3, [r3, #16]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d00a      	beq.n	8007bcc <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007bbc:	2b03      	cmp	r3, #3
 8007bbe:	d105      	bne.n	8007bcc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bc6:	691b      	ldr	r3, [r3, #16]
 8007bc8:	68f8      	ldr	r0, [r7, #12]
 8007bca:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007bcc:	68f8      	ldr	r0, [r7, #12]
 8007bce:	f000 ff58 	bl	8008a82 <USBD_CtlSendStatus>
 8007bd2:	e023      	b.n	8007c1c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007bda:	2b05      	cmp	r3, #5
 8007bdc:	d11e      	bne.n	8007c1c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007be6:	2100      	movs	r1, #0
 8007be8:	68f8      	ldr	r0, [r7, #12]
 8007bea:	f001 fac5 	bl	8009178 <USBD_LL_StallEP>
 8007bee:	e015      	b.n	8007c1c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bf6:	699b      	ldr	r3, [r3, #24]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d00d      	beq.n	8007c18 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007c02:	2b03      	cmp	r3, #3
 8007c04:	d108      	bne.n	8007c18 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c0c:	699b      	ldr	r3, [r3, #24]
 8007c0e:	7afa      	ldrb	r2, [r7, #11]
 8007c10:	4611      	mov	r1, r2
 8007c12:	68f8      	ldr	r0, [r7, #12]
 8007c14:	4798      	blx	r3
 8007c16:	e001      	b.n	8007c1c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007c18:	2302      	movs	r3, #2
 8007c1a:	e000      	b.n	8007c1e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007c1c:	2300      	movs	r3, #0
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3718      	adds	r7, #24
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}

08007c26 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007c26:	b580      	push	{r7, lr}
 8007c28:	b086      	sub	sp, #24
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	60f8      	str	r0, [r7, #12]
 8007c2e:	460b      	mov	r3, r1
 8007c30:	607a      	str	r2, [r7, #4]
 8007c32:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007c34:	7afb      	ldrb	r3, [r7, #11]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d17f      	bne.n	8007d3a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	3314      	adds	r3, #20
 8007c3e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	d15c      	bne.n	8007d04 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	68da      	ldr	r2, [r3, #12]
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	691b      	ldr	r3, [r3, #16]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d915      	bls.n	8007c82 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	68da      	ldr	r2, [r3, #12]
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	691b      	ldr	r3, [r3, #16]
 8007c5e:	1ad2      	subs	r2, r2, r3
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	68db      	ldr	r3, [r3, #12]
 8007c68:	b29b      	uxth	r3, r3
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	6879      	ldr	r1, [r7, #4]
 8007c6e:	68f8      	ldr	r0, [r7, #12]
 8007c70:	f000 fec5 	bl	80089fe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c74:	2300      	movs	r3, #0
 8007c76:	2200      	movs	r2, #0
 8007c78:	2100      	movs	r1, #0
 8007c7a:	68f8      	ldr	r0, [r7, #12]
 8007c7c:	f001 fb29 	bl	80092d2 <USBD_LL_PrepareReceive>
 8007c80:	e04e      	b.n	8007d20 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	697a      	ldr	r2, [r7, #20]
 8007c88:	6912      	ldr	r2, [r2, #16]
 8007c8a:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c8e:	fb01 f202 	mul.w	r2, r1, r2
 8007c92:	1a9b      	subs	r3, r3, r2
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d11c      	bne.n	8007cd2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	689a      	ldr	r2, [r3, #8]
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d316      	bcc.n	8007cd2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	689a      	ldr	r2, [r3, #8]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d20f      	bcs.n	8007cd2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	2100      	movs	r1, #0
 8007cb6:	68f8      	ldr	r0, [r7, #12]
 8007cb8:	f000 fea1 	bl	80089fe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	2100      	movs	r1, #0
 8007cca:	68f8      	ldr	r0, [r7, #12]
 8007ccc:	f001 fb01 	bl	80092d2 <USBD_LL_PrepareReceive>
 8007cd0:	e026      	b.n	8007d20 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d00a      	beq.n	8007cf4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007ce4:	2b03      	cmp	r3, #3
 8007ce6:	d105      	bne.n	8007cf4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cee:	68db      	ldr	r3, [r3, #12]
 8007cf0:	68f8      	ldr	r0, [r7, #12]
 8007cf2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007cf4:	2180      	movs	r1, #128	; 0x80
 8007cf6:	68f8      	ldr	r0, [r7, #12]
 8007cf8:	f001 fa3e 	bl	8009178 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007cfc:	68f8      	ldr	r0, [r7, #12]
 8007cfe:	f000 fed3 	bl	8008aa8 <USBD_CtlReceiveStatus>
 8007d02:	e00d      	b.n	8007d20 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d0a:	2b04      	cmp	r3, #4
 8007d0c:	d004      	beq.n	8007d18 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d103      	bne.n	8007d20 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007d18:	2180      	movs	r1, #128	; 0x80
 8007d1a:	68f8      	ldr	r0, [r7, #12]
 8007d1c:	f001 fa2c 	bl	8009178 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007d26:	2b01      	cmp	r3, #1
 8007d28:	d11d      	bne.n	8007d66 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007d2a:	68f8      	ldr	r0, [r7, #12]
 8007d2c:	f7ff fe80 	bl	8007a30 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2200      	movs	r2, #0
 8007d34:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007d38:	e015      	b.n	8007d66 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d40:	695b      	ldr	r3, [r3, #20]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d00d      	beq.n	8007d62 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007d4c:	2b03      	cmp	r3, #3
 8007d4e:	d108      	bne.n	8007d62 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d56:	695b      	ldr	r3, [r3, #20]
 8007d58:	7afa      	ldrb	r2, [r7, #11]
 8007d5a:	4611      	mov	r1, r2
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	4798      	blx	r3
 8007d60:	e001      	b.n	8007d66 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007d62:	2302      	movs	r3, #2
 8007d64:	e000      	b.n	8007d68 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007d66:	2300      	movs	r3, #0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3718      	adds	r7, #24
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d78:	2340      	movs	r3, #64	; 0x40
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	2100      	movs	r1, #0
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f001 f9b5 	bl	80090ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2240      	movs	r2, #64	; 0x40
 8007d90:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d94:	2340      	movs	r3, #64	; 0x40
 8007d96:	2200      	movs	r2, #0
 8007d98:	2180      	movs	r1, #128	; 0x80
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f001 f9a7 	bl	80090ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2201      	movs	r2, #1
 8007da4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2240      	movs	r2, #64	; 0x40
 8007daa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2201      	movs	r2, #1
 8007db0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d009      	beq.n	8007de8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	6852      	ldr	r2, [r2, #4]
 8007de0:	b2d2      	uxtb	r2, r2
 8007de2:	4611      	mov	r1, r2
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	4798      	blx	r3
  }

  return USBD_OK;
 8007de8:	2300      	movs	r3, #0
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3708      	adds	r7, #8
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}

08007df2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007df2:	b480      	push	{r7}
 8007df4:	b083      	sub	sp, #12
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	78fa      	ldrb	r2, [r7, #3]
 8007e02:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007e04:	2300      	movs	r3, #0
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	370c      	adds	r7, #12
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr

08007e12 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007e12:	b480      	push	{r7}
 8007e14:	b083      	sub	sp, #12
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2204      	movs	r2, #4
 8007e2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007e2e:	2300      	movs	r3, #0
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	370c      	adds	r7, #12
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr

08007e3c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e4a:	2b04      	cmp	r3, #4
 8007e4c:	d105      	bne.n	8007e5a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007e5a:	2300      	movs	r3, #0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	370c      	adds	r7, #12
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e76:	2b03      	cmp	r3, #3
 8007e78:	d10b      	bne.n	8007e92 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e80:	69db      	ldr	r3, [r3, #28]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d005      	beq.n	8007e92 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e8c:	69db      	ldr	r3, [r3, #28]
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e92:	2300      	movs	r3, #0
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3708      	adds	r7, #8
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007eb2:	2b40      	cmp	r3, #64	; 0x40
 8007eb4:	d005      	beq.n	8007ec2 <USBD_StdDevReq+0x26>
 8007eb6:	2b40      	cmp	r3, #64	; 0x40
 8007eb8:	d84f      	bhi.n	8007f5a <USBD_StdDevReq+0xbe>
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d009      	beq.n	8007ed2 <USBD_StdDevReq+0x36>
 8007ebe:	2b20      	cmp	r3, #32
 8007ec0:	d14b      	bne.n	8007f5a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	6839      	ldr	r1, [r7, #0]
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	4798      	blx	r3
      break;
 8007ed0:	e048      	b.n	8007f64 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	785b      	ldrb	r3, [r3, #1]
 8007ed6:	2b09      	cmp	r3, #9
 8007ed8:	d839      	bhi.n	8007f4e <USBD_StdDevReq+0xb2>
 8007eda:	a201      	add	r2, pc, #4	; (adr r2, 8007ee0 <USBD_StdDevReq+0x44>)
 8007edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ee0:	08007f31 	.word	0x08007f31
 8007ee4:	08007f45 	.word	0x08007f45
 8007ee8:	08007f4f 	.word	0x08007f4f
 8007eec:	08007f3b 	.word	0x08007f3b
 8007ef0:	08007f4f 	.word	0x08007f4f
 8007ef4:	08007f13 	.word	0x08007f13
 8007ef8:	08007f09 	.word	0x08007f09
 8007efc:	08007f4f 	.word	0x08007f4f
 8007f00:	08007f27 	.word	0x08007f27
 8007f04:	08007f1d 	.word	0x08007f1d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007f08:	6839      	ldr	r1, [r7, #0]
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 f9dc 	bl	80082c8 <USBD_GetDescriptor>
          break;
 8007f10:	e022      	b.n	8007f58 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007f12:	6839      	ldr	r1, [r7, #0]
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 fb3f 	bl	8008598 <USBD_SetAddress>
          break;
 8007f1a:	e01d      	b.n	8007f58 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007f1c:	6839      	ldr	r1, [r7, #0]
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 fb7e 	bl	8008620 <USBD_SetConfig>
          break;
 8007f24:	e018      	b.n	8007f58 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007f26:	6839      	ldr	r1, [r7, #0]
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 fc07 	bl	800873c <USBD_GetConfig>
          break;
 8007f2e:	e013      	b.n	8007f58 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007f30:	6839      	ldr	r1, [r7, #0]
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 fc37 	bl	80087a6 <USBD_GetStatus>
          break;
 8007f38:	e00e      	b.n	8007f58 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007f3a:	6839      	ldr	r1, [r7, #0]
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 fc65 	bl	800880c <USBD_SetFeature>
          break;
 8007f42:	e009      	b.n	8007f58 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007f44:	6839      	ldr	r1, [r7, #0]
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 fc74 	bl	8008834 <USBD_ClrFeature>
          break;
 8007f4c:	e004      	b.n	8007f58 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007f4e:	6839      	ldr	r1, [r7, #0]
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f000 fccd 	bl	80088f0 <USBD_CtlError>
          break;
 8007f56:	bf00      	nop
      }
      break;
 8007f58:	e004      	b.n	8007f64 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007f5a:	6839      	ldr	r1, [r7, #0]
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f000 fcc7 	bl	80088f0 <USBD_CtlError>
      break;
 8007f62:	bf00      	nop
  }

  return ret;
 8007f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3710      	adds	r7, #16
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop

08007f70 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b084      	sub	sp, #16
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f86:	2b40      	cmp	r3, #64	; 0x40
 8007f88:	d005      	beq.n	8007f96 <USBD_StdItfReq+0x26>
 8007f8a:	2b40      	cmp	r3, #64	; 0x40
 8007f8c:	d82e      	bhi.n	8007fec <USBD_StdItfReq+0x7c>
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d001      	beq.n	8007f96 <USBD_StdItfReq+0x26>
 8007f92:	2b20      	cmp	r3, #32
 8007f94:	d12a      	bne.n	8007fec <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f9c:	3b01      	subs	r3, #1
 8007f9e:	2b02      	cmp	r3, #2
 8007fa0:	d81d      	bhi.n	8007fde <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	889b      	ldrh	r3, [r3, #4]
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d813      	bhi.n	8007fd4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	6839      	ldr	r1, [r7, #0]
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	4798      	blx	r3
 8007fba:	4603      	mov	r3, r0
 8007fbc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	88db      	ldrh	r3, [r3, #6]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d110      	bne.n	8007fe8 <USBD_StdItfReq+0x78>
 8007fc6:	7bfb      	ldrb	r3, [r7, #15]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d10d      	bne.n	8007fe8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 fd58 	bl	8008a82 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007fd2:	e009      	b.n	8007fe8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007fd4:	6839      	ldr	r1, [r7, #0]
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 fc8a 	bl	80088f0 <USBD_CtlError>
          break;
 8007fdc:	e004      	b.n	8007fe8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007fde:	6839      	ldr	r1, [r7, #0]
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 fc85 	bl	80088f0 <USBD_CtlError>
          break;
 8007fe6:	e000      	b.n	8007fea <USBD_StdItfReq+0x7a>
          break;
 8007fe8:	bf00      	nop
      }
      break;
 8007fea:	e004      	b.n	8007ff6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007fec:	6839      	ldr	r1, [r7, #0]
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 fc7e 	bl	80088f0 <USBD_CtlError>
      break;
 8007ff4:	bf00      	nop
  }

  return USBD_OK;
 8007ff6:	2300      	movs	r3, #0
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3710      	adds	r7, #16
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b084      	sub	sp, #16
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800800a:	2300      	movs	r3, #0
 800800c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	889b      	ldrh	r3, [r3, #4]
 8008012:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	781b      	ldrb	r3, [r3, #0]
 8008018:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800801c:	2b40      	cmp	r3, #64	; 0x40
 800801e:	d007      	beq.n	8008030 <USBD_StdEPReq+0x30>
 8008020:	2b40      	cmp	r3, #64	; 0x40
 8008022:	f200 8146 	bhi.w	80082b2 <USBD_StdEPReq+0x2b2>
 8008026:	2b00      	cmp	r3, #0
 8008028:	d00a      	beq.n	8008040 <USBD_StdEPReq+0x40>
 800802a:	2b20      	cmp	r3, #32
 800802c:	f040 8141 	bne.w	80082b2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	6839      	ldr	r1, [r7, #0]
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	4798      	blx	r3
      break;
 800803e:	e13d      	b.n	80082bc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	781b      	ldrb	r3, [r3, #0]
 8008044:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008048:	2b20      	cmp	r3, #32
 800804a:	d10a      	bne.n	8008062 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	6839      	ldr	r1, [r7, #0]
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	4798      	blx	r3
 800805a:	4603      	mov	r3, r0
 800805c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800805e:	7bfb      	ldrb	r3, [r7, #15]
 8008060:	e12d      	b.n	80082be <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	785b      	ldrb	r3, [r3, #1]
 8008066:	2b03      	cmp	r3, #3
 8008068:	d007      	beq.n	800807a <USBD_StdEPReq+0x7a>
 800806a:	2b03      	cmp	r3, #3
 800806c:	f300 811b 	bgt.w	80082a6 <USBD_StdEPReq+0x2a6>
 8008070:	2b00      	cmp	r3, #0
 8008072:	d072      	beq.n	800815a <USBD_StdEPReq+0x15a>
 8008074:	2b01      	cmp	r3, #1
 8008076:	d03a      	beq.n	80080ee <USBD_StdEPReq+0xee>
 8008078:	e115      	b.n	80082a6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008080:	2b02      	cmp	r3, #2
 8008082:	d002      	beq.n	800808a <USBD_StdEPReq+0x8a>
 8008084:	2b03      	cmp	r3, #3
 8008086:	d015      	beq.n	80080b4 <USBD_StdEPReq+0xb4>
 8008088:	e02b      	b.n	80080e2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800808a:	7bbb      	ldrb	r3, [r7, #14]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d00c      	beq.n	80080aa <USBD_StdEPReq+0xaa>
 8008090:	7bbb      	ldrb	r3, [r7, #14]
 8008092:	2b80      	cmp	r3, #128	; 0x80
 8008094:	d009      	beq.n	80080aa <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008096:	7bbb      	ldrb	r3, [r7, #14]
 8008098:	4619      	mov	r1, r3
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f001 f86c 	bl	8009178 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80080a0:	2180      	movs	r1, #128	; 0x80
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f001 f868 	bl	8009178 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80080a8:	e020      	b.n	80080ec <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80080aa:	6839      	ldr	r1, [r7, #0]
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 fc1f 	bl	80088f0 <USBD_CtlError>
              break;
 80080b2:	e01b      	b.n	80080ec <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	885b      	ldrh	r3, [r3, #2]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d10e      	bne.n	80080da <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80080bc:	7bbb      	ldrb	r3, [r7, #14]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d00b      	beq.n	80080da <USBD_StdEPReq+0xda>
 80080c2:	7bbb      	ldrb	r3, [r7, #14]
 80080c4:	2b80      	cmp	r3, #128	; 0x80
 80080c6:	d008      	beq.n	80080da <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	88db      	ldrh	r3, [r3, #6]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d104      	bne.n	80080da <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80080d0:	7bbb      	ldrb	r3, [r7, #14]
 80080d2:	4619      	mov	r1, r3
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f001 f84f 	bl	8009178 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 fcd1 	bl	8008a82 <USBD_CtlSendStatus>

              break;
 80080e0:	e004      	b.n	80080ec <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80080e2:	6839      	ldr	r1, [r7, #0]
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 fc03 	bl	80088f0 <USBD_CtlError>
              break;
 80080ea:	bf00      	nop
          }
          break;
 80080ec:	e0e0      	b.n	80082b0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080f4:	2b02      	cmp	r3, #2
 80080f6:	d002      	beq.n	80080fe <USBD_StdEPReq+0xfe>
 80080f8:	2b03      	cmp	r3, #3
 80080fa:	d015      	beq.n	8008128 <USBD_StdEPReq+0x128>
 80080fc:	e026      	b.n	800814c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080fe:	7bbb      	ldrb	r3, [r7, #14]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d00c      	beq.n	800811e <USBD_StdEPReq+0x11e>
 8008104:	7bbb      	ldrb	r3, [r7, #14]
 8008106:	2b80      	cmp	r3, #128	; 0x80
 8008108:	d009      	beq.n	800811e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800810a:	7bbb      	ldrb	r3, [r7, #14]
 800810c:	4619      	mov	r1, r3
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f001 f832 	bl	8009178 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008114:	2180      	movs	r1, #128	; 0x80
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f001 f82e 	bl	8009178 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800811c:	e01c      	b.n	8008158 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800811e:	6839      	ldr	r1, [r7, #0]
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 fbe5 	bl	80088f0 <USBD_CtlError>
              break;
 8008126:	e017      	b.n	8008158 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	885b      	ldrh	r3, [r3, #2]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d112      	bne.n	8008156 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008130:	7bbb      	ldrb	r3, [r7, #14]
 8008132:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008136:	2b00      	cmp	r3, #0
 8008138:	d004      	beq.n	8008144 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800813a:	7bbb      	ldrb	r3, [r7, #14]
 800813c:	4619      	mov	r1, r3
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f001 f839 	bl	80091b6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 fc9c 	bl	8008a82 <USBD_CtlSendStatus>
              }
              break;
 800814a:	e004      	b.n	8008156 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800814c:	6839      	ldr	r1, [r7, #0]
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 fbce 	bl	80088f0 <USBD_CtlError>
              break;
 8008154:	e000      	b.n	8008158 <USBD_StdEPReq+0x158>
              break;
 8008156:	bf00      	nop
          }
          break;
 8008158:	e0aa      	b.n	80082b0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008160:	2b02      	cmp	r3, #2
 8008162:	d002      	beq.n	800816a <USBD_StdEPReq+0x16a>
 8008164:	2b03      	cmp	r3, #3
 8008166:	d032      	beq.n	80081ce <USBD_StdEPReq+0x1ce>
 8008168:	e097      	b.n	800829a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800816a:	7bbb      	ldrb	r3, [r7, #14]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d007      	beq.n	8008180 <USBD_StdEPReq+0x180>
 8008170:	7bbb      	ldrb	r3, [r7, #14]
 8008172:	2b80      	cmp	r3, #128	; 0x80
 8008174:	d004      	beq.n	8008180 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008176:	6839      	ldr	r1, [r7, #0]
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 fbb9 	bl	80088f0 <USBD_CtlError>
                break;
 800817e:	e091      	b.n	80082a4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008180:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008184:	2b00      	cmp	r3, #0
 8008186:	da0b      	bge.n	80081a0 <USBD_StdEPReq+0x1a0>
 8008188:	7bbb      	ldrb	r3, [r7, #14]
 800818a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800818e:	4613      	mov	r3, r2
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	4413      	add	r3, r2
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	3310      	adds	r3, #16
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	4413      	add	r3, r2
 800819c:	3304      	adds	r3, #4
 800819e:	e00b      	b.n	80081b8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80081a0:	7bbb      	ldrb	r3, [r7, #14]
 80081a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081a6:	4613      	mov	r3, r2
 80081a8:	009b      	lsls	r3, r3, #2
 80081aa:	4413      	add	r3, r2
 80081ac:	009b      	lsls	r3, r3, #2
 80081ae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	4413      	add	r3, r2
 80081b6:	3304      	adds	r3, #4
 80081b8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	2200      	movs	r2, #0
 80081be:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	2202      	movs	r2, #2
 80081c4:	4619      	mov	r1, r3
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 fbfd 	bl	80089c6 <USBD_CtlSendData>
              break;
 80081cc:	e06a      	b.n	80082a4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80081ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	da11      	bge.n	80081fa <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80081d6:	7bbb      	ldrb	r3, [r7, #14]
 80081d8:	f003 020f 	and.w	r2, r3, #15
 80081dc:	6879      	ldr	r1, [r7, #4]
 80081de:	4613      	mov	r3, r2
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	4413      	add	r3, r2
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	440b      	add	r3, r1
 80081e8:	3318      	adds	r3, #24
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d117      	bne.n	8008220 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80081f0:	6839      	ldr	r1, [r7, #0]
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f000 fb7c 	bl	80088f0 <USBD_CtlError>
                  break;
 80081f8:	e054      	b.n	80082a4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80081fa:	7bbb      	ldrb	r3, [r7, #14]
 80081fc:	f003 020f 	and.w	r2, r3, #15
 8008200:	6879      	ldr	r1, [r7, #4]
 8008202:	4613      	mov	r3, r2
 8008204:	009b      	lsls	r3, r3, #2
 8008206:	4413      	add	r3, r2
 8008208:	009b      	lsls	r3, r3, #2
 800820a:	440b      	add	r3, r1
 800820c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d104      	bne.n	8008220 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008216:	6839      	ldr	r1, [r7, #0]
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 fb69 	bl	80088f0 <USBD_CtlError>
                  break;
 800821e:	e041      	b.n	80082a4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008220:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008224:	2b00      	cmp	r3, #0
 8008226:	da0b      	bge.n	8008240 <USBD_StdEPReq+0x240>
 8008228:	7bbb      	ldrb	r3, [r7, #14]
 800822a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800822e:	4613      	mov	r3, r2
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	4413      	add	r3, r2
 8008234:	009b      	lsls	r3, r3, #2
 8008236:	3310      	adds	r3, #16
 8008238:	687a      	ldr	r2, [r7, #4]
 800823a:	4413      	add	r3, r2
 800823c:	3304      	adds	r3, #4
 800823e:	e00b      	b.n	8008258 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008240:	7bbb      	ldrb	r3, [r7, #14]
 8008242:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008246:	4613      	mov	r3, r2
 8008248:	009b      	lsls	r3, r3, #2
 800824a:	4413      	add	r3, r2
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	4413      	add	r3, r2
 8008256:	3304      	adds	r3, #4
 8008258:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800825a:	7bbb      	ldrb	r3, [r7, #14]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d002      	beq.n	8008266 <USBD_StdEPReq+0x266>
 8008260:	7bbb      	ldrb	r3, [r7, #14]
 8008262:	2b80      	cmp	r3, #128	; 0x80
 8008264:	d103      	bne.n	800826e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	2200      	movs	r2, #0
 800826a:	601a      	str	r2, [r3, #0]
 800826c:	e00e      	b.n	800828c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800826e:	7bbb      	ldrb	r3, [r7, #14]
 8008270:	4619      	mov	r1, r3
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 ffbe 	bl	80091f4 <USBD_LL_IsStallEP>
 8008278:	4603      	mov	r3, r0
 800827a:	2b00      	cmp	r3, #0
 800827c:	d003      	beq.n	8008286 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	2201      	movs	r2, #1
 8008282:	601a      	str	r2, [r3, #0]
 8008284:	e002      	b.n	800828c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	2200      	movs	r2, #0
 800828a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	2202      	movs	r2, #2
 8008290:	4619      	mov	r1, r3
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 fb97 	bl	80089c6 <USBD_CtlSendData>
              break;
 8008298:	e004      	b.n	80082a4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800829a:	6839      	ldr	r1, [r7, #0]
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 fb27 	bl	80088f0 <USBD_CtlError>
              break;
 80082a2:	bf00      	nop
          }
          break;
 80082a4:	e004      	b.n	80082b0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80082a6:	6839      	ldr	r1, [r7, #0]
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 fb21 	bl	80088f0 <USBD_CtlError>
          break;
 80082ae:	bf00      	nop
      }
      break;
 80082b0:	e004      	b.n	80082bc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80082b2:	6839      	ldr	r1, [r7, #0]
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 fb1b 	bl	80088f0 <USBD_CtlError>
      break;
 80082ba:	bf00      	nop
  }

  return ret;
 80082bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3710      	adds	r7, #16
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
	...

080082c8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80082d2:	2300      	movs	r3, #0
 80082d4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80082d6:	2300      	movs	r3, #0
 80082d8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80082da:	2300      	movs	r3, #0
 80082dc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	885b      	ldrh	r3, [r3, #2]
 80082e2:	0a1b      	lsrs	r3, r3, #8
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	3b01      	subs	r3, #1
 80082e8:	2b06      	cmp	r3, #6
 80082ea:	f200 8128 	bhi.w	800853e <USBD_GetDescriptor+0x276>
 80082ee:	a201      	add	r2, pc, #4	; (adr r2, 80082f4 <USBD_GetDescriptor+0x2c>)
 80082f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f4:	08008311 	.word	0x08008311
 80082f8:	08008329 	.word	0x08008329
 80082fc:	08008369 	.word	0x08008369
 8008300:	0800853f 	.word	0x0800853f
 8008304:	0800853f 	.word	0x0800853f
 8008308:	080084df 	.word	0x080084df
 800830c:	0800850b 	.word	0x0800850b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	7c12      	ldrb	r2, [r2, #16]
 800831c:	f107 0108 	add.w	r1, r7, #8
 8008320:	4610      	mov	r0, r2
 8008322:	4798      	blx	r3
 8008324:	60f8      	str	r0, [r7, #12]
      break;
 8008326:	e112      	b.n	800854e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	7c1b      	ldrb	r3, [r3, #16]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d10d      	bne.n	800834c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008338:	f107 0208 	add.w	r2, r7, #8
 800833c:	4610      	mov	r0, r2
 800833e:	4798      	blx	r3
 8008340:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	3301      	adds	r3, #1
 8008346:	2202      	movs	r2, #2
 8008348:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800834a:	e100      	b.n	800854e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008354:	f107 0208 	add.w	r2, r7, #8
 8008358:	4610      	mov	r0, r2
 800835a:	4798      	blx	r3
 800835c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	3301      	adds	r3, #1
 8008362:	2202      	movs	r2, #2
 8008364:	701a      	strb	r2, [r3, #0]
      break;
 8008366:	e0f2      	b.n	800854e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	885b      	ldrh	r3, [r3, #2]
 800836c:	b2db      	uxtb	r3, r3
 800836e:	2b05      	cmp	r3, #5
 8008370:	f200 80ac 	bhi.w	80084cc <USBD_GetDescriptor+0x204>
 8008374:	a201      	add	r2, pc, #4	; (adr r2, 800837c <USBD_GetDescriptor+0xb4>)
 8008376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800837a:	bf00      	nop
 800837c:	08008395 	.word	0x08008395
 8008380:	080083c9 	.word	0x080083c9
 8008384:	080083fd 	.word	0x080083fd
 8008388:	08008431 	.word	0x08008431
 800838c:	08008465 	.word	0x08008465
 8008390:	08008499 	.word	0x08008499
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d00b      	beq.n	80083b8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	687a      	ldr	r2, [r7, #4]
 80083aa:	7c12      	ldrb	r2, [r2, #16]
 80083ac:	f107 0108 	add.w	r1, r7, #8
 80083b0:	4610      	mov	r0, r2
 80083b2:	4798      	blx	r3
 80083b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083b6:	e091      	b.n	80084dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083b8:	6839      	ldr	r1, [r7, #0]
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 fa98 	bl	80088f0 <USBD_CtlError>
            err++;
 80083c0:	7afb      	ldrb	r3, [r7, #11]
 80083c2:	3301      	adds	r3, #1
 80083c4:	72fb      	strb	r3, [r7, #11]
          break;
 80083c6:	e089      	b.n	80084dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083ce:	689b      	ldr	r3, [r3, #8]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d00b      	beq.n	80083ec <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083da:	689b      	ldr	r3, [r3, #8]
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	7c12      	ldrb	r2, [r2, #16]
 80083e0:	f107 0108 	add.w	r1, r7, #8
 80083e4:	4610      	mov	r0, r2
 80083e6:	4798      	blx	r3
 80083e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083ea:	e077      	b.n	80084dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083ec:	6839      	ldr	r1, [r7, #0]
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 fa7e 	bl	80088f0 <USBD_CtlError>
            err++;
 80083f4:	7afb      	ldrb	r3, [r7, #11]
 80083f6:	3301      	adds	r3, #1
 80083f8:	72fb      	strb	r3, [r7, #11]
          break;
 80083fa:	e06f      	b.n	80084dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008402:	68db      	ldr	r3, [r3, #12]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d00b      	beq.n	8008420 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800840e:	68db      	ldr	r3, [r3, #12]
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	7c12      	ldrb	r2, [r2, #16]
 8008414:	f107 0108 	add.w	r1, r7, #8
 8008418:	4610      	mov	r0, r2
 800841a:	4798      	blx	r3
 800841c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800841e:	e05d      	b.n	80084dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008420:	6839      	ldr	r1, [r7, #0]
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 fa64 	bl	80088f0 <USBD_CtlError>
            err++;
 8008428:	7afb      	ldrb	r3, [r7, #11]
 800842a:	3301      	adds	r3, #1
 800842c:	72fb      	strb	r3, [r7, #11]
          break;
 800842e:	e055      	b.n	80084dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008436:	691b      	ldr	r3, [r3, #16]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d00b      	beq.n	8008454 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008442:	691b      	ldr	r3, [r3, #16]
 8008444:	687a      	ldr	r2, [r7, #4]
 8008446:	7c12      	ldrb	r2, [r2, #16]
 8008448:	f107 0108 	add.w	r1, r7, #8
 800844c:	4610      	mov	r0, r2
 800844e:	4798      	blx	r3
 8008450:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008452:	e043      	b.n	80084dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008454:	6839      	ldr	r1, [r7, #0]
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 fa4a 	bl	80088f0 <USBD_CtlError>
            err++;
 800845c:	7afb      	ldrb	r3, [r7, #11]
 800845e:	3301      	adds	r3, #1
 8008460:	72fb      	strb	r3, [r7, #11]
          break;
 8008462:	e03b      	b.n	80084dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800846a:	695b      	ldr	r3, [r3, #20]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d00b      	beq.n	8008488 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008476:	695b      	ldr	r3, [r3, #20]
 8008478:	687a      	ldr	r2, [r7, #4]
 800847a:	7c12      	ldrb	r2, [r2, #16]
 800847c:	f107 0108 	add.w	r1, r7, #8
 8008480:	4610      	mov	r0, r2
 8008482:	4798      	blx	r3
 8008484:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008486:	e029      	b.n	80084dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008488:	6839      	ldr	r1, [r7, #0]
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 fa30 	bl	80088f0 <USBD_CtlError>
            err++;
 8008490:	7afb      	ldrb	r3, [r7, #11]
 8008492:	3301      	adds	r3, #1
 8008494:	72fb      	strb	r3, [r7, #11]
          break;
 8008496:	e021      	b.n	80084dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800849e:	699b      	ldr	r3, [r3, #24]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d00b      	beq.n	80084bc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80084aa:	699b      	ldr	r3, [r3, #24]
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	7c12      	ldrb	r2, [r2, #16]
 80084b0:	f107 0108 	add.w	r1, r7, #8
 80084b4:	4610      	mov	r0, r2
 80084b6:	4798      	blx	r3
 80084b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084ba:	e00f      	b.n	80084dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084bc:	6839      	ldr	r1, [r7, #0]
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 fa16 	bl	80088f0 <USBD_CtlError>
            err++;
 80084c4:	7afb      	ldrb	r3, [r7, #11]
 80084c6:	3301      	adds	r3, #1
 80084c8:	72fb      	strb	r3, [r7, #11]
          break;
 80084ca:	e007      	b.n	80084dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80084cc:	6839      	ldr	r1, [r7, #0]
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 fa0e 	bl	80088f0 <USBD_CtlError>
          err++;
 80084d4:	7afb      	ldrb	r3, [r7, #11]
 80084d6:	3301      	adds	r3, #1
 80084d8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80084da:	e038      	b.n	800854e <USBD_GetDescriptor+0x286>
 80084dc:	e037      	b.n	800854e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	7c1b      	ldrb	r3, [r3, #16]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d109      	bne.n	80084fa <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084ee:	f107 0208 	add.w	r2, r7, #8
 80084f2:	4610      	mov	r0, r2
 80084f4:	4798      	blx	r3
 80084f6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80084f8:	e029      	b.n	800854e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80084fa:	6839      	ldr	r1, [r7, #0]
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f000 f9f7 	bl	80088f0 <USBD_CtlError>
        err++;
 8008502:	7afb      	ldrb	r3, [r7, #11]
 8008504:	3301      	adds	r3, #1
 8008506:	72fb      	strb	r3, [r7, #11]
      break;
 8008508:	e021      	b.n	800854e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	7c1b      	ldrb	r3, [r3, #16]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d10d      	bne.n	800852e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800851a:	f107 0208 	add.w	r2, r7, #8
 800851e:	4610      	mov	r0, r2
 8008520:	4798      	blx	r3
 8008522:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	3301      	adds	r3, #1
 8008528:	2207      	movs	r2, #7
 800852a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800852c:	e00f      	b.n	800854e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800852e:	6839      	ldr	r1, [r7, #0]
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 f9dd 	bl	80088f0 <USBD_CtlError>
        err++;
 8008536:	7afb      	ldrb	r3, [r7, #11]
 8008538:	3301      	adds	r3, #1
 800853a:	72fb      	strb	r3, [r7, #11]
      break;
 800853c:	e007      	b.n	800854e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800853e:	6839      	ldr	r1, [r7, #0]
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f000 f9d5 	bl	80088f0 <USBD_CtlError>
      err++;
 8008546:	7afb      	ldrb	r3, [r7, #11]
 8008548:	3301      	adds	r3, #1
 800854a:	72fb      	strb	r3, [r7, #11]
      break;
 800854c:	bf00      	nop
  }

  if (err != 0U)
 800854e:	7afb      	ldrb	r3, [r7, #11]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d11c      	bne.n	800858e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008554:	893b      	ldrh	r3, [r7, #8]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d011      	beq.n	800857e <USBD_GetDescriptor+0x2b6>
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	88db      	ldrh	r3, [r3, #6]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d00d      	beq.n	800857e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	88da      	ldrh	r2, [r3, #6]
 8008566:	893b      	ldrh	r3, [r7, #8]
 8008568:	4293      	cmp	r3, r2
 800856a:	bf28      	it	cs
 800856c:	4613      	movcs	r3, r2
 800856e:	b29b      	uxth	r3, r3
 8008570:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008572:	893b      	ldrh	r3, [r7, #8]
 8008574:	461a      	mov	r2, r3
 8008576:	68f9      	ldr	r1, [r7, #12]
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 fa24 	bl	80089c6 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	88db      	ldrh	r3, [r3, #6]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d104      	bne.n	8008590 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 fa7b 	bl	8008a82 <USBD_CtlSendStatus>
 800858c:	e000      	b.n	8008590 <USBD_GetDescriptor+0x2c8>
    return;
 800858e:	bf00      	nop
    }
  }
}
 8008590:	3710      	adds	r7, #16
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop

08008598 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	889b      	ldrh	r3, [r3, #4]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d130      	bne.n	800860c <USBD_SetAddress+0x74>
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	88db      	ldrh	r3, [r3, #6]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d12c      	bne.n	800860c <USBD_SetAddress+0x74>
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	885b      	ldrh	r3, [r3, #2]
 80085b6:	2b7f      	cmp	r3, #127	; 0x7f
 80085b8:	d828      	bhi.n	800860c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	885b      	ldrh	r3, [r3, #2]
 80085be:	b2db      	uxtb	r3, r3
 80085c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085c4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085cc:	2b03      	cmp	r3, #3
 80085ce:	d104      	bne.n	80085da <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80085d0:	6839      	ldr	r1, [r7, #0]
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 f98c 	bl	80088f0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085d8:	e01d      	b.n	8008616 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	7bfa      	ldrb	r2, [r7, #15]
 80085de:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80085e2:	7bfb      	ldrb	r3, [r7, #15]
 80085e4:	4619      	mov	r1, r3
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f000 fe31 	bl	800924e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 fa48 	bl	8008a82 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80085f2:	7bfb      	ldrb	r3, [r7, #15]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d004      	beq.n	8008602 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2202      	movs	r2, #2
 80085fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008600:	e009      	b.n	8008616 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2201      	movs	r2, #1
 8008606:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800860a:	e004      	b.n	8008616 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800860c:	6839      	ldr	r1, [r7, #0]
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 f96e 	bl	80088f0 <USBD_CtlError>
  }
}
 8008614:	bf00      	nop
 8008616:	bf00      	nop
 8008618:	3710      	adds	r7, #16
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
	...

08008620 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b082      	sub	sp, #8
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	885b      	ldrh	r3, [r3, #2]
 800862e:	b2da      	uxtb	r2, r3
 8008630:	4b41      	ldr	r3, [pc, #260]	; (8008738 <USBD_SetConfig+0x118>)
 8008632:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008634:	4b40      	ldr	r3, [pc, #256]	; (8008738 <USBD_SetConfig+0x118>)
 8008636:	781b      	ldrb	r3, [r3, #0]
 8008638:	2b01      	cmp	r3, #1
 800863a:	d904      	bls.n	8008646 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800863c:	6839      	ldr	r1, [r7, #0]
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 f956 	bl	80088f0 <USBD_CtlError>
 8008644:	e075      	b.n	8008732 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800864c:	2b02      	cmp	r3, #2
 800864e:	d002      	beq.n	8008656 <USBD_SetConfig+0x36>
 8008650:	2b03      	cmp	r3, #3
 8008652:	d023      	beq.n	800869c <USBD_SetConfig+0x7c>
 8008654:	e062      	b.n	800871c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008656:	4b38      	ldr	r3, [pc, #224]	; (8008738 <USBD_SetConfig+0x118>)
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d01a      	beq.n	8008694 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800865e:	4b36      	ldr	r3, [pc, #216]	; (8008738 <USBD_SetConfig+0x118>)
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	461a      	mov	r2, r3
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2203      	movs	r2, #3
 800866c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008670:	4b31      	ldr	r3, [pc, #196]	; (8008738 <USBD_SetConfig+0x118>)
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	4619      	mov	r1, r3
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f7ff f9e5 	bl	8007a46 <USBD_SetClassConfig>
 800867c:	4603      	mov	r3, r0
 800867e:	2b02      	cmp	r3, #2
 8008680:	d104      	bne.n	800868c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008682:	6839      	ldr	r1, [r7, #0]
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 f933 	bl	80088f0 <USBD_CtlError>
            return;
 800868a:	e052      	b.n	8008732 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 f9f8 	bl	8008a82 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008692:	e04e      	b.n	8008732 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f000 f9f4 	bl	8008a82 <USBD_CtlSendStatus>
        break;
 800869a:	e04a      	b.n	8008732 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800869c:	4b26      	ldr	r3, [pc, #152]	; (8008738 <USBD_SetConfig+0x118>)
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d112      	bne.n	80086ca <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2202      	movs	r2, #2
 80086a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80086ac:	4b22      	ldr	r3, [pc, #136]	; (8008738 <USBD_SetConfig+0x118>)
 80086ae:	781b      	ldrb	r3, [r3, #0]
 80086b0:	461a      	mov	r2, r3
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80086b6:	4b20      	ldr	r3, [pc, #128]	; (8008738 <USBD_SetConfig+0x118>)
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	4619      	mov	r1, r3
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f7ff f9e1 	bl	8007a84 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 f9dd 	bl	8008a82 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80086c8:	e033      	b.n	8008732 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80086ca:	4b1b      	ldr	r3, [pc, #108]	; (8008738 <USBD_SetConfig+0x118>)
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	461a      	mov	r2, r3
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d01d      	beq.n	8008714 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	b2db      	uxtb	r3, r3
 80086de:	4619      	mov	r1, r3
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f7ff f9cf 	bl	8007a84 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80086e6:	4b14      	ldr	r3, [pc, #80]	; (8008738 <USBD_SetConfig+0x118>)
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	461a      	mov	r2, r3
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80086f0:	4b11      	ldr	r3, [pc, #68]	; (8008738 <USBD_SetConfig+0x118>)
 80086f2:	781b      	ldrb	r3, [r3, #0]
 80086f4:	4619      	mov	r1, r3
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f7ff f9a5 	bl	8007a46 <USBD_SetClassConfig>
 80086fc:	4603      	mov	r3, r0
 80086fe:	2b02      	cmp	r3, #2
 8008700:	d104      	bne.n	800870c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008702:	6839      	ldr	r1, [r7, #0]
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 f8f3 	bl	80088f0 <USBD_CtlError>
            return;
 800870a:	e012      	b.n	8008732 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 f9b8 	bl	8008a82 <USBD_CtlSendStatus>
        break;
 8008712:	e00e      	b.n	8008732 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f000 f9b4 	bl	8008a82 <USBD_CtlSendStatus>
        break;
 800871a:	e00a      	b.n	8008732 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800871c:	6839      	ldr	r1, [r7, #0]
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 f8e6 	bl	80088f0 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008724:	4b04      	ldr	r3, [pc, #16]	; (8008738 <USBD_SetConfig+0x118>)
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	4619      	mov	r1, r3
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f7ff f9aa 	bl	8007a84 <USBD_ClrClassConfig>
        break;
 8008730:	bf00      	nop
    }
  }
}
 8008732:	3708      	adds	r7, #8
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}
 8008738:	200002a8 	.word	0x200002a8

0800873c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b082      	sub	sp, #8
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	88db      	ldrh	r3, [r3, #6]
 800874a:	2b01      	cmp	r3, #1
 800874c:	d004      	beq.n	8008758 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800874e:	6839      	ldr	r1, [r7, #0]
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f000 f8cd 	bl	80088f0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008756:	e022      	b.n	800879e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800875e:	2b02      	cmp	r3, #2
 8008760:	dc02      	bgt.n	8008768 <USBD_GetConfig+0x2c>
 8008762:	2b00      	cmp	r3, #0
 8008764:	dc03      	bgt.n	800876e <USBD_GetConfig+0x32>
 8008766:	e015      	b.n	8008794 <USBD_GetConfig+0x58>
 8008768:	2b03      	cmp	r3, #3
 800876a:	d00b      	beq.n	8008784 <USBD_GetConfig+0x48>
 800876c:	e012      	b.n	8008794 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2200      	movs	r2, #0
 8008772:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	3308      	adds	r3, #8
 8008778:	2201      	movs	r2, #1
 800877a:	4619      	mov	r1, r3
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f000 f922 	bl	80089c6 <USBD_CtlSendData>
        break;
 8008782:	e00c      	b.n	800879e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	3304      	adds	r3, #4
 8008788:	2201      	movs	r2, #1
 800878a:	4619      	mov	r1, r3
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 f91a 	bl	80089c6 <USBD_CtlSendData>
        break;
 8008792:	e004      	b.n	800879e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008794:	6839      	ldr	r1, [r7, #0]
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f000 f8aa 	bl	80088f0 <USBD_CtlError>
        break;
 800879c:	bf00      	nop
}
 800879e:	bf00      	nop
 80087a0:	3708      	adds	r7, #8
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}

080087a6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087a6:	b580      	push	{r7, lr}
 80087a8:	b082      	sub	sp, #8
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	6078      	str	r0, [r7, #4]
 80087ae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087b6:	3b01      	subs	r3, #1
 80087b8:	2b02      	cmp	r3, #2
 80087ba:	d81e      	bhi.n	80087fa <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	88db      	ldrh	r3, [r3, #6]
 80087c0:	2b02      	cmp	r3, #2
 80087c2:	d004      	beq.n	80087ce <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80087c4:	6839      	ldr	r1, [r7, #0]
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f000 f892 	bl	80088f0 <USBD_CtlError>
        break;
 80087cc:	e01a      	b.n	8008804 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2201      	movs	r2, #1
 80087d2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d005      	beq.n	80087ea <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	68db      	ldr	r3, [r3, #12]
 80087e2:	f043 0202 	orr.w	r2, r3, #2
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	330c      	adds	r3, #12
 80087ee:	2202      	movs	r2, #2
 80087f0:	4619      	mov	r1, r3
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 f8e7 	bl	80089c6 <USBD_CtlSendData>
      break;
 80087f8:	e004      	b.n	8008804 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80087fa:	6839      	ldr	r1, [r7, #0]
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 f877 	bl	80088f0 <USBD_CtlError>
      break;
 8008802:	bf00      	nop
  }
}
 8008804:	bf00      	nop
 8008806:	3708      	adds	r7, #8
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b082      	sub	sp, #8
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	885b      	ldrh	r3, [r3, #2]
 800881a:	2b01      	cmp	r3, #1
 800881c:	d106      	bne.n	800882c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2201      	movs	r2, #1
 8008822:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 f92b 	bl	8008a82 <USBD_CtlSendStatus>
  }
}
 800882c:	bf00      	nop
 800882e:	3708      	adds	r7, #8
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}

08008834 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b082      	sub	sp, #8
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008844:	3b01      	subs	r3, #1
 8008846:	2b02      	cmp	r3, #2
 8008848:	d80b      	bhi.n	8008862 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	885b      	ldrh	r3, [r3, #2]
 800884e:	2b01      	cmp	r3, #1
 8008850:	d10c      	bne.n	800886c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2200      	movs	r2, #0
 8008856:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 f911 	bl	8008a82 <USBD_CtlSendStatus>
      }
      break;
 8008860:	e004      	b.n	800886c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008862:	6839      	ldr	r1, [r7, #0]
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f000 f843 	bl	80088f0 <USBD_CtlError>
      break;
 800886a:	e000      	b.n	800886e <USBD_ClrFeature+0x3a>
      break;
 800886c:	bf00      	nop
  }
}
 800886e:	bf00      	nop
 8008870:	3708      	adds	r7, #8
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}

08008876 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008876:	b480      	push	{r7}
 8008878:	b083      	sub	sp, #12
 800887a:	af00      	add	r7, sp, #0
 800887c:	6078      	str	r0, [r7, #4]
 800887e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	781a      	ldrb	r2, [r3, #0]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	785a      	ldrb	r2, [r3, #1]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	3302      	adds	r3, #2
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	b29a      	uxth	r2, r3
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	3303      	adds	r3, #3
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	b29b      	uxth	r3, r3
 80088a0:	021b      	lsls	r3, r3, #8
 80088a2:	b29b      	uxth	r3, r3
 80088a4:	4413      	add	r3, r2
 80088a6:	b29a      	uxth	r2, r3
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	3304      	adds	r3, #4
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	b29a      	uxth	r2, r3
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	3305      	adds	r3, #5
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	021b      	lsls	r3, r3, #8
 80088be:	b29b      	uxth	r3, r3
 80088c0:	4413      	add	r3, r2
 80088c2:	b29a      	uxth	r2, r3
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	3306      	adds	r3, #6
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	b29a      	uxth	r2, r3
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	3307      	adds	r3, #7
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	021b      	lsls	r3, r3, #8
 80088da:	b29b      	uxth	r3, r3
 80088dc:	4413      	add	r3, r2
 80088de:	b29a      	uxth	r2, r3
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	80da      	strh	r2, [r3, #6]

}
 80088e4:	bf00      	nop
 80088e6:	370c      	adds	r7, #12
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr

080088f0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80088fa:	2180      	movs	r1, #128	; 0x80
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f000 fc3b 	bl	8009178 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008902:	2100      	movs	r1, #0
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f000 fc37 	bl	8009178 <USBD_LL_StallEP>
}
 800890a:	bf00      	nop
 800890c:	3708      	adds	r7, #8
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}

08008912 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008912:	b580      	push	{r7, lr}
 8008914:	b086      	sub	sp, #24
 8008916:	af00      	add	r7, sp, #0
 8008918:	60f8      	str	r0, [r7, #12]
 800891a:	60b9      	str	r1, [r7, #8]
 800891c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800891e:	2300      	movs	r3, #0
 8008920:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d032      	beq.n	800898e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008928:	68f8      	ldr	r0, [r7, #12]
 800892a:	f000 f834 	bl	8008996 <USBD_GetLen>
 800892e:	4603      	mov	r3, r0
 8008930:	3301      	adds	r3, #1
 8008932:	b29b      	uxth	r3, r3
 8008934:	005b      	lsls	r3, r3, #1
 8008936:	b29a      	uxth	r2, r3
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800893c:	7dfb      	ldrb	r3, [r7, #23]
 800893e:	1c5a      	adds	r2, r3, #1
 8008940:	75fa      	strb	r2, [r7, #23]
 8008942:	461a      	mov	r2, r3
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	4413      	add	r3, r2
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	7812      	ldrb	r2, [r2, #0]
 800894c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800894e:	7dfb      	ldrb	r3, [r7, #23]
 8008950:	1c5a      	adds	r2, r3, #1
 8008952:	75fa      	strb	r2, [r7, #23]
 8008954:	461a      	mov	r2, r3
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	4413      	add	r3, r2
 800895a:	2203      	movs	r2, #3
 800895c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800895e:	e012      	b.n	8008986 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	1c5a      	adds	r2, r3, #1
 8008964:	60fa      	str	r2, [r7, #12]
 8008966:	7dfa      	ldrb	r2, [r7, #23]
 8008968:	1c51      	adds	r1, r2, #1
 800896a:	75f9      	strb	r1, [r7, #23]
 800896c:	4611      	mov	r1, r2
 800896e:	68ba      	ldr	r2, [r7, #8]
 8008970:	440a      	add	r2, r1
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008976:	7dfb      	ldrb	r3, [r7, #23]
 8008978:	1c5a      	adds	r2, r3, #1
 800897a:	75fa      	strb	r2, [r7, #23]
 800897c:	461a      	mov	r2, r3
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	4413      	add	r3, r2
 8008982:	2200      	movs	r2, #0
 8008984:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	781b      	ldrb	r3, [r3, #0]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d1e8      	bne.n	8008960 <USBD_GetString+0x4e>
    }
  }
}
 800898e:	bf00      	nop
 8008990:	3718      	adds	r7, #24
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}

08008996 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008996:	b480      	push	{r7}
 8008998:	b085      	sub	sp, #20
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800899e:	2300      	movs	r3, #0
 80089a0:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80089a2:	e005      	b.n	80089b0 <USBD_GetLen+0x1a>
  {
    len++;
 80089a4:	7bfb      	ldrb	r3, [r7, #15]
 80089a6:	3301      	adds	r3, #1
 80089a8:	73fb      	strb	r3, [r7, #15]
    buf++;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	3301      	adds	r3, #1
 80089ae:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d1f5      	bne.n	80089a4 <USBD_GetLen+0xe>
  }

  return len;
 80089b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3714      	adds	r7, #20
 80089be:	46bd      	mov	sp, r7
 80089c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c4:	4770      	bx	lr

080089c6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80089c6:	b580      	push	{r7, lr}
 80089c8:	b084      	sub	sp, #16
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	60f8      	str	r0, [r7, #12]
 80089ce:	60b9      	str	r1, [r7, #8]
 80089d0:	4613      	mov	r3, r2
 80089d2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2202      	movs	r2, #2
 80089d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80089dc:	88fa      	ldrh	r2, [r7, #6]
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80089e2:	88fa      	ldrh	r2, [r7, #6]
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80089e8:	88fb      	ldrh	r3, [r7, #6]
 80089ea:	68ba      	ldr	r2, [r7, #8]
 80089ec:	2100      	movs	r1, #0
 80089ee:	68f8      	ldr	r0, [r7, #12]
 80089f0:	f000 fc4c 	bl	800928c <USBD_LL_Transmit>

  return USBD_OK;
 80089f4:	2300      	movs	r3, #0
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3710      	adds	r7, #16
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}

080089fe <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80089fe:	b580      	push	{r7, lr}
 8008a00:	b084      	sub	sp, #16
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	60f8      	str	r0, [r7, #12]
 8008a06:	60b9      	str	r1, [r7, #8]
 8008a08:	4613      	mov	r3, r2
 8008a0a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a0c:	88fb      	ldrh	r3, [r7, #6]
 8008a0e:	68ba      	ldr	r2, [r7, #8]
 8008a10:	2100      	movs	r1, #0
 8008a12:	68f8      	ldr	r0, [r7, #12]
 8008a14:	f000 fc3a 	bl	800928c <USBD_LL_Transmit>

  return USBD_OK;
 8008a18:	2300      	movs	r3, #0
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3710      	adds	r7, #16
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}

08008a22 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008a22:	b580      	push	{r7, lr}
 8008a24:	b084      	sub	sp, #16
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	60f8      	str	r0, [r7, #12]
 8008a2a:	60b9      	str	r1, [r7, #8]
 8008a2c:	4613      	mov	r3, r2
 8008a2e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2203      	movs	r2, #3
 8008a34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008a38:	88fa      	ldrh	r2, [r7, #6]
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008a40:	88fa      	ldrh	r2, [r7, #6]
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a48:	88fb      	ldrh	r3, [r7, #6]
 8008a4a:	68ba      	ldr	r2, [r7, #8]
 8008a4c:	2100      	movs	r1, #0
 8008a4e:	68f8      	ldr	r0, [r7, #12]
 8008a50:	f000 fc3f 	bl	80092d2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a54:	2300      	movs	r3, #0
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3710      	adds	r7, #16
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}

08008a5e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008a5e:	b580      	push	{r7, lr}
 8008a60:	b084      	sub	sp, #16
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	60f8      	str	r0, [r7, #12]
 8008a66:	60b9      	str	r1, [r7, #8]
 8008a68:	4613      	mov	r3, r2
 8008a6a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a6c:	88fb      	ldrh	r3, [r7, #6]
 8008a6e:	68ba      	ldr	r2, [r7, #8]
 8008a70:	2100      	movs	r1, #0
 8008a72:	68f8      	ldr	r0, [r7, #12]
 8008a74:	f000 fc2d 	bl	80092d2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a78:	2300      	movs	r3, #0
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3710      	adds	r7, #16
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b082      	sub	sp, #8
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2204      	movs	r2, #4
 8008a8e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008a92:	2300      	movs	r3, #0
 8008a94:	2200      	movs	r2, #0
 8008a96:	2100      	movs	r1, #0
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 fbf7 	bl	800928c <USBD_LL_Transmit>

  return USBD_OK;
 8008a9e:	2300      	movs	r3, #0
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3708      	adds	r7, #8
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2205      	movs	r2, #5
 8008ab4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ab8:	2300      	movs	r3, #0
 8008aba:	2200      	movs	r2, #0
 8008abc:	2100      	movs	r1, #0
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 fc07 	bl	80092d2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ac4:	2300      	movs	r3, #0
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3708      	adds	r7, #8
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
	...

08008ad0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	4912      	ldr	r1, [pc, #72]	; (8008b20 <MX_USB_DEVICE_Init+0x50>)
 8008ad8:	4812      	ldr	r0, [pc, #72]	; (8008b24 <MX_USB_DEVICE_Init+0x54>)
 8008ada:	f7fe ff58 	bl	800798e <USBD_Init>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d001      	beq.n	8008ae8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008ae4:	f7f7 fd44 	bl	8000570 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008ae8:	490f      	ldr	r1, [pc, #60]	; (8008b28 <MX_USB_DEVICE_Init+0x58>)
 8008aea:	480e      	ldr	r0, [pc, #56]	; (8008b24 <MX_USB_DEVICE_Init+0x54>)
 8008aec:	f7fe ff7a 	bl	80079e4 <USBD_RegisterClass>
 8008af0:	4603      	mov	r3, r0
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d001      	beq.n	8008afa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008af6:	f7f7 fd3b 	bl	8000570 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008afa:	490c      	ldr	r1, [pc, #48]	; (8008b2c <MX_USB_DEVICE_Init+0x5c>)
 8008afc:	4809      	ldr	r0, [pc, #36]	; (8008b24 <MX_USB_DEVICE_Init+0x54>)
 8008afe:	f7fe fed7 	bl	80078b0 <USBD_CDC_RegisterInterface>
 8008b02:	4603      	mov	r3, r0
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d001      	beq.n	8008b0c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008b08:	f7f7 fd32 	bl	8000570 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008b0c:	4805      	ldr	r0, [pc, #20]	; (8008b24 <MX_USB_DEVICE_Init+0x54>)
 8008b0e:	f7fe ff83 	bl	8007a18 <USBD_Start>
 8008b12:	4603      	mov	r3, r0
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d001      	beq.n	8008b1c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008b18:	f7f7 fd2a 	bl	8000570 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008b1c:	bf00      	nop
 8008b1e:	bd80      	pop	{r7, pc}
 8008b20:	2000012c 	.word	0x2000012c
 8008b24:	200002ac 	.word	0x200002ac
 8008b28:	20000018 	.word	0x20000018
 8008b2c:	2000011c 	.word	0x2000011c

08008b30 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008b34:	2200      	movs	r2, #0
 8008b36:	4905      	ldr	r1, [pc, #20]	; (8008b4c <CDC_Init_FS+0x1c>)
 8008b38:	4805      	ldr	r0, [pc, #20]	; (8008b50 <CDC_Init_FS+0x20>)
 8008b3a:	f7fe fed0 	bl	80078de <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008b3e:	4905      	ldr	r1, [pc, #20]	; (8008b54 <CDC_Init_FS+0x24>)
 8008b40:	4803      	ldr	r0, [pc, #12]	; (8008b50 <CDC_Init_FS+0x20>)
 8008b42:	f7fe fee6 	bl	8007912 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008b46:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	bd80      	pop	{r7, pc}
 8008b4c:	20000970 	.word	0x20000970
 8008b50:	200002ac 	.word	0x200002ac
 8008b54:	20000570 	.word	0x20000570

08008b58 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008b5c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr

08008b68 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b083      	sub	sp, #12
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	4603      	mov	r3, r0
 8008b70:	6039      	str	r1, [r7, #0]
 8008b72:	71fb      	strb	r3, [r7, #7]
 8008b74:	4613      	mov	r3, r2
 8008b76:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008b78:	79fb      	ldrb	r3, [r7, #7]
 8008b7a:	2b23      	cmp	r3, #35	; 0x23
 8008b7c:	d84a      	bhi.n	8008c14 <CDC_Control_FS+0xac>
 8008b7e:	a201      	add	r2, pc, #4	; (adr r2, 8008b84 <CDC_Control_FS+0x1c>)
 8008b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b84:	08008c15 	.word	0x08008c15
 8008b88:	08008c15 	.word	0x08008c15
 8008b8c:	08008c15 	.word	0x08008c15
 8008b90:	08008c15 	.word	0x08008c15
 8008b94:	08008c15 	.word	0x08008c15
 8008b98:	08008c15 	.word	0x08008c15
 8008b9c:	08008c15 	.word	0x08008c15
 8008ba0:	08008c15 	.word	0x08008c15
 8008ba4:	08008c15 	.word	0x08008c15
 8008ba8:	08008c15 	.word	0x08008c15
 8008bac:	08008c15 	.word	0x08008c15
 8008bb0:	08008c15 	.word	0x08008c15
 8008bb4:	08008c15 	.word	0x08008c15
 8008bb8:	08008c15 	.word	0x08008c15
 8008bbc:	08008c15 	.word	0x08008c15
 8008bc0:	08008c15 	.word	0x08008c15
 8008bc4:	08008c15 	.word	0x08008c15
 8008bc8:	08008c15 	.word	0x08008c15
 8008bcc:	08008c15 	.word	0x08008c15
 8008bd0:	08008c15 	.word	0x08008c15
 8008bd4:	08008c15 	.word	0x08008c15
 8008bd8:	08008c15 	.word	0x08008c15
 8008bdc:	08008c15 	.word	0x08008c15
 8008be0:	08008c15 	.word	0x08008c15
 8008be4:	08008c15 	.word	0x08008c15
 8008be8:	08008c15 	.word	0x08008c15
 8008bec:	08008c15 	.word	0x08008c15
 8008bf0:	08008c15 	.word	0x08008c15
 8008bf4:	08008c15 	.word	0x08008c15
 8008bf8:	08008c15 	.word	0x08008c15
 8008bfc:	08008c15 	.word	0x08008c15
 8008c00:	08008c15 	.word	0x08008c15
 8008c04:	08008c15 	.word	0x08008c15
 8008c08:	08008c15 	.word	0x08008c15
 8008c0c:	08008c15 	.word	0x08008c15
 8008c10:	08008c15 	.word	0x08008c15
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008c14:	bf00      	nop
  }

  return (USBD_OK);
 8008c16:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	370c      	adds	r7, #12
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr

08008c24 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b082      	sub	sp, #8
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008c2e:	6879      	ldr	r1, [r7, #4]
 8008c30:	4805      	ldr	r0, [pc, #20]	; (8008c48 <CDC_Receive_FS+0x24>)
 8008c32:	f7fe fe6e 	bl	8007912 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008c36:	4804      	ldr	r0, [pc, #16]	; (8008c48 <CDC_Receive_FS+0x24>)
 8008c38:	f7fe fe7f 	bl	800793a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008c3c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3708      	adds	r7, #8
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}
 8008c46:	bf00      	nop
 8008c48:	200002ac 	.word	0x200002ac

08008c4c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b083      	sub	sp, #12
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	4603      	mov	r3, r0
 8008c54:	6039      	str	r1, [r7, #0]
 8008c56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	2212      	movs	r2, #18
 8008c5c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008c5e:	4b03      	ldr	r3, [pc, #12]	; (8008c6c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	370c      	adds	r7, #12
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr
 8008c6c:	20000148 	.word	0x20000148

08008c70 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b083      	sub	sp, #12
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	4603      	mov	r3, r0
 8008c78:	6039      	str	r1, [r7, #0]
 8008c7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	2204      	movs	r2, #4
 8008c80:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008c82:	4b03      	ldr	r3, [pc, #12]	; (8008c90 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	370c      	adds	r7, #12
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr
 8008c90:	2000015c 	.word	0x2000015c

08008c94 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b082      	sub	sp, #8
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	6039      	str	r1, [r7, #0]
 8008c9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ca0:	79fb      	ldrb	r3, [r7, #7]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d105      	bne.n	8008cb2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008ca6:	683a      	ldr	r2, [r7, #0]
 8008ca8:	4907      	ldr	r1, [pc, #28]	; (8008cc8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008caa:	4808      	ldr	r0, [pc, #32]	; (8008ccc <USBD_FS_ProductStrDescriptor+0x38>)
 8008cac:	f7ff fe31 	bl	8008912 <USBD_GetString>
 8008cb0:	e004      	b.n	8008cbc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008cb2:	683a      	ldr	r2, [r7, #0]
 8008cb4:	4904      	ldr	r1, [pc, #16]	; (8008cc8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008cb6:	4805      	ldr	r0, [pc, #20]	; (8008ccc <USBD_FS_ProductStrDescriptor+0x38>)
 8008cb8:	f7ff fe2b 	bl	8008912 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008cbc:	4b02      	ldr	r3, [pc, #8]	; (8008cc8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3708      	adds	r7, #8
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}
 8008cc6:	bf00      	nop
 8008cc8:	20000d70 	.word	0x20000d70
 8008ccc:	08009450 	.word	0x08009450

08008cd0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b082      	sub	sp, #8
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	6039      	str	r1, [r7, #0]
 8008cda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008cdc:	683a      	ldr	r2, [r7, #0]
 8008cde:	4904      	ldr	r1, [pc, #16]	; (8008cf0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008ce0:	4804      	ldr	r0, [pc, #16]	; (8008cf4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008ce2:	f7ff fe16 	bl	8008912 <USBD_GetString>
  return USBD_StrDesc;
 8008ce6:	4b02      	ldr	r3, [pc, #8]	; (8008cf0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3708      	adds	r7, #8
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}
 8008cf0:	20000d70 	.word	0x20000d70
 8008cf4:	08009468 	.word	0x08009468

08008cf8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b082      	sub	sp, #8
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	4603      	mov	r3, r0
 8008d00:	6039      	str	r1, [r7, #0]
 8008d02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	221a      	movs	r2, #26
 8008d08:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008d0a:	f000 f843 	bl	8008d94 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008d0e:	4b02      	ldr	r3, [pc, #8]	; (8008d18 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3708      	adds	r7, #8
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}
 8008d18:	20000160 	.word	0x20000160

08008d1c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b082      	sub	sp, #8
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	4603      	mov	r3, r0
 8008d24:	6039      	str	r1, [r7, #0]
 8008d26:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008d28:	79fb      	ldrb	r3, [r7, #7]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d105      	bne.n	8008d3a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d2e:	683a      	ldr	r2, [r7, #0]
 8008d30:	4907      	ldr	r1, [pc, #28]	; (8008d50 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d32:	4808      	ldr	r0, [pc, #32]	; (8008d54 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008d34:	f7ff fded 	bl	8008912 <USBD_GetString>
 8008d38:	e004      	b.n	8008d44 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d3a:	683a      	ldr	r2, [r7, #0]
 8008d3c:	4904      	ldr	r1, [pc, #16]	; (8008d50 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d3e:	4805      	ldr	r0, [pc, #20]	; (8008d54 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008d40:	f7ff fde7 	bl	8008912 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d44:	4b02      	ldr	r3, [pc, #8]	; (8008d50 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3708      	adds	r7, #8
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	20000d70 	.word	0x20000d70
 8008d54:	0800947c 	.word	0x0800947c

08008d58 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b082      	sub	sp, #8
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	4603      	mov	r3, r0
 8008d60:	6039      	str	r1, [r7, #0]
 8008d62:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d64:	79fb      	ldrb	r3, [r7, #7]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d105      	bne.n	8008d76 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008d6a:	683a      	ldr	r2, [r7, #0]
 8008d6c:	4907      	ldr	r1, [pc, #28]	; (8008d8c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008d6e:	4808      	ldr	r0, [pc, #32]	; (8008d90 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008d70:	f7ff fdcf 	bl	8008912 <USBD_GetString>
 8008d74:	e004      	b.n	8008d80 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008d76:	683a      	ldr	r2, [r7, #0]
 8008d78:	4904      	ldr	r1, [pc, #16]	; (8008d8c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008d7a:	4805      	ldr	r0, [pc, #20]	; (8008d90 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008d7c:	f7ff fdc9 	bl	8008912 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d80:	4b02      	ldr	r3, [pc, #8]	; (8008d8c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3708      	adds	r7, #8
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	bf00      	nop
 8008d8c:	20000d70 	.word	0x20000d70
 8008d90:	08009488 	.word	0x08009488

08008d94 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b084      	sub	sp, #16
 8008d98:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008d9a:	4b0f      	ldr	r3, [pc, #60]	; (8008dd8 <Get_SerialNum+0x44>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008da0:	4b0e      	ldr	r3, [pc, #56]	; (8008ddc <Get_SerialNum+0x48>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008da6:	4b0e      	ldr	r3, [pc, #56]	; (8008de0 <Get_SerialNum+0x4c>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008dac:	68fa      	ldr	r2, [r7, #12]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	4413      	add	r3, r2
 8008db2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d009      	beq.n	8008dce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008dba:	2208      	movs	r2, #8
 8008dbc:	4909      	ldr	r1, [pc, #36]	; (8008de4 <Get_SerialNum+0x50>)
 8008dbe:	68f8      	ldr	r0, [r7, #12]
 8008dc0:	f000 f814 	bl	8008dec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008dc4:	2204      	movs	r2, #4
 8008dc6:	4908      	ldr	r1, [pc, #32]	; (8008de8 <Get_SerialNum+0x54>)
 8008dc8:	68b8      	ldr	r0, [r7, #8]
 8008dca:	f000 f80f 	bl	8008dec <IntToUnicode>
  }
}
 8008dce:	bf00      	nop
 8008dd0:	3710      	adds	r7, #16
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}
 8008dd6:	bf00      	nop
 8008dd8:	1ffff7ac 	.word	0x1ffff7ac
 8008ddc:	1ffff7b0 	.word	0x1ffff7b0
 8008de0:	1ffff7b4 	.word	0x1ffff7b4
 8008de4:	20000162 	.word	0x20000162
 8008de8:	20000172 	.word	0x20000172

08008dec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b087      	sub	sp, #28
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	60f8      	str	r0, [r7, #12]
 8008df4:	60b9      	str	r1, [r7, #8]
 8008df6:	4613      	mov	r3, r2
 8008df8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008dfe:	2300      	movs	r3, #0
 8008e00:	75fb      	strb	r3, [r7, #23]
 8008e02:	e027      	b.n	8008e54 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	0f1b      	lsrs	r3, r3, #28
 8008e08:	2b09      	cmp	r3, #9
 8008e0a:	d80b      	bhi.n	8008e24 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	0f1b      	lsrs	r3, r3, #28
 8008e10:	b2da      	uxtb	r2, r3
 8008e12:	7dfb      	ldrb	r3, [r7, #23]
 8008e14:	005b      	lsls	r3, r3, #1
 8008e16:	4619      	mov	r1, r3
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	440b      	add	r3, r1
 8008e1c:	3230      	adds	r2, #48	; 0x30
 8008e1e:	b2d2      	uxtb	r2, r2
 8008e20:	701a      	strb	r2, [r3, #0]
 8008e22:	e00a      	b.n	8008e3a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	0f1b      	lsrs	r3, r3, #28
 8008e28:	b2da      	uxtb	r2, r3
 8008e2a:	7dfb      	ldrb	r3, [r7, #23]
 8008e2c:	005b      	lsls	r3, r3, #1
 8008e2e:	4619      	mov	r1, r3
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	440b      	add	r3, r1
 8008e34:	3237      	adds	r2, #55	; 0x37
 8008e36:	b2d2      	uxtb	r2, r2
 8008e38:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	011b      	lsls	r3, r3, #4
 8008e3e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008e40:	7dfb      	ldrb	r3, [r7, #23]
 8008e42:	005b      	lsls	r3, r3, #1
 8008e44:	3301      	adds	r3, #1
 8008e46:	68ba      	ldr	r2, [r7, #8]
 8008e48:	4413      	add	r3, r2
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008e4e:	7dfb      	ldrb	r3, [r7, #23]
 8008e50:	3301      	adds	r3, #1
 8008e52:	75fb      	strb	r3, [r7, #23]
 8008e54:	7dfa      	ldrb	r2, [r7, #23]
 8008e56:	79fb      	ldrb	r3, [r7, #7]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d3d3      	bcc.n	8008e04 <IntToUnicode+0x18>
  }
}
 8008e5c:	bf00      	nop
 8008e5e:	bf00      	nop
 8008e60:	371c      	adds	r7, #28
 8008e62:	46bd      	mov	sp, r7
 8008e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e68:	4770      	bx	lr
	...

08008e6c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b084      	sub	sp, #16
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a10      	ldr	r2, [pc, #64]	; (8008ebc <HAL_PCD_MspInit+0x50>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d119      	bne.n	8008eb2 <HAL_PCD_MspInit+0x46>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008e7e:	4b10      	ldr	r3, [pc, #64]	; (8008ec0 <HAL_PCD_MspInit+0x54>)
 8008e80:	69db      	ldr	r3, [r3, #28]
 8008e82:	4a0f      	ldr	r2, [pc, #60]	; (8008ec0 <HAL_PCD_MspInit+0x54>)
 8008e84:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008e88:	61d3      	str	r3, [r2, #28]
 8008e8a:	4b0d      	ldr	r3, [pc, #52]	; (8008ec0 <HAL_PCD_MspInit+0x54>)
 8008e8c:	69db      	ldr	r3, [r3, #28]
 8008e8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008e92:	60fb      	str	r3, [r7, #12]
 8008e94:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    __HAL_REMAPINTERRUPT_USB_ENABLE();
 8008e96:	4b0b      	ldr	r3, [pc, #44]	; (8008ec4 <HAL_PCD_MspInit+0x58>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a0a      	ldr	r2, [pc, #40]	; (8008ec4 <HAL_PCD_MspInit+0x58>)
 8008e9c:	f043 0320 	orr.w	r3, r3, #32
 8008ea0:	6013      	str	r3, [r2, #0]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	2100      	movs	r1, #0
 8008ea6:	204b      	movs	r0, #75	; 0x4b
 8008ea8:	f7f7 fe0f 	bl	8000aca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8008eac:	204b      	movs	r0, #75	; 0x4b
 8008eae:	f7f7 fe28 	bl	8000b02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008eb2:	bf00      	nop
 8008eb4:	3710      	adds	r7, #16
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}
 8008eba:	bf00      	nop
 8008ebc:	40005c00 	.word	0x40005c00
 8008ec0:	40021000 	.word	0x40021000
 8008ec4:	40010000 	.word	0x40010000

08008ec8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008edc:	4619      	mov	r1, r3
 8008ede:	4610      	mov	r0, r2
 8008ee0:	f7fe fde3 	bl	8007aaa <USBD_LL_SetupStage>
}
 8008ee4:	bf00      	nop
 8008ee6:	3708      	adds	r7, #8
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}

08008eec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b082      	sub	sp, #8
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	460b      	mov	r3, r1
 8008ef6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008efe:	78fa      	ldrb	r2, [r7, #3]
 8008f00:	6879      	ldr	r1, [r7, #4]
 8008f02:	4613      	mov	r3, r2
 8008f04:	009b      	lsls	r3, r3, #2
 8008f06:	4413      	add	r3, r2
 8008f08:	00db      	lsls	r3, r3, #3
 8008f0a:	440b      	add	r3, r1
 8008f0c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008f10:	681a      	ldr	r2, [r3, #0]
 8008f12:	78fb      	ldrb	r3, [r7, #3]
 8008f14:	4619      	mov	r1, r3
 8008f16:	f7fe fe15 	bl	8007b44 <USBD_LL_DataOutStage>
}
 8008f1a:	bf00      	nop
 8008f1c:	3708      	adds	r7, #8
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}

08008f22 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f22:	b580      	push	{r7, lr}
 8008f24:	b082      	sub	sp, #8
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
 8008f2a:	460b      	mov	r3, r1
 8008f2c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008f34:	78fa      	ldrb	r2, [r7, #3]
 8008f36:	6879      	ldr	r1, [r7, #4]
 8008f38:	4613      	mov	r3, r2
 8008f3a:	009b      	lsls	r3, r3, #2
 8008f3c:	4413      	add	r3, r2
 8008f3e:	00db      	lsls	r3, r3, #3
 8008f40:	440b      	add	r3, r1
 8008f42:	333c      	adds	r3, #60	; 0x3c
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	78fb      	ldrb	r3, [r7, #3]
 8008f48:	4619      	mov	r1, r3
 8008f4a:	f7fe fe6c 	bl	8007c26 <USBD_LL_DataInStage>
}
 8008f4e:	bf00      	nop
 8008f50:	3708      	adds	r7, #8
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}

08008f56 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b082      	sub	sp, #8
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008f64:	4618      	mov	r0, r3
 8008f66:	f7fe ff7f 	bl	8007e68 <USBD_LL_SOF>
}
 8008f6a:	bf00      	nop
 8008f6c:	3708      	adds	r7, #8
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}

08008f72 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f72:	b580      	push	{r7, lr}
 8008f74:	b084      	sub	sp, #16
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	689b      	ldr	r3, [r3, #8]
 8008f82:	2b02      	cmp	r3, #2
 8008f84:	d001      	beq.n	8008f8a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008f86:	f7f7 faf3 	bl	8000570 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008f90:	7bfa      	ldrb	r2, [r7, #15]
 8008f92:	4611      	mov	r1, r2
 8008f94:	4618      	mov	r0, r3
 8008f96:	f7fe ff2c 	bl	8007df2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f7fe fee5 	bl	8007d70 <USBD_LL_Reset>
}
 8008fa6:	bf00      	nop
 8008fa8:	3710      	adds	r7, #16
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}
	...

08008fb0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f7fe ff27 	bl	8007e12 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	699b      	ldr	r3, [r3, #24]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d005      	beq.n	8008fd8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008fcc:	4b04      	ldr	r3, [pc, #16]	; (8008fe0 <HAL_PCD_SuspendCallback+0x30>)
 8008fce:	691b      	ldr	r3, [r3, #16]
 8008fd0:	4a03      	ldr	r2, [pc, #12]	; (8008fe0 <HAL_PCD_SuspendCallback+0x30>)
 8008fd2:	f043 0306 	orr.w	r3, r3, #6
 8008fd6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008fd8:	bf00      	nop
 8008fda:	3708      	adds	r7, #8
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}
 8008fe0:	e000ed00 	.word	0xe000ed00

08008fe4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b082      	sub	sp, #8
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f7fe ff22 	bl	8007e3c <USBD_LL_Resume>
}
 8008ff8:	bf00      	nop
 8008ffa:	3708      	adds	r7, #8
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b082      	sub	sp, #8
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009008:	4a29      	ldr	r2, [pc, #164]	; (80090b0 <USBD_LL_Init+0xb0>)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	4a27      	ldr	r2, [pc, #156]	; (80090b0 <USBD_LL_Init+0xb0>)
 8009014:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009018:	4b25      	ldr	r3, [pc, #148]	; (80090b0 <USBD_LL_Init+0xb0>)
 800901a:	4a26      	ldr	r2, [pc, #152]	; (80090b4 <USBD_LL_Init+0xb4>)
 800901c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800901e:	4b24      	ldr	r3, [pc, #144]	; (80090b0 <USBD_LL_Init+0xb0>)
 8009020:	2208      	movs	r2, #8
 8009022:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009024:	4b22      	ldr	r3, [pc, #136]	; (80090b0 <USBD_LL_Init+0xb0>)
 8009026:	2202      	movs	r2, #2
 8009028:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800902a:	4b21      	ldr	r3, [pc, #132]	; (80090b0 <USBD_LL_Init+0xb0>)
 800902c:	2202      	movs	r2, #2
 800902e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009030:	4b1f      	ldr	r3, [pc, #124]	; (80090b0 <USBD_LL_Init+0xb0>)
 8009032:	2200      	movs	r2, #0
 8009034:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009036:	4b1e      	ldr	r3, [pc, #120]	; (80090b0 <USBD_LL_Init+0xb0>)
 8009038:	2200      	movs	r2, #0
 800903a:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800903c:	4b1c      	ldr	r3, [pc, #112]	; (80090b0 <USBD_LL_Init+0xb0>)
 800903e:	2200      	movs	r2, #0
 8009040:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009042:	481b      	ldr	r0, [pc, #108]	; (80090b0 <USBD_LL_Init+0xb0>)
 8009044:	f7f7 ff34 	bl	8000eb0 <HAL_PCD_Init>
 8009048:	4603      	mov	r3, r0
 800904a:	2b00      	cmp	r3, #0
 800904c:	d001      	beq.n	8009052 <USBD_LL_Init+0x52>
  {
    Error_Handler( );
 800904e:	f7f7 fa8f 	bl	8000570 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009058:	2318      	movs	r3, #24
 800905a:	2200      	movs	r2, #0
 800905c:	2100      	movs	r1, #0
 800905e:	f7f9 fba7 	bl	80027b0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009068:	2358      	movs	r3, #88	; 0x58
 800906a:	2200      	movs	r2, #0
 800906c:	2180      	movs	r1, #128	; 0x80
 800906e:	f7f9 fb9f 	bl	80027b0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009078:	23c0      	movs	r3, #192	; 0xc0
 800907a:	2200      	movs	r2, #0
 800907c:	2181      	movs	r1, #129	; 0x81
 800907e:	f7f9 fb97 	bl	80027b0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009088:	f44f 7388 	mov.w	r3, #272	; 0x110
 800908c:	2200      	movs	r2, #0
 800908e:	2101      	movs	r1, #1
 8009090:	f7f9 fb8e 	bl	80027b0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800909a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800909e:	2200      	movs	r2, #0
 80090a0:	2182      	movs	r1, #130	; 0x82
 80090a2:	f7f9 fb85 	bl	80027b0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80090a6:	2300      	movs	r3, #0
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3708      	adds	r7, #8
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}
 80090b0:	20000f70 	.word	0x20000f70
 80090b4:	40005c00 	.word	0x40005c00

080090b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b084      	sub	sp, #16
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090c0:	2300      	movs	r3, #0
 80090c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090c4:	2300      	movs	r3, #0
 80090c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80090ce:	4618      	mov	r0, r3
 80090d0:	f7f7 ffc0 	bl	8001054 <HAL_PCD_Start>
 80090d4:	4603      	mov	r3, r0
 80090d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090d8:	7bfb      	ldrb	r3, [r7, #15]
 80090da:	4618      	mov	r0, r3
 80090dc:	f000 f954 	bl	8009388 <USBD_Get_USB_Status>
 80090e0:	4603      	mov	r3, r0
 80090e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3710      	adds	r7, #16
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}

080090ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80090ee:	b580      	push	{r7, lr}
 80090f0:	b084      	sub	sp, #16
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	6078      	str	r0, [r7, #4]
 80090f6:	4608      	mov	r0, r1
 80090f8:	4611      	mov	r1, r2
 80090fa:	461a      	mov	r2, r3
 80090fc:	4603      	mov	r3, r0
 80090fe:	70fb      	strb	r3, [r7, #3]
 8009100:	460b      	mov	r3, r1
 8009102:	70bb      	strb	r3, [r7, #2]
 8009104:	4613      	mov	r3, r2
 8009106:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009108:	2300      	movs	r3, #0
 800910a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800910c:	2300      	movs	r3, #0
 800910e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009116:	78bb      	ldrb	r3, [r7, #2]
 8009118:	883a      	ldrh	r2, [r7, #0]
 800911a:	78f9      	ldrb	r1, [r7, #3]
 800911c:	f7f8 f8b9 	bl	8001292 <HAL_PCD_EP_Open>
 8009120:	4603      	mov	r3, r0
 8009122:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009124:	7bfb      	ldrb	r3, [r7, #15]
 8009126:	4618      	mov	r0, r3
 8009128:	f000 f92e 	bl	8009388 <USBD_Get_USB_Status>
 800912c:	4603      	mov	r3, r0
 800912e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009130:	7bbb      	ldrb	r3, [r7, #14]
}
 8009132:	4618      	mov	r0, r3
 8009134:	3710      	adds	r7, #16
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}

0800913a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800913a:	b580      	push	{r7, lr}
 800913c:	b084      	sub	sp, #16
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
 8009142:	460b      	mov	r3, r1
 8009144:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009146:	2300      	movs	r3, #0
 8009148:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800914a:	2300      	movs	r3, #0
 800914c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009154:	78fa      	ldrb	r2, [r7, #3]
 8009156:	4611      	mov	r1, r2
 8009158:	4618      	mov	r0, r3
 800915a:	f7f8 f8f7 	bl	800134c <HAL_PCD_EP_Close>
 800915e:	4603      	mov	r3, r0
 8009160:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009162:	7bfb      	ldrb	r3, [r7, #15]
 8009164:	4618      	mov	r0, r3
 8009166:	f000 f90f 	bl	8009388 <USBD_Get_USB_Status>
 800916a:	4603      	mov	r3, r0
 800916c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800916e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009170:	4618      	mov	r0, r3
 8009172:	3710      	adds	r7, #16
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b084      	sub	sp, #16
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	460b      	mov	r3, r1
 8009182:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009184:	2300      	movs	r3, #0
 8009186:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009188:	2300      	movs	r3, #0
 800918a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009192:	78fa      	ldrb	r2, [r7, #3]
 8009194:	4611      	mov	r1, r2
 8009196:	4618      	mov	r0, r3
 8009198:	f7f8 f9a0 	bl	80014dc <HAL_PCD_EP_SetStall>
 800919c:	4603      	mov	r3, r0
 800919e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091a0:	7bfb      	ldrb	r3, [r7, #15]
 80091a2:	4618      	mov	r0, r3
 80091a4:	f000 f8f0 	bl	8009388 <USBD_Get_USB_Status>
 80091a8:	4603      	mov	r3, r0
 80091aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3710      	adds	r7, #16
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}

080091b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091b6:	b580      	push	{r7, lr}
 80091b8:	b084      	sub	sp, #16
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
 80091be:	460b      	mov	r3, r1
 80091c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091c2:	2300      	movs	r3, #0
 80091c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091c6:	2300      	movs	r3, #0
 80091c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091d0:	78fa      	ldrb	r2, [r7, #3]
 80091d2:	4611      	mov	r1, r2
 80091d4:	4618      	mov	r0, r3
 80091d6:	f7f8 f9d3 	bl	8001580 <HAL_PCD_EP_ClrStall>
 80091da:	4603      	mov	r3, r0
 80091dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091de:	7bfb      	ldrb	r3, [r7, #15]
 80091e0:	4618      	mov	r0, r3
 80091e2:	f000 f8d1 	bl	8009388 <USBD_Get_USB_Status>
 80091e6:	4603      	mov	r3, r0
 80091e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3710      	adds	r7, #16
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b085      	sub	sp, #20
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	460b      	mov	r3, r1
 80091fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009206:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009208:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800920c:	2b00      	cmp	r3, #0
 800920e:	da0c      	bge.n	800922a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009210:	78fb      	ldrb	r3, [r7, #3]
 8009212:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009216:	68f9      	ldr	r1, [r7, #12]
 8009218:	1c5a      	adds	r2, r3, #1
 800921a:	4613      	mov	r3, r2
 800921c:	009b      	lsls	r3, r3, #2
 800921e:	4413      	add	r3, r2
 8009220:	00db      	lsls	r3, r3, #3
 8009222:	440b      	add	r3, r1
 8009224:	3302      	adds	r3, #2
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	e00b      	b.n	8009242 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800922a:	78fb      	ldrb	r3, [r7, #3]
 800922c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009230:	68f9      	ldr	r1, [r7, #12]
 8009232:	4613      	mov	r3, r2
 8009234:	009b      	lsls	r3, r3, #2
 8009236:	4413      	add	r3, r2
 8009238:	00db      	lsls	r3, r3, #3
 800923a:	440b      	add	r3, r1
 800923c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009240:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009242:	4618      	mov	r0, r3
 8009244:	3714      	adds	r7, #20
 8009246:	46bd      	mov	sp, r7
 8009248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924c:	4770      	bx	lr

0800924e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800924e:	b580      	push	{r7, lr}
 8009250:	b084      	sub	sp, #16
 8009252:	af00      	add	r7, sp, #0
 8009254:	6078      	str	r0, [r7, #4]
 8009256:	460b      	mov	r3, r1
 8009258:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800925a:	2300      	movs	r3, #0
 800925c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800925e:	2300      	movs	r3, #0
 8009260:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009268:	78fa      	ldrb	r2, [r7, #3]
 800926a:	4611      	mov	r1, r2
 800926c:	4618      	mov	r0, r3
 800926e:	f7f7 ffeb 	bl	8001248 <HAL_PCD_SetAddress>
 8009272:	4603      	mov	r3, r0
 8009274:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009276:	7bfb      	ldrb	r3, [r7, #15]
 8009278:	4618      	mov	r0, r3
 800927a:	f000 f885 	bl	8009388 <USBD_Get_USB_Status>
 800927e:	4603      	mov	r3, r0
 8009280:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009282:	7bbb      	ldrb	r3, [r7, #14]
}
 8009284:	4618      	mov	r0, r3
 8009286:	3710      	adds	r7, #16
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b086      	sub	sp, #24
 8009290:	af00      	add	r7, sp, #0
 8009292:	60f8      	str	r0, [r7, #12]
 8009294:	607a      	str	r2, [r7, #4]
 8009296:	461a      	mov	r2, r3
 8009298:	460b      	mov	r3, r1
 800929a:	72fb      	strb	r3, [r7, #11]
 800929c:	4613      	mov	r3, r2
 800929e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092a0:	2300      	movs	r3, #0
 80092a2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092a4:	2300      	movs	r3, #0
 80092a6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80092ae:	893b      	ldrh	r3, [r7, #8]
 80092b0:	7af9      	ldrb	r1, [r7, #11]
 80092b2:	687a      	ldr	r2, [r7, #4]
 80092b4:	f7f8 f8db 	bl	800146e <HAL_PCD_EP_Transmit>
 80092b8:	4603      	mov	r3, r0
 80092ba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092bc:	7dfb      	ldrb	r3, [r7, #23]
 80092be:	4618      	mov	r0, r3
 80092c0:	f000 f862 	bl	8009388 <USBD_Get_USB_Status>
 80092c4:	4603      	mov	r3, r0
 80092c6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80092c8:	7dbb      	ldrb	r3, [r7, #22]
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3718      	adds	r7, #24
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}

080092d2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80092d2:	b580      	push	{r7, lr}
 80092d4:	b086      	sub	sp, #24
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	60f8      	str	r0, [r7, #12]
 80092da:	607a      	str	r2, [r7, #4]
 80092dc:	461a      	mov	r2, r3
 80092de:	460b      	mov	r3, r1
 80092e0:	72fb      	strb	r3, [r7, #11]
 80092e2:	4613      	mov	r3, r2
 80092e4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092e6:	2300      	movs	r3, #0
 80092e8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092ea:	2300      	movs	r3, #0
 80092ec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80092f4:	893b      	ldrh	r3, [r7, #8]
 80092f6:	7af9      	ldrb	r1, [r7, #11]
 80092f8:	687a      	ldr	r2, [r7, #4]
 80092fa:	f7f8 f86f 	bl	80013dc <HAL_PCD_EP_Receive>
 80092fe:	4603      	mov	r3, r0
 8009300:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009302:	7dfb      	ldrb	r3, [r7, #23]
 8009304:	4618      	mov	r0, r3
 8009306:	f000 f83f 	bl	8009388 <USBD_Get_USB_Status>
 800930a:	4603      	mov	r3, r0
 800930c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800930e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009310:	4618      	mov	r0, r3
 8009312:	3718      	adds	r7, #24
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}

08009318 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b082      	sub	sp, #8
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	460b      	mov	r3, r1
 8009322:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800932a:	78fa      	ldrb	r2, [r7, #3]
 800932c:	4611      	mov	r1, r2
 800932e:	4618      	mov	r0, r3
 8009330:	f7f8 f885 	bl	800143e <HAL_PCD_EP_GetRxCount>
 8009334:	4603      	mov	r3, r0
}
 8009336:	4618      	mov	r0, r3
 8009338:	3708      	adds	r7, #8
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
	...

08009340 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009340:	b480      	push	{r7}
 8009342:	b083      	sub	sp, #12
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009348:	4b03      	ldr	r3, [pc, #12]	; (8009358 <USBD_static_malloc+0x18>)
}
 800934a:	4618      	mov	r0, r3
 800934c:	370c      	adds	r7, #12
 800934e:	46bd      	mov	sp, r7
 8009350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009354:	4770      	bx	lr
 8009356:	bf00      	nop
 8009358:	2000125c 	.word	0x2000125c

0800935c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800935c:	b480      	push	{r7}
 800935e:	b083      	sub	sp, #12
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]

}
 8009364:	bf00      	nop
 8009366:	370c      	adds	r7, #12
 8009368:	46bd      	mov	sp, r7
 800936a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936e:	4770      	bx	lr

08009370 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009370:	b480      	push	{r7}
 8009372:	b083      	sub	sp, #12
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	460b      	mov	r3, r1
 800937a:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800937c:	bf00      	nop
 800937e:	370c      	adds	r7, #12
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr

08009388 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009388:	b480      	push	{r7}
 800938a:	b085      	sub	sp, #20
 800938c:	af00      	add	r7, sp, #0
 800938e:	4603      	mov	r3, r0
 8009390:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009392:	2300      	movs	r3, #0
 8009394:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009396:	79fb      	ldrb	r3, [r7, #7]
 8009398:	2b03      	cmp	r3, #3
 800939a:	d817      	bhi.n	80093cc <USBD_Get_USB_Status+0x44>
 800939c:	a201      	add	r2, pc, #4	; (adr r2, 80093a4 <USBD_Get_USB_Status+0x1c>)
 800939e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093a2:	bf00      	nop
 80093a4:	080093b5 	.word	0x080093b5
 80093a8:	080093bb 	.word	0x080093bb
 80093ac:	080093c1 	.word	0x080093c1
 80093b0:	080093c7 	.word	0x080093c7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80093b4:	2300      	movs	r3, #0
 80093b6:	73fb      	strb	r3, [r7, #15]
    break;
 80093b8:	e00b      	b.n	80093d2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80093ba:	2302      	movs	r3, #2
 80093bc:	73fb      	strb	r3, [r7, #15]
    break;
 80093be:	e008      	b.n	80093d2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80093c0:	2301      	movs	r3, #1
 80093c2:	73fb      	strb	r3, [r7, #15]
    break;
 80093c4:	e005      	b.n	80093d2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80093c6:	2302      	movs	r3, #2
 80093c8:	73fb      	strb	r3, [r7, #15]
    break;
 80093ca:	e002      	b.n	80093d2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80093cc:	2302      	movs	r3, #2
 80093ce:	73fb      	strb	r3, [r7, #15]
    break;
 80093d0:	bf00      	nop
  }
  return usb_status;
 80093d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3714      	adds	r7, #20
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr

080093e0 <__libc_init_array>:
 80093e0:	b570      	push	{r4, r5, r6, lr}
 80093e2:	4d0d      	ldr	r5, [pc, #52]	; (8009418 <__libc_init_array+0x38>)
 80093e4:	4c0d      	ldr	r4, [pc, #52]	; (800941c <__libc_init_array+0x3c>)
 80093e6:	1b64      	subs	r4, r4, r5
 80093e8:	10a4      	asrs	r4, r4, #2
 80093ea:	2600      	movs	r6, #0
 80093ec:	42a6      	cmp	r6, r4
 80093ee:	d109      	bne.n	8009404 <__libc_init_array+0x24>
 80093f0:	4d0b      	ldr	r5, [pc, #44]	; (8009420 <__libc_init_array+0x40>)
 80093f2:	4c0c      	ldr	r4, [pc, #48]	; (8009424 <__libc_init_array+0x44>)
 80093f4:	f000 f820 	bl	8009438 <_init>
 80093f8:	1b64      	subs	r4, r4, r5
 80093fa:	10a4      	asrs	r4, r4, #2
 80093fc:	2600      	movs	r6, #0
 80093fe:	42a6      	cmp	r6, r4
 8009400:	d105      	bne.n	800940e <__libc_init_array+0x2e>
 8009402:	bd70      	pop	{r4, r5, r6, pc}
 8009404:	f855 3b04 	ldr.w	r3, [r5], #4
 8009408:	4798      	blx	r3
 800940a:	3601      	adds	r6, #1
 800940c:	e7ee      	b.n	80093ec <__libc_init_array+0xc>
 800940e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009412:	4798      	blx	r3
 8009414:	3601      	adds	r6, #1
 8009416:	e7f2      	b.n	80093fe <__libc_init_array+0x1e>
 8009418:	080094d0 	.word	0x080094d0
 800941c:	080094d0 	.word	0x080094d0
 8009420:	080094d0 	.word	0x080094d0
 8009424:	080094d4 	.word	0x080094d4

08009428 <memset>:
 8009428:	4402      	add	r2, r0
 800942a:	4603      	mov	r3, r0
 800942c:	4293      	cmp	r3, r2
 800942e:	d100      	bne.n	8009432 <memset+0xa>
 8009430:	4770      	bx	lr
 8009432:	f803 1b01 	strb.w	r1, [r3], #1
 8009436:	e7f9      	b.n	800942c <memset+0x4>

08009438 <_init>:
 8009438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800943a:	bf00      	nop
 800943c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800943e:	bc08      	pop	{r3}
 8009440:	469e      	mov	lr, r3
 8009442:	4770      	bx	lr

08009444 <_fini>:
 8009444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009446:	bf00      	nop
 8009448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800944a:	bc08      	pop	{r3}
 800944c:	469e      	mov	lr, r3
 800944e:	4770      	bx	lr
